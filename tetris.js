
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'tetris.data';
    var REMOTE_PACKAGE_BASE = 'tetris.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'resources', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_tetris.data');

    };
    Module['addRunDependency']('datafile_tetris.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 424, "filename": "/resources/cube.png"}, {"audio": 0, "start": 424, "crunched": 0, "end": 941, "filename": "/resources/cube24.png"}, {"audio": 0, "start": 941, "crunched": 0, "end": 996, "filename": "/resources/pent1.txt"}, {"audio": 0, "start": 996, "crunched": 0, "end": 1049, "filename": "/resources/pent10.txt"}, {"audio": 0, "start": 1049, "crunched": 0, "end": 1104, "filename": "/resources/pent11.txt"}, {"audio": 0, "start": 1104, "crunched": 0, "end": 1159, "filename": "/resources/pent12.txt"}, {"audio": 0, "start": 1159, "crunched": 0, "end": 1214, "filename": "/resources/pent13.txt"}, {"audio": 0, "start": 1214, "crunched": 0, "end": 1269, "filename": "/resources/pent14.txt"}, {"audio": 0, "start": 1269, "crunched": 0, "end": 1324, "filename": "/resources/pent15.txt"}, {"audio": 0, "start": 1324, "crunched": 0, "end": 1379, "filename": "/resources/pent16.txt"}, {"audio": 0, "start": 1379, "crunched": 0, "end": 1434, "filename": "/resources/pent17.txt"}, {"audio": 0, "start": 1434, "crunched": 0, "end": 1489, "filename": "/resources/pent18.txt"}, {"audio": 0, "start": 1489, "crunched": 0, "end": 1546, "filename": "/resources/pent2.txt"}, {"audio": 0, "start": 1546, "crunched": 0, "end": 1603, "filename": "/resources/pent3.txt"}, {"audio": 0, "start": 1603, "crunched": 0, "end": 1658, "filename": "/resources/pent4.txt"}, {"audio": 0, "start": 1658, "crunched": 0, "end": 1713, "filename": "/resources/pent5.txt"}, {"audio": 0, "start": 1713, "crunched": 0, "end": 1768, "filename": "/resources/pent6.txt"}, {"audio": 0, "start": 1768, "crunched": 0, "end": 1826, "filename": "/resources/pent7.txt"}, {"audio": 0, "start": 1826, "crunched": 0, "end": 1882, "filename": "/resources/pent8.txt"}, {"audio": 0, "start": 1882, "crunched": 0, "end": 1935, "filename": "/resources/pent9.txt"}, {"audio": 0, "start": 1935, "crunched": 0, "end": 1988, "filename": "/resources/pi1.txt"}, {"audio": 0, "start": 1988, "crunched": 0, "end": 2041, "filename": "/resources/pi2.txt"}, {"audio": 0, "start": 2041, "crunched": 0, "end": 2094, "filename": "/resources/pi3.txt"}, {"audio": 0, "start": 2094, "crunched": 0, "end": 2147, "filename": "/resources/pi4.txt"}, {"audio": 0, "start": 2147, "crunched": 0, "end": 2200, "filename": "/resources/pi5.txt"}, {"audio": 0, "start": 2200, "crunched": 0, "end": 2253, "filename": "/resources/pi6.txt"}, {"audio": 0, "start": 2253, "crunched": 0, "end": 2306, "filename": "/resources/pi7.txt"}], "remote_package_size": 2306, "package_uuid": "7f8c4d5e-1a7c-46fc-b472-2881b62112ae"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (HEAP32[DYNAMICTOP_PTR>>2] >= LIMIT) return false;

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // // Simple heuristic: double until 1GB...
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement) return false;

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [function($0, $1) { { Module.printErr('bad name in getProcAddress: ' + [Pointer_stringify($0), Pointer_stringify($1)]); } }];

function _emscripten_asm_const_iii(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 43776;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_tetris_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });
  

/* memory initializer */ allocate([248,49,0,0,144,53,0,0,32,50,0,0,57,54,0,0,8,0,0,0,0,0,0,0,32,50,0,0,103,54,0,0,8,0,0,0,0,0,0,0,32,50,0,0,131,54,0,0,136,0,0,0,0,0,0,0,32,50,0,0,208,54,0,0,152,0,0,0,0,0,0,0,32,50,0,0,86,55,0,0,200,0,0,0,0,0,0,0,32,50,0,0,11,109,0,0,112,0,0,0,0,0,0,0,248,49,0,0,249,108,0,0,32,50,0,0,53,109,0,0,112,0,0,0,0,0,0,0,248,49,0,0,95,109,0,0,248,49,0,0,144,109,0,0,112,50,0,0,193,109,0,0,0,0,0,0,1,0,0,0,96,0,0,0,3,244,255,255,112,50,0,0,240,109,0,0,0,0,0,0,1,0,0,0,120,0,0,0,3,244,255,255,112,50,0,0,31,110,0,0,0,0,0,0,1,0,0,0,96,0,0,0,3,244,255,255,112,50,0,0,78,110,0,0,0,0,0,0,1,0,0,0,120,0,0,0,3,244,255,255,32,50,0,0,125,110,0,0,144,0,0,0,0,0,0,0,32,50,0,0,150,110,0,0,136,0,0,0,0,0,0,0,32,50,0,0,213,110,0,0,144,0,0,0,0,0,0,0,32,50,0,0,237,110,0,0,136,0,0,0,0,0,0,0,32,50,0,0,5,111,0,0,72,1,0,0,0,0,0,0,32,50,0,0,25,111,0,0,152,5,0,0,0,0,0,0,32,50,0,0,47,111,0,0,72,1,0,0,0,0,0,0,112,50,0,0,105,111,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,136,1,0,0,0,0,0,0,112,50,0,0,173,111,0,0,0,0,0,0,1,0,0,0,160,1,0,0,0,0,0,0,248,49,0,0,195,111,0,0,112,50,0,0,220,111,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,200,1,0,0,0,0,0,0,112,50,0,0,32,112,0,0,0,0,0,0,1,0,0,0,160,1,0,0,0,0,0,0,112,50,0,0,73,112,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,0,2,0,0,0,0,0,0,112,50,0,0,141,112,0,0,0,0,0,0,1,0,0,0,24,2,0,0,0,0,0,0,248,49,0,0,163,112,0,0,112,50,0,0,188,112,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,64,2,0,0,0,0,0,0,112,50,0,0,0,113,0,0,0,0,0,0,1,0,0,0,24,2,0,0,0,0,0,0,112,50,0,0,86,114,0,0,0,0,0,0,3,0,0,0,72,1,0,0,2,0,0,0,128,2,0,0,2,0,0,0,136,2,0,0,0,8,0,0,248,49,0,0,189,114,0,0,248,49,0,0,155,114,0,0,112,50,0,0,208,114,0,0,0,0,0,0,3,0,0,0,72,1,0,0,2,0,0,0,128,2,0,0,2,0,0,0,184,2,0,0,0,8,0,0,248,49,0,0,21,115,0,0,112,50,0,0,55,115,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,224,2,0,0,0,8,0,0,248,49,0,0,124,115,0,0,112,50,0,0,145,115,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,224,2,0,0,0,8,0,0,112,50,0,0,214,115,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,40,3,0,0,2,0,0,0,248,49,0,0,242,115,0,0,112,50,0,0,7,116,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,40,3,0,0,2,0,0,0,112,50,0,0,35,116,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,40,3,0,0,2,0,0,0,112,50,0,0,63,116,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,40,3,0,0,2,0,0,0,112,50,0,0,106,116,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,176,3,0,0,0,0,0,0,248,49,0,0,176,116,0,0,112,50,0,0,212,116,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,216,3,0,0,0,0,0,0,248,49,0,0,26,117,0,0,112,50,0,0,57,117,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,0,4,0,0,0,0,0,0,248,49,0,0,127,117,0,0,112,50,0,0,152,117,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,40,4,0,0,0,0,0,0,248,49,0,0,222,117,0,0,112,50,0,0,247,117,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,80,4,0,0,2,0,0,0,248,49,0,0,12,118,0,0,112,50,0,0,163,118,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,80,4,0,0,2,0,0,0,32,50,0,0,36,118,0,0,136,4,0,0,0,0,0,0,112,50,0,0,71,118,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,168,4,0,0,2,0,0,0,248,49,0,0,106,118,0,0,32,50,0,0,129,118,0,0,136,4,0,0,0,0,0,0,112,50,0,0,184,118,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,168,4,0,0,2,0,0,0,112,50,0,0,218,118,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,168,4,0,0,2,0,0,0,112,50,0,0,252,118,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,168,4,0,0,2,0,0,0,32,50,0,0,31,119,0,0,72,1,0,0,0,0,0,0,112,50,0,0,53,119,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,80,5,0,0,2,0,0,0,248,49,0,0,71,119,0,0,112,50,0,0,92,119,0,0,0,0,0,0,2,0,0,0,72,1,0,0,2,0,0,0,80,5,0,0,2,0,0,0,32,50,0,0,121,119,0,0,72,1,0,0,0,0,0,0,32,50,0,0,142,119,0,0,72,1,0,0,0,0,0,0,248,49,0,0,39,120,0,0,248,49,0,0,18,122,0,0,32,50,0,0,114,122,0,0,184,5,0,0,0,0,0,0,32,50,0,0,31,122,0,0,200,5,0,0,0,0,0,0,248,49,0,0,64,122,0,0,32,50,0,0,77,122,0,0,168,5,0,0,0,0,0,0,32,50,0,0,99,123,0,0,160,5,0,0,0,0,0,0,32,50,0,0,126,123,0,0,160,5,0,0,0,0,0,0,32,50,0,0,174,123,0,0,184,5,0,0,0,0,0,0,32,50,0,0,138,123,0,0,0,6,0,0,0,0,0,0,32,50,0,0,208,123,0,0,168,5,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,32,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,108,0,0,0,0,0,0,0,152,0,0,0,9,0,0,0,10,0,0,0,148,255,255,255,148,255,255,255,152,0,0,0,11,0,0,0,12,0,0,0,108,0,0,0,0,0,0,0,64,0,0,0,13,0,0,0,14,0,0,0,148,255,255,255,148,255,255,255,64,0,0,0,15,0,0,0,16,0,0,0,176,6,0,0,136,6,0,0,156,6,0,0,196,6,0,0,0,0,0,0,48,0,0,0,17,0,0,0,18,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,104,1,0,0,224,1,0,0,104,0,0,0,0,0,0,0,200,0,0,0,19,0,0,0,20,0,0,0,152,255,255,255,152,255,255,255,200,0,0,0,21,0,0,0,22,0,0,0,104,0,0,0,0,0,0,0,80,0,0,0,23,0,0,0,24,0,0,0,152,255,255,255,152,255,255,255,80,0,0,0,25,0,0,0,26,0,0,0,88,7,0,0,48,7,0,0,68,7,0,0,108,7,0,0,255,255,255,255,0,1,0,0,255,255,255,255,1,0,0,0,255,255,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,32,0,0,176,1,0,0,0,0,0,0,0,0,0,32,37,249,142,0,10,2,0,0,128,190,125,95,244,125,31,160,242,43,74,30,9,82,8,0,64,34,65,80,20,4,16,32,32,41,46,18,8,34,8,0,32,34,65,80,20,4,16,32,32,249,16,76,8,250,62,60,16,34,125,222,247,125,16,32,32,161,232,50,8,34,8,0,8,34,5,16,4,69,16,0,240,163,164,50,8,82,8,0,4,34,5,16,4,69,16,32,32,249,226,94,8,2,0,129,2,62,125,31,244,125,16,0,0,32,0,0,176,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,15,0,192,15,224,247,251,125,126,191,95,232,190,80,0,162,8,8,68,232,47,20,10,133,2,129,80,72,160,80,0,162,40,228,73,40,40,20,10,132,2,129,64,72,160,72,0,190,15,2,16,175,235,247,9,132,62,159,216,79,160,71,0,34,136,228,9,161,42,20,10,132,2,129,80,72,160,72,0,34,40,8,4,160,47,20,10,133,2,129,80,72,162,80,0,190,143,0,0,33,32,244,251,125,126,129,95,232,156,208,7,0,128,0,0,224,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,12,0,130,66,191,223,239,247,251,11,5,5,133,66,191,4,72,0,198,66,161,80,40,20,64,8,5,37,133,66,160,8,168,0,170,70,161,80,40,20,64,8,5,37,133,66,144,16,8,0,146,74,161,95,232,247,67,8,5,37,121,126,136,32,8,0,130,82,161,64,40,1,66,8,137,36,133,64,132,64,8,0,130,98,161,64,42,2,66,8,81,36,133,64,130,128,8,0,130,66,191,192,47,244,67,248,33,252,133,126,191,0,9,62,0,0,0,0,4,0,0,0,0,0,0,0,128,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,4,0,32,72,65,0,0,0,0,0,8,0,0,4,4,0,4,60,32,0,65,0,0,0,0,0,8,0,0,240,125,223,247,133,239,75,81,190,239,251,190,239,59,81,4,0,69,65,20,133,40,74,73,170,40,138,162,32,8,81,4,240,69,65,244,157,40,74,71,170,40,138,162,224,11,81,4,16,69,65,20,132,40,74,73,170,40,138,162,0,10,145,2,240,125,223,247,133,47,74,209,170,232,251,190,224,123,31,1,0,0,0,0,4,8,64,0,0,0,8,32,0,0,0,0,0,0,0,0,132,15,96,0,0,0,8,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,36,1,9,0,0,0,0,0,0,0,0,0,6,0,0,0,36,1,9,0,0,0,0,0,0,0,128,16,9,162,40,250,36,1,9,0,0,0,0,0,0,0,0,62,1,42,37,66,34,82,9,0,0,0,0,0,0,0,128,138,3,42,34,34,36,41,9,0,0,0,0,0,0,0,128,10,1,42,37,18,36,1,9,0,0,0,0,0,0,0,128,10,1,190,232,251,36,1,9,0,0,0,0,0,0,0,128,190,14,0,0,2,172,1,15,0,0,0,0,0,0,0,128,4,0,0,224,3,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,14,184,67,132,3,58,32,0,128,160,190,2,32,0,0,240,138,32,82,196,2,43,32,4,34,145,2,248,59,0,240,7,142,56,75,228,2,58,32,2,28,138,30,8,42,233,17,4,224,11,66,244,2,130,36,1,20,4,20,232,186,4,209,5,128,184,195,231,10,58,137,0,28,14,60,40,2,9,80,4,128,0,64,196,2,128,68,0,34,132,32,232,2,0,80,4,0,0,64,128,2,0,32,5,0,142,62,8,2,0,16,4,224,3,64,128,66,0,0,7,0,132,0,248,3,0,240,7,0,0,64,128,34,0,0,4,0,0,0,0,0,0,0,0,0,0,64,128,2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,128,0,194,160,72,24,0,0,1,132,33,9,146,2,66,38,4,1,33,81,0,0,127,63,2,66,2,16,41,0,34,20,192,239,247,251,253,126,9,161,223,239,247,187,187,3,18,15,68,40,20,10,133,66,9,129,64,32,16,16,17,1,8,4,68,40,20,10,133,66,127,129,64,32,16,16,17,1,4,130,199,239,247,251,253,126,9,129,207,231,243,17,17,1,50,169,80,40,20,10,133,66,9,161,64,32,16,16,17,1,64,184,80,40,20,10,133,66,121,191,223,239,247,187,187,3,32,160,31,0,0,0,0,0,0,16,0,0,0,0,0,0,112,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,2,8,131,34,1,0,2,8,67,2,1,0,1,1,124,20,4,132,68,1,0,32,4,132,4,128,8,63,130,0,132,66,191,223,239,247,3,126,161,80,40,20,10,33,0,0,132,70,161,80,40,20,138,82,161,80,40,20,122,161,239,3,158,74,161,80,40,20,82,82,161,80,40,20,74,31,8,2,132,82,161,80,40,20,34,74,161,80,40,244,75,161,239,3,132,98,161,80,40,20,82,74,161,80,40,4,122,161,40,2,124,66,191,223,239,247,139,126,191,223,239,247,11,189,239,3,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,32,0,0,4,132,0,34,129,69,17,16,66,1,0,148,66,81,0,0,8,66,81,148,42,162,32,8,165,80,0,0,0,32,0,0,0,0,0,0,0,5,0,0,0,0,8,190,239,251,254,251,190,239,251,20,145,235,251,190,239,251,0,32,8,130,32,10,162,40,138,20,145,40,138,162,40,138,62,190,239,251,254,11,190,239,251,20,145,40,138,162,40,138,0,162,40,138,34,8,130,32,8,20,145,40,138,162,40,138,8,190,239,251,254,251,190,239,251,20,145,47,250,190,239,251,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,33,0,4,0,0,0,0,0,0,0,0,0,0,0,0,130,80,20,2,20,0,0,0,0,0,0,0,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,190,40,138,162,40,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,232,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,168,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,232,34,0,0,0,0,0,0,0,0,0,0,190,239,251,190,47,62,0,0,0,0,0,0,0,0,0,0,4,0,0,0,40,32,0,0,0,0,0,0,0,0,0,0,0,0,0,128,15,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,7,0,0,0,1,0,0,0,5,0,0,0,3,0,0,0,7,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,9,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,253,255,255,255,249,255,255,255,241,255,255,255,225,255,255,255,193,255,255,255,129,255,255,255,1,255,255,255,1,254,255,255,1,252,255,255,1,248,255,255,1,240,255,255,1,224,255,255,1,192,255,255,1,128,255,255,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,4,0,0,0,2,0,0,0,5,0,0,0,1,0,0,0,0,0,128,191,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,236,22,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,223,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,23,0,0,9,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,231,162,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,23,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,6,0,0,0,239,166,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,51,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,0,0,0,112,0,0,0,27,0,0,0,28,0,0,0,0,0,0,0,136,0,0,0,29,0,0,0,30,0,0,0,3,0,0,0,10,0,0,0,2,0,0,0,2,0,0,0,7,0,0,0,2,0,0,0,2,0,0,0,8,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,144,0,0,0,31,0,0,0,32,0,0,0,4,0,0,0,11,0,0,0,3,0,0,0,3,0,0,0,9,0,0,0,10,0,0,0,12,0,0,0,11,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,6,0,0,0,8,0,0,0,0,0,0,0,152,0,0,0,9,0,0,0,10,0,0,0,248,255,255,255,248,255,255,255,152,0,0,0,11,0,0,0,12,0,0,0,8,0,0,0,0,0,0,0,176,0,0,0,33,0,0,0,34,0,0,0,248,255,255,255,248,255,255,255,176,0,0,0,35,0,0,0,36,0,0,0,4,0,0,0,0,0,0,0,200,0,0,0,19,0,0,0,20,0,0,0,252,255,255,255,252,255,255,255,200,0,0,0,21,0,0,0,22,0,0,0,4,0,0,0,0,0,0,0,224,0,0,0,37,0,0,0,38,0,0,0,252,255,255,255,252,255,255,255,224,0,0,0,39,0,0,0,40,0,0,0,0,0,0,0,248,0,0,0,31,0,0,0,41,0,0,0,5,0,0,0,11,0,0,0,3,0,0,0,3,0,0,0,13,0,0,0,10,0,0,0,12,0,0,0,11,0,0,0,12,0,0,0,5,0,0,0,14,0,0,0,7,0,0,0,0,0,0,0,8,1,0,0,29,0,0,0,42,0,0,0,6,0,0,0,10,0,0,0,2,0,0,0,2,0,0,0,14,0,0,0,2,0,0,0,2,0,0,0,8,0,0,0,4,0,0,0,3,0,0,0,15,0,0,0,8,0,0,0,0,0,0,0,24,1,0,0,31,0,0,0,43,0,0,0,7,0,0,0,11,0,0,0,3,0,0,0,3,0,0,0,9,0,0,0,10,0,0,0,12,0,0,0,15,0,0,0,16,0,0,0,9,0,0,0,13,0,0,0,6,0,0,0,0,0,0,0,40,1,0,0,29,0,0,0,44,0,0,0,8,0,0,0,10,0,0,0,2,0,0,0,2,0,0,0,7,0,0,0,2,0,0,0,2,0,0,0,17,0,0,0,18,0,0,0,10,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,56,1,0,0,45,0,0,0,46,0,0,0,47,0,0,0,1,0,0,0,4,0,0,0,16,0,0,0,0,0,0,0,88,1,0,0,48,0,0,0,49,0,0,0,47,0,0,0,2,0,0,0,5,0,0,0,17,0,0,0,0,0,0,0,104,1,0,0,50,0,0,0,51,0,0,0,47,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,168,1,0,0,52,0,0,0,53,0,0,0,47,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,224,1,0,0,54,0,0,0,55,0,0,0,47,0,0,0,3,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,24,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([2,0,0,0,6,0,0,0,0,0,0,0,32,2,0,0,56,0,0,0,57,0,0,0,47,0,0,0,7,0,0,0,8,0,0,0,25,0,0,0,9,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,10,0,0,0,0,0,0,0,88,2,0,0,58,0,0,0,59,0,0,0,47,0,0,0,19,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,88,2,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,144,2,0,0,60,0,0,0,61,0,0,0,47,0,0,0,27,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,144,2,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,192,2,0,0,62,0,0,0,63,0,0,0,47,0,0,0,1,0,0,0,0,0,0,0,232,2,0,0,64,0,0,0,65,0,0,0,47,0,0,0,2,0,0,0,0,0,0,0,8,3,0,0,66,0,0,0,67,0,0,0,47,0,0,0,35,0,0,0,36,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,37,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,48,3,0,0,68,0,0,0,69,0,0,0,47,0,0,0,38,0,0,0,39,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,40,0,0,0,19,0,0,0,20,0,0,0,0,0,0,0,80,3,0,0,70,0,0,0,71,0,0,0,47,0,0,0,41,0,0,0,42,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,43,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,112,3,0,0,72,0,0,0,73,0,0,0,47,0,0,0,44,0,0,0,45,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,46,0,0,0,31,0,0,0,32,0,0,0,0,0,0,0,144,3,0,0,74,0,0,0,75,0,0,0,47,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,184,3,0,0,76,0,0,0,77,0,0,0,47,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,224,3,0,0,78,0,0,0,79,0,0,0,47,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,8,4,0,0,80,0,0,0,81,0,0,0,47,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,48,4,0,0,82,0,0,0,83,0,0,0,47,0,0,0,18,0,0,0,4,0,0,0,33,0,0,0,0,0,0,0,88,4,0,0,84,0,0,0,85,0,0,0,47,0,0,0,19,0,0,0,5,0,0,0,34,0,0,0,0,0,0,0,176,4,0,0,86,0,0,0,87,0,0,0,47,0,0,0,3,0,0,0,4,0,0,0,11,0,0,0,47,0,0,0,48,0,0,0,12,0,0,0,49,0,0,0,0,0,0,0,120,4,0,0,86,0,0,0,88,0,0,0,47,0,0,0,3,0,0,0,4,0,0,0,11,0,0,0,47,0,0,0,48,0,0,0,12,0,0,0,49,0,0,0,0,0,0,0,224,4,0,0,89,0,0,0,90,0,0,0,47,0,0,0,5,0,0,0,6,0,0,0,13,0,0,0,50,0,0,0,51,0,0,0,14,0,0,0,52,0,0,0,0,0,0,0,32,5,0,0,91,0,0,0,92,0,0,0,47,0,0,0,0,0,0,0,48,5,0,0,93,0,0,0,94,0,0,0,47,0,0,0,11,0,0,0,20,0,0,0,12,0,0,0,21,0,0,0,13,0,0,0,1,0,0,0,22,0,0,0,15,0,0,0,0,0,0,0,120,5,0,0,95,0,0,0,96,0,0,0,47,0,0,0,53,0,0,0,54,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,136,5,0,0,97,0,0,0,98,0,0,0,47,0,0,0,55,0,0,0,56,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,72,1,0,0,86,0,0,0,99,0,0,0,47,0,0,0,0,0,0,0,88,5,0,0,86,0,0,0,100,0,0,0,47,0,0,0,23,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,14,0,0,0,24,0,0,0,15,0,0,0,25,0,0,0,16,0,0,0,5,0,0,0,26,0,0,0,16,0,0,0,0,0,0,0,192,4,0,0,86,0,0,0,101,0,0,0,47,0,0,0,7,0,0,0,8,0,0,0,17,0,0,0,57,0,0,0,58,0,0,0,18,0,0,0,59,0,0,0,0,0,0,0,0,5,0,0,86,0,0,0,102,0,0,0,47,0,0,0,9,0,0,0,10,0,0,0,19,0,0,0,60,0,0,0,61,0,0,0,20,0,0,0,62,0,0,0,0,0,0,0,136,4,0,0,86,0,0,0,103,0,0,0,47,0,0,0,3,0,0,0,4,0,0,0,11,0,0,0,47,0,0,0,48,0,0,0,12,0,0,0,49,0,0,0,2,0,0,0,9,122,0,0,0,0,0,0,168,5,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,27,0,0,0,6,0,0,0,1,0,0,0,6,0,0,0,0,0,0,0,208,5,0,0,104,0,0,0,108,0,0,0,106,0,0,0,107,0,0,0,27,0,0,0,7,0,0,0,2,0,0,0,7,0,0,0,0,0,0,0,224,5,0,0,109,0,0,0,110,0,0,0,63,0,0,0,0,0,0,0,240,5,0,0,111,0,0,0,112,0,0,0,64,0,0,0,0,0,0,0,32,6,0,0,104,0,0,0,113,0,0,0,106,0,0,0,107,0,0,0,27,0,0,0,8,0,0,0,3,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,83,99,114,101,101,110,0,110,111,111,98,0,101,97,115,121,0,110,111,114,109,97,108,0,104,97,114,100,0,115,99,111,114,32,0,49,50,51,52,53,54,0,115,99,111,114,0,108,105,110,105,105,0,110,105,118,101,108,0,104,105,103,104,32,115,99,111,114,101,0,84,90,65,80,65,0,82,69,84,82,89,0,77,65,73,78,32,77,69,78,85,0,109,101,110,117,98,117,116,116,111,110,32,0,105,105,32,112,97,32,108,111,99,0,114,101,115,111,117,114,99,101,115,47,112,105,0,114,101,115,111,117,114,99,101,115,47,112,101,110,116,0,46,116,120,116,0,114,101,115,111,117,114,99,101,115,47,99,117,98,101,50,52,46,112,110,103,0,49,48,71,97,109,101,83,99,114,101,101,110,0,80,76,65,89,0,68,73,70,70,73,67,85,76,84,89,32,32,58,32,32,0,81,85,73,84,0,84,69,84,82,73,83,0,49,48,77,97,105,110,83,99,114,101,101,110,0,69,114,114,111,114,32,111,112,101,110,105,110,103,32,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,119,0,97,0,114,0,114,43,0,119,43,0,97,43,0,97,98,0,114,43,98,0,119,43,98,0,97,43,98,0,78,83,116,51,95,95,50,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,228,48,255,0,121,241,255,230,41,55,255,0,158,47,255,253,249,0,255,245,245,245,255,200,200,200,255,255,0,255,255,200,122,255,255,102,191,255,255,255,109,194,255,127,106,79,255,112,31,126,255,0,82,172,255,211,176,131,255,255,203,0,255,190,33,55,255,255,161,0,255,255,255,255,255,116,97,98,108,97,46,111,117,116,0,78,83,116,51,95,95,50,49,52,98,97,115,105,99,95,111,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,116,97,98,108,97,46,105,110,0,109,97,116,46,111,117,116,0,109,97,116,46,105,110,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,116,116,114,120,0,73,78,70,79,58,32,0,69,82,82,79,82,58,32,0,87,65,82,78,73,78,71,58,32,0,68,69,66,85,71,58,32,0,10,0,73,110,105,116,105,97,108,105,122,105,110,103,32,114,97,121,108,105,98,32,40,118,49,46,54,46,48,41,0,35,99,97,110,118,97,115,0,84,97,114,103,101,116,32,116,105,109,101,32,112,101,114,32,102,114,97,109,101,58,32,37,48,50,46,48,51,102,32,109,105,108,108,105,115,101,99,111,110,100,115,0,67,97,110,118,97,115,32,115,99,97,108,101,100,32,116,111,32,102,117,108,108,115,99,114,101,101,110,46,32,69,108,101,109,101,110,116,83,105,122,101,58,32,40,37,105,120,37,105,41,44,32,83,99,114,101,101,110,83,105,122,101,40,37,105,120,37,105,41,0,67,97,110,118,97,115,32,115,99,97,108,101,100,32,116,111,32,119,105,110,100,111,119,101,100,46,32,69,108,101,109,101,110,116,83,105,122,101,58,32,40,37,105,120,37,105,41,44,32,83,99,114,101,101,110,83,105,122,101,40,37,105,120,37,105,41,0,91,84,69,88,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,102,111,110,116,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,0,1,0,5,6,0,255,85,0,17,0,0,0,1,88,88,88,88,32,80,78,71,32,99,104,117,110,107,32,110,111,116,32,107,110,111,119,110,0,137,80,78,71,13,10,26,10,82,71,66,0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,68,88,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,69,84,67,49,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,69,84,67,50,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,80,86,82,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,83,84,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,84,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,91,84,69,88,32,73,68,32,37,105,93,32,84,101,120,116,117,114,101,32,99,114,101,97,116,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,120,37,105,41,0,84,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,99,114,101,97,116,101,100,0,73,109,97,103,101,32,100,97,116,97,32,102,111,114,109,97,116,32,105,115,32,99,111,109,112,114,101,115,115,101,100,44,32,99,97,110,32,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,0,70,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,112,105,120,101,108,32,100,97,116,97,32,114,101,116,114,105,101,118,97,108,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,71,76,70,87,0,84,114,121,105,110,103,32,116,111,32,101,110,97,98,108,101,32,77,83,65,65,32,120,52,0,67,108,111,115,101,115,116,32,102,117,108,108,115,99,114,101,101,110,32,118,105,100,101,111,109,111,100,101,58,32,37,105,32,120,32,37,105,0,71,76,70,87,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,87,105,110,100,111,119,0,68,105,115,112,108,97,121,32,100,101,118,105,99,101,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,82,101,110,100,101,114,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,83,99,114,101,101,110,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,86,105,101,119,112,111,114,116,32,111,102,102,115,101,116,115,58,32,37,105,44,32,37,105,0,84,114,121,105,110,103,32,116,111,32,101,110,97,98,108,101,32,86,83,89,78,67,0,71,80,85,58,32,86,101,110,100,111,114,58,32,32,32,37,115,0,71,80,85,58,32,82,101,110,100,101,114,101,114,58,32,37,115,0,71,80,85,58,32,86,101,114,115,105,111,110,58,32,32,37,115,0,71,80,85,58,32,71,76,83,76,58,32,32,32,32,32,37,115,0,32,0,78,117,109,98,101,114,32,111,102,32,115,117,112,112,111,114,116,101,100,32,101,120,116,101,110,115,105,111,110,115,58,32,37,105,0,71,76,95,79,69,83,95,118,101,114,116,101,120,95,97,114,114,97,121,95,111,98,106,101,99,116,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,79,69,83,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,79,69,83,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,79,69,83,0,71,76,95,79,69,83,95,116,101,120,116,117,114,101,95,110,112,111,116,0,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,115,51,116,99,0,71,76,95,87,69,66,71,76,95,99,111,109,112,114,101,115,115,101,100,95,116,101,120,116,117,114,101,95,115,51,116,99,0,71,76,95,87,69,66,75,73,84,95,87,69,66,71,76,95,99,111,109,112,114,101,115,115,101,100,95,116,101,120,116,117,114,101,95,115,51,116,99,0,71,76,95,79,69,83,95,99,111,109,112,114,101,115,115,101,100,95,69,84,67,49,95,82,71,66,56,95,116,101,120,116,117,114,101,0,71,76,95,87,69,66,71,76,95,99,111,109,112,114,101,115,115,101,100,95,116,101,120,116,117,114,101,95,101,116,99,49,0,71,76,95,65,82,66,95,69,83,51,95,99,111,109,112,97,116,105,98,105,108,105,116,121,0,71,76,95,73,77,71,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,112,118,114,116,99,0,71,76,95,75,72,82,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,97,115,116,99,95,104,100,114,0,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,102,105,108,116,101,114,95,97,110,105,115,111,116,114,111,112,105,99,0,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,109,105,114,114,111,114,95,99,108,97,109,112,0,91,69,88,84,69,78,83,73,79,78,93,32,86,65,79,32,101,120,116,101,110,115,105,111,110,32,100,101,116,101,99,116,101,100,44,32,86,65,79,32,102,117,110,99,116,105,111,110,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,69,88,84,69,78,83,73,79,78,93,32,86,65,79,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,102,111,117,110,100,44,32,86,65,79,32,117,115,97,103,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,101,120,116,101,110,115,105,111,110,32,100,101,116,101,99,116,101,100,44,32,102,117,108,108,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,102,111,117,110,100,44,32,108,105,109,105,116,101,100,32,78,80,79,84,32,115,117,112,112,111,114,116,32,40,110,111,45,109,105,112,109,97,112,115,44,32,110,111,45,114,101,112,101,97,116,41,0,91,69,88,84,69,78,83,73,79,78,93,32,68,88,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,69,84,67,49,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,69,84,67,50,47,69,65,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,80,86,82,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,65,83,84,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,91,69,88,84,69,78,83,73,79,78,93,32,65,110,105,115,111,116,114,111,112,105,99,32,116,101,120,116,117,114,101,115,32,102,105,108,116,101,114,105,110,103,32,115,117,112,112,111,114,116,101,100,32,40,109,97,120,58,32,37,46,48,102,88,41,0,91,69,88,84,69,78,83,73,79,78,93,32,67,108,97,109,112,32,109,105,114,114,111,114,32,119,114,97,112,32,116,101,120,116,117,114,101,32,109,111,100,101,32,115,117,112,112,111,114,116,101,100,0,255,255,255,255,91,84,69,88,32,73,68,32,37,105,93,32,66,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,66,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,79,112,101,110,71,76,32,100,101,102,97,117,108,116,32,115,116,97,116,101,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,67,80,85,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,108,105,110,101,115,44,32,116,114,105,97,110,103,108,101,115,44,32,113,117,97,100,115,41,0,91,86,65,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,108,105,110,101,115,41,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,108,105,110,101,115,41,0,91,86,65,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,116,114,105,97,110,103,108,101,115,41,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,116,114,105,97,110,103,108,101,115,41,0,91,86,65,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,113,117,97,100,115,41,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,98,117,102,102,101,114,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,113,117,97,100,115,41,0,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,118,101,114,116,101,120,80,111,115,105,116,105,111,110,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,118,101,114,116,101,120,67,111,108,111,114,59,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,52,32,102,114,97,103,67,111,108,111,114,59,32,32,32,32,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,109,97,116,52,32,109,118,112,77,97,116,114,105,120,59,32,32,32,32,32,32,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,102,114,97,103,84,101,120,67,111,111,114,100,32,61,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,10,32,32,32,32,102,114,97,103,67,111,108,111,114,32,61,32,118,101,114,116,101,120,67,111,108,111,114,59,32,32,32,32,32,32,32,10,32,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,109,118,112,77,97,116,114,105,120,42,118,101,99,52,40,118,101,114,116,101,120,80,111,115,105,116,105,111,110,44,32,49,46,48,41,59,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,32,32,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,52,32,102,114,97,103,67,111,108,111,114,59,32,32,32,32,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,48,59,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,118,101,99,52,32,99,111,108,68,105,102,102,117,115,101,59,32,32,32,32,32,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,118,101,99,52,32,116,101,120,101,108,67,111,108,111,114,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,48,44,32,102,114,97,103,84,101,120,67,111,111,114,100,41,59,32,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,116,101,120,101,108,67,111,108,111,114,42,99,111,108,68,105,102,102,117,115,101,42,102,114,97,103,67,111,108,111,114,59,32,32,32,32,32,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,91,83,72,68,82,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,115,104,97,100,101,114,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,83,72,68,82,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,115,104,97,100,101,114,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,118,101,114,116,101,120,80,111,115,105,116,105,111,110,0,118,101,114,116,101,120,84,101,120,67,111,111,114,100,0,118,101,114,116,101,120,84,101,120,67,111,111,114,100,50,0,118,101,114,116,101,120,78,111,114,109,97,108,0,118,101,114,116,101,120,84,97,110,103,101,110,116,0,118,101,114,116,101,120,67,111,108,111,114,0,109,118,112,77,97,116,114,105,120,0,99,111,108,68,105,102,102,117,115,101,0,99,111,108,65,109,98,105,101,110,116,0,99,111,108,83,112,101,99,117,108,97,114,0,116,101,120,116,117,114,101,48,0,116,101,120,116,117,114,101,49,0,116,101,120,116,117,114,101,50,0,108,105,103,104,116,115,91,120,93,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,110,97,98,108,101,100,0,0,116,121,112,101,0,0,112,111,115,105,116,105,111,110,0,0,100,105,114,101,99,116,105,111,110,0,0,114,97,100,105,117,115,0,0,100,105,102,102,117,115,101,0,0,105,110,116,101,110,115,105,116,121,0,0,99,111,110,101,65,110,103,108,101,0,0,91,86,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,118,101,114,116,101,120,32,115,104,97,100,101,114,46,46,46,0,37,115,0,91,86,83,72,68,82,32,73,68,32,37,105,93,32,86,101,114,116,101,120,32,115,104,97,100,101,114,32,99,111,109,112,105,108,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,70,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,102,114,97,103,109,101,110,116,32,115,104,97,100,101,114,46,46,46,0,91,70,83,72,68,82,32,73,68,32,37,105,93,32,70,114,97,103,109,101,110,116,32,115,104,97,100,101,114,32,99,111,109,112,105,108,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,108,105,110,107,32,115,104,97,100,101,114,32,112,114,111,103,114,97,109,46,46,46,0,91,83,72,68,82,32,73,68,32,37,105,93,32,83,104,97,100,101,114,32,112,114,111,103,114,97,109,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,68,79,87,78,83,67,65,76,73,78,71,58,32,82,101,113,117,105,114,101,100,32,115,99,114,101,101,110,32,115,105,122,101,32,40,37,105,120,37,105,41,32,105,115,32,98,105,103,103,101,114,32,116,104,97,110,32,100,105,115,112,108,97,121,32,115,105,122,101,32,40,37,105,120,37,105,41,0,68,111,119,110,115,99,97,108,101,32,109,97,116,114,105,120,32,103,101,110,101,114,97,116,101,100,44,32,99,111,110,116,101,110,116,32,119,105,108,108,32,98,101,32,114,101,110,100,101,114,101,100,32,97,116,58,32,37,105,32,120,32,37,105,0,85,80,83,67,65,76,73,78,71,58,32,82,101,113,117,105,114,101,100,32,115,99,114,101,101,110,32,115,105,122,101,58,32,37,105,32,120,32,37,105,32,45,62,32,68,105,115,112,108,97,121,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,91,71,76,70,87,51,32,69,114,114,111,114,93,32,67,111,100,101,58,32,37,105,32,68,101,99,114,105,112,116,105,111,110,58,32,37,115,0,87,105,110,100,111,119,32,99,108,111,115,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,84,69,88,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,116,101,120,116,117,114,101,32,100,97,116,97,32,40,98,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,41,32,102,114,111,109,32,86,82,65,77,0,91,84,69,88,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,116,101,120,116,117,114,101,32,100,97,116,97,32,102,114,111,109,32,86,82,65,77,32,40,71,80,85,41,0,83,116,97,99,107,32,66,117,102,102,101,114,32,79,118,101,114,102,108,111,119,32,40,77,65,88,32,37,105,32,77,97,116,114,105,120,41,0,77,65,88,95,76,73,78,69,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,77,65,88,95,84,82,73,65,78,71,76,69,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,77,65,88,95,81,85,65,68,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,115,116,111,114,97,103,101,46,100,97,116,97,0,114,98,43,0,119,98,0,83,116,111,114,97,103,101,32,100,97,116,97,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,99,114,101,97,116,101,100,0,83,116,111,114,97,103,101,32,112,111,115,105,116,105,111,110,32,99,111,117,108,100,32,110,111,116,32,98,101,32,102,111,117,110,100,0,83,116,111,114,97,103,101,32,100,97,116,97,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,102,111,117,110,100,0,112,110,103,0,98,109,112,0,116,103,97,0,106,112,103,0,100,100,115,0,112,107,109,0,107,116,120,0,112,118,114,0,97,115,116,99,0,91,37,115,93,32,73,109,97,103,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,120,37,105,41,0,91,37,115,93,32,73,109,97,103,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,44,32,102,105,108,101,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,0,114,98,0,91,37,115,93,32,65,83,84,67,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,65,83,84,67,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,105,109,97,103,101,0,65,83,84,67,32,105,109,97,103,101,32,119,105,100,116,104,58,32,37,105,0,65,83,84,67,32,105,109,97,103,101,32,104,101,105,103,104,116,58,32,37,105,0,65,83,84,67,32,105,109,97,103,101,32,98,108,111,99,107,115,58,32,37,105,120,37,105,0,91,37,115,93,32,65,83,84,67,32,98,108,111,99,107,32,115,105,122,101,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,91,37,115,93,32,80,86,82,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,80,86,82,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,105,109,97,103,101,0,80,86,82,32,118,50,32,110,111,116,32,115,117,112,112,111,114,116,101,100,44,32,117,112,100,97,116,101,32,121,111,117,114,32,102,105,108,101,115,32,116,111,32,80,86,82,32,118,51,0,91,37,115,93,32,75,84,88,32,105,109,97,103,101,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,75,84,88,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,102,105,108,101,0,75,84,88,32,40,69,84,67,41,32,105,109,97,103,101,32,119,105,100,116,104,58,32,37,105,0,75,84,88,32,40,69,84,67,41,32,105,109,97,103,101,32,104,101,105,103,104,116,58,32,37,105,0,75,84,88,32,40,69,84,67,41,32,105,109,97,103,101,32,102,111,114,109,97,116,58,32,48,120,37,120,0,91,37,115,93,32,80,75,77,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,80,75,77,32,0,91,37,115,93,32,80,75,77,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,105,109,97,103,101,0,80,75,77,32,40,69,84,67,41,32,105,109,97,103,101,32,119,105,100,116,104,58,32,37,105,0,80,75,77,32,40,69,84,67,41,32,105,109,97,103,101,32,104,101,105,103,104,116,58,32,37,105,0,80,75,77,32,40,69,84,67,41,32,105,109,97,103,101,32,102,111,114,109,97,116,58,32,37,105,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,68,68,83,32,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,105,109,97,103,101,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,104,101,97,100,101,114,32,115,105,122,101,58,32,37,105,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,112,105,120,101,108,32,102,111,114,109,97,116,32,115,105,122,101,58,32,37,105,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,112,105,120,101,108,32,102,111,114,109,97,116,32,102,108,97,103,115,58,32,48], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([120,37,120,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,102,111,114,109,97,116,58,32,48,120,37,120,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,98,105,116,32,99,111,117,110,116,58,32,48,120,37,120,0,80,105,116,99,104,32,111,114,32,108,105,110,101,97,114,32,115,105,122,101,58,32,37,105,0,99,97,110,39,116,32,102,111,112,101,110,0,117,110,107,110,111,119,110,32,105,109,97,103,101,32,116,121,112,101,0,98,97,100,32,102,111,114,109,97,116,0,111,117,116,111,102,109,101,109,0,116,103,97,95,99,111,109,112,32,61,61,32,83,84,66,73,95,114,103,98,0,46,47,101,120,116,101,114,110,97,108,47,115,116,98,95,105,109,97,103,101,46,104,0,115,116,98,105,95,95,116,103,97,95,108,111,97,100,0,98,97,100,32,112,97,108,101,116,116,101,0,114,101,113,95,99,111,109,112,32,62,61,32,49,32,38,38,32,114,101,113,95,99,111,109,112,32,60,61,32,52,0,115,116,98,105,95,95,99,111,110,118,101,114,116,95,102,111,114,109,97,116,0,48,0,105,110,118,97,108,105,100,0,98,97,100,32,98,112,112,0,98,97,100,32,109,97,115,107,115,0,110,111,116,32,66,77,80,0,117,110,107,110,111,119,110,32,66,77,80,0,98,97,100,32,66,77,80,0,109,111,110,111,99,104,114,111,109,101,0,66,77,80,32,82,76,69,0,98,97,100,32,114,101,113,95,99,111,109,112,0,109,117,108,116,105,112,108,101,32,73,72,68,82,0,98,97,100,32,73,72,68,82,32,108,101,110,0,116,111,111,32,108,97,114,103,101,0,49,47,50,47,52,47,56,47,49,54,45,98,105,116,32,111,110,108,121,0,98,97,100,32,99,116,121,112,101,0,98,97,100,32,99,111,109,112,32,109,101,116,104,111,100,0,98,97,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,0,98,97,100,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,0,48,45,112,105,120,101,108,32,105,109,97,103,101,0,102,105,114,115,116,32,110,111,116,32,73,72,68,82,0,105,110,118,97,108,105,100,32,80,76,84,69,0,116,82,78,83,32,97,102,116,101,114,32,73,68,65,84,0,116,82,78,83,32,98,101,102,111,114,101,32,80,76,84,69,0,98,97,100,32,116,82,78,83,32,108,101,110,0,116,82,78,83,32,119,105,116,104,32,97,108,112,104,97,0,110,111,32,80,76,84,69,0,111,117,116,111,102,100,97,116,97,0,110,111,32,73,68,65,84,0,115,45,62,105,109,103,95,111,117,116,95,110,32,61,61,32,52,0,115,116,98,105,95,95,100,101,95,105,112,104,111,110,101,0,111,117,116,95,110,32,61,61,32,50,32,124,124,32,111,117,116,95,110,32,61,61,32,52,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,116,114,97,110,115,112,97,114,101,110,99,121,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,116,114,97,110,115,112,97,114,101,110,99,121,49,54,0,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,32,124,124,32,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,43,49,0,115,116,98,105,95,95,99,114,101,97,116,101,95,112,110,103,95,105,109,97,103,101,95,114,97,119,0,110,111,116,32,101,110,111,117,103,104,32,112,105,120,101,108,115,0,105,110,118,97,108,105,100,32,102,105,108,116,101,114,0,105,109,103,95,119,105,100,116,104,95,98,121,116,101,115,32,60,61,32,120,0,105,109,103,95,110,43,49,32,61,61,32,111,117,116,95,110,0,105,109,103,95,110,32,61,61,32,51,0,98,97,100,32,104,117,102,102,109,97,110,32,99,111,100,101,0,98,97,100,32,100,105,115,116,0,111,117,116,112,117,116,32,98,117,102,102,101,114,32,108,105,109,105,116,0,122,45,62,115,105,122,101,91,98,93,32,61,61,32,115,0,115,116,98,105,95,95,122,104,117,102,102,109,97,110,95,100,101,99,111,100,101,95,115,108,111,119,112,97,116,104,0,98,105,116,115,32,60,61,32,49,54,0,115,116,98,105,95,95,98,105,116,95,114,101,118,101,114,115,101,0,122,45,62,99,111,100,101,95,98,117,102,102,101,114,32,60,32,40,49,85,32,60,60,32,122,45,62,110,117,109,95,98,105,116,115,41,0,115,116,98,105,95,95,102,105,108,108,95,98,105,116,115,0,98,97,100,32,99,111,100,101,108,101,110,103,116,104,115,0,99,32,61,61,32,49,56,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,104,117,102,102,109,97,110,95,99,111,100,101,115,0,98,97,100,32,115,105,122,101,115,0,97,45,62,110,117,109,95,98,105,116,115,32,61,61,32,48,0,115,116,98,105,95,95,112,97,114,115,101,95,117,110,99,111,109,112,114,101,115,115,101,100,95,98,108,111,99,107,0,122,108,105,98,32,99,111,114,114,117,112,116,0,114,101,97,100,32,112,97,115,116,32,98,117,102,102,101,114,0,98,97,100,32,122,108,105,98,32,104,101,97,100,101,114,0,110,111,32,112,114,101,115,101,116,32,100,105,99,116,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,0,98,97,100,32,112,110,103,32,115,105,103,0,106,117,110,107,32,98,101,102,111,114,101,32,109,97,114,107,101,114,0,101,120,112,101,99,116,101,100,32,109,97,114,107,101,114,0,98,97,100,32,68,82,73,32,108,101,110,0,98,97,100,32,68,81,84,32,116,121,112,101,0,98,97,100,32,68,81,84,32,116,97,98,108,101,0,98,97,100,32,68,72,84,32,104,101,97,100,101,114,0,98,97,100,32,99,111,100,101,32,108,101,110,103,116,104,115,0,99,97,110,39,116,32,109,101,114,103,101,32,100,99,32,97,110,100,32,97,99,0,110,32,62,61,32,48,32,38,38,32,110,32,60,32,40,105,110,116,41,32,40,115,105,122,101,111,102,40,115,116,98,105,95,95,98,109,97,115,107,41,47,115,105,122,101,111,102,40,42,115,116,98,105,95,95,98,109,97,115,107,41,41,0,115,116,98,105,95,95,101,120,116,101,110,100,95,114,101,99,101,105,118,101,0,40,40,40,106,45,62,99,111,100,101,95,98,117,102,102,101,114,41,32,62,62,32,40,51,50,32,45,32,104,45,62,115,105,122,101,91,99,93,41,41,32,38,32,115,116,98,105,95,95,98,109,97,115,107,91,104,45,62,115,105,122,101,91,99,93,93,41,32,61,61,32,104,45,62,99,111,100,101,91,99,93,0,115,116,98,105,95,95,106,112,101,103,95,104,117,102,102,95,100,101,99,111,100,101,0,98,97,100,32,83,79,83,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,98,97,100,32,83,79,83,32,108,101,110,0,98,97,100,32,68,67,32,104,117,102,102,0,98,97,100,32,65,67,32,104,117,102,102,0,98,97,100,32,83,79,83,0,110,111,32,83,79,73,0,110,111,32,83,79,70,0,98,97,100,32,83,79,70,32,108,101,110,0,111,110,108,121,32,56,45,98,105,116,0,110,111,32,104,101,97,100,101,114,32,104,101,105,103,104,116,0,48,32,119,105,100,116,104,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,73,68,0,98,97,100,32,72,0,98,97,100,32,86,0,98,97,100,32,84,81,0,69,88,84,0,65,82,66,0,79,69,83,0,65,78,71,76,69,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,0,103,108,85,115,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,85,115,101,80,114,111,103,114,97,109,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,0,103,108,65,116,116,97,99,104,79,98,106,101,99,116,0,103,108,65,116,116,97,99,104,83,104,97,100,101,114,0,103,108,68,101,116,97,99,104,79,98,106,101,99,116,0,103,108,68,101,116,97,99,104,83,104,97,100,101,114,0,103,108,80,105,120,101,108,83,116,111,114,101,105,0,103,108,71,101,116,83,116,114,105,110,103,0,103,108,71,101,116,73,110,116,101,103,101,114,118,0,103,108,71,101,116,70,108,111,97,116,118,0,103,108,71,101,116,66,111,111,108,101,97,110,118,0,103,108,71,101,110,84,101,120,116,117,114,101,115,0,103,108,68,101,108,101,116,101,84,101,120,116,117,114,101,115,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,84,101,120,73,109,97,103,101,50,68,0,103,108,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,82,101,97,100,80,105,120,101,108,115,0,103,108,66,105,110,100,84,101,120,116,117,114,101,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,84,101,120,116,117,114,101,0,103,108,71,101,110,66,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,0,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,66,117,102,102,101,114,68,97,116,97,0,103,108,66,117,102,102,101,114,83,117,98,68,97,116,97,0,103,108,73,115,66,117,102,102,101,114,0,103,108,71,101,110,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,66,105,110,100,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,82,101,110,100,101,114,98,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,85,110,105,102,111,114,109,102,118,0,103,108,71,101,116,85,110,105,102,111,114,109,105,118,0,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,102,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,105,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,118,0,103,108,71,101,116,65,99,116,105,118,101,85,110,105,102,111,114,109,0,103,108,85,110,105,102,111,114,109,49,102,0,103,108,85,110,105,102,111,114,109,50,102,0,103,108,85,110,105,102,111,114,109,51,102,0,103,108,85,110,105,102,111,114,109,52,102,0,103,108,85,110,105,102,111,114,109,49,105,0,103,108,85,110,105,102,111,114,109,50,105,0,103,108,85,110,105,102,111,114,109,51,105,0,103,108,85,110,105,102,111,114,109,52,105,0,103,108,85,110,105,102,111,114,109,49,105,118,0,103,108,85,110,105,102,111,114,109,50,105,118,0,103,108,85,110,105,102,111,114,109,51,105,118,0,103,108,85,110,105,102,111,114,109,52,105,118,0,103,108,85,110,105,102,111,114,109,49,102,118,0,103,108,85,110,105,102,111,114,109,50,102,118,0,103,108,85,110,105,102,111,114,109,51,102,118,0,103,108,85,110,105,102,111,114,109,52,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,50,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,51,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,0,103,108,66,105,110,100,66,117,102,102,101,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,118,0,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,71,101,116,65,99,116,105,118,101,65,116,116,114,105,98,0,103,108,68,101,108,101,116,101,83,104,97,100,101,114,0,103,108,71,101,116,65,116,116,97,99,104,101,100,83,104,97,100,101,114,115,0,103,108,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,71,101,116,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,0,103,108,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,0,103,108,71,101,116,83,104,97,100,101,114,105,118,0,103,108,71,101,116,80,114,111,103,114,97,109,105,118,0,103,108,73,115,83,104,97,100,101,114,0,103,108,68,101,108,101,116,101,80,114,111,103,114,97,109,0,103,108,71,101,116,83,104,97,100,101,114,80,114,101,99,105,115,105,111,110,70,111,114,109,97,116,0,103,108,76,105,110,107,80,114,111,103,114,97,109,0,103,108,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,0,103,108,86,97,108,105,100,97,116,101,80,114,111,103,114,97,109,0,103,108,73,115,80,114,111,103,114,97,109,0,103,108,66,105,110,100,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,66,105,110,100,70,114,97,109,101,98,117,102,102,101,114,0,103,108,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,70,114,97,109,101,98,117,102,102,101,114,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,50,68,0,103,108,71,101,116,70,114,97,109,101,98,117,102,102,101,114,65,116,116,97,99,104,109,101,110,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,70,114,97,109,101,98,117,102,102,101,114,0,103,108,68,101,108,101,116,101,79,98,106,101,99,116,0,103,108,71,101,116,79,98,106,101,99,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,71,101,116,73,110,102,111,76,111,103,0,103,108,66,105,110,100,80,114,111,103,114,97,109,0,103,108,71,101,116,80,111,105,110,116,101,114,118,0,103,108,68,114,97,119,82,97,110,103,101,69,108,101,109,101,110,116,115,0,103,108,69,110,97,98,108,101,67,108,105,101,110,116,83,116,97,116,101,0,103,108,86,101,114,116,101,120,80,111,105,110,116,101,114,0,103,108,84,101,120,67,111,111,114,100,80,111,105,110,116,101,114,0,103,108,78,111,114,109,97,108,80,111,105,110,116,101,114,0,103,108,67,111,108,111,114,80,111,105,110,116,101,114,0,103,108,67,108,105,101,110,116,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,0,103,108,77,97,116,114,105,120,77,111,100,101,0,103,108,76,111,97,100,73,100,101,110,116,105,116,121,0,103,108,76,111,97,100,77,97,116,114,105,120,102,0,103,108,70,114,117,115,116,117,109,0,103,108,82,111,116,97,116,101,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,0,103,108,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,114,97,119,65,114,114,97,121,115,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,0,103,108,83,104,97,100,101,114,66,105,110,97,114,121,0,103,108,82,101,108,101,97,115,101,83,104,97,100,101,114,67,111,109,112,105,108,101,114,0,103,108,71,101,116,69,114,114,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,68,105,118,105,115,111,114,0,103,108,68,114,97,119,65,114,114,97,121,115,73,110,115,116,97,110,99,101,100,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,73,110,115,116,97,110,99,101,100,0,103,108,70,105,110,105,115,104,0,103,108,70,108,117,115,104,0,103,108,67,108,101,97,114,68,101,112,116,104,0,103,108,67,108,101,97,114,68,101,112,116,104,102,0,103,108,68,101,112,116,104,70,117,110,99,0,103,108,69,110,97,98,108,101,0,103,108,68,105,115,97,98,108,101,0,103,108,70,114,111,110,116,70,97,99,101,0,103,108,67,117,108,108,70,97,99,101,0,103,108,67,108,101,97,114,0,103,108,76,105,110,101,87,105,100,116,104,0,103,108,67,108,101,97,114,83,116,101,110,99,105,108,0,103,108,68,101,112,116,104,77,97,115,107,0,103,108,83,116,101,110,99,105,108,77,97,115,107,0,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,0,103,108,71,101,110,101,114,97,116,101,77,105,112,109,97,112,0,103,108,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,0,103,108,73,115,69,110,97,98,108,101,100,0,103,108,66,108,101,110,100,70,117,110,99,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,83,101,112,97,114,97,116,101,0,103,108,68,101,112,116,104,82,97,110,103,101,0,103,108,68,101,112,116,104,82,97,110,103,101,102,0,103,108,83,116,101,110,99,105,108,77,97,115,107,83,101,112,97,114,97,116,101,0,103,108,72,105,110,116,0,103,108,80,111,108,121,103,111,110,79,102,102,115,101,116,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,0,103,108,83,97,109,112,108,101,67,111,118,101,114,97,103,101,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,0,103,108,83,116,101,110,99,105,108,70,117,110,99,0,103,108,83,116,101,110,99,105,108,79,112,0,103,108,86,105,101,119,112,111,114,116,0,103,108,67,108,101,97,114,67,111,108,111,114,0,103,108,83,99,105,115,115,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,0,103,108,67,111,108,111,114,77,97,115,107,0,103,108,82,101,110,100,101,114,98,117,102,102,101,114,83,116,111,114,97,103,101,0,103,108,66,108,101,110,100,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,66,108,101,110,100,67,111,108,111,114,0,103,108,83,116,101,110,99,105,108,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,83,116,101,110,99,105,108,79,112,83,101,112,97,114,97,116,101,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,0,103,108,67,111,112,121,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,112,121,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,68,114,97,119,66,117,102,102,101,114,115,0,123,32,77,111,100,117,108,101,46,112,114,105,110,116,69,114,114,40,39,98,97,100,32,110,97,109,101,32,105,110,32,103,101,116,80,114,111,99,65,100,100,114,101,115,115,58,32,39,32,43,32,91,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,44,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,49,41,93,41,59,32,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,110,97,110,0,80,79,83,73,88,0,114,119,97,0,78,83,116,51,95,95,50,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,50,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,78,83,116,51,95,95,50,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,78,83,116,51,95,95,50,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,50,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,83,116,51,95,95,50,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,50,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,50,55,99,111,108,108,97,116,101,73,119,69,69,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,37,112,0,67,0,78,83,116,51,95,95,50,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,50,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,37,112,0,0,0,0,76,0,108,108,0,37,0,0,0,0,0,108,0,78,83,116,51,95,95,50,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,50,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,37,72,58,37,77,58,37,83,0,37,109,47,37,100,47,37,121,0,37,73,58,37,77,58,37,83,32,37,112,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,65,77,0,80,77,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,37,72,58,37,77,58,37,83,78,83,116,51,95,95,50,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,78,83,116,51,95,95,50,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,50,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,50,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,50,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,48,49,50,51,52,53,54,55,56,57,0,37,76,102,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,48,49,50,51,52,53,54,55,56,57,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,37,46,48,76,102,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,50,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,50,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,50,56,109,101,115,115,97,103,101,115,73,119,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,50,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,50,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,50,53,99,116,121,112,101,73,119,69,69,0,102,97,108,115,101,0,116,114,117,101,0,78,83,116,51,95,95,50,56,110,117,109,112,117,110,99,116,73,99,69,69,0,78,83,116,51,95,95,50,56,110,117,109,112,117,110,99,116,73,119,69,69,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,85,115,101,114,115,47,97,100,114,105,97,110,112,97,112,112,47,97,100,105,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,105,110,99,111,109,105,110,103,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([47,118,101,99,116,111,114,0,33,34,118,101,99,116,111,114,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,78,83,116,51,95,95,50,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,85,115,101,114,115,47,97,100,114,105,97,110,112,97,112,112,47,97,100,105,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,105,110,99,111,109,105,110,103,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,33,34,97,108,108,111,99,97,116,111,114,60,84,62,58,58,97,108,108,111,99,97,116,101,58,58,98,97,100,95,97,108,108,111,99,34,0,47,85,115,101,114,115,47,97,100,114,105,97,110,112,97,112,112,47,97,100,105,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,105,110,99,111,109,105,110,103,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,109,101,109,111,114,121,0,97,108,108,111,99,97,116,101,0,37,100,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,83,116,56,98,97,100,95,99,97,115,116,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

  
  
  function _emscripten_get_now() { abort() }
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else window.postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        var argArray = [arg];
        browserIterationFunc = function() {
          Runtime.dynCall('vi', func, argArray);
        };
      } else {
        browserIterationFunc = function() {
          Runtime.dynCall('v', func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        Runtime.dynCall('vii', GLFW.active.charFunc, [GLFW.active.id, charCode]);
      },onKeyChanged:function (event, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        Runtime.dynCall('viiiii', GLFW.active.keyFunc, [GLFW.active.id, key, event.keyCode, status, GLFW.getModBits(GLFW.active)]);
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0); // GLFW_RELEASE
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        Runtime.dynCall('vidd', GLFW.active.cursorPosFunc, [GLFW.active.id, Browser.mouseX, Browser.mouseY]);
      },DOMToGLFWMouseButton:function (event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.cursorEnterFunc, [GLFW.active.id, 1]);
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.cursorEnterFunc, [GLFW.active.id, 0]);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        Runtime.dynCall('viiii', GLFW.active.mouseButtonFunc, [GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active)]);
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        Runtime.dynCall('vidd', GLFW.active.scrollFunc, [GLFW.active.id, sx, sy]);
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requestiong fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        Runtime.dynCall('viii', GLFW.active.windowSizeFunc, [GLFW.active.id, GLFW.active.width, GLFW.active.height]);
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        Runtime.dynCall('viii', GLFW.active.framebufferSizeFunc, [GLFW.active.id, GLFW.active.width, GLFW.active.height]);
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        Module.printErr('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        Module.printErr('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        Runtime.dynCall('viii', win.windowSizeFunc, [win.id, width, height]);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          Runtime.dynCall('vi', win.windowCloseFunc, [win.id]);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwGetVideoModes(monitor, count) {
      setValue(count, 0, 'i32');
      return 0;
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*12)>>2));
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glfwSetWindowFocusCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.windowFocusFunc = cbfun;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glFrustum() {
  Module['printErr']('missing function: emscripten_glFrustum'); abort(-1);
  }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glGetObjectParameterivARB() {
  Module['printErr']('missing function: emscripten_glGetObjectParameterivARB'); abort(-1);
  }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

   
  Module["_round"] = _round;

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
  
      var heapView;
      if (data) {
        heapView = HEAPU8.subarray((data),(data+imageSize));
      } else {
        heapView = null;
      }
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, heapView);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glfwGetMouseButton(winid, button) {
      return GLFW.getMouseButton(winid, button);
    }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

   
  Module["_memset"] = _memset;

  function _glfwMakeContextCurrent(winid) {}

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,lastGamepadState:null,lastGamepadStateFrame:null,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          stringToUTF8(e.key ? e.key : "", JSEvents.keyEvent + 0, 32);
          stringToUTF8(e.code ? e.code : "", JSEvents.keyEvent + 32, 32);
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          stringToUTF8(e.locale ? e.locale : "", JSEvents.keyEvent + 88, 32);
          stringToUTF8(e.char ? e.char : "", JSEvents.keyEvent + 120, 32);
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.keyEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.mouseEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"] || 0;
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-(e["wheelDeltaY"] ? e["wheelDeltaY"] : e["wheelDelta"]) /* 1. Invert to unify direction with the DOM Level 3 wheel event. 2. MSIE does not provide wheelDeltaY, so wheelDelta is used as a fallback. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.uiEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          stringToUTF8(nodeName, JSEvents.focusEvent + 0, 128);
          stringToUTF8(id, JSEvents.focusEvent + 128, 128);
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.focusEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceOrientationEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceMotionEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.orientationChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        stringToUTF8(nodeName, eventStruct + 8, 128);
        stringToUTF8(id, eventStruct + 136, 128);
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.fullscreenChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Runtime.dynCall('iiii', strategy.canvasResizedCallback, [37, 0, strategy.canvasResizedCallbackUserData]);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        stringToUTF8(nodeName, eventStruct + 4, 128);
        stringToUTF8(id, eventStruct + 132, 128);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.pointerlockChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerPointerlockErrorEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = document; // Pointer lock events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.visibilityChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.touchEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // XXX Currently disabled, see bug https://bugzilla.mozilla.org/show_bug.cgi?id=966493
          // Once the above bug is resolved, enable the following condition if possible:
          // allowsDeferredCalls: eventTypeString == 'touchstart',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        stringToUTF8(e.id, eventStruct + 1304, 64);
        stringToUTF8(e.mapping, eventStruct + 1368, 64);
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.gamepadEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.batteryEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};function _emscripten_set_touchcancel_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel");
      return 0;
    }

  function ___lock() {}

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glNormalPointer() {
  Module['printErr']('missing function: emscripten_glNormalPointer'); abort(-1);
  }

  
  var _emscripten_GetProcAddress=undefined;
  Module["_emscripten_GetProcAddress"] = _emscripten_GetProcAddress;
  
  var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,stringCache:{},setErrorCode:function (code) {
        EGL.errorCode = code;
      },chooseConfig:function (display, attribList, config, config_size, numConfigs) { 
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
        // TODO: read attribList.
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002; 
        }
        
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      GLFW.setScrollCallback(winid, cbfun);
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          case 'FloatToInteger': HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i))>>2)]=data[i]; break;
            case 'FloatToInteger': HEAP32[(((params)+(i))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'Float');
    }

  function _emscripten_set_touchstart_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart");
      return 0;
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glfwTerminate() {
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'FloatToInteger');
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glEnableClientState() {
  Module['printErr']('missing function: emscripten_glEnableClientState'); abort(-1);
  }

  function _emscripten_glGetPointerv() {
  Module['printErr']('missing function: emscripten_glGetPointerv'); abort(-1);
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function _emscripten_set_touchend_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend");
      return 0;
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*16)>>2));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      var view;
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function ___gxx_personality_v0() {
    }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _emscripten_glColorPointer() {
  Module['printErr']('missing function: emscripten_glColorPointer'); abort(-1);
  }

   
  Module["_pthread_cond_broadcast"] = _pthread_cond_broadcast;

  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      var view;
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*8)>>2));
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  var _emscripten_asm_const_int=true;

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Integer');
    }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDepthRange(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_set_fullscreenchange_callback(target, userData, useCapture, callbackfunc) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      if (!target) target = document;
      else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4;
      }
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange");
      return 0;
    }

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      var view;
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glBindProgramARB() {
  Module['printErr']('missing function: emscripten_glBindProgramARB'); abort(-1);
  }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _emscripten_glRotatef() {
  Module['printErr']('missing function: emscripten_glRotatef'); abort(-1);
  }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      HEAP32[((params)>>2)]=result;
    }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _emscripten_glClientActiveTexture() {
  Module['printErr']('missing function: emscripten_glClientActiveTexture'); abort(-1);
  }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
  
      var heapView;
      if (data) {
        heapView = HEAPU8.subarray((data),(data+imageSize));
      } else {
        heapView = null;
      }
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, heapView);
    }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

   
  Module["___uremdi3"] = ___uremdi3;

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Float');
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          var program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          var program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxAttributeLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          var program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          var program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxAttributeLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _emscripten_glDrawRangeElements() {
  Module['printErr']('missing function: emscripten_glDrawRangeElements'); abort(-1);
  }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        assert(id !== -1, 'shader not bound to local id');
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _pthread_cond_wait() { return 0; }

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }

  function _emscripten_glTexCoordPointer() {
  Module['printErr']('missing function: emscripten_glTexCoordPointer'); abort(-1);
  }

  function _emscripten_glGetInfoLogARB() {
  Module['printErr']('missing function: emscripten_glGetInfoLogARB'); abort(-1);
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glIsProgram(program) {
      var program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      var view;
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }


  function _emscripten_glUniform4fv(location, count, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _glfwSetWindowIconifyCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.windowIconifyFunc = cbfun;
    }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glDeleteObjectARB() {
  Module['printErr']('missing function: emscripten_glDeleteObjectARB'); abort(-1);
  }

  function _emscripten_set_touchmove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove");
      return 0;
    }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glClearDepth(x0) { GLctx['clearDepth'](x0) }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _glfwSetCharCallback(winid, cbfun) {
      GLFW.setCharCallback(winid, cbfun);
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.cursorEnterFunc = cbfun;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glDrawBuffers(n, bufs) {
      var bufArray = [];
      for (var i = 0; i < n; i++)
        bufArray.push(HEAP32[(((bufs)+(i*4))>>2)]);
  
      GLctx['drawBuffers'](bufArray);
    }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;

  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

   
  Module["_sbrk"] = _sbrk;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      if (bufSize > 0 && source) {
        var numBytesWrittenExclNull = stringToUTF8(result, source, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      GLFW.setKeyCallback(winid, cbfun);
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  function _emscripten_set_main_loop_arg(func, arg, fps, simulateInfiniteLoop) {
      _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg);
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
  
      var heapView;
      if (data) {
        heapView = HEAPU8.subarray((data),(data+imageSize));
      } else {
        heapView = null;
      }
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, heapView);
    }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glLoadMatrixf() {
  Module['printErr']('missing function: emscripten_glLoadMatrixf'); abort(-1);
  }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function ___unlock() {}

  function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  function _glfwDestroyWindow(winid) {
      return GLFW.destroyWindow(winid);
    }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _glfwSetErrorCallback(cbfun) {
      GLFW.errorFunc = cbfun;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glfwGetKey(winid, key) {
      return GLFW.getKey(winid, key);
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glGenVertexArrays(n, arrays) {
  
      for (var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

   
  Module["_pthread_self"] = _pthread_self;

  function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
var GLctx; GL.init();
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vd(x) { Module["printErr"]("Invalid function pointer called with signature 'vd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddd(x) { Module["printErr"]("Invalid function pointer called with signature 'viddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdi(x) { Module["printErr"]("Invalid function pointer called with signature 'vdi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vd(index,a1) {
  try {
    Module["dynCall_vd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vdddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdi(index,a1,a2) {
  try {
    Module["dynCall_vdi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_vd": nullFunc_vd, "nullFunc_vid": nullFunc_vid, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viddd": nullFunc_viddd, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_viid": nullFunc_viid, "nullFunc_vidddd": nullFunc_vidddd, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_vdddddd": nullFunc_vdddddd, "nullFunc_vdddd": nullFunc_vdddd, "nullFunc_vdd": nullFunc_vdd, "nullFunc_v": nullFunc_v, "nullFunc_vdi": nullFunc_vdi, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vd": invoke_vd, "invoke_vid": invoke_vid, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viddd": invoke_viddd, "invoke_iiiiii": invoke_iiiiii, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viii": invoke_viii, "invoke_viid": invoke_viid, "invoke_vidddd": invoke_vidddd, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_iii": invoke_iii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_vdddddd": invoke_vdddddd, "invoke_vdddd": invoke_vdddd, "invoke_vdd": invoke_vdd, "invoke_v": invoke_v, "invoke_vdi": invoke_vdi, "invoke_iiiiid": invoke_iiiiid, "invoke_viiii": invoke_viiii, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_glUseProgram": _glUseProgram, "_strftime_l": _strftime_l, "_glfwCreateWindow": _glfwCreateWindow, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_glFrontFace": _emscripten_glFrontFace, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_glBindBuffer": _glBindBuffer, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_glGetShaderInfoLog": _glGetShaderInfoLog, "__addDays": __addDays, "_emscripten_set_fullscreenchange_callback": _emscripten_set_fullscreenchange_callback, "_emscripten_set_touchmove_callback": _emscripten_set_touchmove_callback, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_glDisable": _glDisable, "_glBlendFunc": _glBlendFunc, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_glGetAttribLocation": _glGetAttribLocation, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop_arg": _emscripten_set_main_loop_arg, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_emscripten_set_touchstart_callback": _emscripten_set_touchstart_callback, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_glUniform4f": _glUniform4f, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_llvm_stacksave": _llvm_stacksave, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_glfwInit": _glfwInit, "__isLeapYear": __isLeapYear, "_glfwSetWindowFocusCallback": _glfwSetWindowFocusCallback, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "___cxa_atexit": ___cxa_atexit, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall145": ___syscall145, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "___syscall140": ___syscall140, "_glfwSetErrorCallback": _glfwSetErrorCallback, "_glfwDefaultWindowHints": _glfwDefaultWindowHints, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "___syscall146": ___syscall146, "_glfwDestroyWindow": _glfwDestroyWindow, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_glVertexAttribPointer": _glVertexAttribPointer, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_emscripten_glIsShader": _emscripten_glIsShader, "_llvm_stackrestore": _llvm_stackrestore, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_strftime": _strftime, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_emscripten_glClear": _emscripten_glClear, "_glDrawElements": _glDrawElements, "_glBufferSubData": _glBufferSubData, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_glViewport": _glViewport, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "___setErrNo": ___setErrNo, "_eglGetProcAddress": _eglGetProcAddress, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "___resumeException": ___resumeException, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_glEnable": _glEnable, "_glGenTextures": _glGenTextures, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_glGetString": _glGetString, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "emscriptenWebGLGet": emscriptenWebGLGet, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_get_now": _emscripten_get_now, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_glAttachShader": _glAttachShader, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_emscripten_glEnable": _emscripten_glEnable, "_glCreateProgram": _glCreateProgram, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_emscripten_glClearDepth": _emscripten_glClearDepth, "___lock": ___lock, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glReadPixels": _emscripten_glReadPixels, "___syscall5": ___syscall5, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_time": _time, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_exit": _exit, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_glCullFace": _glCullFace, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_glfwGetVideoModes": _glfwGetVideoModes, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "___syscall221": ___syscall221, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_glClearDepthf": _glClearDepthf, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_glfwSetWindowShouldClose": _glfwSetWindowShouldClose, "_pthread_once": _pthread_once, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_glBindTexture": _glBindTexture, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glHint": _emscripten_glHint, "_glfwSetCharCallback": _glfwSetCharCallback, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "_glGetFloatv": _glGetFloatv, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_pthread_getspecific": _pthread_getspecific, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "___syscall6": ___syscall6, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_glCreateShader": _glCreateShader, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_glCompileShader": _glCompileShader, "_glfwGetMouseButton": _glfwGetMouseButton, "_emscripten_glColorPointer": _emscripten_glColorPointer, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_glfwSetWindowIconifyCallback": _glfwSetWindowIconifyCallback, "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "_glfwTerminate": _glfwTerminate, "_glFrontFace": _glFrontFace, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_glfwSwapInterval": _glfwSwapInterval, "_glUniform1i": _glUniform1i, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_abort": _abort, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "___cxa_throw": ___cxa_throw, "_glDeleteBuffers": _glDeleteBuffers, "_glBufferData": _glBufferData, "_glTexImage2D": _glTexImage2D, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "___cxa_pure_virtual": ___cxa_pure_virtual, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_pthread_cond_wait": _pthread_cond_wait, "_glDeleteShader": _glDeleteShader, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_glGetProgramiv": _glGetProgramiv, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_glfwGetTime": _glfwGetTime, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_pthread_key_create": _pthread_key_create, "_glDrawArrays": _glDrawArrays, "__arraySum": __arraySum, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_emscripten_set_touchcancel_callback": _emscripten_set_touchcancel_callback, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_glfwGetKey": _glfwGetKey, "_glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor, "_glLinkProgram": _glLinkProgram, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_emscripten_set_touchend_callback": _emscripten_set_touchend_callback, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_glGetShaderiv": _glGetShaderiv, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_glGetUniformLocation": _glGetUniformLocation, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "___gxx_personality_v0": ___gxx_personality_v0, "_glClear": _glClear, "_emscripten_glFrustum": _emscripten_glFrustum, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "__exit": __exit, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_glBindAttribLocation": _glBindAttribLocation, "_glPixelStorei": _glPixelStorei, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_glfwGetCursorPos": _glfwGetCursorPos, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_glfwSwapBuffers": _glfwSwapBuffers, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_glfwWindowHint": _glfwWindowHint, "_pthread_setspecific": _pthread_setspecific, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_glTexParameteri": _glTexParameteri, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_atexit": _atexit, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_glClearColor": _glClearColor, "_glfwSetCursorPosCallback": _glfwSetCursorPosCallback, "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_vd=env.nullFunc_vd;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viddd=env.nullFunc_viddd;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_vidddd=env.nullFunc_vidddd;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_vdddddd=env.nullFunc_vdddddd;
  var nullFunc_vdddd=env.nullFunc_vdddd;
  var nullFunc_vdd=env.nullFunc_vdd;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vdi=env.nullFunc_vdi;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vd=env.invoke_vd;
  var invoke_vid=env.invoke_vid;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viddd=env.invoke_viddd;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_viid=env.invoke_viid;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_vdddddd=env.invoke_vdddddd;
  var invoke_vdddd=env.invoke_vdddd;
  var invoke_vdd=env.invoke_vdd;
  var invoke_v=env.invoke_v;
  var invoke_vdi=env.invoke_vdi;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _glUseProgram=env._glUseProgram;
  var _strftime_l=env._strftime_l;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _glBindBuffer=env._glBindBuffer;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var __addDays=env.__addDays;
  var _emscripten_set_fullscreenchange_callback=env._emscripten_set_fullscreenchange_callback;
  var _emscripten_set_touchmove_callback=env._emscripten_set_touchmove_callback;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _glDisable=env._glDisable;
  var _glBlendFunc=env._glBlendFunc;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop_arg=env._emscripten_set_main_loop_arg;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glVertexPointer=env._emscripten_glVertexPointer;
  var _emscripten_set_touchstart_callback=env._emscripten_set_touchstart_callback;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _glUniform4f=env._glUniform4f;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _llvm_stacksave=env._llvm_stacksave;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _emscripten_glDeleteObjectARB=env._emscripten_glDeleteObjectARB;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _glfwInit=env._glfwInit;
  var __isLeapYear=env.__isLeapYear;
  var _glfwSetWindowFocusCallback=env._glfwSetWindowFocusCallback;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _emscripten_glGetPointerv=env._emscripten_glGetPointerv;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var ___cxa_atexit=env.___cxa_atexit;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall145=env.___syscall145;
  var _emscripten_glBindProgramARB=env._emscripten_glBindProgramARB;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var ___syscall140=env.___syscall140;
  var _glfwSetErrorCallback=env._glfwSetErrorCallback;
  var _glfwDefaultWindowHints=env._glfwDefaultWindowHints;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var ___syscall146=env.___syscall146;
  var _glfwDestroyWindow=env._glfwDestroyWindow;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _glfwSetScrollCallback=env._glfwSetScrollCallback;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glDrawArraysInstanced=env._emscripten_glDrawArraysInstanced;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _strftime=env._strftime;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _emscripten_glClear=env._emscripten_glClear;
  var _glDrawElements=env._glDrawElements;
  var _glBufferSubData=env._glBufferSubData;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _glViewport=env._glViewport;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var ___setErrNo=env.___setErrNo;
  var _eglGetProcAddress=env._eglGetProcAddress;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glDepthFunc=env._glDepthFunc;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _emscripten_glClientActiveTexture=env._emscripten_glClientActiveTexture;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var ___resumeException=env.___resumeException;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _emscripten_glRotatef=env._emscripten_glRotatef;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _glEnable=env._glEnable;
  var _glGenTextures=env._glGenTextures;
  var _emscripten_glMatrixMode=env._emscripten_glMatrixMode;
  var _glGetString=env._glGetString;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_glNormalPointer=env._emscripten_glNormalPointer;
  var _glAttachShader=env._glAttachShader;
  var _emscripten_glTexCoordPointer=env._emscripten_glTexCoordPointer;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var _glCreateProgram=env._glCreateProgram;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _emscripten_glClearDepth=env._emscripten_glClearDepth;
  var ___lock=env.___lock;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var ___syscall5=env.___syscall5;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _time=env._time;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _exit=env._exit;
  var _emscripten_glEnableClientState=env._emscripten_glEnableClientState;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _emscripten_glDrawRangeElements=env._emscripten_glDrawRangeElements;
  var _glCullFace=env._glCullFace;
  var _emscripten_glLoadIdentity=env._emscripten_glLoadIdentity;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _glfwGetVideoModes=env._glfwGetVideoModes;
  var _emscripten_glLoadMatrixf=env._emscripten_glLoadMatrixf;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var ___syscall221=env.___syscall221;
  var _glCompressedTexImage2D=env._glCompressedTexImage2D;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var _glClearDepthf=env._glClearDepthf;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var emscriptenWebGLGetUniform=env.emscriptenWebGLGetUniform;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var _emscripten_glDeleteVertexArrays=env._emscripten_glDeleteVertexArrays;
  var _glfwSetWindowShouldClose=env._glfwSetWindowShouldClose;
  var _pthread_once=env._pthread_once;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var _glBindTexture=env._glBindTexture;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var _emscripten_glHint=env._emscripten_glHint;
  var _glfwSetCharCallback=env._glfwSetCharCallback;
  var emscriptenWebGLGetVertexAttrib=env.emscriptenWebGLGetVertexAttrib;
  var _glGetFloatv=env._glGetFloatv;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _pthread_getspecific=env._pthread_getspecific;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var ___syscall6=env.___syscall6;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _glCreateShader=env._glCreateShader;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _glCompileShader=env._glCompileShader;
  var _glfwGetMouseButton=env._glfwGetMouseButton;
  var _emscripten_glColorPointer=env._emscripten_glColorPointer;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _glfwSetWindowIconifyCallback=env._glfwSetWindowIconifyCallback;
  var _emscripten_glDrawBuffers=env._emscripten_glDrawBuffers;
  var _glfwTerminate=env._glfwTerminate;
  var _glFrontFace=env._glFrontFace;
  var _emscripten_glGetObjectParameterivARB=env._emscripten_glGetObjectParameterivARB;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _glfwSwapInterval=env._glfwSwapInterval;
  var _glUniform1i=env._glUniform1i;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _abort=env._abort;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var ___cxa_throw=env.___cxa_throw;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _emscripten_glDrawElementsInstanced=env._emscripten_glDrawElementsInstanced;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _glDeleteShader=env._glDeleteShader;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var _glGetProgramiv=env._glGetProgramiv;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var _glfwGetTime=env._glfwGetTime;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var _pthread_key_create=env._pthread_key_create;
  var _glDrawArrays=env._glDrawArrays;
  var __arraySum=env.__arraySum;
  var _emscripten_glBindVertexArray=env._emscripten_glBindVertexArray;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _emscripten_set_touchcancel_callback=env._emscripten_set_touchcancel_callback;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _glfwGetKey=env._glfwGetKey;
  var _glfwGetPrimaryMonitor=env._glfwGetPrimaryMonitor;
  var _glLinkProgram=env._glLinkProgram;
  var _emscripten_glVertexAttribDivisor=env._emscripten_glVertexAttribDivisor;
  var _emscripten_set_touchend_callback=env._emscripten_set_touchend_callback;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _glGetShaderiv=env._glGetShaderiv;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _emscripten_glGetInfoLogARB=env._emscripten_glGetInfoLogARB;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _glClear=env._glClear;
  var _emscripten_glFrustum=env._emscripten_glFrustum;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var __exit=env.__exit;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _glPixelStorei=env._glPixelStorei;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _emscripten_glDepthRange=env._emscripten_glDepthRange;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _glfwWindowHint=env._glfwWindowHint;
  var _pthread_setspecific=env._pthread_setspecific;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var _emscripten_glGenVertexArrays=env._emscripten_glGenVertexArrays;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _glTexParameteri=env._glTexParameteri;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _atexit=env._atexit;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var _glClearColor=env._glClearColor;
  var _glfwSetCursorPosCallback=env._glfwSetCursorPosCallback;
  var _glfwSetCursorEnterCallback=env._glfwSetCursorEnterCallback;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN5Board6delrowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01922 = 0, $$024 = 0, $$121 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 if ($2) {
  $$024 = $1;
  while(1) {
   $4 = HEAP32[$0>>2]|0;
   $5 = ($4|0)>(0);
   $6 = (($$024) + -1)|0;
   if ($5) {
    $$01922 = 0;
    while(1) {
     $9 = ((((($0)) + 8|0) + (($6*40)|0)|0) + ($$01922<<2)|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ((((($0)) + 8|0) + (($$024*40)|0)|0) + ($$01922<<2)|0);
     HEAP32[$11>>2] = $10;
     $12 = (($$01922) + 1)|0;
     $13 = HEAP32[$0>>2]|0;
     $14 = ($12|0)<($13|0);
     if ($14) {
      $$01922 = $12;
     } else {
      break;
     }
    }
   }
   $3 = ($$024|0)>(1);
   if ($3) {
    $$024 = $6;
   } else {
    break;
   }
  }
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)>(1);
 if ($8) {
  $$121 = 1;
 } else {
  return;
 }
 while(1) {
  $15 = (((($0)) + 8|0) + ($$121<<2)|0);
  HEAP32[$15>>2] = -1;
  $16 = (($$121) + 1)|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = ($16|0)<($17|0);
  if ($18) {
   $$121 = $16;
  } else {
   break;
  }
 }
 return;
}
function __ZN5Board5clearEv($0) {
 $0 = $0|0;
 var $$0$ = 0, $$020$lcssa = 0, $$02028 = 0, $$02226 = 0, $$02324 = 0, $$025 = 0, $$121 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $$020$lcssa = 0;
  return ($$020$lcssa|0);
 }
 $$02028 = 0;$$02226 = 0;
 while(1) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   $6 = HEAP32[$0>>2]|0;
   $$02324 = 0;$$025 = 0;
   while(1) {
    $7 = ((((($0)) + 8|0) + (($$02226*40)|0)|0) + ($$02324<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $not$ = ($8|0)!=(-1);
    $9 = $not$&1;
    $$0$ = (($9) + ($$025))|0;
    $10 = (($$02324) + 1)|0;
    $11 = ($10|0)<($6|0);
    if ($11) {
     $$02324 = $10;$$025 = $$0$;
    } else {
     break;
    }
   }
   $12 = ($$0$|0)==(10);
   if ($12) {
    $13 = (($$02028) + 1)|0;
    __ZN5Board6delrowEi($0,$$02226);
    $$121 = $13;
   } else {
    $$121 = $$02028;
   }
  } else {
   $$121 = $$02028;
  }
  $14 = (($$02226) + 1)|0;
  $15 = HEAP32[$1>>2]|0;
  $16 = ($14|0)<($15|0);
  if ($16) {
   $$02028 = $$121;$$02226 = $14;
  } else {
   $$020$lcssa = $$121;
   break;
  }
 }
 return ($$020$lcssa|0);
}
function __ZN5Board5desenEiiRK9Texture2D($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$01820 = 0, $$019 = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $exitcond21 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $tmpcast$byval_copy = sp + 48|0;
 $$byval_copy1 = sp + 24|0;
 $4 = sp + 44|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = ((($4)) + 1|0);
 $8 = ((($4)) + 2|0);
 $9 = ((($4)) + 3|0);
 $$01820 = 0;
 while(1) {
  $10 = ($$01820*24)|0;
  $11 = $10 | 1;
  $$019 = 0;
  while(1) {
   $12 = ($$019*24)|0;
   $13 = ((((($0)) + 8|0) + (($$01820*40)|0)|0) + ($$019<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(-1);
   if ($15) {
    $16 = $12 | 1;
    HEAP8[$4>>0] = -126;
    HEAP8[$7>>0] = -126;
    HEAP8[$8>>0] = -126;
    HEAP8[$9>>0] = -1;
    ;HEAP8[$tmpcast$byval_copy>>0]=HEAP8[$4>>0]|0;HEAP8[$tmpcast$byval_copy+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$tmpcast$byval_copy+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$tmpcast$byval_copy+3>>0]=HEAP8[$4+3>>0]|0;
    _DrawRectangle($16,$11,23,23,$tmpcast$byval_copy);
   } else {
    ;HEAP32[$5>>2]=HEAP32[$3>>2]|0;HEAP32[$5+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$3+16>>2]|0;
    $17 = HEAP32[$13>>2]|0;
    $18 = HEAP32[8302]|0;
    $19 = (($18) + ($17<<2)|0);
    $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8)|(HEAPU8[$19+2>>0]<<16)|(HEAPU8[$19+3>>0]<<24);
    HEAP32[$6>>2] = $20;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$5+16>>2]|0;
    ;HEAP8[$tmpcast$byval_copy>>0]=HEAP8[$6>>0]|0;HEAP8[$tmpcast$byval_copy+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$tmpcast$byval_copy+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$tmpcast$byval_copy+3>>0]=HEAP8[$6+3>>0]|0;
    _DrawTexture($$byval_copy1,$12,$10,$tmpcast$byval_copy);
   }
   $21 = (($$019) + 1)|0;
   $exitcond = ($21|0)==(10);
   if ($exitcond) {
    break;
   } else {
    $$019 = $21;
   }
  }
  $22 = (($$01820) + 1)|0;
  $exitcond21 = ($22|0)==(20);
  if ($exitcond21) {
   break;
  } else {
   $$01820 = $22;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5Board14IsPositionFreeERK5Blockiiii($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$03845 = 0, $$044 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 128|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($3) + 1)|0;
 $9 = (($8) + ($7))|0;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)<($11|0);
 if (!($12)) {
  $$1 = 0;
  return ($$1|0);
 }
 $13 = ((($1)) + 120|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$6>>2]|0;
 $16 = ($14|0)>($15|0);
 if ($16) {
  $$1 = 1;
  return ($$1|0);
 }
 $17 = ((($1)) + 116|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($1)) + 124|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18|0)>($20|0);
 $22 = HEAP32[$6>>2]|0;
 $23 = (($5) + ($3))|0;
 $24 = (($4) + ($2))|0;
 $$03845 = $14;
 L7: while(1) {
  if (!($21)) {
   $25 = (($23) + ($$03845))|0;
   $$044 = $18;
   while(1) {
    $26 = ((((($1)) + 8|0) + (($$03845*20)|0)|0) + ($$044<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(1);
    if ($28) {
     $29 = HEAP32[$10>>2]|0;
     $30 = ($25|0)<($29|0);
     if (!($30)) {
      $$1 = 0;
      label = 12;
      break L7;
     }
     $31 = (($24) + ($$044))|0;
     $32 = HEAP32[$0>>2]|0;
     $33 = ($31|0)>=($32|0);
     $34 = $31 | $25;
     $35 = ($34|0)<(0);
     $or$cond = $35 | $33;
     if ($or$cond) {
      $$1 = 0;
      label = 12;
      break L7;
     }
     $36 = ((((($0)) + 8|0) + (($25*40)|0)|0) + ($31<<2)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(-1);
     if (!($38)) {
      $$1 = 0;
      label = 12;
      break L7;
     }
    }
    $39 = (($$044) + 1)|0;
    $40 = ($$044|0)<($20|0);
    if ($40) {
     $$044 = $39;
    } else {
     break;
    }
   }
  }
  $41 = (($$03845) + 1)|0;
  $42 = ($$03845|0)<($22|0);
  if ($42) {
   $$03845 = $41;
  } else {
   $$1 = 1;
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  return ($$1|0);
 }
 return (0)|0;
}
function __ZN5Board8setBlockERK5Blockiii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$01921 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 120|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 128|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)>($8|0);
 if ($9) {
  return;
 }
 $10 = ((($1)) + 116|0);
 $11 = ((($1)) + 124|0);
 $$01921 = $6;
 while(1) {
  $12 = HEAP32[$10>>2]|0;
  $13 = HEAP32[$11>>2]|0;
  $14 = ($12|0)>($13|0);
  if (!($14)) {
   $15 = (($$01921) + ($3))|0;
   $$020 = $12;
   while(1) {
    $19 = ((((($1)) + 8|0) + (($$01921*20)|0)|0) + ($$020<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(1);
    if ($21) {
     $22 = (($$020) + ($2))|0;
     $23 = ((((($0)) + 8|0) + (($15*40)|0)|0) + ($22<<2)|0);
     HEAP32[$23>>2] = $4;
    }
    $24 = (($$020) + 1)|0;
    $25 = HEAP32[$11>>2]|0;
    $26 = ($$020|0)<($25|0);
    if ($26) {
     $$020 = $24;
    } else {
     break;
    }
   }
  }
  $16 = (($$01921) + 1)|0;
  $17 = HEAP32[$7>>2]|0;
  $18 = ($$01921|0)<($17|0);
  if ($18) {
   $$01921 = $16;
  } else {
   break;
  }
 }
 return;
}
function __ZN5Board5resetEv($0) {
 $0 = $0|0;
 var $$010 = 0, $$0911 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  return;
 }
 $$0911 = 0;
 while(1) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   $$010 = 0;
   while(1) {
    $6 = ((((($0)) + 8|0) + (($$0911*40)|0)|0) + ($$010<<2)|0);
    HEAP32[$6>>2] = -1;
    $7 = (($$010) + 1)|0;
    $8 = HEAP32[$0>>2]|0;
    $9 = ($7|0)<($8|0);
    if ($9) {
     $$010 = $7;
    } else {
     break;
    }
   }
  }
  $10 = (($$0911) + 1)|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = ($10|0)<($11|0);
  if ($12) {
   $$0911 = $10;
  } else {
   break;
  }
 }
 return;
}
function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $3 = sp;
 $4 = sp + 8|0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($3,$0);
 $5 = HEAP8[$3>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
  STACKTOP = sp;return ($0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + -12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($0) + ($9)|0);
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$4>>2] = $12;
 $13 = HEAP32[$0>>2]|0;
 $14 = ((($13)) + -12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($0) + ($15)|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($1) + ($2)|0);
 $20 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $21 = ((($16)) + 76|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($20,$22)|0);
 if ($23) {
  $24 = (__ZNKSt3__28ios_base6getlocEv($16)|0);
  HEAP32[$$byval_copy>>2] = $24;
  $25 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy,38408)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (FUNCTION_TABLE_iii[$28 & 31]($25,32)|0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  $30 = $29 << 24 >> 24;
  HEAP32[$21>>2] = $30;
 }
 $31 = HEAP32[$21>>2]|0;
 $32 = $31&255;
 $33 = $18 & 176;
 $34 = ($33|0)==(32);
 $35 = $34 ? $19 : $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 $36 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$1,$35,$19,$16,$32)|0);
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
  STACKTOP = sp;return ($0|0);
 }
 $38 = HEAP32[$0>>2]|0;
 $39 = ((($38)) + -12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($0) + ($40)|0);
 $42 = ((($41)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 | 5;
 __ZNSt3__28ios_base5clearEj($41,$44);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$sroa$0$0$copyload42 = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$sroa$0$2 = 0;
  STACKTOP = sp;return ($$sroa$0$2|0);
 }
 $9 = $3;
 $10 = $1;
 $11 = (($9) - ($10))|0;
 $12 = ((($4)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>($11|0);
 $15 = (($13) - ($11))|0;
 $$0 = $14 ? $15 : 0;
 $16 = $2;
 $17 = (($16) - ($10))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = HEAP32[$7>>2]|0;
  $20 = ((($19)) + 48|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 31]($7,$1,$17)|0);
  $23 = ($22|0)==($17|0);
  if (!($23)) {
   HEAP32[$0>>2] = 0;
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 }
 $24 = ($$0|0)>(0);
 do {
  if ($24) {
   ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($6,$$0,$5);
   $25 = HEAP32[$0>>2]|0;
   $26 = ((($6)) + 11|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = ($27<<24>>24)<(0);
   $29 = HEAP32[$6>>2]|0;
   $30 = $28 ? $29 : $6;
   $31 = HEAP32[$25>>2]|0;
   $32 = ((($31)) + 48|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (FUNCTION_TABLE_iiii[$33 & 31]($25,$30,$$0)|0);
   $35 = ($34|0)==($$0|0);
   if ($35) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
    break;
   }
   HEAP32[$0>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 } while(0);
 $36 = (($9) - ($16))|0;
 $37 = ($36|0)>(0);
 if ($37) {
  $38 = HEAP32[$0>>2]|0;
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iiii[$41 & 31]($38,$2,$36)|0);
  $43 = ($42|0)==($36|0);
  if (!($43)) {
   HEAP32[$0>>2] = 0;
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 }
 HEAP32[$12>>2] = 0;
 $$sroa$0$0$copyload42 = HEAP32[$0>>2]|0;
 $$sroa$0$2 = $$sroa$0$0$copyload42;
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__211char_traitsIcE11eq_int_typeEii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 return ($2|0);
}
function __ZNSt3__211char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv($0) {
 $0 = $0|0;
 var $$ = 0, $$2 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$2 = 0;
  return ($$2|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($0)|0);
 $8 = (_fclose($2)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$2 = 0;
  return ($$2|0);
 }
 $10 = ($7|0)==(0);
 $$ = $10 ? $0 : 0;
 HEAP32[$1>>2] = 0;
 $$2 = $$;
 return ($$2|0);
}
function __ZN4GameC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 __ZN10MainScreenC2ER4Game($1,$0);
 $2 = ((($0)) + 48|0);
 __ZN10GameScreenC2ER4Game($2,$0);
 $3 = ((($0)) + 8|0);
 HEAPF32[$3>>2] = 0.5;
 return;
}
function __ZN10MainScreenC2ER4Game($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ptr = 0, $$ptr6 = 0, $$ptr7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 __ZN6ScreenC2ER4Game($0,$1);
 HEAP32[$0>>2] = (1640);
 $3 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $4 = (__ZNSt3__211char_traitsIcE6lengthEPKc(13720)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2,13720,$4);
 $$ptr = ((($2)) + 12|0);
 ;HEAP32[$$ptr>>2]=0|0;HEAP32[$$ptr+4>>2]=0|0;HEAP32[$$ptr+8>>2]=0|0;
 $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(13725)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr,13725,$5);
 $$ptr6 = ((($2)) + 24|0);
 ;HEAP32[$$ptr6>>2]=0|0;HEAP32[$$ptr6+4>>2]=0|0;HEAP32[$$ptr6+8>>2]=0|0;
 $6 = (__ZNSt3__211char_traitsIcE6lengthEPKc(13730)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr6,13730,$6);
 $$ptr7 = ((($2)) + 36|0);
 ;HEAP32[$$ptr7>>2]=0|0;HEAP32[$$ptr7+4>>2]=0|0;HEAP32[$$ptr7+8>>2]=0|0;
 $7 = (__ZNSt3__211char_traitsIcE6lengthEPKc(13737)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr7,13737,$7);
 HEAP32[$3>>2] = 0;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 16|0);
 HEAP32[$9>>2] = 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj($3,4);
 $10 = ((($2)) + 48|0);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPKS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_j($3,$2,$10,4);
 $11 = ((($2)) + 36|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
 $12 = ((($2)) + 24|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
 $13 = ((($2)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10GameScreenC2ER4Game($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ScreenC2ER4Game($0,$1);
 HEAP32[$0>>2] = (1616);
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 20|0);
 __ZN5BoardC2Ev($5);
 $6 = ((($0)) + 852|0);
 HEAP32[$6>>2] = 0;
 return;
}
function __ZN6ScreenC2ER4Game($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1592);
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN5BoardC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 10;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 20;
 return;
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 return ($1|0);
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(357913941);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(1504|0),(109|0));
  // unreachable;
 } else {
  $6 = ($1*12)|0;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + (($1*12)|0)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPKS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$07$i = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = ($1|0)==($2|0);
 if (!($6)) {
  $$07$i = $1;
  while(1) {
   $7 = HEAP32[$5>>2]|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($7,$$07$i);
   $8 = ((($$07$i)) + 12|0);
   $9 = HEAP32[$5>>2]|0;
   $10 = ((($9)) + 12|0);
   HEAP32[$5>>2] = $10;
   $11 = ($8|0)==($2|0);
   if ($11) {
    break;
   } else {
    $$07$i = $8;
   }
  }
 }
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -12|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==($1|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 __ZdlPv($10);
 return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 357913941;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 12)&-1;
 $7 = (($2) + (($6*12)|0)|0);
 $8 = (($2) + (($1*12)|0)|0);
 __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4GameD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 __ZN10GameScreenD2Ev($1);
 $2 = ((($0)) + 20|0);
 __ZN10MainScreenD2Ev($2);
 return;
}
function __ZN10GameScreenD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1616);
 $1 = ((($0)) + 8|0);
 __ZNSt3__213__vector_baseI5BlockNS_9allocatorIS1_EEED2Ev($1);
 return;
}
function __ZN10MainScreenD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1640);
 $1 = ((($0)) + 8|0);
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($1);
 return;
}
function __ZNSt3__213__vector_baseI5BlockNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -132|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = (($8>>>0) / 132)&-1;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + (($10*132)|0)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZN4Game4initEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($0)) + 20|0);
 __ZN10MainScreen4initEv($2);
 $3 = ((($0)) + 48|0);
 __ZN10GameScreen4initEv($3);
 __ZN4Game9setScreenEP6Screen($0,$2);
 return;
}
function __ZN4Game9setScreenEP6Screen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZN4Game6unloadEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4Game6updateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_IsWindowMinimized()|0);
 if (!($1)) {
  $2 = (_IsWindowFocused()|0);
  if ($2) {
   $11 = HEAP32[$0>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    return;
   }
   $13 = HEAP32[$11>>2]|0;
   $14 = ((($13)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vi[$15 & 255]($11);
   return;
  }
 }
 $3 = (+_GetFrameTime());
 $4 = ((($0)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 HEAPF32[$4>>2] = $6;
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 > $8;
 if (!($9)) {
  return;
 }
 $10 = $6 - $8;
 HEAPF32[$4>>2] = $10;
 return;
}
function __ZN4Game4drawEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 255]($1);
 return;
}
function __ZN10GameScreen4initEv($0) {
 $0 = $0|0;
 var $$016 = 0, $$028 = 0, $$byval_copy = 0, $$cast = 0, $$cast$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy = sp + 176|0;
 $1 = sp + 44|0;
 $2 = sp + 32|0;
 $3 = sp + 12|0;
 $4 = sp;
 __ZN5BlockC2Ev($1);
 $5 = ((($0)) + 912|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 908|0);
 HEAP32[$6>>2] = 1;
 $7 = ((($0)) + 920|0);
 HEAP8[$7>>0] = 0;
 $8 = (_StorageLoadValue(0)|0);
 $9 = ((($0)) + 916|0);
 HEAP32[$9>>2] = $8;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $10 = (__ZNSt3__211char_traitsIcE6lengthEPKc(13827)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2,13827,$10);
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(3);
 if ($15) {
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($2,13840)|0);
  $$016 = 18;
 } else {
  $$016 = 7;
 }
 $16 = ((($0)) + 8|0);
 $17 = ((($0)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$16>>2]|0;
 $20 = (($18) - ($19))|0;
 $21 = (($20|0) / 132)&-1;
 $$cast$i = $19;
 $$cast = $18;
 $22 = ($$cast|0)==($$cast$i|0);
 if (!($22)) {
  $scevgep$i$i$i = ((($$cast)) + -132|0);
  $23 = $scevgep$i$i$i;
  $24 = (($23) - ($19))|0;
  $25 = (($24>>>0) / 132)&-1;
  $26 = $25 ^ -1;
  $scevgep4$i$i$i = (($$cast) + (($26*132)|0)|0);
  HEAP32[$17>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE17__annotate_shrinkEj($16,$21);
 $27 = ((($2)) + 11|0);
 $28 = ((($2)) + 4|0);
 $29 = ((($0)) + 16|0);
 $$028 = 1;
 while(1) {
  __ZNSt3__29to_stringEi($4,$$028);
  $49 = HEAP8[$27>>0]|0;
  $50 = ($49<<24>>24)<(0);
  $51 = HEAP32[$2>>2]|0;
  $52 = $50 ? $51 : $2;
  $53 = HEAP32[$28>>2]|0;
  $54 = $49&255;
  $55 = $50 ? $53 : $54;
  $56 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($4,0,$52,$55)|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$56>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$56+8>>2]|0;
  ;HEAP32[$56>>2]=0|0;HEAP32[$56+4>>2]=0|0;HEAP32[$56+8>>2]=0|0;
  $57 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($$byval_copy,13855)|0);
  ;HEAP32[$3>>2]=HEAP32[$57>>2]|0;HEAP32[$3+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$57+8>>2]|0;
  ;HEAP32[$57>>2]=0|0;HEAP32[$57+4>>2]=0|0;HEAP32[$57+8>>2]=0|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  __ZN5Block6citireERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($1,$3);
  __ZN5Block13computeBoundsEv($1);
  $58 = HEAP32[$17>>2]|0;
  $59 = HEAP32[$29>>2]|0;
  $60 = ($58|0)==($59|0);
  if ($60) {
   __ZNSt3__26vectorI5BlockNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($16,$1);
  } else {
   __ZNSt3__26vectorI5BlockNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($$byval_copy,$16,1);
   $61 = HEAP32[$17>>2]|0;
   _memcpy(($61|0),($1|0),132)|0;
   __ZNSt3__26vectorI5BlockNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($$byval_copy);
   $62 = HEAP32[$17>>2]|0;
   $63 = ((($62)) + 132|0);
   HEAP32[$17>>2] = $63;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $64 = (($$028) + 1)|0;
  $65 = ($$028|0)<($$016|0);
  if ($65) {
   $$028 = $64;
  } else {
   break;
  }
 }
 $30 = ((($0)) + 20|0);
 __ZN5Board5resetEv($30);
 $31 = ((($0)) + 836|0);
 HEAP8[$31>>0] = 0;
 $32 = (__ZN10GameScreen11GetnxtPieceEv($0)|0);
 $33 = ((($0)) + 840|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$16>>2]|0;
 $35 = (($34) + (($32*132)|0)|0);
 $36 = ((($0)) + 848|0);
 HEAP32[$36>>2] = $35;
 $37 = (__ZN10GameScreen11GetnxtPieceEv($0)|0);
 $38 = ((($0)) + 844|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($0)) + 852|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($0)) + 856|0);
 HEAP32[$40>>2] = 3;
 $41 = HEAP32[$36>>2]|0;
 $42 = ((($41)) + 120|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (0 - ($43))|0;
 $45 = ((($0)) + 860|0);
 HEAP32[$45>>2] = $44;
 _LoadImage($$byval_copy,13860);
 $46 = ((($0)) + 864|0);
 ;HEAP32[$46>>2]=HEAP32[$$byval_copy>>2]|0;HEAP32[$46+4>>2]=HEAP32[$$byval_copy+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$$byval_copy+8>>2]|0;HEAP32[$46+12>>2]=HEAP32[$$byval_copy+12>>2]|0;HEAP32[$46+16>>2]=HEAP32[$$byval_copy+16>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$46>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$46+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$46+16>>2]|0;
 _LoadTextureFromImage($3,$$byval_copy);
 $47 = ((($0)) + 884|0);
 ;HEAP32[$47>>2]=HEAP32[$3>>2]|0;HEAP32[$47+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$47+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$47+16>>2]=HEAP32[$3+16>>2]|0;
 $48 = ((($0)) + 904|0);
 HEAP32[$48>>2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10GameScreen6unloadEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10GameScreen6updateEv($0) {
 $0 = $0|0;
 var $$ = 0.0, $$0 = 0, $$0810 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_IsKeyPressed(265)|0);
 if ($1) {
  $2 = ((($0)) + 848|0);
  $3 = HEAP32[$2>>2]|0;
  __ZN5Block6rotateEi($3,0);
  $4 = ((($0)) + 20|0);
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($0)) + 856|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 860|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (__ZN5Board14IsPositionFreeERK5Blockiiii($4,$5,$7,$9,0,0)|0);
  if (!($10)) {
   $11 = HEAP32[$2>>2]|0;
   __ZN5Block6rotateEi($11,1);
  }
 }
 $12 = (_IsKeyPressed(264)|0);
 if ($12) {
  $13 = ((($0)) + 848|0);
  $14 = HEAP32[$13>>2]|0;
  __ZN5Block6rotateEi($14,1);
  $15 = ((($0)) + 20|0);
  $16 = HEAP32[$13>>2]|0;
  $17 = ((($0)) + 856|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 860|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (__ZN5Board14IsPositionFreeERK5Blockiiii($15,$16,$18,$20,0,0)|0);
  if (!($21)) {
   $22 = HEAP32[$13>>2]|0;
   __ZN5Block6rotateEi($22,0);
  }
 }
 $23 = (_IsKeyDown(32)|0);
 $24 = ((($0)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 8|0);
 $$ = $23 ? 0.05000000074505806 : 0.5;
 HEAPF32[$26>>2] = $$;
 $27 = ((($0)) + 856|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($0)) + 848|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 116|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($28))|0;
 $34 = ($33|0)>(0);
 if ($34) {
  $35 = (_IsKeyPressed(263)|0);
  if ($35) {
   $36 = ((($0)) + 20|0);
   $37 = HEAP32[$29>>2]|0;
   $38 = HEAP32[$27>>2]|0;
   $39 = ((($0)) + 860|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (__ZN5Board14IsPositionFreeERK5Blockiiii($36,$37,$38,$40,-1,0)|0);
   if ($41) {
    $42 = HEAP32[$27>>2]|0;
    $43 = (($42) + -1)|0;
    HEAP32[$27>>2] = $43;
   }
  }
 }
 $44 = HEAP32[$27>>2]|0;
 $45 = HEAP32[$29>>2]|0;
 $46 = ((($45)) + 124|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + ($44))|0;
 $49 = ((($0)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + -1)|0;
 $52 = ($48|0)<($51|0);
 if ($52) {
  $53 = (_IsKeyPressed(262)|0);
  if ($53) {
   $54 = HEAP32[$29>>2]|0;
   $55 = HEAP32[$27>>2]|0;
   $56 = ((($0)) + 860|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (__ZN5Board14IsPositionFreeERK5Blockiiii($49,$54,$55,$57,1,0)|0);
   if ($58) {
    $59 = HEAP32[$27>>2]|0;
    $60 = (($59) + 1)|0;
    HEAP32[$27>>2] = $60;
   }
  }
 }
 $61 = ((($0)) + 836|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = ($62<<24>>24)==(0);
 do {
  if ($63) {
   $64 = HEAP32[$24>>2]|0;
   $65 = ((($64)) + 4|0);
   $66 = +HEAPF32[$65>>2];
   $67 = (+_GetFrameTime());
   $68 = $66 + $67;
   $69 = HEAP32[$24>>2]|0;
   $70 = ((($69)) + 4|0);
   HEAPF32[$70>>2] = $68;
   $71 = HEAP32[$24>>2]|0;
   $72 = ((($71)) + 4|0);
   $73 = +HEAPF32[$72>>2];
   $74 = ((($71)) + 8|0);
   $75 = +HEAPF32[$74>>2];
   $76 = $73 > $75;
   do {
    if ($76) {
     $77 = $73 - $75;
     HEAPF32[$72>>2] = $77;
     $78 = ((($0)) + 920|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = ($79<<24>>24)==(0);
     if (!($80)) {
      return;
     }
     $81 = HEAP32[$29>>2]|0;
     $82 = HEAP32[$27>>2]|0;
     $83 = ((($0)) + 860|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (__ZN5Board14IsPositionFreeERK5Blockiiii($49,$81,$82,$84,0,1)|0);
     if ($85) {
      $86 = HEAP32[$83>>2]|0;
      $87 = (($86) + 1)|0;
      HEAP32[$83>>2] = $87;
      break;
     }
     $88 = HEAP32[$29>>2]|0;
     $89 = HEAP32[$27>>2]|0;
     $90 = HEAP32[$83>>2]|0;
     $91 = ((($0)) + 840|0);
     $92 = HEAP32[$91>>2]|0;
     __ZN5Board8setBlockERK5Blockiii($49,$88,$89,$90,$92);
     $93 = ((($0)) + 844|0);
     $94 = HEAP32[$93>>2]|0;
     HEAP32[$91>>2] = $94;
     while(1) {
      $95 = (__ZN10GameScreen11GetnxtPieceEv($0)|0);
      HEAP32[$93>>2] = $95;
      $96 = HEAP32[$91>>2]|0;
      $97 = ($95|0)==($96|0);
      if (!($97)) {
       break;
      }
     }
     $98 = ((($0)) + 852|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + 10)|0;
     HEAP32[$98>>2] = $100;
     $101 = HEAP32[$24>>2]|0;
     $102 = ((($101)) + 8|0);
     HEAPF32[$102>>2] = 1.0;
     $103 = HEAP32[$91>>2]|0;
     $104 = ((($0)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (($105) + (($103*132)|0)|0);
     HEAP32[$29>>2] = $106;
     $107 = (__ZN10GameScreen11GetnxtPieceEv($0)|0);
     $108 = ($107|0)>(0);
     if ($108) {
      $$0810 = 0;
      while(1) {
       $114 = HEAP32[$29>>2]|0;
       __ZN5Block6rotateEi($114,0);
       $115 = (($$0810) + 1)|0;
       $116 = (__ZN10GameScreen11GetnxtPieceEv($0)|0);
       $117 = ($115|0)<($116|0);
       if ($117) {
        $$0810 = $115;
       } else {
        break;
       }
      }
     }
     HEAP32[$27>>2] = 3;
     $109 = HEAP32[$29>>2]|0;
     $110 = ((($109)) + 120|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = (0 - ($111))|0;
     HEAP32[$83>>2] = $112;
     $113 = (__ZN5Board14IsPositionFreeERK5Blockiiii($49,$109,3,$112,0,0)|0);
     if (!($113)) {
      HEAP8[$61>>0] = 1;
      $118 = ((($0)) + 916|0);
      $119 = HEAP32[$118>>2]|0;
      _StorageSaveValue(0,$119);
     }
    }
   } while(0);
   $120 = (_IsKeyPressed(256)|0);
   $121 = ((($0)) + 920|0);
   $122 = HEAP8[$121>>0]|0;
   if ($120) {
    $123 = $122 ^ 1;
    HEAP8[$121>>0] = $123;
    return;
   } else {
    $124 = ($122<<24>>24)==(0);
    if ($124) {
     break;
    }
    return;
   }
  }
 } while(0);
 $125 = (__ZN5Board5clearEv($49)|0);
 $126 = ((($0)) + 912|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($127) + ($125))|0;
 HEAP32[$126>>2] = $128;
 switch ($125|0) {
 case 4:  {
  $$0 = 800;
  break;
 }
 case 1:  {
  $$0 = 100;
  break;
 }
 case 2:  {
  $$0 = 300;
  break;
 }
 case 3:  {
  $$0 = 400;
  break;
 }
 default: {
  $$0 = $125;
 }
 }
 $129 = ((($0)) + 852|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (($130) + ($$0))|0;
 HEAP32[$129>>2] = $131;
 $132 = ((($0)) + 916|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ($131|0)>($133|0);
 if ($134) {
  HEAP32[$132>>2] = $131;
 }
 $135 = HEAP8[$61>>0]|0;
 $136 = ($135<<24>>24)==(0);
 if (!($136)) {
  return;
 }
 $137 = HEAP32[$129>>2]|0;
 $138 = ($137|0)>(0);
 $139 = (($137|0) % 10000)&-1;
 $140 = ($139|0)==(0);
 $or$cond = $138 & $140;
 if (!($or$cond)) {
  return;
 }
 $141 = HEAP32[$24>>2]|0;
 $142 = ((($141)) + 8|0);
 $143 = +HEAPF32[$142>>2];
 $144 = $143;
 $145 = $144 > 0.10000000000000001;
 if ($145) {
  $146 = $143 + -0.039999999105930328;
  HEAPF32[$142>>2] = $146;
 }
 $147 = ((($0)) + 908|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($148) + 1)|0;
 HEAP32[$147>>2] = $149;
 return;
}
function __ZN10GameScreen4drawEv($0) {
 $0 = $0|0;
 var $$sroa$5$0$$sroa_idx6 = 0, $$sroa$519$0$$sroa_idx20 = 0, $$sroa$6$0$$sroa_idx9 = 0, $$sroa$623$0$$sroa_idx24 = 0, $$sroa$7$0$$sroa_idx12 = 0, $$sroa$727$0$$sroa_idx28 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $brmerge = 0, $sum = 0, $sum74 = 0, $sum75 = 0, $sum76 = 0, $tmpcast77$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $tmpcast77$byval_copy = sp + 96|0;
 $1 = sp + 144|0;
 $2 = sp + 44|0;
 $3 = sp + 140|0;
 $4 = sp + 136|0;
 $5 = sp + 132|0;
 $6 = sp + 80|0;
 $7 = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 68|0;
 $10 = sp + 120|0;
 $11 = sp + 116|0;
 $12 = sp + 56|0;
 $13 = sp + 112|0;
 $14 = sp + 40|0;
 $15 = sp + 24|0;
 $16 = sp + 8|0;
 $17 = sp;
 _BeginDrawing();
 HEAP8[$1>>0] = -11;
 $18 = ((($1)) + 1|0);
 HEAP8[$18>>0] = -11;
 $19 = ((($1)) + 2|0);
 HEAP8[$19>>0] = -11;
 $20 = ((($1)) + 3|0);
 HEAP8[$20>>0] = -1;
 ;HEAP8[$tmpcast77$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$tmpcast77$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$tmpcast77$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$tmpcast77$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
 _ClearBackground($tmpcast77$byval_copy);
 $21 = ((($0)) + 20|0);
 $22 = ((($0)) + 884|0);
 __ZN5Board5desenEiiRK9Texture2D($21,0,0,$22);
 $23 = ((($0)) + 844|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + (($24*132)|0)|0);
 $28 = ((($0)) + 848|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($0)) + 856|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31*24)|0;
 $33 = ((($0)) + 860|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34*24)|0;
 $36 = ((($0)) + 840|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (__ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE2atEj(33208,$37)|0);
 __ZN5Block5desenEiiRK5ColorRK9Texture2D($29,$32,$35,$38,$22);
 $39 = HEAP32[$23>>2]|0;
 $40 = (__ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE2atEj(33208,$39)|0);
 __ZN5Block5desenEiiRK5ColorRK9Texture2D($27,240,24,$40,$22);
 $41 = (_MeasureText(13742,20)|0);
 $42 = ((($0)) + 852|0);
 $43 = HEAP32[$42>>2]|0;
 __ZNSt3__29to_stringEi($2,$43);
 $44 = (_MeasureText(13748,20)|0);
 $45 = HEAP32[455]|0;
 $sum = (($44) + ($41))|0;
 $46 = (($45) - ($sum))|0;
 HEAP8[$3>>0] = 0;
 $47 = ((($3)) + 1|0);
 HEAP8[$47>>0] = 0;
 $48 = ((($3)) + 2|0);
 HEAP8[$48>>0] = 0;
 $49 = ((($3)) + 3|0);
 HEAP8[$49>>0] = -1;
 ;HEAP8[$tmpcast77$byval_copy>>0]=HEAP8[$3>>0]|0;HEAP8[$tmpcast77$byval_copy+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$tmpcast77$byval_copy+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$tmpcast77$byval_copy+3>>0]=HEAP8[$3+3>>0]|0;
 _DrawText(13755,$46,144,20,$tmpcast77$byval_copy);
 $50 = ((($2)) + 11|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = ($51<<24>>24)<(0);
 $53 = HEAP32[$2>>2]|0;
 $54 = $52 ? $53 : $2;
 $55 = HEAP32[455]|0;
 $56 = (($55) - ($44))|0;
 HEAP8[$4>>0] = 0;
 $57 = ((($4)) + 1|0);
 HEAP8[$57>>0] = 0;
 $58 = ((($4)) + 2|0);
 HEAP8[$58>>0] = 0;
 $59 = ((($4)) + 3|0);
 HEAP8[$59>>0] = -1;
 ;HEAP8[$tmpcast77$byval_copy>>0]=HEAP8[$4>>0]|0;HEAP8[$tmpcast77$byval_copy+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$tmpcast77$byval_copy+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$tmpcast77$byval_copy+3>>0]=HEAP8[$4+3>>0]|0;
 _DrawText($54,$56,144,20,$tmpcast77$byval_copy);
 $60 = HEAP32[455]|0;
 $sum74 = (($44) + ($41))|0;
 $61 = (($60) - ($sum74))|0;
 HEAP8[$5>>0] = 0;
 $62 = ((($5)) + 1|0);
 HEAP8[$62>>0] = 0;
 $63 = ((($5)) + 2|0);
 HEAP8[$63>>0] = 0;
 $64 = ((($5)) + 3|0);
 HEAP8[$64>>0] = -1;
 ;HEAP8[$tmpcast77$byval_copy>>0]=HEAP8[$5>>0]|0;HEAP8[$tmpcast77$byval_copy+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$tmpcast77$byval_copy+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$tmpcast77$byval_copy+3>>0]=HEAP8[$5+3>>0]|0;
 _DrawText(13760,$61,174,20,$tmpcast77$byval_copy);
 $65 = ((($0)) + 912|0);
 $66 = HEAP32[$65>>2]|0;
 __ZNSt3__29to_stringEi($6,$66);
 $67 = ((($6)) + 11|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = ($68<<24>>24)<(0);
 $70 = HEAP32[$6>>2]|0;
 $71 = $69 ? $70 : $6;
 $72 = HEAP32[455]|0;
 $73 = (($72) - ($44))|0;
 HEAP8[$7>>0] = 0;
 $74 = ((($7)) + 1|0);
 HEAP8[$74>>0] = 0;
 $75 = ((($7)) + 2|0);
 HEAP8[$75>>0] = 0;
 $76 = ((($7)) + 3|0);
 HEAP8[$76>>0] = -1;
 ;HEAP8[$tmpcast77$byval_copy>>0]=HEAP8[$7>>0]|0;HEAP8[$tmpcast77$byval_copy+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$tmpcast77$byval_copy+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$tmpcast77$byval_copy+3>>0]=HEAP8[$7+3>>0]|0;
 _DrawText($71,$73,174,20,$tmpcast77$byval_copy);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 $77 = HEAP32[455]|0;
 $sum75 = (($44) + ($41))|0;
 $78 = (($77) - ($sum75))|0;
 HEAP8[$8>>0] = 0;
 $79 = ((($8)) + 1|0);
 HEAP8[$79>>0] = 0;
 $80 = ((($8)) + 2|0);
 HEAP8[$80>>0] = 0;
 $81 = ((($8)) + 3|0);
 HEAP8[$81>>0] = -1;
 ;HEAP8[$tmpcast77$byval_copy>>0]=HEAP8[$8>>0]|0;HEAP8[$tmpcast77$byval_copy+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$tmpcast77$byval_copy+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$tmpcast77$byval_copy+3>>0]=HEAP8[$8+3>>0]|0;
 _DrawText(13766,$78,204,20,$tmpcast77$byval_copy);
 $82 = ((($0)) + 908|0);
 $83 = HEAP32[$82>>2]|0;
 __ZNSt3__29to_stringEi($9,$83);
 $84 = ((($9)) + 11|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = ($85<<24>>24)<(0);
 $87 = HEAP32[$9>>2]|0;
 $88 = $86 ? $87 : $9;
 $89 = HEAP32[455]|0;
 $90 = (($89) - ($44))|0;
 HEAP8[$10>>0] = 0;
 $91 = ((($10)) + 1|0);
 HEAP8[$91>>0] = 0;
 $92 = ((($10)) + 2|0);
 HEAP8[$92>>0] = 0;
 $93 = ((($10)) + 3|0);
 HEAP8[$93>>0] = -1;
 ;HEAP8[$tmpcast77$byval_copy>>0]=HEAP8[$10>>0]|0;HEAP8[$tmpcast77$byval_copy+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$tmpcast77$byval_copy+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$tmpcast77$byval_copy+3>>0]=HEAP8[$10+3>>0]|0;
 _DrawText($88,$90,204,20,$tmpcast77$byval_copy);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 $94 = HEAP32[455]|0;
 $sum76 = (($44) + ($41))|0;
 $95 = (($94) - ($sum76))|0;
 $96 = HEAP32[456]|0;
 $97 = (($96) + -40)|0;
 HEAP8[$11>>0] = 0;
 $98 = ((($11)) + 1|0);
 HEAP8[$98>>0] = 0;
 $99 = ((($11)) + 2|0);
 HEAP8[$99>>0] = 0;
 $100 = ((($11)) + 3|0);
 HEAP8[$100>>0] = -1;
 ;HEAP8[$tmpcast77$byval_copy>>0]=HEAP8[$11>>0]|0;HEAP8[$tmpcast77$byval_copy+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$tmpcast77$byval_copy+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$tmpcast77$byval_copy+3>>0]=HEAP8[$11+3>>0]|0;
 _DrawText(13772,$95,$97,20,$tmpcast77$byval_copy);
 $101 = ((($0)) + 916|0);
 $102 = HEAP32[$101>>2]|0;
 __ZNSt3__29to_stringEi($12,$102);
 $103 = ((($12)) + 11|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104<<24>>24)<(0);
 $106 = HEAP32[$12>>2]|0;
 $107 = $105 ? $106 : $12;
 $108 = HEAP32[455]|0;
 $109 = (($108) - ($44))|0;
 $110 = HEAP32[456]|0;
 $111 = (($110) + -20)|0;
 HEAP8[$13>>0] = 0;
 $112 = ((($13)) + 1|0);
 HEAP8[$112>>0] = 0;
 $113 = ((($13)) + 2|0);
 HEAP8[$113>>0] = 0;
 $114 = ((($13)) + 3|0);
 HEAP8[$114>>0] = -1;
 ;HEAP8[$tmpcast77$byval_copy>>0]=HEAP8[$13>>0]|0;HEAP8[$tmpcast77$byval_copy+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$tmpcast77$byval_copy+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$tmpcast77$byval_copy+3>>0]=HEAP8[$13+3>>0]|0;
 _DrawText($107,$109,$111,20,$tmpcast77$byval_copy);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
 $115 = ((($0)) + 836|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = ($116<<24>>24)==(0);
 if (!($117)) {
  $118 = (_MeasureText(13783,30)|0);
  $119 = HEAP32[455]|0;
  $120 = (-120 - ($118))|0;
  $121 = (($120) + ($119))|0;
  $122 = (($121|0) / 2)&-1;
  $123 = HEAP32[456]|0;
  $124 = (($123) + -30)|0;
  $125 = (($124|0) / 2)&-1;
  HEAP32[$14>>2] = -1;
  ;HEAP8[$tmpcast77$byval_copy>>0]=HEAP8[$14>>0]|0;HEAP8[$tmpcast77$byval_copy+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$tmpcast77$byval_copy+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$tmpcast77$byval_copy+3>>0]=HEAP8[$14+3>>0]|0;
  _DrawText(13783,$122,$125,30,$tmpcast77$byval_copy);
  $126 = HEAP32[455]|0;
  $127 = (($126) + -220)|0;
  $128 = (($127|0) / 2)&-1;
  $129 = HEAP32[456]|0;
  $130 = (($129) + -30)|0;
  $131 = (($130|0) / 2)&-1;
  $132 = (($131) + 35)|0;
  HEAP32[$15>>2] = $128;
  $$sroa$519$0$$sroa_idx20 = ((($15)) + 4|0);
  HEAP32[$$sroa$519$0$$sroa_idx20>>2] = $132;
  $$sroa$623$0$$sroa_idx24 = ((($15)) + 8|0);
  HEAP32[$$sroa$623$0$$sroa_idx24>>2] = 100;
  $$sroa$727$0$$sroa_idx28 = ((($15)) + 12|0);
  HEAP32[$$sroa$727$0$$sroa_idx28>>2] = 50;
  ;HEAP32[$tmpcast77$byval_copy>>2]=HEAP32[$15>>2]|0;HEAP32[$tmpcast77$byval_copy+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$tmpcast77$byval_copy+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$tmpcast77$byval_copy+12>>2]=HEAP32[$15+12>>2]|0;
  $133 = (__ZL9GuiButton9RectanglePKc($tmpcast77$byval_copy,13789)|0);
  $134 = HEAP32[455]|0;
  $135 = (($134) + -220)|0;
  $136 = (($135|0) / 2)&-1;
  $137 = HEAP32[456]|0;
  $138 = (($137) + -30)|0;
  $139 = (($138|0) / 2)&-1;
  $140 = (($139) + 85)|0;
  HEAP32[$16>>2] = $136;
  $$sroa$5$0$$sroa_idx6 = ((($16)) + 4|0);
  HEAP32[$$sroa$5$0$$sroa_idx6>>2] = $140;
  $$sroa$6$0$$sroa_idx9 = ((($16)) + 8|0);
  HEAP32[$$sroa$6$0$$sroa_idx9>>2] = 100;
  $$sroa$7$0$$sroa_idx12 = ((($16)) + 12|0);
  HEAP32[$$sroa$7$0$$sroa_idx12>>2] = 50;
  ;HEAP32[$tmpcast77$byval_copy>>2]=HEAP32[$16>>2]|0;HEAP32[$tmpcast77$byval_copy+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$tmpcast77$byval_copy+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$tmpcast77$byval_copy+12>>2]=HEAP32[$16+12>>2]|0;
  $141 = (__ZL9GuiButton9RectanglePKc($tmpcast77$byval_copy,13795)|0);
  if ($141) {
   (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(37536,13805)|0);
   $142 = ((($0)) + 4|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($143)) + 20|0);
   __ZN4Game9setScreenEP6Screen($143,$144);
  }
  $145 = (_IsKeyPressed(32)|0);
  $brmerge = $133 | $145;
  if ($brmerge) {
   HEAP8[$115>>0] = 0;
   __ZN5Board5resetEv($21);
   HEAP32[$42>>2] = 0;
  }
 }
 $146 = ((($0)) + 920|0);
 $147 = HEAP8[$146>>0]|0;
 $148 = ($147<<24>>24)==(0);
 if ($148) {
  _EndDrawing();
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  STACKTOP = sp;return;
 }
 $149 = (_MeasureText(13817,30)|0);
 $150 = HEAP32[455]|0;
 $151 = (-120 - ($149))|0;
 $152 = (($151) + ($150))|0;
 $153 = (($152|0) / 2)&-1;
 $154 = HEAP32[456]|0;
 $155 = (($154) + -30)|0;
 $156 = (($155|0) / 2)&-1;
 HEAP32[$17>>2] = -1;
 ;HEAP8[$tmpcast77$byval_copy>>0]=HEAP8[$17>>0]|0;HEAP8[$tmpcast77$byval_copy+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$tmpcast77$byval_copy+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$tmpcast77$byval_copy+3>>0]=HEAP8[$17+3>>0]|0;
 _DrawText(13817,$153,$156,30,$tmpcast77$byval_copy);
 _EndDrawing();
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE2atEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)>($1>>>0);
 if ($7) {
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + ($1<<2)|0);
  return ($9|0);
 } else {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 return (0)|0;
}
function __ZL9GuiButton9RectanglePKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$2$off031 = 0, $$2$off032 = 0, $$byval_copy12 = 0, $$byval_copy9 = 0, $$neg = 0, $$neg40 = 0, $$neg41 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $extract$t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy12 = sp + 80|0;
 $$byval_copy9 = sp + 64|0;
 $2 = sp;
 $3 = sp + 8|0;
 $4 = sp + 48|0;
 $5 = sp + 128|0;
 $6 = sp + 124|0;
 $7 = sp + 120|0;
 $8 = sp + 32|0;
 $9 = sp + 116|0;
 $10 = sp + 112|0;
 $11 = sp + 108|0;
 $12 = sp + 16|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 _GetMousePosition($2);
 $16 = (_MeasureText($1,10)|0);
 $17 = ((($0)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)<($16|0);
 if ($19) {
  $20 = (($16) + 20)|0;
  HEAP32[$17>>2] = $20;
 }
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)<(10);
 if ($23) {
  HEAP32[$21>>2] = 20;
 }
 $24 = $2;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $3;
 $31 = $30;
 HEAP32[$31>>2] = $26;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $29;
 ;HEAP32[$$byval_copy9>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$3+4>>2]|0;
 ;HEAP32[$$byval_copy12>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy12+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy12+12>>2]=HEAP32[$0+12>>2]|0;
 $34 = (_CheckCollisionPointRec($$byval_copy9,$$byval_copy12)|0);
 if ($34) {
  $35 = (_IsMouseButtonDown(0)|0);
  if ($35) {
   (_GetGestureDetected()|0);
   ;HEAP32[$12>>2]=HEAP32[$0>>2]|0;HEAP32[$12+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$0+12>>2]|0;
   _GetColor($13,2075186943);
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$12+12>>2]|0;
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$13>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$13+3>>0]|0;
   _DrawRectangleRec($$byval_copy9,$$byval_copy12);
   $36 = HEAP32[$0>>2]|0;
   $37 = (($36) + 2)|0;
   $38 = ((($0)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 2)|0;
   $41 = HEAP32[$17>>2]|0;
   $42 = (($41) + -4)|0;
   $43 = HEAP32[$21>>2]|0;
   $44 = (($43) + -4)|0;
   _GetColor($14,-1125318657);
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$14>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$14+3>>0]|0;
   _DrawRectangle($37,$40,$42,$44,$$byval_copy12);
   $45 = HEAP32[$0>>2]|0;
   $46 = HEAP32[$17>>2]|0;
   $47 = (($46|0) / 2)&-1;
   $48 = (_MeasureText($1,10)|0);
   $$neg41 = (($48|0) / -2)&-1;
   $49 = (($47) + ($45))|0;
   $50 = (($49) + ($$neg41))|0;
   $51 = HEAP32[$38>>2]|0;
   $52 = HEAP32[$21>>2]|0;
   $53 = (($52|0) / 2)&-1;
   $54 = (($51) + -5)|0;
   $55 = (($54) + ($53))|0;
   _GetColor($15,1603971071);
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$15+3>>0]|0;
   _DrawText($1,$50,$55,10,$$byval_copy12);
   $$2$off032 = 0;
   STACKTOP = sp;return ($$2$off032|0);
  }
  $56 = (_IsMouseButtonReleased(0)|0);
  $57 = (_GetGestureDetected()|0);
  $$off = (($57) + -1)|0;
  $58 = ($$off>>>0)<(2);
  $extract$t = $56 | $58;
  if ($56) {
   $$2$off031 = $extract$t;
  } else {
   ;HEAP32[$8>>2]=HEAP32[$0>>2]|0;HEAP32[$8+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$0+12>>2]|0;
   _GetColor($9,-926365441);
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$8+12>>2]|0;
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$9>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$9+3>>0]|0;
   _DrawRectangleRec($$byval_copy9,$$byval_copy12);
   $79 = HEAP32[$0>>2]|0;
   $80 = (($79) + 2)|0;
   $81 = ((($0)) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + 2)|0;
   $84 = HEAP32[$17>>2]|0;
   $85 = (($84) + -4)|0;
   $86 = HEAP32[$21>>2]|0;
   $87 = (($86) + -4)|0;
   _GetColor($10,-1);
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$10+3>>0]|0;
   _DrawRectangle($80,$83,$85,$87,$$byval_copy12);
   $88 = HEAP32[$0>>2]|0;
   $89 = HEAP32[$17>>2]|0;
   $90 = (($89|0) / 2)&-1;
   $91 = (_MeasureText($1,10)|0);
   $$neg = (($91|0) / -2)&-1;
   $92 = (($90) + ($88))|0;
   $93 = (($92) + ($$neg))|0;
   $94 = HEAP32[$81>>2]|0;
   $95 = HEAP32[$21>>2]|0;
   $96 = (($95|0) / 2)&-1;
   $97 = (($94) + -5)|0;
   $98 = (($97) + ($96))|0;
   _GetColor($11,-2038003969);
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$11>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$11+3>>0]|0;
   _DrawText($1,$93,$98,10,$$byval_copy12);
   $$2$off032 = $extract$t;
   STACKTOP = sp;return ($$2$off032|0);
  }
 } else {
  $$2$off031 = 0;
 }
 ;HEAP32[$4>>2]=HEAP32[$0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$0+12>>2]|0;
 _GetColor($5,-2105376001);
 ;HEAP32[$$byval_copy9>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$4+12>>2]|0;
 ;HEAP8[$$byval_copy12>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$5+3>>0]|0;
 _DrawRectangleRec($$byval_copy9,$$byval_copy12);
 $59 = HEAP32[$0>>2]|0;
 $60 = (($59) + 2)|0;
 $61 = ((($0)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + 2)|0;
 $64 = HEAP32[$17>>2]|0;
 $65 = (($64) + -4)|0;
 $66 = HEAP32[$21>>2]|0;
 $67 = (($66) + -4)|0;
 _GetColor($6,-926365441);
 ;HEAP8[$$byval_copy12>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$6+3>>0]|0;
 _DrawRectangle($60,$63,$65,$67,$$byval_copy12);
 $68 = HEAP32[$0>>2]|0;
 $69 = HEAP32[$17>>2]|0;
 $70 = (($69|0) / 2)&-1;
 $71 = (_MeasureText($1,10)|0);
 $$neg40 = (($71|0) / -2)&-1;
 $72 = (($70) + ($68))|0;
 $73 = (($72) + ($$neg40))|0;
 $74 = HEAP32[$61>>2]|0;
 $75 = HEAP32[$21>>2]|0;
 $76 = (($75|0) / 2)&-1;
 $77 = (($74) + -5)|0;
 $78 = (($77) + ($76))|0;
 _GetColor($7,1296911871);
 ;HEAP8[$$byval_copy12>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$7+3>>0]|0;
 _DrawText($1,$73,$78,10,$$byval_copy12);
 $$2$off032 = $$2$off031;
 STACKTOP = sp;return ($$2$off032|0);
}
function __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0,$1,$2)|0);
 return ($3|0);
}
function __ZN10GameScreen11GetnxtPieceEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 0:  {
  $5 = (_GetRandomValue(0,1)|0);
  $$0 = $5;
  return ($$0|0);
  break;
 }
 case 1:  {
  $6 = (_GetRandomValue(0,3)|0);
  $$0 = $6;
  return ($$0|0);
  break;
 }
 case 2:  {
  $7 = (_GetRandomValue(0,6)|0);
  $$0 = $7;
  return ($$0|0);
  break;
 }
 case 3:  {
  $8 = (_GetRandomValue(0,17)|0);
  $$0 = $8;
  return ($$0|0);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZN5BlockC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 5;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 5;
 return;
}
function __ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 132)&-1;
 $7 = (($2) + (($6*132)|0)|0);
 $8 = (($2) + (($1*132)|0)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = (($11|0) / 132)&-1;
 $13 = (($2) + (($12*132)|0)|0);
 __ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$2,$7,$8,$13);
 return;
}
function __ZNSt3__26vectorI5BlockNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI5BlockNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI5BlockNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 132)&-1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = (($15|0) / 132)&-1;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $16 << 1;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = (($22|0) / 132)&-1;
  __ZNSt3__214__split_bufferI5BlockRNS_9allocatorIS1_EEEC2EjjS4_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  _memcpy(($25|0),($1|0),132)|0;
  $26 = ((($25)) + 132|0);
  HEAP32[$24>>2] = $26;
  __ZNSt3__26vectorI5BlockNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0,$2);
  __ZNSt3__214__split_bufferI5BlockRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32537631;
}
function __ZNSt3__214__split_bufferI5BlockRNS_9allocatorIS1_EEEC2EjjS4_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(32537631);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(1504|0),(109|0));
    // unreachable;
   } else {
    $9 = ($1*132)|0;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + (($2*132)|0)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + (($1*132)|0)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorI5BlockNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (($7|0) / -132)&-1;
 $10 = (($8) + (($9*132)|0)|0);
 HEAP32[$5>>2] = $10;
 $11 = ($7|0)>(0);
 if ($11) {
  _memcpy(($10|0),($2|0),($7|0))|0;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $13;
 HEAP32[$5>>2] = $12;
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$3>>2] = $16;
 HEAP32[$14>>2] = $15;
 $17 = ((($0)) + 8|0);
 $18 = ((($1)) + 12|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $20;
 HEAP32[$18>>2] = $19;
 $21 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $21;
 $22 = HEAP32[$3>>2]|0;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($22) - ($23))|0;
 $25 = (($24|0) / 132)&-1;
 __ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE14__annotate_newEj($0,$25);
 return;
}
function __ZNSt3__214__split_bufferI5BlockRNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -132|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = (($8>>>0) / 132)&-1;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + (($10*132)|0)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = (($4|0) / 132)&-1;
 $6 = (($1) + (($5*132)|0)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = (($9|0) / 132)&-1;
 $11 = (($1) + (($10*132)|0)|0);
 __ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$1,$6,$11,$6);
 return;
}
function __ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 132)&-1;
 $7 = (($2) + (($6*132)|0)|0);
 $8 = (($2) + (($1*132)|0)|0);
 __ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorI5BlockNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10MainScreen4initEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 HEAP32[$4>>2] = 2;
 return;
}
function __ZN10MainScreen6unloadEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10MainScreen6updateEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 48|0);
 __ZN10GameScreen4initEv($6);
 $7 = HEAP32[$4>>2]|0;
 $8 = ((($7)) + 48|0);
 __ZN4Game9setScreenEP6Screen($7,$8);
 HEAP8[$1>>0] = 0;
 return;
}
function __ZN10MainScreen4drawEv($0) {
 $0 = $0|0;
 var $$byval_copy3 = 0, $$sroa$5$0$$sroa_idx3 = 0, $$sroa$517$0$$sroa_idx18 = 0, $$sroa$532$0$$sroa_idx33 = 0, $$sroa$547$0$$sroa_idx48 = 0, $$sroa$6$0$$sroa_idx6 = 0, $$sroa$621$0$$sroa_idx22 = 0, $$sroa$636$0$$sroa_idx37 = 0, $$sroa$651$0$$sroa_idx52 = 0, $$sroa$7$0$$sroa_idx9 = 0, $$sroa$725$0$$sroa_idx26 = 0, $$sroa$740$0$$sroa_idx41 = 0, $$sroa$755$0$$sroa_idx56 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy3 = sp + 80|0;
 $1 = sp + 64|0;
 $2 = sp + 48|0;
 $3 = sp + 16|0;
 $4 = sp + 32|0;
 $5 = sp;
 _BeginDrawing();
 $6 = (_GetScreenWidth()|0);
 $7 = (($6|0) / 2)&-1;
 $8 = (($7) + -80)|0;
 $9 = (_GetScreenHeight()|0);
 $10 = (($9|0) / 2)&-1;
 $11 = (($10) + -125)|0;
 __ZL16SetStylePropertyii(40);
 HEAP32[$1>>2] = $8;
 $$sroa$547$0$$sroa_idx48 = ((($1)) + 4|0);
 HEAP32[$$sroa$547$0$$sroa_idx48>>2] = $11;
 $$sroa$651$0$$sroa_idx52 = ((($1)) + 8|0);
 HEAP32[$$sroa$651$0$$sroa_idx52>>2] = 160;
 $$sroa$755$0$$sroa_idx56 = ((($1)) + 12|0);
 HEAP32[$$sroa$755$0$$sroa_idx56>>2] = 40;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$1+12>>2]|0;
 __ZL8GuiLabel9RectanglePKc($$byval_copy3);
 __ZL16SetStylePropertyii(10);
 $12 = (_GetScreenWidth()|0);
 $13 = (($12|0) / 2)&-1;
 $14 = (($13) + -60)|0;
 $15 = (_GetScreenHeight()|0);
 $16 = (($15|0) / 2)&-1;
 $17 = (($16) + -55)|0;
 HEAP32[$2>>2] = $14;
 $$sroa$532$0$$sroa_idx33 = ((($2)) + 4|0);
 HEAP32[$$sroa$532$0$$sroa_idx33>>2] = $17;
 $$sroa$636$0$$sroa_idx37 = ((($2)) + 8|0);
 HEAP32[$$sroa$636$0$$sroa_idx37>>2] = 120;
 $$sroa$740$0$$sroa_idx41 = ((($2)) + 12|0);
 HEAP32[$$sroa$740$0$$sroa_idx41>>2] = 50;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$2+12>>2]|0;
 $18 = (__ZL9GuiButton9RectanglePKc_32($$byval_copy3,13894)|0);
 $19 = ((($0)) + 24|0);
 $20 = $18&1;
 HEAP8[$19>>0] = $20;
 $21 = (_GetScreenWidth()|0);
 $22 = (($21|0) / 2)&-1;
 $23 = (($22) + -60)|0;
 $24 = (_GetScreenHeight()|0);
 $25 = (($24|0) / 2)&-1;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $26 = (__ZNSt3__211char_traitsIcE6lengthEPKc(13899)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($3,13899,$26);
 $27 = ((($0)) + 8|0);
 $28 = ((($0)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE2atEj($27,$31)|0);
 $33 = ((($32)) + 11|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ($34<<24>>24)<(0);
 $36 = HEAP32[$32>>2]|0;
 $37 = $35 ? $36 : $32;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $34&255;
 $41 = $35 ? $39 : $40;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($3,$37,$41)|0);
 HEAP32[$4>>2] = $23;
 $$sroa$517$0$$sroa_idx18 = ((($4)) + 4|0);
 HEAP32[$$sroa$517$0$$sroa_idx18>>2] = $25;
 $$sroa$621$0$$sroa_idx22 = ((($4)) + 8|0);
 HEAP32[$$sroa$621$0$$sroa_idx22>>2] = 120;
 $$sroa$725$0$$sroa_idx26 = ((($4)) + 12|0);
 HEAP32[$$sroa$725$0$$sroa_idx26>>2] = 50;
 $42 = ((($3)) + 11|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = ($43<<24>>24)<(0);
 $45 = HEAP32[$3>>2]|0;
 $46 = $44 ? $45 : $3;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$4+12>>2]|0;
 $47 = (__ZL9GuiButton9RectanglePKc_32($$byval_copy3,$46)|0);
 if ($47) {
  $48 = HEAP32[$28>>2]|0;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 1)|0;
  $52 = (($51|0) % 4)&-1;
  HEAP32[$49>>2] = $52;
 }
 $53 = (_GetScreenWidth()|0);
 $54 = (_GetScreenHeight()|0);
 $55 = (($53|0) / 2)&-1;
 $56 = (($55) + -60)|0;
 $57 = (($54|0) / 2)&-1;
 $58 = (($57) + 55)|0;
 HEAP32[$5>>2] = $56;
 $$sroa$5$0$$sroa_idx3 = ((($5)) + 4|0);
 HEAP32[$$sroa$5$0$$sroa_idx3>>2] = $58;
 $$sroa$6$0$$sroa_idx6 = ((($5)) + 8|0);
 HEAP32[$$sroa$6$0$$sroa_idx6>>2] = 120;
 $$sroa$7$0$$sroa_idx9 = ((($5)) + 12|0);
 HEAP32[$$sroa$7$0$$sroa_idx9>>2] = 50;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$5+12>>2]|0;
 $59 = (__ZL9GuiButton9RectanglePKc_32($$byval_copy3,13915)|0);
 if (!($59)) {
  _EndDrawing();
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $60 = HEAP32[$28>>2]|0;
 $61 = ((($60)) + 16|0);
 HEAP8[$61>>0] = 1;
 _EndDrawing();
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZL16SetStylePropertyii($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[414] = $0;
 return;
}
function __ZL8GuiLabel9RectanglePKc($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $2 = 0, $3 = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmpcast1$byval_copy = sp + 36|0;
 $tmpcast$byval_copy = sp + 32|0;
 $$byval_copy1 = sp + 28|0;
 $$byval_copy = sp + 8|0;
 $1 = sp + 24|0;
 $2 = sp + 4|0;
 $3 = sp;
 _GetColor($1,1296911871);
 HEAP32[$2>>2] = 0;
 HEAP32[$3>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$1+3>>0]|0;
 ;HEAP8[$tmpcast$byval_copy>>0]=HEAP8[$2>>0]|0;HEAP8[$tmpcast$byval_copy+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$tmpcast$byval_copy+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$tmpcast$byval_copy+3>>0]=HEAP8[$2+3>>0]|0;
 ;HEAP8[$tmpcast1$byval_copy>>0]=HEAP8[$3>>0]|0;HEAP8[$tmpcast1$byval_copy+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$tmpcast1$byval_copy+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$tmpcast1$byval_copy+3>>0]=HEAP8[$3+3>>0]|0;
 __ZL10GuiLabelEx9RectanglePKc5ColorS2_S2_($$byval_copy,$$byval_copy1,$tmpcast$byval_copy,$tmpcast1$byval_copy);
 STACKTOP = sp;return;
}
function __ZL9GuiButton9RectanglePKc_32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$2$off031 = 0, $$2$off032 = 0, $$byval_copy12 = 0, $$byval_copy9 = 0, $$neg = 0, $$neg40 = 0, $$neg41 = 0, $$neg42 = 0, $$neg43 = 0, $$neg44 = 0, $$off = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extract$t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy12 = sp + 80|0;
 $$byval_copy9 = sp + 64|0;
 $2 = sp;
 $3 = sp + 8|0;
 $4 = sp + 48|0;
 $5 = sp + 128|0;
 $6 = sp + 124|0;
 $7 = sp + 120|0;
 $8 = sp + 32|0;
 $9 = sp + 116|0;
 $10 = sp + 112|0;
 $11 = sp + 108|0;
 $12 = sp + 16|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 _GetMousePosition($2);
 $16 = HEAP32[414]|0;
 $17 = (_MeasureText($1,$16)|0);
 $18 = HEAP32[414]|0;
 $19 = ((($0)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)<($17|0);
 if ($21) {
  $22 = (($17) + 20)|0;
  HEAP32[$19>>2] = $22;
 }
 $23 = ((($0)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)<($18|0);
 if ($25) {
  $26 = (($18) + 10)|0;
  HEAP32[$23>>2] = $26;
 }
 $27 = $2;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $3;
 $34 = $33;
 HEAP32[$34>>2] = $29;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $32;
 ;HEAP32[$$byval_copy9>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$3+4>>2]|0;
 ;HEAP32[$$byval_copy12>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy12+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy12+12>>2]=HEAP32[$0+12>>2]|0;
 $37 = (_CheckCollisionPointRec($$byval_copy9,$$byval_copy12)|0);
 if ($37) {
  $38 = (_IsMouseButtonDown(0)|0);
  if ($38) {
   (_GetGestureDetected()|0);
   ;HEAP32[$12>>2]=HEAP32[$0>>2]|0;HEAP32[$12+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$0+12>>2]|0;
   _GetColor($13,2075186943);
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$12+12>>2]|0;
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$13>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$13+3>>0]|0;
   _DrawRectangleRec($$byval_copy9,$$byval_copy12);
   $39 = HEAP32[$0>>2]|0;
   $40 = (($39) + 2)|0;
   $41 = ((($0)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + 2)|0;
   $44 = HEAP32[$19>>2]|0;
   $45 = (($44) + -4)|0;
   $46 = HEAP32[$23>>2]|0;
   $47 = (($46) + -4)|0;
   _GetColor($14,-1125318657);
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$14>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$14+3>>0]|0;
   _DrawRectangle($40,$43,$45,$47,$$byval_copy12);
   $48 = HEAP32[$0>>2]|0;
   $49 = HEAP32[$19>>2]|0;
   $50 = (($49|0) / 2)&-1;
   $51 = HEAP32[414]|0;
   $52 = (_MeasureText($1,$51)|0);
   $$neg43 = (($52|0) / -2)&-1;
   $53 = (($50) + ($48))|0;
   $54 = (($53) + ($$neg43))|0;
   $55 = HEAP32[$41>>2]|0;
   $56 = HEAP32[$23>>2]|0;
   $57 = (($56|0) / 2)&-1;
   $58 = HEAP32[414]|0;
   $$neg44 = (($58|0) / -2)&-1;
   $59 = (($57) + ($55))|0;
   $60 = (($59) + ($$neg44))|0;
   _GetColor($15,1603971071);
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$15+3>>0]|0;
   _DrawText($1,$54,$60,$58,$$byval_copy12);
   $$2$off032 = 0;
   STACKTOP = sp;return ($$2$off032|0);
  }
  $61 = (_IsMouseButtonReleased(0)|0);
  $62 = (_GetGestureDetected()|0);
  $$off = (($62) + -1)|0;
  $63 = ($$off>>>0)<(2);
  $extract$t = $61 | $63;
  if ($61) {
   $$2$off031 = $extract$t;
  } else {
   ;HEAP32[$8>>2]=HEAP32[$0>>2]|0;HEAP32[$8+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$0+12>>2]|0;
   _GetColor($9,-926365441);
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$8+12>>2]|0;
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$9>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$9+3>>0]|0;
   _DrawRectangleRec($$byval_copy9,$$byval_copy12);
   $86 = HEAP32[$0>>2]|0;
   $87 = (($86) + 2)|0;
   $88 = ((($0)) + 4|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + 2)|0;
   $91 = HEAP32[$19>>2]|0;
   $92 = (($91) + -4)|0;
   $93 = HEAP32[$23>>2]|0;
   $94 = (($93) + -4)|0;
   _GetColor($10,-1);
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$10+3>>0]|0;
   _DrawRectangle($87,$90,$92,$94,$$byval_copy12);
   $95 = HEAP32[$0>>2]|0;
   $96 = HEAP32[$19>>2]|0;
   $97 = (($96|0) / 2)&-1;
   $98 = HEAP32[414]|0;
   $99 = (_MeasureText($1,$98)|0);
   $$neg = (($99|0) / -2)&-1;
   $100 = (($97) + ($95))|0;
   $101 = (($100) + ($$neg))|0;
   $102 = HEAP32[$88>>2]|0;
   $103 = HEAP32[$23>>2]|0;
   $104 = (($103|0) / 2)&-1;
   $105 = HEAP32[414]|0;
   $$neg40 = (($105|0) / -2)&-1;
   $106 = (($104) + ($102))|0;
   $107 = (($106) + ($$neg40))|0;
   _GetColor($11,-2038003969);
   ;HEAP8[$$byval_copy12>>0]=HEAP8[$11>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$11+3>>0]|0;
   _DrawText($1,$101,$107,$105,$$byval_copy12);
   $$2$off032 = $extract$t;
   STACKTOP = sp;return ($$2$off032|0);
  }
 } else {
  $$2$off031 = 0;
 }
 ;HEAP32[$4>>2]=HEAP32[$0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$0+12>>2]|0;
 _GetColor($5,-2105376001);
 ;HEAP32[$$byval_copy9>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy9+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy9+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy9+12>>2]=HEAP32[$4+12>>2]|0;
 ;HEAP8[$$byval_copy12>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$5+3>>0]|0;
 _DrawRectangleRec($$byval_copy9,$$byval_copy12);
 $64 = HEAP32[$0>>2]|0;
 $65 = (($64) + 2)|0;
 $66 = ((($0)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + 2)|0;
 $69 = HEAP32[$19>>2]|0;
 $70 = (($69) + -4)|0;
 $71 = HEAP32[$23>>2]|0;
 $72 = (($71) + -4)|0;
 _GetColor($6,-926365441);
 ;HEAP8[$$byval_copy12>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$6+3>>0]|0;
 _DrawRectangle($65,$68,$70,$72,$$byval_copy12);
 $73 = HEAP32[$0>>2]|0;
 $74 = HEAP32[$19>>2]|0;
 $75 = (($74|0) / 2)&-1;
 $76 = HEAP32[414]|0;
 $77 = (_MeasureText($1,$76)|0);
 $$neg41 = (($77|0) / -2)&-1;
 $78 = (($75) + ($73))|0;
 $79 = (($78) + ($$neg41))|0;
 $80 = HEAP32[$66>>2]|0;
 $81 = HEAP32[$23>>2]|0;
 $82 = (($81|0) / 2)&-1;
 $83 = HEAP32[414]|0;
 $$neg42 = (($83|0) / -2)&-1;
 $84 = (($82) + ($80))|0;
 $85 = (($84) + ($$neg42))|0;
 _GetColor($7,1296911871);
 ;HEAP8[$$byval_copy12>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy12+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy12+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy12+3>>0]=HEAP8[$7+3>>0]|0;
 _DrawText($1,$79,$85,$83,$$byval_copy12);
 $$2$off032 = $$2$off031;
 STACKTOP = sp;return ($$2$off032|0);
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE2atEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 12)&-1;
 $7 = ($6>>>0)>($1>>>0);
 if ($7) {
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + (($1*12)|0)|0);
  return ($9|0);
 } else {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 return (0)|0;
}
function __ZL10GuiLabelEx9RectanglePKc5ColorS2_S2_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$neg = 0, $$neg3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $tmpcast2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmpcast2$byval_copy = sp + 32|0;
 $$byval_copy = sp + 8|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp;
 $7 = HEAP32[414]|0;
 $8 = (_MeasureText(13920,$7)|0);
 $9 = HEAP32[414]|0;
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<($8|0);
 if ($12) {
  $13 = (($8) + 20)|0;
  HEAP32[$10>>2] = $13;
 }
 $14 = ((($0)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)<($9|0);
 if ($16) {
  $17 = (($9) + 10)|0;
  HEAP32[$14>>2] = $17;
 }
 $18 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 HEAP32[$4>>2] = $18;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;
 ;HEAP8[$tmpcast2$byval_copy>>0]=HEAP8[$4>>0]|0;HEAP8[$tmpcast2$byval_copy+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$tmpcast2$byval_copy+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$tmpcast2$byval_copy+3>>0]=HEAP8[$4+3>>0]|0;
 _DrawRectangleRec($$byval_copy,$tmpcast2$byval_copy);
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 1)|0;
 $21 = ((($0)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 1)|0;
 $24 = HEAP32[$10>>2]|0;
 $25 = (($24) + -2)|0;
 $26 = HEAP32[$14>>2]|0;
 $27 = (($26) + -2)|0;
 $28 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
 HEAP32[$5>>2] = $28;
 ;HEAP8[$tmpcast2$byval_copy>>0]=HEAP8[$5>>0]|0;HEAP8[$tmpcast2$byval_copy+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$tmpcast2$byval_copy+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$tmpcast2$byval_copy+3>>0]=HEAP8[$5+3>>0]|0;
 _DrawRectangle($20,$23,$25,$27,$tmpcast2$byval_copy);
 $29 = HEAP32[$0>>2]|0;
 $30 = HEAP32[$10>>2]|0;
 $31 = (($30|0) / 2)&-1;
 $$neg = (($8|0) / -2)&-1;
 $32 = (($29) + ($$neg))|0;
 $33 = (($32) + ($31))|0;
 $34 = HEAP32[$21>>2]|0;
 $35 = HEAP32[$14>>2]|0;
 $36 = (($35|0) / 2)&-1;
 $37 = HEAP32[414]|0;
 $$neg3 = (($37|0) / -2)&-1;
 $38 = (($36) + ($34))|0;
 $39 = (($38) + ($$neg3))|0;
 $40 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
 HEAP32[$6>>2] = $40;
 ;HEAP8[$tmpcast2$byval_copy>>0]=HEAP8[$6>>0]|0;HEAP8[$tmpcast2$byval_copy+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$tmpcast2$byval_copy+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$tmpcast2$byval_copy+3>>0]=HEAP8[$6+3>>0]|0;
 _DrawText(13920,$33,$39,$37,$tmpcast2$byval_copy);
 STACKTOP = sp;return;
}
function __ZN5Block13computeBoundsEv($0) {
 $0 = $0|0;
 var $$01719 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 116|0);
 HEAP32[$1>>2] = 4;
 $2 = ((($0)) + 120|0);
 HEAP32[$2>>2] = 4;
 $3 = ((($0)) + 124|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 128|0);
 HEAP32[$4>>2] = 0;
 $$01719 = 0;
 while(1) {
  $5 = (((($0)) + 8|0) + (($$01719*20)|0)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP32[$1>>2]|0;
   $9 = ($8|0)>(0);
   if ($9) {
    HEAP32[$1>>2] = 0;
   }
   $10 = HEAP32[$2>>2]|0;
   $11 = ($$01719|0)<($10|0);
   if ($11) {
    HEAP32[$2>>2] = $$01719;
   }
   $12 = HEAP32[$3>>2]|0;
   $13 = ($12|0)>(0);
   if (!($13)) {
    HEAP32[$3>>2] = 0;
   }
   $14 = HEAP32[$4>>2]|0;
   $15 = ($14|0)>($$01719|0);
   if (!($15)) {
    HEAP32[$4>>2] = $$01719;
   }
  }
  $16 = (((((($0)) + 8|0) + (($$01719*20)|0)|0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(1);
  if ($18) {
   $19 = HEAP32[$1>>2]|0;
   $20 = ($19|0)>(1);
   if ($20) {
    HEAP32[$1>>2] = 1;
   }
   $21 = HEAP32[$2>>2]|0;
   $22 = ($$01719|0)<($21|0);
   if ($22) {
    HEAP32[$2>>2] = $$01719;
   }
   $23 = HEAP32[$3>>2]|0;
   $24 = ($23|0)>(1);
   if (!($24)) {
    HEAP32[$3>>2] = 1;
   }
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)>($$01719|0);
   if (!($26)) {
    HEAP32[$4>>2] = $$01719;
   }
  }
  $27 = (((((($0)) + 8|0) + (($$01719*20)|0)|0)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(1);
  if ($29) {
   $30 = HEAP32[$1>>2]|0;
   $31 = ($30|0)>(2);
   if ($31) {
    HEAP32[$1>>2] = 2;
   }
   $32 = HEAP32[$2>>2]|0;
   $33 = ($$01719|0)<($32|0);
   if ($33) {
    HEAP32[$2>>2] = $$01719;
   }
   $34 = HEAP32[$3>>2]|0;
   $35 = ($34|0)>(2);
   if (!($35)) {
    HEAP32[$3>>2] = 2;
   }
   $36 = HEAP32[$4>>2]|0;
   $37 = ($36|0)>($$01719|0);
   if (!($37)) {
    HEAP32[$4>>2] = $$01719;
   }
  }
  $38 = (((((($0)) + 8|0) + (($$01719*20)|0)|0)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(1);
  if ($40) {
   $41 = HEAP32[$1>>2]|0;
   $42 = ($41|0)>(3);
   if ($42) {
    HEAP32[$1>>2] = 3;
   }
   $43 = HEAP32[$2>>2]|0;
   $44 = ($$01719|0)<($43|0);
   if ($44) {
    HEAP32[$2>>2] = $$01719;
   }
   $45 = HEAP32[$3>>2]|0;
   $46 = ($45|0)>(3);
   if (!($46)) {
    HEAP32[$3>>2] = 3;
   }
   $47 = HEAP32[$4>>2]|0;
   $48 = ($47|0)>($$01719|0);
   if (!($48)) {
    HEAP32[$4>>2] = $$01719;
   }
  }
  $49 = (((((($0)) + 8|0) + (($$01719*20)|0)|0)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(1);
  if ($51) {
   $52 = HEAP32[$1>>2]|0;
   $53 = ($52|0)>(4);
   if ($53) {
    HEAP32[$1>>2] = 4;
   }
   $54 = HEAP32[$2>>2]|0;
   $55 = ($$01719|0)<($54|0);
   if ($55) {
    HEAP32[$2>>2] = $$01719;
   }
   $56 = HEAP32[$3>>2]|0;
   $57 = ($56|0)>(4);
   if (!($57)) {
    HEAP32[$3>>2] = 4;
   }
   $58 = HEAP32[$4>>2]|0;
   $59 = ($58|0)>($$01719|0);
   if (!($59)) {
    HEAP32[$4>>2] = $$01719;
   }
  }
  $60 = (($$01719) + 1)|0;
  $exitcond = ($60|0)==(5);
  if ($exitcond) {
   break;
  } else {
   $$01719 = $60;
  }
 }
 return;
}
function __ZN5Block6rotateEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$08697 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(1);
 if (!($2)) {
  $53 = ((($0)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($0)) + 28|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$53>>2] = $56;
  HEAP32[$55>>2] = $54;
  $57 = ((($0)) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($0)) + 48|0);
  $60 = HEAP32[$59>>2]|0;
  HEAP32[$57>>2] = $60;
  HEAP32[$59>>2] = $58;
  $61 = ((($0)) + 36|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($0)) + 52|0);
  $64 = HEAP32[$63>>2]|0;
  HEAP32[$61>>2] = $64;
  HEAP32[$63>>2] = $62;
  $65 = ((($0)) + 20|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($0)) + 68|0);
  $68 = HEAP32[$67>>2]|0;
  HEAP32[$65>>2] = $68;
  HEAP32[$67>>2] = $66;
  $69 = ((($0)) + 40|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($0)) + 72|0);
  $72 = HEAP32[$71>>2]|0;
  HEAP32[$69>>2] = $72;
  HEAP32[$71>>2] = $70;
  $73 = ((($0)) + 60|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($0)) + 76|0);
  $76 = HEAP32[$75>>2]|0;
  HEAP32[$73>>2] = $76;
  HEAP32[$75>>2] = $74;
  $77 = ((($0)) + 24|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($0)) + 88|0);
  $80 = HEAP32[$79>>2]|0;
  HEAP32[$77>>2] = $80;
  HEAP32[$79>>2] = $78;
  $81 = ((($0)) + 44|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($0)) + 92|0);
  $84 = HEAP32[$83>>2]|0;
  HEAP32[$81>>2] = $84;
  HEAP32[$83>>2] = $82;
  $85 = ((($0)) + 64|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($0)) + 96|0);
  $88 = HEAP32[$87>>2]|0;
  HEAP32[$85>>2] = $88;
  HEAP32[$87>>2] = $86;
  $89 = ((($0)) + 84|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($0)) + 100|0);
  $92 = HEAP32[$91>>2]|0;
  HEAP32[$89>>2] = $92;
  HEAP32[$91>>2] = $90;
  $93 = ((($0)) + 68|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($0)) + 28|0);
  $96 = HEAP32[$95>>2]|0;
  HEAP32[$93>>2] = $96;
  HEAP32[$95>>2] = $94;
  $97 = ((($0)) + 72|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ((($0)) + 32|0);
  $100 = HEAP32[$99>>2]|0;
  HEAP32[$97>>2] = $100;
  HEAP32[$99>>2] = $98;
  $101 = ((($0)) + 76|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($0)) + 36|0);
  $104 = HEAP32[$103>>2]|0;
  HEAP32[$101>>2] = $104;
  HEAP32[$103>>2] = $102;
  $105 = ((($0)) + 80|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ((($0)) + 40|0);
  $108 = HEAP32[$107>>2]|0;
  HEAP32[$105>>2] = $108;
  HEAP32[$107>>2] = $106;
  $109 = ((($0)) + 84|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($0)) + 44|0);
  $112 = HEAP32[$111>>2]|0;
  HEAP32[$109>>2] = $112;
  HEAP32[$111>>2] = $110;
  $113 = ((($0)) + 88|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($0)) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  HEAP32[$113>>2] = $116;
  HEAP32[$115>>2] = $114;
  $117 = ((($0)) + 92|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($0)) + 12|0);
  $120 = HEAP32[$119>>2]|0;
  HEAP32[$117>>2] = $120;
  HEAP32[$119>>2] = $118;
  $121 = ((($0)) + 96|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($0)) + 16|0);
  $124 = HEAP32[$123>>2]|0;
  HEAP32[$121>>2] = $124;
  HEAP32[$123>>2] = $122;
  $125 = ((($0)) + 100|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($0)) + 20|0);
  $128 = HEAP32[$127>>2]|0;
  HEAP32[$125>>2] = $128;
  HEAP32[$127>>2] = $126;
  $129 = ((($0)) + 104|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ((($0)) + 24|0);
  $132 = HEAP32[$131>>2]|0;
  HEAP32[$129>>2] = $132;
  HEAP32[$131>>2] = $130;
  __ZN5Block13computeBoundsEv($0);
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $indvars$iv = 0;
  while(1) {
   $5 = ($indvars$iv|0)>(0);
   if ($5) {
    $$08697 = 0;
    while(1) {
     $8 = ((((($0)) + 8|0) + (($$08697*20)|0)|0) + ($indvars$iv<<2)|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ((((($0)) + 8|0) + (($indvars$iv*20)|0)|0) + ($$08697<<2)|0);
     $11 = HEAP32[$10>>2]|0;
     HEAP32[$8>>2] = $11;
     HEAP32[$10>>2] = $9;
     $12 = (($$08697) + 1)|0;
     $exitcond = ($12|0)==($indvars$iv|0);
     if ($exitcond) {
      break;
     } else {
      $$08697 = $12;
     }
    }
   }
   $indvars$iv$next = (($indvars$iv) + 1)|0;
   $6 = HEAP32[$0>>2]|0;
   $7 = ($indvars$iv$next|0)<($6|0);
   if ($7) {
    $indvars$iv = $indvars$iv$next;
   } else {
    break;
   }
  }
 }
 $13 = ((($0)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$13>>2] = $16;
 HEAP32[$15>>2] = $14;
 $17 = ((($0)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$17>>2] = $20;
 HEAP32[$19>>2] = $18;
 $21 = ((($0)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$21>>2] = $24;
 HEAP32[$23>>2] = $22;
 $25 = ((($0)) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$25>>2] = $28;
 HEAP32[$27>>2] = $26;
 $29 = ((($0)) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($0)) + 48|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$29>>2] = $32;
 HEAP32[$31>>2] = $30;
 $33 = ((($0)) + 60|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($0)) + 52|0);
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$33>>2] = $36;
 HEAP32[$35>>2] = $34;
 $37 = ((($0)) + 84|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($0)) + 68|0);
 $40 = HEAP32[$39>>2]|0;
 HEAP32[$37>>2] = $40;
 HEAP32[$39>>2] = $38;
 $41 = ((($0)) + 80|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($0)) + 72|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$41>>2] = $44;
 HEAP32[$43>>2] = $42;
 $45 = ((($0)) + 104|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($0)) + 88|0);
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$45>>2] = $48;
 HEAP32[$47>>2] = $46;
 $49 = ((($0)) + 100|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($0)) + 92|0);
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$49>>2] = $52;
 HEAP32[$51>>2] = $50;
 __ZN5Block13computeBoundsEv($0);
 return;
}
function __ZN5Block6citireERNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer = sp;
 $2 = sp + 216|0;
 $3 = sp + 28|0;
 $4 = sp + 16|0;
 $5 = sp + 4|0;
 $6 = ((($3)) + 108|0);
 $7 = ((($3)) + 8|0);
 HEAP32[$3>>2] = ((1672));
 HEAP32[$6>>2] = ((1692));
 $8 = ((($3)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 108|0);
 __ZNSt3__28ios_base4initEPv($9,$7);
 $10 = ((($3)) + 180|0);
 HEAP32[$10>>2] = 0;
 $11 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $12 = ((($3)) + 184|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$3>>2] = (1712);
 HEAP32[$6>>2] = (1732);
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev($7);
 $13 = ((($1)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = HEAP32[$1>>2]|0;
 $17 = $15 ? $16 : $1;
 $18 = (__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($7,$17,8)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = HEAP32[$3>>2]|0;
  $21 = ((($20)) + -12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($3) + ($22)|0);
  $24 = ((($23)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 4;
  __ZNSt3__28ios_base5clearEj($23,$26);
 }
 $27 = ((($3)) + 72|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  $30 = (__ZNSt3__211char_traitsIcE6lengthEPKc(13940)|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($4,13940,$30);
  __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_($5,$4,$1);
  $31 = ((($4)) + 11|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = ($32<<24>>24)<(0);
  if ($33) {
   $34 = HEAP32[$4>>2]|0;
   HEAP8[$2>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($34,$2);
   $35 = ((($4)) + 4|0);
   HEAP32[$35>>2] = 0;
  } else {
   HEAP8[$2>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($4,$2);
   HEAP8[$31>>0] = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($4,0);
  ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
  $36 = HEAP8[$31>>0]|0;
  $37 = ($36<<24>>24)<(0);
  $38 = HEAP32[$4>>2]|0;
  $39 = $37 ? $38 : $4;
  _TraceLog(0,$39,$vararg_buffer);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 }
 $40 = ((($0)) + 8|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$40)|0);
 $41 = ((($0)) + 12|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$41)|0);
 $42 = ((($0)) + 16|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$42)|0);
 $43 = ((($0)) + 20|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$43)|0);
 $44 = ((($0)) + 24|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$44)|0);
 $45 = ((($0)) + 28|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$45)|0);
 $46 = ((($0)) + 32|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$46)|0);
 $47 = ((($0)) + 36|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$47)|0);
 $48 = ((($0)) + 40|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$48)|0);
 $49 = ((($0)) + 44|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$49)|0);
 $50 = ((($0)) + 48|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$50)|0);
 $51 = ((($0)) + 52|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$51)|0);
 $52 = ((($0)) + 56|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$52)|0);
 $53 = ((($0)) + 60|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$53)|0);
 $54 = ((($0)) + 64|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$54)|0);
 $55 = ((($0)) + 68|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$55)|0);
 $56 = ((($0)) + 72|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$56)|0);
 $57 = ((($0)) + 76|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$57)|0);
 $58 = ((($0)) + 80|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$58)|0);
 $59 = ((($0)) + 84|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$59)|0);
 $60 = ((($0)) + 88|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$60)|0);
 $61 = ((($0)) + 92|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$61)|0);
 $62 = ((($0)) + 96|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$62)|0);
 $63 = ((($0)) + 100|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$63)|0);
 $64 = ((($0)) + 104|0);
 (__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($3,$64)|0);
 __ZN5Block13computeBoundsEv($0);
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (1764);
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 40|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 52|0);
 $7 = ((($0)) + 68|0);
 $8 = ((($0)) + 98|0);
 dest=$6; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$6+44>>1]=0|0;HEAP8[$6+46>>0]=0|0;
 $9 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($1,$9);
 $10 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $10;
 $11 = (__ZNKSt3__26locale9has_facetERNS0_2idE($2,40200)|0);
 __ZNSt3__26localeD2Ev($2);
 if (!($11)) {
  $20 = HEAP32[$0>>2]|0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  (FUNCTION_TABLE_iiii[$22 & 31]($0,0,4096)|0);
  STACKTOP = sp;return;
 }
 __ZNSt3__26localeC2ERKS0_($1,$9);
 $12 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $12;
 $13 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,40200)|0);
 HEAP32[$7>>2] = $13;
 __ZNSt3__26localeD2Ev($2);
 $14 = HEAP32[$7>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 127]($14)|0);
 $19 = $18&1;
 HEAP8[$8>>0] = $19;
 $20 = HEAP32[$0>>2]|0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 (FUNCTION_TABLE_iiii[$22 & 31]($0,0,4096)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$ph = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if ($5) {
   $6 = $2 & -3;
   do {
    switch ($6|0) {
    case 48: case 16:  {
     $$0$ph = 14002;
     break;
    }
    case 1: case 17:  {
     $$0$ph = 14004;
     break;
    }
    case 8:  {
     $$0$ph = 14006;
     break;
    }
    case 24:  {
     $$0$ph = 14008;
     break;
    }
    case 56:  {
     $$0$ph = 14011;
     break;
    }
    case 9: case 25:  {
     $$0$ph = 14014;
     break;
    }
    case 52: case 20:  {
     $$0$ph = 19385;
     break;
    }
    case 5: case 21:  {
     $$0$ph = 14017;
     break;
    }
    case 12:  {
     $$0$ph = 19628;
     break;
    }
    case 28:  {
     $$0$ph = 14020;
     break;
    }
    case 60:  {
     $$0$ph = 14024;
     break;
    }
    case 13: case 29:  {
     $$0$ph = 14028;
     break;
    }
    default: {
     $$2 = 0;
     break L1;
    }
    }
   } while(0);
   $7 = (_fopen($1,$$0$ph)|0);
   HEAP32[$3>>2] = $7;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$2 = 0;
   } else {
    $9 = ((($0)) + 88|0);
    HEAP32[$9>>2] = $2;
    $10 = $2 & 2;
    $11 = ($10|0)==(0);
    if ($11) {
     $$2 = $0;
    } else {
     $12 = HEAP32[$3>>2]|0;
     $13 = (_fseek($12,0,2)|0);
     $14 = ($13|0)==(0);
     if ($14) {
      $$2 = $0;
     } else {
      $15 = HEAP32[$3>>2]|0;
      (_fclose($15)|0);
      HEAP32[$3>>2] = 0;
      $$2 = 0;
     }
    }
   }
  } else {
   $$2 = 0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1764);
 (__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv($0)|0);
 $1 = ((($0)) + 96|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 $7 = ((($0)) + 97|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  $10 = ((($0)) + 56|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __ZdaPv($11);
  }
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 return;
}
function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4&255;
 $9 = $5 ? $7 : $8;
 $10 = ((($2)) + 11|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $11&255;
 $16 = $12 ? $14 : $15;
 $17 = HEAP8[$3>>0]|0;
 $18 = ($17<<24>>24)<(0);
 $19 = HEAP32[$1>>2]|0;
 $20 = $18 ? $19 : $1;
 $21 = (($16) + ($9))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj($0,$20,$9,$21);
 $22 = HEAP8[$10>>0]|0;
 $23 = ($22<<24>>24)<(0);
 $24 = HEAP32[$2>>2]|0;
 $25 = $23 ? $24 : $2;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$25,$16)|0);
 return;
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 return;
}
function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED2Ev($0,1740);
 $1 = ((($0)) + 108|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = ((($$cast)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + ($6)|0);
 HEAP32[$7>>2] = $4;
 $8 = ((($0)) + 8|0);
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($8);
 $9 = ((($1)) + 4|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,$9);
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 127]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,40200)|0);
 $6 = ((($0)) + 68|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 98|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($5)|0);
 $13 = $12&1;
 HEAP8[$7>>0] = $13;
 $14 = $8&255;
 $15 = $12&1;
 $16 = ($14|0)==($15|0);
 if ($16) {
  return;
 }
 $17 = ((($0)) + 8|0);
 ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;HEAP32[$17+16>>2]=0|0;HEAP32[$17+20>>2]=0|0;
 $18 = HEAP8[$7>>0]|0;
 $19 = ($18<<24>>24)==(0);
 $20 = ((($0)) + 96|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)!=(0);
 if (!($19)) {
  if ($22) {
   $23 = ((($0)) + 32|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if (!($25)) {
    __ZdaPv($24);
   }
  }
  $26 = ((($0)) + 97|0);
  $27 = HEAP8[$26>>0]|0;
  HEAP8[$20>>0] = $27;
  $28 = ((($0)) + 60|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($0)) + 52|0);
  HEAP32[$30>>2] = $29;
  $31 = ((($0)) + 56|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 32|0);
  HEAP32[$33>>2] = $32;
  HEAP32[$28>>2] = 0;
  HEAP32[$31>>2] = 0;
  HEAP8[$26>>0] = 0;
  return;
 }
 if (!($22)) {
  $34 = ((($0)) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($0)) + 44|0);
  $37 = ($35|0)==($36|0);
  if (!($37)) {
   $38 = ((($0)) + 52|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($0)) + 60|0);
   HEAP32[$40>>2] = $39;
   $41 = HEAP32[$34>>2]|0;
   $42 = ((($0)) + 56|0);
   HEAP32[$42>>2] = $41;
   $43 = ((($0)) + 97|0);
   HEAP8[$43>>0] = 0;
   $44 = HEAP32[$38>>2]|0;
   $45 = (__Znaj($44)|0);
   HEAP32[$34>>2] = $45;
   HEAP8[$20>>0] = 1;
   return;
  }
 }
 $46 = ((($0)) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($0)) + 60|0);
 HEAP32[$48>>2] = $47;
 $49 = (__Znaj($47)|0);
 $50 = ((($0)) + 56|0);
 HEAP32[$50>>2] = $49;
 $51 = ((($0)) + 97|0);
 HEAP8[$51>>0] = 1;
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond13 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 96|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;HEAP32[$3+20>>2]=0|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   __ZdaPv($8);
  }
 }
 $10 = ((($0)) + 97|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if (!($12)) {
  $13 = ((($0)) + 56|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   __ZdaPv($14);
  }
 }
 $16 = ((($0)) + 52|0);
 HEAP32[$16>>2] = $2;
 $17 = ($2>>>0)>(8);
 do {
  if ($17) {
   $18 = ((($0)) + 98|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)!=(0);
   $21 = ($1|0)!=(0|0);
   $or$cond = $21 & $20;
   if ($or$cond) {
    $22 = ((($0)) + 32|0);
    HEAP32[$22>>2] = $1;
    HEAP8[$4>>0] = 0;
    break;
   } else {
    $23 = (__Znaj($2)|0);
    $24 = ((($0)) + 32|0);
    HEAP32[$24>>2] = $23;
    HEAP8[$4>>0] = 1;
    break;
   }
  } else {
   $25 = ((($0)) + 44|0);
   $26 = ((($0)) + 32|0);
   HEAP32[$26>>2] = $25;
   HEAP32[$16>>2] = 8;
   HEAP8[$4>>0] = 0;
  }
 } while(0);
 $27 = ((($0)) + 98|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28<<24>>24)==(0);
 if (!($29)) {
  $38 = ((($0)) + 60|0);
  HEAP32[$38>>2] = 0;
  $39 = ((($0)) + 56|0);
  HEAP32[$39>>2] = 0;
  HEAP8[$10>>0] = 0;
  return ($0|0);
 }
 $30 = ($2|0)<(8);
 $$sroa$speculated = $30 ? 8 : $2;
 $31 = ((($0)) + 60|0);
 HEAP32[$31>>2] = $$sroa$speculated;
 $32 = ($1|0)!=(0|0);
 $33 = ($$sroa$speculated>>>0)>(7);
 $or$cond13 = $32 & $33;
 if ($or$cond13) {
  $34 = ((($0)) + 56|0);
  HEAP32[$34>>2] = $1;
  HEAP8[$10>>0] = 0;
  return ($0|0);
 } else {
  $35 = HEAP32[$31>>2]|0;
  $36 = (__Znaj($35)|0);
  $37 = ((($0)) + 56|0);
  HEAP32[$37>>2] = $36;
  HEAP8[$10>>0] = 1;
  return ($0|0);
 }
 return (0)|0;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$off0 = 0, $$sroa$5$0$$sroa_idx13 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($9);
  ___cxa_throw(($9|0),(1520|0),(111|0));
  // unreachable;
 }
 $10 = HEAP32[$7>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($7)|0);
 $14 = ((($1)) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = ($13|0)<(1);
  $18 = ($2|0)!=(0);
  $19 = ($3|0)!=(0);
  $20 = $18 | $19;
  $or$cond = $20 & $17;
  if (!($or$cond)) {
   $21 = HEAP32[$1>>2]|0;
   $22 = ((($21)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (FUNCTION_TABLE_ii[$23 & 127]($1)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $switch = ($4>>>0)<(3);
    if (!($switch)) {
     $35 = $0;
     $36 = $35;
     HEAP32[$36>>2] = 0;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = 0;
     $39 = ((($0)) + 8|0);
     $40 = $39;
     $41 = $40;
     HEAP32[$41>>2] = -1;
     $42 = (($40) + 4)|0;
     $43 = $42;
     HEAP32[$43>>2] = -1;
     return;
    }
    $44 = HEAP32[$14>>2]|0;
    $45 = ($13|0)>(0);
    $46 = ($13|0)<(0);
    $47 = $46 << 31 >> 31;
    $48 = (___muldi3(($13|0),($47|0),($2|0),($3|0))|0);
    $49 = tempRet0;
    $$off0 = $45 ? $48 : 0;
    $50 = (___fseeko($44,$$off0,$4)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     $61 = HEAP32[$14>>2]|0;
     $62 = (___ftello($61)|0);
     $63 = ($62|0)<(0);
     $64 = $63 << 31 >> 31;
     $65 = ((($1)) + 72|0);
     $66 = $65;
     $67 = $66;
     $68 = HEAP32[$67>>2]|0;
     $69 = (($66) + 4)|0;
     $70 = $69;
     $71 = HEAP32[$70>>2]|0;
     $72 = $0;
     $73 = $72;
     HEAP32[$73>>2] = $68;
     $74 = (($72) + 4)|0;
     $75 = $74;
     HEAP32[$75>>2] = $71;
     $$sroa$5$0$$sroa_idx13 = ((($0)) + 8|0);
     $76 = $$sroa$5$0$$sroa_idx13;
     $77 = $76;
     HEAP32[$77>>2] = $62;
     $78 = (($76) + 4)|0;
     $79 = $78;
     HEAP32[$79>>2] = $64;
     return;
    } else {
     $52 = $0;
     $53 = $52;
     HEAP32[$53>>2] = 0;
     $54 = (($52) + 4)|0;
     $55 = $54;
     HEAP32[$55>>2] = 0;
     $56 = ((($0)) + 8|0);
     $57 = $56;
     $58 = $57;
     HEAP32[$58>>2] = -1;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = -1;
     return;
    }
   }
  }
 }
 $26 = $0;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = 0;
 $30 = ((($0)) + 8|0);
 $31 = $30;
 $32 = $31;
 HEAP32[$32>>2] = -1;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = -1;
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$1>>2]|0;
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 127]($1)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $21 = HEAP32[$4>>2]|0;
   $22 = ((($2)) + 8|0);
   $23 = $22;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = (($23) + 4)|0;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (___fseeko($21,$25,0)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $40 = ((($1)) + 72|0);
    $41 = $2;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = $40;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
    ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;
    return;
   } else {
    $31 = $0;
    $32 = $31;
    HEAP32[$32>>2] = 0;
    $33 = (($31) + 4)|0;
    $34 = $33;
    HEAP32[$34>>2] = 0;
    $35 = ((($0)) + 8|0);
    $36 = $35;
    $37 = $36;
    HEAP32[$37>>2] = -1;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = -1;
    return;
   }
  }
 }
 $12 = $0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 8|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = -1;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = -1;
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0|0;
 var $$129$off0 = 0, $$131 = 0, $$4 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $5 = ((($0)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($8);
  ___cxa_throw(($8|0),(1520|0),(111|0));
  // unreachable;
 }
 $9 = ((($0)) + 92|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 16;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $46 = $10 & 8;
   $47 = ($46|0)==(0);
   if (!($47)) {
    $48 = ((($0)) + 80|0);
    $49 = $48;
    $50 = $49;
    $51 = HEAP32[$50>>2]|0;
    $52 = (($49) + 4)|0;
    $53 = $52;
    $54 = HEAP32[$53>>2]|0;
    $55 = $1;
    $56 = $55;
    HEAP32[$56>>2] = $51;
    $57 = (($55) + 4)|0;
    $58 = $57;
    HEAP32[$58>>2] = $54;
    $59 = ((($0)) + 98|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = ($60<<24>>24)==(0);
    do {
     if ($61) {
      $67 = HEAP32[$5>>2]|0;
      $68 = HEAP32[$67>>2]|0;
      $69 = ((($68)) + 24|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (FUNCTION_TABLE_ii[$70 & 127]($67)|0);
      $72 = ((($0)) + 40|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ((($0)) + 36|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = (($73) - ($75))|0;
      $77 = ($71|0)>(0);
      if ($77) {
       $78 = ((($0)) + 16|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ((($0)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = (($79) - ($81))|0;
       $83 = Math_imul($82, $71)|0;
       $84 = (($83) + ($76))|0;
       $$129$off0 = 0;$$131 = $84;
       break;
      }
      $85 = ((($0)) + 12|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ((($0)) + 16|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = ($86|0)==($88|0);
      if ($89) {
       $$129$off0 = 0;$$131 = $76;
      } else {
       $90 = HEAP32[$5>>2]|0;
       $91 = ((($0)) + 32|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = HEAP32[$74>>2]|0;
       $94 = ((($0)) + 8|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = $86;
       $97 = (($96) - ($95))|0;
       $98 = HEAP32[$90>>2]|0;
       $99 = ((($98)) + 32|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = (FUNCTION_TABLE_iiiiii[$100 & 31]($90,$1,$92,$93,$97)|0);
       $102 = HEAP32[$74>>2]|0;
       $103 = HEAP32[$91>>2]|0;
       $104 = (($76) - ($101))|0;
       $105 = (($104) + ($102))|0;
       $106 = (($105) - ($103))|0;
       $$129$off0 = 1;$$131 = $106;
      }
     } else {
      $62 = ((($0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($0)) + 12|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (($63) - ($65))|0;
      $$129$off0 = 0;$$131 = $66;
     }
    } while(0);
    $107 = HEAP32[$2>>2]|0;
    $108 = (0 - ($$131))|0;
    $109 = (___fseeko($107,$108,1)|0);
    $110 = ($109|0)==(0);
    if (!($110)) {
     $$4 = -1;
     STACKTOP = sp;return ($$4|0);
    }
    if ($$129$off0) {
     $111 = ((($0)) + 72|0);
     $112 = $1;
     $113 = $112;
     $114 = HEAP32[$113>>2]|0;
     $115 = (($112) + 4)|0;
     $116 = $115;
     $117 = HEAP32[$116>>2]|0;
     $118 = $111;
     $119 = $118;
     HEAP32[$119>>2] = $114;
     $120 = (($118) + 4)|0;
     $121 = $120;
     HEAP32[$121>>2] = $117;
    }
    $122 = ((($0)) + 32|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ((($0)) + 40|0);
    HEAP32[$124>>2] = $123;
    $125 = ((($0)) + 36|0);
    HEAP32[$125>>2] = $123;
    $126 = ((($0)) + 8|0);
    HEAP32[$126>>2] = 0;
    $127 = ((($0)) + 12|0);
    HEAP32[$127>>2] = 0;
    $128 = ((($0)) + 16|0);
    HEAP32[$128>>2] = 0;
    HEAP32[$9>>2] = 0;
   }
  } else {
   $13 = ((($0)) + 24|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($0)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if (!($17)) {
    $18 = HEAP32[$0>>2]|0;
    $19 = ((($18)) + 52|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $22 = (FUNCTION_TABLE_iii[$20 & 31]($0,$21)|0);
    $23 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $24 = ($22|0)==($23|0);
    if ($24) {
     $$4 = -1;
     STACKTOP = sp;return ($$4|0);
    }
   }
   $25 = ((($0)) + 72|0);
   $26 = ((($0)) + 32|0);
   $27 = ((($0)) + 52|0);
   L30: while(1) {
    $28 = HEAP32[$5>>2]|0;
    $29 = HEAP32[$26>>2]|0;
    $30 = HEAP32[$27>>2]|0;
    $31 = (($29) + ($30)|0);
    $32 = HEAP32[$28>>2]|0;
    $33 = ((($32)) + 20|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_iiiiii[$34 & 31]($28,$25,$29,$31,$1)|0);
    $36 = HEAP32[$1>>2]|0;
    $37 = HEAP32[$26>>2]|0;
    $38 = $37;
    $39 = (($36) - ($38))|0;
    $40 = HEAP32[$2>>2]|0;
    $41 = (_fwrite($37,1,$39,$40)|0);
    $42 = ($41|0)==($39|0);
    if (!($42)) {
     $$4 = -1;
     label = 24;
     break;
    }
    switch ($35|0) {
    case 1:  {
     break;
    }
    case 2:  {
     $$4 = -1;
     label = 24;
     break L30;
     break;
    }
    default: {
     label = 10;
     break L30;
    }
    }
   }
   if ((label|0) == 10) {
    $43 = HEAP32[$2>>2]|0;
    $44 = (_fflush($43)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     break;
    } else {
     $$4 = -1;
    }
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 24) {
    STACKTOP = sp;return ($$4|0);
   }
  }
 } while(0);
 $$4 = 0;
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$3 = 0, $$cast = 0, $$cast54 = 0, $$sroa$speculated = 0, $$sroa$speculated45 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($0)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = ((($1)) + 1|0);
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $1;
  HEAP32[$8>>2] = $11;
  $13 = ((($0)) + 16|0);
  HEAP32[$13>>2] = $11;
 }
 if ($7) {
  $27 = 0;
 } else {
  $14 = ((($0)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) - ($17))|0;
  $19 = (($18|0) / 2)&-1;
  $20 = ($19>>>0)>(4);
  $$sroa$speculated45 = $20 ? 4 : $19;
  $27 = $$sroa$speculated45;
 }
 $21 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $22 = HEAP32[$8>>2]|0;
 $23 = ((($0)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($22|0)==($24|0);
 do {
  if ($25) {
   $26 = (0 - ($27))|0;
   $28 = ((($0)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($24) + ($26)|0);
   _memmove(($29|0),($30|0),($27|0))|0;
   $31 = ((($0)) + 98|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)==(0);
   if (!($33)) {
    $34 = HEAP32[$23>>2]|0;
    $35 = HEAP32[$28>>2]|0;
    $36 = $35;
    $37 = (($34) - ($27))|0;
    $38 = (($37) - ($36))|0;
    $39 = (($35) + ($27)|0);
    $40 = HEAP32[$3>>2]|0;
    $41 = (_fread($39,1,$38,$40)|0);
    $42 = ($41|0)==(0);
    if ($42) {
     $$3 = $21;
     break;
    }
    $43 = HEAP32[$28>>2]|0;
    $44 = (($43) + ($27)|0);
    $45 = (($44) + ($41)|0);
    HEAP32[$8>>2] = $44;
    HEAP32[$23>>2] = $45;
    $46 = HEAP8[$44>>0]|0;
    $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $$3 = $47;
    break;
   }
   $48 = ((($0)) + 32|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($0)) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($0)) + 40|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $51;
   $55 = (($53) - ($54))|0;
   _memmove(($49|0),($51|0),($55|0))|0;
   $56 = HEAP32[$48>>2]|0;
   $57 = HEAP32[$52>>2]|0;
   $58 = HEAP32[$50>>2]|0;
   $59 = (($57) - ($58))|0;
   $60 = (($56) + ($59)|0);
   HEAP32[$50>>2] = $60;
   $61 = HEAP32[$48>>2]|0;
   $62 = ((($0)) + 44|0);
   $63 = ($61|0)==($62|0);
   if ($63) {
    $67 = 8;
   } else {
    $64 = ((($0)) + 52|0);
    $65 = HEAP32[$64>>2]|0;
    $67 = $65;
   }
   $66 = (($61) + ($67)|0);
   HEAP32[$52>>2] = $66;
   $68 = ((($0)) + 60|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) - ($27))|0;
   $$cast = $66;
   $71 = HEAP32[$50>>2]|0;
   $72 = (($$cast) - ($71))|0;
   $73 = ($72>>>0)<($70>>>0);
   $$sroa$speculated = $73 ? $72 : $70;
   $74 = ((($0)) + 80|0);
   $75 = ((($0)) + 72|0);
   $76 = $75;
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = (($76) + 4)|0;
   $80 = $79;
   $81 = HEAP32[$80>>2]|0;
   $82 = $74;
   $83 = $82;
   HEAP32[$83>>2] = $78;
   $84 = (($82) + 4)|0;
   $85 = $84;
   HEAP32[$85>>2] = $81;
   $86 = HEAP32[$50>>2]|0;
   $87 = HEAP32[$3>>2]|0;
   $88 = (_fread($86,1,$$sroa$speculated,$87)|0);
   $89 = ($88|0)==(0);
   if ($89) {
    $$3 = $21;
   } else {
    $90 = ((($0)) + 68|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    if ($92) {
     $93 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($93);
     ___cxa_throw(($93|0),(1520|0),(111|0));
     // unreachable;
    }
    $94 = HEAP32[$50>>2]|0;
    $95 = (($94) + ($88)|0);
    HEAP32[$52>>2] = $95;
    $96 = HEAP32[$90>>2]|0;
    $97 = HEAP32[$48>>2]|0;
    $98 = HEAP32[$28>>2]|0;
    $99 = (($98) + ($27)|0);
    $100 = HEAP32[$68>>2]|0;
    $101 = (($98) + ($100)|0);
    $102 = HEAP32[$96>>2]|0;
    $103 = ((($102)) + 16|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (FUNCTION_TABLE_iiiiiiiii[$104 & 15]($96,$75,$97,$95,$50,$99,$101,$2)|0);
    $106 = ($105|0)==(3);
    if ($106) {
     $107 = HEAP32[$48>>2]|0;
     $108 = HEAP32[$52>>2]|0;
     HEAP32[$28>>2] = $107;
     HEAP32[$8>>2] = $107;
     HEAP32[$23>>2] = $108;
     $$cast54 = $107;
     $109 = HEAP8[$$cast54>>0]|0;
     $110 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($109)|0);
     $$1 = $110;
    } else {
     $111 = HEAP32[$2>>2]|0;
     $112 = HEAP32[$28>>2]|0;
     $113 = (($112) + ($27)|0);
     $114 = ($111|0)==($113|0);
     if ($114) {
      $$1 = $21;
     } else {
      HEAP32[$8>>2] = $113;
      HEAP32[$23>>2] = $111;
      $115 = HEAP8[$113>>0]|0;
      $116 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($115)|0);
      $$1 = $116;
     }
    }
    $$3 = $$1;
   }
  } else {
   $117 = HEAP8[$22>>0]|0;
   $118 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($117)|0);
   $$3 = $118;
  }
 } while(0);
 $119 = ((($0)) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)==($1|0);
 if ($121) {
  HEAP32[$119>>2] = 0;
  HEAP32[$8>>2] = 0;
  HEAP32[$23>>2] = 0;
 }
 $$0 = $$3;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($0)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($0)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $11 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1,$10)|0);
    if ($11) {
     $12 = HEAP32[$7>>2]|0;
     $13 = ((($12)) + -1|0);
     HEAP32[$7>>2] = $13;
     $14 = (__ZNSt3__211char_traitsIcE7not_eofEi($1)|0);
     $$0 = $14;
     return ($$0|0);
    }
    $15 = ((($0)) + 88|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 16;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($1)|0);
     $20 = HEAP32[$7>>2]|0;
     $21 = ((($20)) + -1|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = (__ZNSt3__211char_traitsIcE2eqEcc($19,$22)|0);
     if (!($23)) {
      break;
     }
    }
    $24 = HEAP32[$7>>2]|0;
    $25 = ((($24)) + -1|0);
    HEAP32[$7>>2] = $25;
    $26 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($1)|0);
    $27 = HEAP32[$7>>2]|0;
    HEAP8[$27>>0] = $26;
    $$0 = $1;
    return ($$0|0);
   }
  }
 } while(0);
 $28 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $$0 = $28;
 return ($$0|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$5$ph = 0, $$6 = 0, $$7 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $$7 = $8;
  STACKTOP = sp;return ($$7|0);
 }
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($0);
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $14 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1,$13)|0);
 if (!($14)) {
  $15 = ((($0)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $18 = ((($2)) + 1|0);
   HEAP32[$15>>2] = $2;
   HEAP32[$9>>2] = $2;
   HEAP32[$11>>2] = $18;
  }
  $19 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($1)|0);
  $20 = HEAP32[$15>>2]|0;
  HEAP8[$20>>0] = $19;
  $21 = HEAP32[$15>>2]|0;
  $22 = ((($21)) + 1|0);
  HEAP32[$15>>2] = $22;
 }
 $23 = ((($0)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$9>>2]|0;
 $26 = ($24|0)==($25|0);
 L11: do {
  if ($26) {
   label = 30;
  } else {
   $27 = ((($0)) + 98|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = ($28<<24>>24)==(0);
   do {
    if ($29) {
     $37 = ((($0)) + 32|0);
     $38 = HEAP32[$37>>2]|0;
     HEAP32[$3>>2] = $38;
     $39 = ((($0)) + 68|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(0|0);
     if ($41) {
      $44 = (___cxa_allocate_exception(4)|0);
      __ZNSt8bad_castC2Ev($44);
      ___cxa_throw(($44|0),(1520|0),(111|0));
      // unreachable;
     }
     $42 = ((($0)) + 72|0);
     $43 = ((($0)) + 52|0);
     while(1) {
      $45 = HEAP32[$39>>2]|0;
      $46 = HEAP32[$9>>2]|0;
      $47 = HEAP32[$23>>2]|0;
      $48 = HEAP32[$37>>2]|0;
      $49 = HEAP32[$43>>2]|0;
      $50 = (($48) + ($49)|0);
      $51 = HEAP32[$45>>2]|0;
      $52 = ((($51)) + 12|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (FUNCTION_TABLE_iiiiiiiii[$53 & 15]($45,$42,$46,$47,$4,$48,$50,$3)|0);
      $55 = HEAP32[$4>>2]|0;
      $56 = HEAP32[$9>>2]|0;
      $57 = ($55|0)==($56|0);
      if ($57) {
       label = 15;
       break;
      }
      $59 = ($54|0)==(3);
      if ($59) {
       label = 17;
       break;
      }
      $67 = ($54|0)==(1);
      $68 = $54 | 1;
      $69 = ($68|0)==(1);
      if (!($69)) {
       label = 25;
       break;
      }
      $70 = HEAP32[$3>>2]|0;
      $71 = HEAP32[$37>>2]|0;
      $72 = $71;
      $73 = (($70) - ($72))|0;
      $74 = HEAP32[$5>>2]|0;
      $75 = (_fwrite($71,1,$73,$74)|0);
      $76 = ($75|0)==($73|0);
      if (!($76)) {
       label = 24;
       break;
      }
      if (!($67)) {
       label = 26;
       break;
      }
      $77 = HEAP32[$4>>2]|0;
      $78 = HEAP32[$23>>2]|0;
      HEAP32[$9>>2] = $77;
      HEAP32[$11>>2] = $78;
      $79 = $78;
      $80 = (($79) - ($77))|0;
      $$cast = $77;
      $81 = (($$cast) + ($80)|0);
      HEAP32[$23>>2] = $81;
      $82 = HEAP32[$39>>2]|0;
      $83 = ($82|0)==(0|0);
      if ($83) {
       label = 13;
       break;
      }
     }
     do {
      if ((label|0) == 13) {
       $44 = (___cxa_allocate_exception(4)|0);
       __ZNSt8bad_castC2Ev($44);
       ___cxa_throw(($44|0),(1520|0),(111|0));
       // unreachable;
      }
      else if ((label|0) == 15) {
       $58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $$5$ph = $58;
       label = 28;
      }
      else if ((label|0) == 17) {
       $60 = HEAP32[$23>>2]|0;
       $61 = $56;
       $62 = (($60) - ($61))|0;
       $63 = HEAP32[$5>>2]|0;
       $64 = (_fwrite($56,1,$62,$63)|0);
       $65 = ($64|0)==($62|0);
       if ($65) {
        label = 27;
        break;
       } else {
        $66 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $$5$ph = $66;
        label = 28;
        break;
       }
      }
      else if ((label|0) == 24) {
       $84 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $$5$ph = $84;
       label = 28;
      }
      else if ((label|0) == 25) {
       $85 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $$5$ph = $85;
       label = 28;
      }
      else if ((label|0) == 26) {
       label = 27;
      }
     } while(0);
     if ((label|0) == 27) {
      break;
     }
     else if ((label|0) == 28) {
      $$6 = $$5$ph;
      break L11;
     }
    } else {
     $30 = $24;
     $31 = $25;
     $32 = (($30) - ($31))|0;
     $33 = HEAP32[$5>>2]|0;
     $34 = (_fwrite($25,1,$32,$33)|0);
     $35 = ($34|0)==($32|0);
     if (!($35)) {
      $36 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $$6 = $36;
      break L11;
     }
    }
   } while(0);
   HEAP32[$23>>2] = $10;
   HEAP32[$9>>2] = $10;
   HEAP32[$11>>2] = $12;
   label = 30;
  }
 } while(0);
 if ((label|0) == 30) {
  $86 = (__ZNSt3__211char_traitsIcE7not_eofEi($1)|0);
  $$6 = $86;
 }
 $$7 = $$6;
 STACKTOP = sp;return ($$7|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 16;
 $4 = ($3|0)==(0);
 if (!($4)) {
  return;
 }
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>(8);
 do {
  if ($10) {
   $11 = ((($0)) + 98|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(0);
   if ($13) {
    $21 = ((($0)) + 56|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($0)) + 60|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + -1)|0;
    $26 = (($22) + ($25)|0);
    $27 = ((($0)) + 24|0);
    HEAP32[$27>>2] = $22;
    $28 = ((($0)) + 20|0);
    HEAP32[$28>>2] = $22;
    $29 = ((($0)) + 28|0);
    HEAP32[$29>>2] = $26;
    break;
   } else {
    $14 = ((($0)) + 32|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($9) + -1)|0;
    $17 = (($15) + ($16)|0);
    $18 = ((($0)) + 24|0);
    HEAP32[$18>>2] = $15;
    $19 = ((($0)) + 20|0);
    HEAP32[$19>>2] = $15;
    $20 = ((($0)) + 28|0);
    HEAP32[$20>>2] = $17;
    break;
   }
  } else {
   $30 = ((($0)) + 24|0);
   HEAP32[$30>>2] = 0;
   $31 = ((($0)) + 20|0);
   HEAP32[$31>>2] = 0;
   $32 = ((($0)) + 28|0);
   HEAP32[$32>>2] = 0;
  }
 } while(0);
 HEAP32[$1>>2] = 16;
 return;
}
function __ZNSt3__211char_traitsIcE12to_char_typeEi($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 return ($1|0);
}
function __ZNSt3__211char_traitsIcE7not_eofEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $2 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($0,$1)|0);
 if (!($2)) {
  $5 = $0;
  return ($5|0);
 }
 $3 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $4 = $3 ^ -1;
 $5 = $4;
 return ($5|0);
}
function __ZNSt3__211char_traitsIcE2eqEcc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0<<24>>24)==($1<<24>>24);
 return ($2|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 8;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 98|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $19 = ((($0)) + 56|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 60|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $20;
  $25 = ((($0)) + 12|0);
  HEAP32[$25>>2] = $23;
  $26 = ((($0)) + 16|0);
  HEAP32[$26>>2] = $23;
 } else {
  $11 = ((($0)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 52|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + ($14)|0);
  $16 = ((($0)) + 8|0);
  HEAP32[$16>>2] = $12;
  $17 = ((($0)) + 12|0);
  HEAP32[$17>>2] = $15;
  $18 = ((($0)) + 16|0);
  HEAP32[$18>>2] = $15;
 }
 HEAP32[$1>>2] = 8;
 $$0 = 1;
 return ($$0|0);
}
function __ZNSt3__211char_traitsIcE11to_int_typeEc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 return ($1|0);
}
function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZN5Block5desenEiiRK5ColorRK9Texture2D($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$023 = 0, $$byval_copy7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $tmpcast$byval_copy8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmpcast$byval_copy8 = sp + 44|0;
 $$byval_copy7 = sp + 24|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = (($1) + 24)|0;
 $8 = (($1) + 48)|0;
 $9 = (($1) + 72)|0;
 $10 = (($1) + 96)|0;
 $$023 = 0;
 while(1) {
  $11 = ($$023*24)|0;
  $12 = (($11) + ($2))|0;
  $13 = (((($0)) + 8|0) + (($$023*20)|0)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  if ($15) {
   ;HEAP32[$5>>2]=HEAP32[$4>>2]|0;HEAP32[$5+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$4+16>>2]|0;
   $16 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
   HEAP32[$6>>2] = $16;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy7+16>>2]=HEAP32[$5+16>>2]|0;
   ;HEAP8[$tmpcast$byval_copy8>>0]=HEAP8[$6>>0]|0;HEAP8[$tmpcast$byval_copy8+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$tmpcast$byval_copy8+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$tmpcast$byval_copy8+3>>0]=HEAP8[$6+3>>0]|0;
   _DrawTexture($$byval_copy7,$1,$12,$tmpcast$byval_copy8);
  }
  $17 = (((((($0)) + 8|0) + (($$023*20)|0)|0)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(1);
  if ($19) {
   ;HEAP32[$5>>2]=HEAP32[$4>>2]|0;HEAP32[$5+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$4+16>>2]|0;
   $20 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
   HEAP32[$6>>2] = $20;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy7+16>>2]=HEAP32[$5+16>>2]|0;
   ;HEAP8[$tmpcast$byval_copy8>>0]=HEAP8[$6>>0]|0;HEAP8[$tmpcast$byval_copy8+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$tmpcast$byval_copy8+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$tmpcast$byval_copy8+3>>0]=HEAP8[$6+3>>0]|0;
   _DrawTexture($$byval_copy7,$7,$12,$tmpcast$byval_copy8);
  }
  $21 = (((((($0)) + 8|0) + (($$023*20)|0)|0)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(1);
  if ($23) {
   ;HEAP32[$5>>2]=HEAP32[$4>>2]|0;HEAP32[$5+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$4+16>>2]|0;
   $24 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
   HEAP32[$6>>2] = $24;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy7+16>>2]=HEAP32[$5+16>>2]|0;
   ;HEAP8[$tmpcast$byval_copy8>>0]=HEAP8[$6>>0]|0;HEAP8[$tmpcast$byval_copy8+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$tmpcast$byval_copy8+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$tmpcast$byval_copy8+3>>0]=HEAP8[$6+3>>0]|0;
   _DrawTexture($$byval_copy7,$8,$12,$tmpcast$byval_copy8);
  }
  $25 = (((((($0)) + 8|0) + (($$023*20)|0)|0)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(1);
  if ($27) {
   ;HEAP32[$5>>2]=HEAP32[$4>>2]|0;HEAP32[$5+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$4+16>>2]|0;
   $28 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
   HEAP32[$6>>2] = $28;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy7+16>>2]=HEAP32[$5+16>>2]|0;
   ;HEAP8[$tmpcast$byval_copy8>>0]=HEAP8[$6>>0]|0;HEAP8[$tmpcast$byval_copy8+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$tmpcast$byval_copy8+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$tmpcast$byval_copy8+3>>0]=HEAP8[$6+3>>0]|0;
   _DrawTexture($$byval_copy7,$9,$12,$tmpcast$byval_copy8);
  }
  $29 = (((((($0)) + 8|0) + (($$023*20)|0)|0)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(1);
  if ($31) {
   ;HEAP32[$5>>2]=HEAP32[$4>>2]|0;HEAP32[$5+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$4+16>>2]|0;
   $32 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
   HEAP32[$6>>2] = $32;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$$byval_copy7+16>>2]=HEAP32[$5+16>>2]|0;
   ;HEAP8[$tmpcast$byval_copy8>>0]=HEAP8[$6>>0]|0;HEAP8[$tmpcast$byval_copy8+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$tmpcast$byval_copy8+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$tmpcast$byval_copy8+3>>0]=HEAP8[$6+3>>0]|0;
   _DrawTexture($$byval_copy7,$10,$12,$tmpcast$byval_copy8);
  }
  $33 = (($$023) + 1)|0;
  $exitcond = ($33|0)==(5);
  if ($exitcond) {
   break;
  } else {
   $$023 = $33;
  }
 }
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_tetris_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 ___cxx_global_var_init_1();
 ___cxx_global_var_init_3();
 ___cxx_global_var_init_5();
 ___cxx_global_var_init_7();
 ___cxx_global_var_init_8();
 return;
}
function ___cxx_global_var_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8116] = ((1672));
 HEAP32[(32572)>>2] = ((1692));
 HEAP32[(32468)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((32572),(32472));
 HEAP32[(32644)>>2] = 0;
 $0 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(32648)>>2] = $0;
 HEAP32[8116] = (1712);
 HEAP32[(32572)>>2] = (1732);
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev((32472));
 $1 = (__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj((32472),14231,8)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  (___cxa_atexit((13|0),(32464|0),(___dso_handle|0))|0);
  return;
 }
 $3 = HEAP32[8116]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (32464 + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | 4;
 __ZNSt3__28ios_base5clearEj($6,$9);
 (___cxa_atexit((13|0),(32464|0),(___dso_handle|0))|0);
 return;
}
function ___cxx_global_var_init_1() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8163] = ((1840));
 HEAP32[(32756)>>2] = ((1860));
 __ZNSt3__28ios_base4initEPv((32756),(32656));
 HEAP32[(32828)>>2] = 0;
 $0 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(32832)>>2] = $0;
 HEAP32[8163] = (1880);
 HEAP32[(32756)>>2] = (1900);
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev((32656));
 $1 = (__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj((32656),14223,16)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  (___cxa_atexit((23|0),(32652|0),(___dso_handle|0))|0);
  return;
 }
 $3 = HEAP32[8163]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (32652 + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | 4;
 __ZNSt3__28ios_base5clearEj($6,$9);
 (___cxa_atexit((23|0),(32652|0),(___dso_handle|0))|0);
 return;
}
function ___cxx_global_var_init_3() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8209] = ((1672));
 HEAP32[(32944)>>2] = ((1692));
 HEAP32[(32840)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((32944),(32844));
 HEAP32[(33016)>>2] = 0;
 $0 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(33020)>>2] = $0;
 HEAP32[8209] = (1712);
 HEAP32[(32944)>>2] = (1732);
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev((32844));
 $1 = (__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj((32844),14214,8)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  (___cxa_atexit((13|0),(32836|0),(___dso_handle|0))|0);
  return;
 }
 $3 = HEAP32[8209]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (32836 + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | 4;
 __ZNSt3__28ios_base5clearEj($6,$9);
 (___cxa_atexit((13|0),(32836|0),(___dso_handle|0))|0);
 return;
}
function ___cxx_global_var_init_5() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8256] = ((1840));
 HEAP32[(33128)>>2] = ((1860));
 __ZNSt3__28ios_base4initEPv((33128),(33028));
 HEAP32[(33200)>>2] = 0;
 $0 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(33204)>>2] = $0;
 HEAP32[8256] = (1880);
 HEAP32[(33128)>>2] = (1900);
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev((33028));
 $1 = (__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj((33028),14156,16)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  (___cxa_atexit((23|0),(33024|0),(___dso_handle|0))|0);
  return;
 }
 $3 = HEAP32[8256]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (33024 + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | 4;
 __ZNSt3__28ios_base5clearEj($6,$9);
 (___cxa_atexit((23|0),(33024|0),(___dso_handle|0))|0);
 return;
}
function ___cxx_global_var_init_7() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8302] = 0;
 HEAP32[(33212)>>2] = 0;
 HEAP32[(33216)>>2] = 0;
 __ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE8allocateEj(33208,19);
 __ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_j(33208,14080,(14156),19);
 (___cxa_atexit((114|0),(33208|0),(___dso_handle|0))|0);
 return;
}
function ___cxx_global_var_init_8() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4GameC2Ev(33220);
 (___cxa_atexit((115|0),(33220|0),(___dso_handle|0))|0);
 return;
}
function __ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorI5ColorNS_9allocatorIS1_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(1073741823);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(1504|0),(109|0));
  // unreachable;
 } else {
  $6 = $1 << 2;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + ($1<<2)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorI5ColorNS_9allocatorIS1_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__213__vector_baseI5ColorNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$07$i = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 __ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = ($1|0)==($2|0);
 if ($6) {
  __ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($4);
  STACKTOP = sp;return;
 }
 $$07$i = $1;
 while(1) {
  $7 = HEAP32[$5>>2]|0;
  $8 = HEAPU8[$$07$i>>0]|(HEAPU8[$$07$i+1>>0]<<8)|(HEAPU8[$$07$i+2>>0]<<16)|(HEAPU8[$$07$i+3>>0]<<24);
  HEAP8[$7>>0]=$8&255;HEAP8[$7+1>>0]=($8>>8)&255;HEAP8[$7+2>>0]=($8>>16)&255;HEAP8[$7+3>>0]=$8>>24;
  $9 = ((($$07$i)) + 4|0);
  $10 = HEAP32[$5>>2]|0;
  $11 = ((($10)) + 4|0);
  HEAP32[$5>>2] = $11;
  $12 = ($9|0)==($2|0);
  if ($12) {
   break;
  } else {
   $$07$i = $9;
  }
 }
 __ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI5ColorNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__26vectorI5ColorNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNKSt3__26vectorI5ColorNS_9allocatorIS1_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 __ZNKSt3__26vectorI5ColorNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorI5ColorNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev($0,1908);
 $1 = ((($0)) + 104|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = ((($$cast)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + ($6)|0);
 HEAP32[$7>>2] = $4;
 $8 = ((($0)) + 4|0);
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($8);
 $9 = ((($1)) + 4|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,$9);
 return;
}
function __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __Z15UpdateDrawFramePv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4Game6updateEv($0);
 __ZN4Game4drawEv($0);
 return;
}
function _main() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(37536,14238)|0);
 _ShowLogo();
 $0 = HEAP32[455]|0;
 $1 = HEAP32[456]|0;
 _InitWindow($0,$1,14259);
 _SetTargetFPS(60);
 __ZN4Game4initEv(33220);
 _SetExitKey(-1);
 _emscripten_set_main_loop_arg((116|0),(33220|0),0,1);
 __ZN4Game6unloadEv(33220);
 _CloseWindow();
 return 0;
}
function _TraceLog($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 60|0;
 $3 = sp + 56|0;
 $4 = sp + 40|0;
 $5 = sp + 36|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 HEAP32[$5>>2] = 1;
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 switch ($6|0) {
 case 0:  {
  $7 = HEAP32[1524]|0;
  (_fprintf($7,14264,$vararg_buffer)|0);
  break;
 }
 case 1:  {
  $8 = HEAP32[1524]|0;
  (_fprintf($8,14271,$vararg_buffer2)|0);
  break;
 }
 case 2:  {
  $9 = HEAP32[1524]|0;
  (_fprintf($9,14279,$vararg_buffer4)|0);
  break;
 }
 case 3:  {
  $10 = HEAP32[$5>>2]|0;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = HEAP32[1524]|0;
   (_fprintf($12,14289,$vararg_buffer6)|0);
  }
  break;
 }
 default: {
 }
 }
 $13 = HEAP32[$2>>2]|0;
 $14 = ($13|0)!=(3);
 if ($14) {
  label = 9;
 } else {
  $15 = HEAP32[$2>>2]|0;
  $16 = ($15|0)==(3);
  $17 = HEAP32[$5>>2]|0;
  $18 = ($17|0)!=(0);
  $or$cond = $16 & $18;
  if ($or$cond) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  HEAP32[$4>>2] = $varargs;
  $19 = HEAP32[1524]|0;
  $20 = HEAP32[$3>>2]|0;
  (_vfprintf($19,$20,$4)|0);
  $21 = HEAP32[1524]|0;
  (_fprintf($21,14297,$vararg_buffer8)|0);
 }
 $22 = HEAP32[$2>>2]|0;
 $23 = ($22|0)==(1);
 if ($23) {
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _GetExtension($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (_strrchr($4,46)|0);
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$2>>2]|0;
  $10 = ($8|0)==($9|0);
  if (!($10)) {
   $11 = HEAP32[$3>>2]|0;
   $12 = ((($11)) + 1|0);
   HEAP32[$1>>2] = $12;
   $13 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($13|0);
  }
 }
 HEAP32[$1>>2] = 43760;
 $13 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _VectorLength($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = +HEAPF32[$0>>2];
 $3 = +HEAPF32[$0>>2];
 $4 = $2 * $3;
 $5 = ((($0)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($0)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 + $9;
 $11 = ((($0)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($0)) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 $16 = $10 + $15;
 $17 = $16;
 $18 = (+Math_sqrt((+$17)));
 $19 = $18;
 HEAPF32[$1>>2] = $19;
 $20 = +HEAPF32[$1>>2];
 STACKTOP = sp;return (+$20);
}
function _VectorNormalize($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$1>>2] = $0;
 $4 = HEAP32[$1>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$4+8>>2]|0;
 $5 = (+_VectorLength($$byval_copy));
 HEAPF32[$2>>2] = $5;
 $6 = +HEAPF32[$2>>2];
 $7 = $6 == 0.0;
 if ($7) {
  HEAPF32[$2>>2] = 1.0;
 }
 $8 = +HEAPF32[$2>>2];
 $9 = 1.0 / $8;
 HEAPF32[$3>>2] = $9;
 $10 = +HEAPF32[$3>>2];
 $11 = HEAP32[$1>>2]|0;
 $12 = +HEAPF32[$11>>2];
 $13 = $12 * $10;
 HEAPF32[$11>>2] = $13;
 $14 = +HEAPF32[$3>>2];
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 * $14;
 HEAPF32[$16>>2] = $18;
 $19 = +HEAPF32[$3>>2];
 $20 = HEAP32[$1>>2]|0;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $22 * $19;
 HEAPF32[$21>>2] = $23;
 STACKTOP = sp;return;
}
function _VectorTransform($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$2>>2] = $0;
 $6 = HEAP32[$2>>2]|0;
 $7 = +HEAPF32[$6>>2];
 HEAPF32[$3>>2] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 HEAPF32[$4>>2] = $10;
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF32[$12>>2];
 HEAPF32[$5>>2] = $13;
 $14 = +HEAPF32[$1>>2];
 $15 = +HEAPF32[$3>>2];
 $16 = $14 * $15;
 $17 = ((($1)) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = +HEAPF32[$4>>2];
 $20 = $18 * $19;
 $21 = $16 + $20;
 $22 = ((($1)) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = +HEAPF32[$5>>2];
 $25 = $23 * $24;
 $26 = $21 + $25;
 $27 = ((($1)) + 12|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $26 + $28;
 $30 = HEAP32[$2>>2]|0;
 HEAPF32[$30>>2] = $29;
 $31 = ((($1)) + 16|0);
 $32 = +HEAPF32[$31>>2];
 $33 = +HEAPF32[$3>>2];
 $34 = $32 * $33;
 $35 = ((($1)) + 20|0);
 $36 = +HEAPF32[$35>>2];
 $37 = +HEAPF32[$4>>2];
 $38 = $36 * $37;
 $39 = $34 + $38;
 $40 = ((($1)) + 24|0);
 $41 = +HEAPF32[$40>>2];
 $42 = +HEAPF32[$5>>2];
 $43 = $41 * $42;
 $44 = $39 + $43;
 $45 = ((($1)) + 28|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $44 + $46;
 $48 = HEAP32[$2>>2]|0;
 $49 = ((($48)) + 4|0);
 HEAPF32[$49>>2] = $47;
 $50 = ((($1)) + 32|0);
 $51 = +HEAPF32[$50>>2];
 $52 = +HEAPF32[$3>>2];
 $53 = $51 * $52;
 $54 = ((($1)) + 36|0);
 $55 = +HEAPF32[$54>>2];
 $56 = +HEAPF32[$4>>2];
 $57 = $55 * $56;
 $58 = $53 + $57;
 $59 = ((($1)) + 40|0);
 $60 = +HEAPF32[$59>>2];
 $61 = +HEAPF32[$5>>2];
 $62 = $60 * $61;
 $63 = $58 + $62;
 $64 = ((($1)) + 44|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $63 + $65;
 $67 = HEAP32[$2>>2]|0;
 $68 = ((($67)) + 8|0);
 HEAPF32[$68>>2] = $66;
 STACKTOP = sp;return;
}
function _VectorZero($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 STACKTOP = sp;return;
}
function _MatrixTranspose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0, $65 = 0, $7 = 0.0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = sp + 64|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($2)) + 16|0);
 HEAPF32[$8>>2] = $7;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = ((($2)) + 32|0);
 HEAPF32[$12>>2] = $11;
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = +HEAPF32[$14>>2];
 $16 = ((($2)) + 48|0);
 HEAPF32[$16>>2] = $15;
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 16|0);
 $19 = +HEAPF32[$18>>2];
 $20 = ((($2)) + 4|0);
 HEAPF32[$20>>2] = $19;
 $21 = HEAP32[$1>>2]|0;
 $22 = ((($21)) + 20|0);
 $23 = +HEAPF32[$22>>2];
 $24 = ((($2)) + 20|0);
 HEAPF32[$24>>2] = $23;
 $25 = HEAP32[$1>>2]|0;
 $26 = ((($25)) + 24|0);
 $27 = +HEAPF32[$26>>2];
 $28 = ((($2)) + 36|0);
 HEAPF32[$28>>2] = $27;
 $29 = HEAP32[$1>>2]|0;
 $30 = ((($29)) + 28|0);
 $31 = +HEAPF32[$30>>2];
 $32 = ((($2)) + 52|0);
 HEAPF32[$32>>2] = $31;
 $33 = HEAP32[$1>>2]|0;
 $34 = ((($33)) + 32|0);
 $35 = +HEAPF32[$34>>2];
 $36 = ((($2)) + 8|0);
 HEAPF32[$36>>2] = $35;
 $37 = HEAP32[$1>>2]|0;
 $38 = ((($37)) + 36|0);
 $39 = +HEAPF32[$38>>2];
 $40 = ((($2)) + 24|0);
 HEAPF32[$40>>2] = $39;
 $41 = HEAP32[$1>>2]|0;
 $42 = ((($41)) + 40|0);
 $43 = +HEAPF32[$42>>2];
 $44 = ((($2)) + 40|0);
 HEAPF32[$44>>2] = $43;
 $45 = HEAP32[$1>>2]|0;
 $46 = ((($45)) + 44|0);
 $47 = +HEAPF32[$46>>2];
 $48 = ((($2)) + 56|0);
 HEAPF32[$48>>2] = $47;
 $49 = HEAP32[$1>>2]|0;
 $50 = ((($49)) + 48|0);
 $51 = +HEAPF32[$50>>2];
 $52 = ((($2)) + 12|0);
 HEAPF32[$52>>2] = $51;
 $53 = HEAP32[$1>>2]|0;
 $54 = ((($53)) + 52|0);
 $55 = +HEAPF32[$54>>2];
 $56 = ((($2)) + 28|0);
 HEAPF32[$56>>2] = $55;
 $57 = HEAP32[$1>>2]|0;
 $58 = ((($57)) + 56|0);
 $59 = +HEAPF32[$58>>2];
 $60 = ((($2)) + 44|0);
 HEAPF32[$60>>2] = $59;
 $61 = HEAP32[$1>>2]|0;
 $62 = ((($61)) + 60|0);
 $63 = +HEAPF32[$62>>2];
 $64 = ((($2)) + 60|0);
 HEAPF32[$64>>2] = $63;
 $65 = HEAP32[$1>>2]|0;
 dest=$65; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixIdentity($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp;
 dest=$1; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAPF32[$1>>2] = 1.0;
 $2 = ((($1)) + 20|0);
 HEAPF32[$2>>2] = 1.0;
 $3 = ((($1)) + 40|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = ((($1)) + 60|0);
 HEAPF32[$4>>2] = 1.0;
 dest=$0; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixTranslate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 72|0;
 $5 = sp + 68|0;
 $6 = sp + 64|0;
 $7 = sp;
 HEAPF32[$4>>2] = $1;
 HEAPF32[$5>>2] = $2;
 HEAPF32[$6>>2] = $3;
 HEAPF32[$7>>2] = 1.0;
 $8 = ((($7)) + 4|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = ((($7)) + 8|0);
 HEAPF32[$9>>2] = 0.0;
 $10 = ((($7)) + 12|0);
 HEAPF32[$10>>2] = 0.0;
 $11 = ((($7)) + 16|0);
 HEAPF32[$11>>2] = 0.0;
 $12 = ((($7)) + 20|0);
 HEAPF32[$12>>2] = 1.0;
 $13 = ((($7)) + 24|0);
 HEAPF32[$13>>2] = 0.0;
 $14 = ((($7)) + 28|0);
 HEAPF32[$14>>2] = 0.0;
 $15 = ((($7)) + 32|0);
 HEAPF32[$15>>2] = 0.0;
 $16 = ((($7)) + 36|0);
 HEAPF32[$16>>2] = 0.0;
 $17 = ((($7)) + 40|0);
 HEAPF32[$17>>2] = 1.0;
 $18 = ((($7)) + 44|0);
 HEAPF32[$18>>2] = 0.0;
 $19 = ((($7)) + 48|0);
 $20 = +HEAPF32[$4>>2];
 HEAPF32[$19>>2] = $20;
 $21 = ((($7)) + 52|0);
 $22 = +HEAPF32[$5>>2];
 HEAPF32[$21>>2] = $22;
 $23 = ((($7)) + 56|0);
 $24 = +HEAPF32[$6>>2];
 HEAPF32[$23>>2] = $24;
 $25 = ((($7)) + 60|0);
 HEAPF32[$25>>2] = 1.0;
 dest=$0; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixRotate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0.0;
 var $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0;
 var $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp + 240|0;
 $4 = sp + 176|0;
 $5 = sp + 112|0;
 $6 = sp + 108|0;
 $7 = sp + 104|0;
 $8 = sp + 100|0;
 $9 = sp + 96|0;
 $10 = sp + 92|0;
 $11 = sp + 88|0;
 $12 = sp + 84|0;
 $13 = sp + 80|0;
 $14 = sp + 76|0;
 $15 = sp + 72|0;
 $16 = sp + 68|0;
 $17 = sp + 64|0;
 $18 = sp + 60|0;
 $19 = sp + 56|0;
 $20 = sp + 52|0;
 $21 = sp + 48|0;
 $22 = sp + 44|0;
 $23 = sp + 40|0;
 $24 = sp + 36|0;
 $25 = sp + 32|0;
 $26 = sp + 28|0;
 $27 = sp + 24|0;
 $28 = sp + 20|0;
 $29 = sp + 16|0;
 $30 = sp + 12|0;
 $31 = sp + 8|0;
 $32 = sp + 4|0;
 $33 = sp;
 HEAPF32[$3>>2] = $2;
 _MatrixIdentity($5);
 $34 = +HEAPF32[$1>>2];
 HEAPF32[$6>>2] = $34;
 $35 = ((($1)) + 4|0);
 $36 = +HEAPF32[$35>>2];
 HEAPF32[$7>>2] = $36;
 $37 = ((($1)) + 8|0);
 $38 = +HEAPF32[$37>>2];
 HEAPF32[$8>>2] = $38;
 $39 = +HEAPF32[$6>>2];
 $40 = +HEAPF32[$6>>2];
 $41 = $39 * $40;
 $42 = +HEAPF32[$7>>2];
 $43 = +HEAPF32[$7>>2];
 $44 = $42 * $43;
 $45 = $41 + $44;
 $46 = +HEAPF32[$8>>2];
 $47 = +HEAPF32[$8>>2];
 $48 = $46 * $47;
 $49 = $45 + $48;
 $50 = $49;
 $51 = (+Math_sqrt((+$50)));
 $52 = $51;
 HEAPF32[$9>>2] = $52;
 $53 = +HEAPF32[$9>>2];
 $54 = $53 != 1.0;
 $55 = +HEAPF32[$9>>2];
 $56 = $55 != 0.0;
 $or$cond = $54 & $56;
 if ($or$cond) {
  $57 = +HEAPF32[$9>>2];
  $58 = 1.0 / $57;
  HEAPF32[$9>>2] = $58;
  $59 = +HEAPF32[$9>>2];
  $60 = +HEAPF32[$6>>2];
  $61 = $60 * $59;
  HEAPF32[$6>>2] = $61;
  $62 = +HEAPF32[$9>>2];
  $63 = +HEAPF32[$7>>2];
  $64 = $63 * $62;
  HEAPF32[$7>>2] = $64;
  $65 = +HEAPF32[$9>>2];
  $66 = +HEAPF32[$8>>2];
  $67 = $66 * $65;
  HEAPF32[$8>>2] = $67;
 }
 $68 = +HEAPF32[$3>>2];
 $69 = (+Math_sin((+$68)));
 HEAPF32[$10>>2] = $69;
 $70 = +HEAPF32[$3>>2];
 $71 = (+Math_cos((+$70)));
 HEAPF32[$11>>2] = $71;
 $72 = +HEAPF32[$11>>2];
 $73 = 1.0 - $72;
 HEAPF32[$12>>2] = $73;
 $74 = +HEAPF32[$5>>2];
 HEAPF32[$13>>2] = $74;
 $75 = ((($5)) + 16|0);
 $76 = +HEAPF32[$75>>2];
 HEAPF32[$14>>2] = $76;
 $77 = ((($5)) + 32|0);
 $78 = +HEAPF32[$77>>2];
 HEAPF32[$15>>2] = $78;
 $79 = ((($5)) + 48|0);
 $80 = +HEAPF32[$79>>2];
 HEAPF32[$16>>2] = $80;
 $81 = ((($5)) + 4|0);
 $82 = +HEAPF32[$81>>2];
 HEAPF32[$17>>2] = $82;
 $83 = ((($5)) + 20|0);
 $84 = +HEAPF32[$83>>2];
 HEAPF32[$18>>2] = $84;
 $85 = ((($5)) + 36|0);
 $86 = +HEAPF32[$85>>2];
 HEAPF32[$19>>2] = $86;
 $87 = ((($5)) + 52|0);
 $88 = +HEAPF32[$87>>2];
 HEAPF32[$20>>2] = $88;
 $89 = ((($5)) + 8|0);
 $90 = +HEAPF32[$89>>2];
 HEAPF32[$21>>2] = $90;
 $91 = ((($5)) + 24|0);
 $92 = +HEAPF32[$91>>2];
 HEAPF32[$22>>2] = $92;
 $93 = ((($5)) + 40|0);
 $94 = +HEAPF32[$93>>2];
 HEAPF32[$23>>2] = $94;
 $95 = ((($5)) + 56|0);
 $96 = +HEAPF32[$95>>2];
 HEAPF32[$24>>2] = $96;
 $97 = +HEAPF32[$6>>2];
 $98 = +HEAPF32[$6>>2];
 $99 = $97 * $98;
 $100 = +HEAPF32[$12>>2];
 $101 = $99 * $100;
 $102 = +HEAPF32[$11>>2];
 $103 = $101 + $102;
 HEAPF32[$25>>2] = $103;
 $104 = +HEAPF32[$7>>2];
 $105 = +HEAPF32[$6>>2];
 $106 = $104 * $105;
 $107 = +HEAPF32[$12>>2];
 $108 = $106 * $107;
 $109 = +HEAPF32[$8>>2];
 $110 = +HEAPF32[$10>>2];
 $111 = $109 * $110;
 $112 = $108 + $111;
 HEAPF32[$26>>2] = $112;
 $113 = +HEAPF32[$8>>2];
 $114 = +HEAPF32[$6>>2];
 $115 = $113 * $114;
 $116 = +HEAPF32[$12>>2];
 $117 = $115 * $116;
 $118 = +HEAPF32[$7>>2];
 $119 = +HEAPF32[$10>>2];
 $120 = $118 * $119;
 $121 = $117 - $120;
 HEAPF32[$27>>2] = $121;
 $122 = +HEAPF32[$6>>2];
 $123 = +HEAPF32[$7>>2];
 $124 = $122 * $123;
 $125 = +HEAPF32[$12>>2];
 $126 = $124 * $125;
 $127 = +HEAPF32[$8>>2];
 $128 = +HEAPF32[$10>>2];
 $129 = $127 * $128;
 $130 = $126 - $129;
 HEAPF32[$28>>2] = $130;
 $131 = +HEAPF32[$7>>2];
 $132 = +HEAPF32[$7>>2];
 $133 = $131 * $132;
 $134 = +HEAPF32[$12>>2];
 $135 = $133 * $134;
 $136 = +HEAPF32[$11>>2];
 $137 = $135 + $136;
 HEAPF32[$29>>2] = $137;
 $138 = +HEAPF32[$8>>2];
 $139 = +HEAPF32[$7>>2];
 $140 = $138 * $139;
 $141 = +HEAPF32[$12>>2];
 $142 = $140 * $141;
 $143 = +HEAPF32[$6>>2];
 $144 = +HEAPF32[$10>>2];
 $145 = $143 * $144;
 $146 = $142 + $145;
 HEAPF32[$30>>2] = $146;
 $147 = +HEAPF32[$6>>2];
 $148 = +HEAPF32[$8>>2];
 $149 = $147 * $148;
 $150 = +HEAPF32[$12>>2];
 $151 = $149 * $150;
 $152 = +HEAPF32[$7>>2];
 $153 = +HEAPF32[$10>>2];
 $154 = $152 * $153;
 $155 = $151 + $154;
 HEAPF32[$31>>2] = $155;
 $156 = +HEAPF32[$7>>2];
 $157 = +HEAPF32[$8>>2];
 $158 = $156 * $157;
 $159 = +HEAPF32[$12>>2];
 $160 = $158 * $159;
 $161 = +HEAPF32[$6>>2];
 $162 = +HEAPF32[$10>>2];
 $163 = $161 * $162;
 $164 = $160 - $163;
 HEAPF32[$32>>2] = $164;
 $165 = +HEAPF32[$8>>2];
 $166 = +HEAPF32[$8>>2];
 $167 = $165 * $166;
 $168 = +HEAPF32[$12>>2];
 $169 = $167 * $168;
 $170 = +HEAPF32[$11>>2];
 $171 = $169 + $170;
 HEAPF32[$33>>2] = $171;
 $172 = +HEAPF32[$13>>2];
 $173 = +HEAPF32[$25>>2];
 $174 = $172 * $173;
 $175 = +HEAPF32[$17>>2];
 $176 = +HEAPF32[$26>>2];
 $177 = $175 * $176;
 $178 = $174 + $177;
 $179 = +HEAPF32[$21>>2];
 $180 = +HEAPF32[$27>>2];
 $181 = $179 * $180;
 $182 = $178 + $181;
 HEAPF32[$4>>2] = $182;
 $183 = +HEAPF32[$14>>2];
 $184 = +HEAPF32[$25>>2];
 $185 = $183 * $184;
 $186 = +HEAPF32[$18>>2];
 $187 = +HEAPF32[$26>>2];
 $188 = $186 * $187;
 $189 = $185 + $188;
 $190 = +HEAPF32[$22>>2];
 $191 = +HEAPF32[$27>>2];
 $192 = $190 * $191;
 $193 = $189 + $192;
 $194 = ((($4)) + 16|0);
 HEAPF32[$194>>2] = $193;
 $195 = +HEAPF32[$15>>2];
 $196 = +HEAPF32[$25>>2];
 $197 = $195 * $196;
 $198 = +HEAPF32[$19>>2];
 $199 = +HEAPF32[$26>>2];
 $200 = $198 * $199;
 $201 = $197 + $200;
 $202 = +HEAPF32[$23>>2];
 $203 = +HEAPF32[$27>>2];
 $204 = $202 * $203;
 $205 = $201 + $204;
 $206 = ((($4)) + 32|0);
 HEAPF32[$206>>2] = $205;
 $207 = +HEAPF32[$16>>2];
 $208 = +HEAPF32[$25>>2];
 $209 = $207 * $208;
 $210 = +HEAPF32[$20>>2];
 $211 = +HEAPF32[$26>>2];
 $212 = $210 * $211;
 $213 = $209 + $212;
 $214 = +HEAPF32[$24>>2];
 $215 = +HEAPF32[$27>>2];
 $216 = $214 * $215;
 $217 = $213 + $216;
 $218 = ((($4)) + 48|0);
 HEAPF32[$218>>2] = $217;
 $219 = +HEAPF32[$13>>2];
 $220 = +HEAPF32[$28>>2];
 $221 = $219 * $220;
 $222 = +HEAPF32[$17>>2];
 $223 = +HEAPF32[$29>>2];
 $224 = $222 * $223;
 $225 = $221 + $224;
 $226 = +HEAPF32[$21>>2];
 $227 = +HEAPF32[$30>>2];
 $228 = $226 * $227;
 $229 = $225 + $228;
 $230 = ((($4)) + 4|0);
 HEAPF32[$230>>2] = $229;
 $231 = +HEAPF32[$14>>2];
 $232 = +HEAPF32[$28>>2];
 $233 = $231 * $232;
 $234 = +HEAPF32[$18>>2];
 $235 = +HEAPF32[$29>>2];
 $236 = $234 * $235;
 $237 = $233 + $236;
 $238 = +HEAPF32[$22>>2];
 $239 = +HEAPF32[$30>>2];
 $240 = $238 * $239;
 $241 = $237 + $240;
 $242 = ((($4)) + 20|0);
 HEAPF32[$242>>2] = $241;
 $243 = +HEAPF32[$15>>2];
 $244 = +HEAPF32[$28>>2];
 $245 = $243 * $244;
 $246 = +HEAPF32[$19>>2];
 $247 = +HEAPF32[$29>>2];
 $248 = $246 * $247;
 $249 = $245 + $248;
 $250 = +HEAPF32[$23>>2];
 $251 = +HEAPF32[$30>>2];
 $252 = $250 * $251;
 $253 = $249 + $252;
 $254 = ((($4)) + 36|0);
 HEAPF32[$254>>2] = $253;
 $255 = +HEAPF32[$16>>2];
 $256 = +HEAPF32[$28>>2];
 $257 = $255 * $256;
 $258 = +HEAPF32[$20>>2];
 $259 = +HEAPF32[$29>>2];
 $260 = $258 * $259;
 $261 = $257 + $260;
 $262 = +HEAPF32[$24>>2];
 $263 = +HEAPF32[$30>>2];
 $264 = $262 * $263;
 $265 = $261 + $264;
 $266 = ((($4)) + 52|0);
 HEAPF32[$266>>2] = $265;
 $267 = +HEAPF32[$13>>2];
 $268 = +HEAPF32[$31>>2];
 $269 = $267 * $268;
 $270 = +HEAPF32[$17>>2];
 $271 = +HEAPF32[$32>>2];
 $272 = $270 * $271;
 $273 = $269 + $272;
 $274 = +HEAPF32[$21>>2];
 $275 = +HEAPF32[$33>>2];
 $276 = $274 * $275;
 $277 = $273 + $276;
 $278 = ((($4)) + 8|0);
 HEAPF32[$278>>2] = $277;
 $279 = +HEAPF32[$14>>2];
 $280 = +HEAPF32[$31>>2];
 $281 = $279 * $280;
 $282 = +HEAPF32[$18>>2];
 $283 = +HEAPF32[$32>>2];
 $284 = $282 * $283;
 $285 = $281 + $284;
 $286 = +HEAPF32[$22>>2];
 $287 = +HEAPF32[$33>>2];
 $288 = $286 * $287;
 $289 = $285 + $288;
 $290 = ((($4)) + 24|0);
 HEAPF32[$290>>2] = $289;
 $291 = +HEAPF32[$15>>2];
 $292 = +HEAPF32[$31>>2];
 $293 = $291 * $292;
 $294 = +HEAPF32[$19>>2];
 $295 = +HEAPF32[$32>>2];
 $296 = $294 * $295;
 $297 = $293 + $296;
 $298 = +HEAPF32[$23>>2];
 $299 = +HEAPF32[$33>>2];
 $300 = $298 * $299;
 $301 = $297 + $300;
 $302 = ((($4)) + 40|0);
 HEAPF32[$302>>2] = $301;
 $303 = +HEAPF32[$16>>2];
 $304 = +HEAPF32[$31>>2];
 $305 = $303 * $304;
 $306 = +HEAPF32[$20>>2];
 $307 = +HEAPF32[$32>>2];
 $308 = $306 * $307;
 $309 = $305 + $308;
 $310 = +HEAPF32[$24>>2];
 $311 = +HEAPF32[$33>>2];
 $312 = $310 * $311;
 $313 = $309 + $312;
 $314 = ((($4)) + 56|0);
 HEAPF32[$314>>2] = $313;
 $315 = ((($5)) + 12|0);
 $316 = +HEAPF32[$315>>2];
 $317 = ((($4)) + 12|0);
 HEAPF32[$317>>2] = $316;
 $318 = ((($5)) + 28|0);
 $319 = +HEAPF32[$318>>2];
 $320 = ((($4)) + 28|0);
 HEAPF32[$320>>2] = $319;
 $321 = ((($5)) + 44|0);
 $322 = +HEAPF32[$321>>2];
 $323 = ((($4)) + 44|0);
 HEAPF32[$323>>2] = $322;
 $324 = ((($5)) + 60|0);
 $325 = +HEAPF32[$324>>2];
 $326 = ((($4)) + 60|0);
 HEAPF32[$326>>2] = $325;
 dest=$0; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixScale($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 72|0;
 $5 = sp + 68|0;
 $6 = sp + 64|0;
 $7 = sp;
 HEAPF32[$4>>2] = $1;
 HEAPF32[$5>>2] = $2;
 HEAPF32[$6>>2] = $3;
 dest=$7; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $8 = +HEAPF32[$4>>2];
 HEAPF32[$7>>2] = $8;
 $9 = ((($7)) + 20|0);
 $10 = +HEAPF32[$5>>2];
 HEAPF32[$9>>2] = $10;
 $11 = ((($7)) + 40|0);
 $12 = +HEAPF32[$6>>2];
 HEAPF32[$11>>2] = $12;
 $13 = ((($7)) + 60|0);
 HEAPF32[$13>>2] = 1.0;
 dest=$0; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixMultiply($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0;
 var $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0;
 var $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0;
 var $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0.0;
 var $3 = 0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0.0;
 var $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0.0;
 var $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0.0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0;
 var $353 = 0.0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0;
 var $371 = 0.0, $372 = 0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = +HEAPF32[$2>>2];
 $5 = +HEAPF32[$1>>2];
 $6 = $4 * $5;
 $7 = ((($2)) + 16|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($1)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $8 * $10;
 $12 = $6 + $11;
 $13 = ((($2)) + 32|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($1)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $14 * $16;
 $18 = $12 + $17;
 $19 = ((($2)) + 48|0);
 $20 = +HEAPF32[$19>>2];
 $21 = ((($1)) + 12|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $20 * $22;
 $24 = $18 + $23;
 HEAPF32[$3>>2] = $24;
 $25 = +HEAPF32[$2>>2];
 $26 = ((($1)) + 16|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $25 * $27;
 $29 = ((($2)) + 16|0);
 $30 = +HEAPF32[$29>>2];
 $31 = ((($1)) + 20|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $30 * $32;
 $34 = $28 + $33;
 $35 = ((($2)) + 32|0);
 $36 = +HEAPF32[$35>>2];
 $37 = ((($1)) + 24|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $36 * $38;
 $40 = $34 + $39;
 $41 = ((($2)) + 48|0);
 $42 = +HEAPF32[$41>>2];
 $43 = ((($1)) + 28|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $42 * $44;
 $46 = $40 + $45;
 $47 = ((($3)) + 16|0);
 HEAPF32[$47>>2] = $46;
 $48 = +HEAPF32[$2>>2];
 $49 = ((($1)) + 32|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $48 * $50;
 $52 = ((($2)) + 16|0);
 $53 = +HEAPF32[$52>>2];
 $54 = ((($1)) + 36|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $53 * $55;
 $57 = $51 + $56;
 $58 = ((($2)) + 32|0);
 $59 = +HEAPF32[$58>>2];
 $60 = ((($1)) + 40|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $59 * $61;
 $63 = $57 + $62;
 $64 = ((($2)) + 48|0);
 $65 = +HEAPF32[$64>>2];
 $66 = ((($1)) + 44|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $65 * $67;
 $69 = $63 + $68;
 $70 = ((($3)) + 32|0);
 HEAPF32[$70>>2] = $69;
 $71 = +HEAPF32[$2>>2];
 $72 = ((($1)) + 48|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $71 * $73;
 $75 = ((($2)) + 16|0);
 $76 = +HEAPF32[$75>>2];
 $77 = ((($1)) + 52|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $76 * $78;
 $80 = $74 + $79;
 $81 = ((($2)) + 32|0);
 $82 = +HEAPF32[$81>>2];
 $83 = ((($1)) + 56|0);
 $84 = +HEAPF32[$83>>2];
 $85 = $82 * $84;
 $86 = $80 + $85;
 $87 = ((($2)) + 48|0);
 $88 = +HEAPF32[$87>>2];
 $89 = ((($1)) + 60|0);
 $90 = +HEAPF32[$89>>2];
 $91 = $88 * $90;
 $92 = $86 + $91;
 $93 = ((($3)) + 48|0);
 HEAPF32[$93>>2] = $92;
 $94 = ((($2)) + 4|0);
 $95 = +HEAPF32[$94>>2];
 $96 = +HEAPF32[$1>>2];
 $97 = $95 * $96;
 $98 = ((($2)) + 20|0);
 $99 = +HEAPF32[$98>>2];
 $100 = ((($1)) + 4|0);
 $101 = +HEAPF32[$100>>2];
 $102 = $99 * $101;
 $103 = $97 + $102;
 $104 = ((($2)) + 36|0);
 $105 = +HEAPF32[$104>>2];
 $106 = ((($1)) + 8|0);
 $107 = +HEAPF32[$106>>2];
 $108 = $105 * $107;
 $109 = $103 + $108;
 $110 = ((($2)) + 52|0);
 $111 = +HEAPF32[$110>>2];
 $112 = ((($1)) + 12|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $111 * $113;
 $115 = $109 + $114;
 $116 = ((($3)) + 4|0);
 HEAPF32[$116>>2] = $115;
 $117 = ((($2)) + 4|0);
 $118 = +HEAPF32[$117>>2];
 $119 = ((($1)) + 16|0);
 $120 = +HEAPF32[$119>>2];
 $121 = $118 * $120;
 $122 = ((($2)) + 20|0);
 $123 = +HEAPF32[$122>>2];
 $124 = ((($1)) + 20|0);
 $125 = +HEAPF32[$124>>2];
 $126 = $123 * $125;
 $127 = $121 + $126;
 $128 = ((($2)) + 36|0);
 $129 = +HEAPF32[$128>>2];
 $130 = ((($1)) + 24|0);
 $131 = +HEAPF32[$130>>2];
 $132 = $129 * $131;
 $133 = $127 + $132;
 $134 = ((($2)) + 52|0);
 $135 = +HEAPF32[$134>>2];
 $136 = ((($1)) + 28|0);
 $137 = +HEAPF32[$136>>2];
 $138 = $135 * $137;
 $139 = $133 + $138;
 $140 = ((($3)) + 20|0);
 HEAPF32[$140>>2] = $139;
 $141 = ((($2)) + 4|0);
 $142 = +HEAPF32[$141>>2];
 $143 = ((($1)) + 32|0);
 $144 = +HEAPF32[$143>>2];
 $145 = $142 * $144;
 $146 = ((($2)) + 20|0);
 $147 = +HEAPF32[$146>>2];
 $148 = ((($1)) + 36|0);
 $149 = +HEAPF32[$148>>2];
 $150 = $147 * $149;
 $151 = $145 + $150;
 $152 = ((($2)) + 36|0);
 $153 = +HEAPF32[$152>>2];
 $154 = ((($1)) + 40|0);
 $155 = +HEAPF32[$154>>2];
 $156 = $153 * $155;
 $157 = $151 + $156;
 $158 = ((($2)) + 52|0);
 $159 = +HEAPF32[$158>>2];
 $160 = ((($1)) + 44|0);
 $161 = +HEAPF32[$160>>2];
 $162 = $159 * $161;
 $163 = $157 + $162;
 $164 = ((($3)) + 36|0);
 HEAPF32[$164>>2] = $163;
 $165 = ((($2)) + 4|0);
 $166 = +HEAPF32[$165>>2];
 $167 = ((($1)) + 48|0);
 $168 = +HEAPF32[$167>>2];
 $169 = $166 * $168;
 $170 = ((($2)) + 20|0);
 $171 = +HEAPF32[$170>>2];
 $172 = ((($1)) + 52|0);
 $173 = +HEAPF32[$172>>2];
 $174 = $171 * $173;
 $175 = $169 + $174;
 $176 = ((($2)) + 36|0);
 $177 = +HEAPF32[$176>>2];
 $178 = ((($1)) + 56|0);
 $179 = +HEAPF32[$178>>2];
 $180 = $177 * $179;
 $181 = $175 + $180;
 $182 = ((($2)) + 52|0);
 $183 = +HEAPF32[$182>>2];
 $184 = ((($1)) + 60|0);
 $185 = +HEAPF32[$184>>2];
 $186 = $183 * $185;
 $187 = $181 + $186;
 $188 = ((($3)) + 52|0);
 HEAPF32[$188>>2] = $187;
 $189 = ((($2)) + 8|0);
 $190 = +HEAPF32[$189>>2];
 $191 = +HEAPF32[$1>>2];
 $192 = $190 * $191;
 $193 = ((($2)) + 24|0);
 $194 = +HEAPF32[$193>>2];
 $195 = ((($1)) + 4|0);
 $196 = +HEAPF32[$195>>2];
 $197 = $194 * $196;
 $198 = $192 + $197;
 $199 = ((($2)) + 40|0);
 $200 = +HEAPF32[$199>>2];
 $201 = ((($1)) + 8|0);
 $202 = +HEAPF32[$201>>2];
 $203 = $200 * $202;
 $204 = $198 + $203;
 $205 = ((($2)) + 56|0);
 $206 = +HEAPF32[$205>>2];
 $207 = ((($1)) + 12|0);
 $208 = +HEAPF32[$207>>2];
 $209 = $206 * $208;
 $210 = $204 + $209;
 $211 = ((($3)) + 8|0);
 HEAPF32[$211>>2] = $210;
 $212 = ((($2)) + 8|0);
 $213 = +HEAPF32[$212>>2];
 $214 = ((($1)) + 16|0);
 $215 = +HEAPF32[$214>>2];
 $216 = $213 * $215;
 $217 = ((($2)) + 24|0);
 $218 = +HEAPF32[$217>>2];
 $219 = ((($1)) + 20|0);
 $220 = +HEAPF32[$219>>2];
 $221 = $218 * $220;
 $222 = $216 + $221;
 $223 = ((($2)) + 40|0);
 $224 = +HEAPF32[$223>>2];
 $225 = ((($1)) + 24|0);
 $226 = +HEAPF32[$225>>2];
 $227 = $224 * $226;
 $228 = $222 + $227;
 $229 = ((($2)) + 56|0);
 $230 = +HEAPF32[$229>>2];
 $231 = ((($1)) + 28|0);
 $232 = +HEAPF32[$231>>2];
 $233 = $230 * $232;
 $234 = $228 + $233;
 $235 = ((($3)) + 24|0);
 HEAPF32[$235>>2] = $234;
 $236 = ((($2)) + 8|0);
 $237 = +HEAPF32[$236>>2];
 $238 = ((($1)) + 32|0);
 $239 = +HEAPF32[$238>>2];
 $240 = $237 * $239;
 $241 = ((($2)) + 24|0);
 $242 = +HEAPF32[$241>>2];
 $243 = ((($1)) + 36|0);
 $244 = +HEAPF32[$243>>2];
 $245 = $242 * $244;
 $246 = $240 + $245;
 $247 = ((($2)) + 40|0);
 $248 = +HEAPF32[$247>>2];
 $249 = ((($1)) + 40|0);
 $250 = +HEAPF32[$249>>2];
 $251 = $248 * $250;
 $252 = $246 + $251;
 $253 = ((($2)) + 56|0);
 $254 = +HEAPF32[$253>>2];
 $255 = ((($1)) + 44|0);
 $256 = +HEAPF32[$255>>2];
 $257 = $254 * $256;
 $258 = $252 + $257;
 $259 = ((($3)) + 40|0);
 HEAPF32[$259>>2] = $258;
 $260 = ((($2)) + 8|0);
 $261 = +HEAPF32[$260>>2];
 $262 = ((($1)) + 48|0);
 $263 = +HEAPF32[$262>>2];
 $264 = $261 * $263;
 $265 = ((($2)) + 24|0);
 $266 = +HEAPF32[$265>>2];
 $267 = ((($1)) + 52|0);
 $268 = +HEAPF32[$267>>2];
 $269 = $266 * $268;
 $270 = $264 + $269;
 $271 = ((($2)) + 40|0);
 $272 = +HEAPF32[$271>>2];
 $273 = ((($1)) + 56|0);
 $274 = +HEAPF32[$273>>2];
 $275 = $272 * $274;
 $276 = $270 + $275;
 $277 = ((($2)) + 56|0);
 $278 = +HEAPF32[$277>>2];
 $279 = ((($1)) + 60|0);
 $280 = +HEAPF32[$279>>2];
 $281 = $278 * $280;
 $282 = $276 + $281;
 $283 = ((($3)) + 56|0);
 HEAPF32[$283>>2] = $282;
 $284 = ((($2)) + 12|0);
 $285 = +HEAPF32[$284>>2];
 $286 = +HEAPF32[$1>>2];
 $287 = $285 * $286;
 $288 = ((($2)) + 28|0);
 $289 = +HEAPF32[$288>>2];
 $290 = ((($1)) + 4|0);
 $291 = +HEAPF32[$290>>2];
 $292 = $289 * $291;
 $293 = $287 + $292;
 $294 = ((($2)) + 44|0);
 $295 = +HEAPF32[$294>>2];
 $296 = ((($1)) + 8|0);
 $297 = +HEAPF32[$296>>2];
 $298 = $295 * $297;
 $299 = $293 + $298;
 $300 = ((($2)) + 60|0);
 $301 = +HEAPF32[$300>>2];
 $302 = ((($1)) + 12|0);
 $303 = +HEAPF32[$302>>2];
 $304 = $301 * $303;
 $305 = $299 + $304;
 $306 = ((($3)) + 12|0);
 HEAPF32[$306>>2] = $305;
 $307 = ((($2)) + 12|0);
 $308 = +HEAPF32[$307>>2];
 $309 = ((($1)) + 16|0);
 $310 = +HEAPF32[$309>>2];
 $311 = $308 * $310;
 $312 = ((($2)) + 28|0);
 $313 = +HEAPF32[$312>>2];
 $314 = ((($1)) + 20|0);
 $315 = +HEAPF32[$314>>2];
 $316 = $313 * $315;
 $317 = $311 + $316;
 $318 = ((($2)) + 44|0);
 $319 = +HEAPF32[$318>>2];
 $320 = ((($1)) + 24|0);
 $321 = +HEAPF32[$320>>2];
 $322 = $319 * $321;
 $323 = $317 + $322;
 $324 = ((($2)) + 60|0);
 $325 = +HEAPF32[$324>>2];
 $326 = ((($1)) + 28|0);
 $327 = +HEAPF32[$326>>2];
 $328 = $325 * $327;
 $329 = $323 + $328;
 $330 = ((($3)) + 28|0);
 HEAPF32[$330>>2] = $329;
 $331 = ((($2)) + 12|0);
 $332 = +HEAPF32[$331>>2];
 $333 = ((($1)) + 32|0);
 $334 = +HEAPF32[$333>>2];
 $335 = $332 * $334;
 $336 = ((($2)) + 28|0);
 $337 = +HEAPF32[$336>>2];
 $338 = ((($1)) + 36|0);
 $339 = +HEAPF32[$338>>2];
 $340 = $337 * $339;
 $341 = $335 + $340;
 $342 = ((($2)) + 44|0);
 $343 = +HEAPF32[$342>>2];
 $344 = ((($1)) + 40|0);
 $345 = +HEAPF32[$344>>2];
 $346 = $343 * $345;
 $347 = $341 + $346;
 $348 = ((($2)) + 60|0);
 $349 = +HEAPF32[$348>>2];
 $350 = ((($1)) + 44|0);
 $351 = +HEAPF32[$350>>2];
 $352 = $349 * $351;
 $353 = $347 + $352;
 $354 = ((($3)) + 44|0);
 HEAPF32[$354>>2] = $353;
 $355 = ((($2)) + 12|0);
 $356 = +HEAPF32[$355>>2];
 $357 = ((($1)) + 48|0);
 $358 = +HEAPF32[$357>>2];
 $359 = $356 * $358;
 $360 = ((($2)) + 28|0);
 $361 = +HEAPF32[$360>>2];
 $362 = ((($1)) + 52|0);
 $363 = +HEAPF32[$362>>2];
 $364 = $361 * $363;
 $365 = $359 + $364;
 $366 = ((($2)) + 44|0);
 $367 = +HEAPF32[$366>>2];
 $368 = ((($1)) + 56|0);
 $369 = +HEAPF32[$368>>2];
 $370 = $367 * $369;
 $371 = $365 + $370;
 $372 = ((($2)) + 60|0);
 $373 = +HEAPF32[$372>>2];
 $374 = ((($1)) + 60|0);
 $375 = +HEAPF32[$374>>2];
 $376 = $373 * $375;
 $377 = $371 + $376;
 $378 = ((($3)) + 60|0);
 HEAPF32[$378>>2] = $377;
 dest=$0; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixOrtho($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $7 = sp + 40|0;
 $8 = sp + 32|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 8|0;
 $12 = sp;
 $13 = sp + 64|0;
 $14 = sp + 56|0;
 $15 = sp + 52|0;
 $16 = sp + 48|0;
 HEAPF64[$7>>3] = $1;
 HEAPF64[$8>>3] = $2;
 HEAPF64[$9>>3] = $3;
 HEAPF64[$10>>3] = $4;
 HEAPF64[$11>>3] = $5;
 HEAPF64[$12>>3] = $6;
 $17 = +HEAPF64[$8>>3];
 $18 = +HEAPF64[$7>>3];
 $19 = $17 - $18;
 $20 = $19;
 HEAPF32[$14>>2] = $20;
 $21 = +HEAPF64[$10>>3];
 $22 = +HEAPF64[$9>>3];
 $23 = $21 - $22;
 $24 = $23;
 HEAPF32[$15>>2] = $24;
 $25 = +HEAPF64[$12>>3];
 $26 = +HEAPF64[$11>>3];
 $27 = $25 - $26;
 $28 = $27;
 HEAPF32[$16>>2] = $28;
 $29 = +HEAPF32[$14>>2];
 $30 = 2.0 / $29;
 HEAPF32[$13>>2] = $30;
 $31 = ((($13)) + 16|0);
 HEAPF32[$31>>2] = 0.0;
 $32 = ((($13)) + 32|0);
 HEAPF32[$32>>2] = 0.0;
 $33 = ((($13)) + 48|0);
 HEAPF32[$33>>2] = 0.0;
 $34 = ((($13)) + 4|0);
 HEAPF32[$34>>2] = 0.0;
 $35 = +HEAPF32[$15>>2];
 $36 = 2.0 / $35;
 $37 = ((($13)) + 20|0);
 HEAPF32[$37>>2] = $36;
 $38 = ((($13)) + 36|0);
 HEAPF32[$38>>2] = 0.0;
 $39 = ((($13)) + 52|0);
 HEAPF32[$39>>2] = 0.0;
 $40 = ((($13)) + 8|0);
 HEAPF32[$40>>2] = 0.0;
 $41 = ((($13)) + 24|0);
 HEAPF32[$41>>2] = 0.0;
 $42 = +HEAPF32[$16>>2];
 $43 = -2.0 / $42;
 $44 = ((($13)) + 40|0);
 HEAPF32[$44>>2] = $43;
 $45 = ((($13)) + 56|0);
 HEAPF32[$45>>2] = 0.0;
 $46 = +HEAPF64[$7>>3];
 $47 = +HEAPF64[$8>>3];
 $48 = $46 + $47;
 $49 = -$48;
 $50 = +HEAPF32[$14>>2];
 $51 = $50;
 $52 = $49 / $51;
 $53 = $52;
 $54 = ((($13)) + 12|0);
 HEAPF32[$54>>2] = $53;
 $55 = +HEAPF64[$10>>3];
 $56 = +HEAPF64[$9>>3];
 $57 = $55 + $56;
 $58 = -$57;
 $59 = +HEAPF32[$15>>2];
 $60 = $59;
 $61 = $58 / $60;
 $62 = $61;
 $63 = ((($13)) + 28|0);
 HEAPF32[$63>>2] = $62;
 $64 = +HEAPF64[$12>>3];
 $65 = +HEAPF64[$11>>3];
 $66 = $64 + $65;
 $67 = -$66;
 $68 = +HEAPF32[$16>>2];
 $69 = $68;
 $70 = $67 / $69;
 $71 = $70;
 $72 = ((($13)) + 44|0);
 HEAPF32[$72>>2] = $71;
 $73 = ((($13)) + 60|0);
 HEAPF32[$73>>2] = 1.0;
 dest=$0; src=$13; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _ProcessGestureEvent($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0;
 var $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0;
 var $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $moveDownPosition$byval_copy20 = 0, $moveDownPosition2$byval_copy21 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $moveDownPosition2$byval_copy21 = sp + 32|0;
 $moveDownPosition$byval_copy20 = sp + 24|0;
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[8582] = $5;
 $6 = HEAP32[8582]|0;
 $7 = ($6|0)<(2);
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)==(1);
 if (!($7)) {
  if ($9) {
   $89 = ((($0)) + 24|0);
   ;HEAP32[34316>>2]=HEAP32[$89>>2]|0;HEAP32[34316+4>>2]=HEAP32[$89+4>>2]|0;
   $90 = ((($0)) + 24|0);
   $91 = ((($90)) + 8|0);
   ;HEAP32[34256>>2]=HEAP32[$91>>2]|0;HEAP32[34256+4>>2]=HEAP32[$91+4>>2]|0;
   $92 = +HEAPF32[8564];
   $93 = +HEAPF32[8579];
   $94 = $92 - $93;
   HEAPF32[8562] = $94;
   $95 = +HEAPF32[(34260)>>2];
   $96 = +HEAPF32[(34320)>>2];
   $97 = $95 - $96;
   HEAPF32[(34252)>>2] = $97;
   HEAP32[8583] = 4;
   $98 = (+_GetCurrentTime());
   $99 = $98;
   HEAPF32[8561] = $99;
   STACKTOP = sp;return;
  }
  $100 = HEAP32[$0>>2]|0;
  $101 = ($100|0)==(2);
  if (!($101)) {
   $124 = HEAP32[$0>>2]|0;
   $125 = ($124|0)==(0);
   if (!($125)) {
    STACKTOP = sp;return;
   }
   HEAPF32[8558] = 0.0;
   HEAPF32[8557] = 0.0;
   HEAPF32[$3>>2] = 0.0;
   $126 = ((($3)) + 4|0);
   HEAPF32[$126>>2] = 0.0;
   ;HEAP32[34248>>2]=HEAP32[$3>>2]|0;HEAP32[34248+4>>2]=HEAP32[$3+4>>2]|0;
   HEAP32[8582] = 0;
   HEAP32[8583] = 0;
   STACKTOP = sp;return;
  }
  ;HEAP32[$moveDownPosition$byval_copy20>>2]=HEAP32[34268>>2]|0;HEAP32[$moveDownPosition$byval_copy20+4>>2]=HEAP32[34268+4>>2]|0;
  ;HEAP32[$moveDownPosition2$byval_copy21>>2]=HEAP32[34236>>2]|0;HEAP32[$moveDownPosition2$byval_copy21+4>>2]=HEAP32[34236+4>>2]|0;
  $102 = (+_Vector2Distance($moveDownPosition$byval_copy20,$moveDownPosition2$byval_copy21));
  HEAPF32[8558] = $102;
  ;HEAP32[34316>>2]=HEAP32[34268>>2]|0;HEAP32[34316+4>>2]=HEAP32[34268+4>>2]|0;
  ;HEAP32[34256>>2]=HEAP32[34236>>2]|0;HEAP32[34256+4>>2]=HEAP32[34236+4>>2]|0;
  $103 = ((($0)) + 24|0);
  ;HEAP32[34268>>2]=HEAP32[$103>>2]|0;HEAP32[34268+4>>2]=HEAP32[$103+4>>2]|0;
  $104 = ((($0)) + 24|0);
  $105 = ((($104)) + 8|0);
  ;HEAP32[34236>>2]=HEAP32[$105>>2]|0;HEAP32[34236+4>>2]=HEAP32[$105+4>>2]|0;
  $106 = +HEAPF32[8559];
  $107 = +HEAPF32[8567];
  $108 = $106 - $107;
  HEAPF32[8562] = $108;
  $109 = +HEAPF32[(34240)>>2];
  $110 = +HEAPF32[(34272)>>2];
  $111 = $109 - $110;
  HEAPF32[(34252)>>2] = $111;
  ;HEAP32[$moveDownPosition$byval_copy20>>2]=HEAP32[34316>>2]|0;HEAP32[$moveDownPosition$byval_copy20+4>>2]=HEAP32[34316+4>>2]|0;
  ;HEAP32[$moveDownPosition2$byval_copy21>>2]=HEAP32[34268>>2]|0;HEAP32[$moveDownPosition2$byval_copy21+4>>2]=HEAP32[34268+4>>2]|0;
  $112 = (+_Vector2Distance($moveDownPosition$byval_copy20,$moveDownPosition2$byval_copy21));
  $113 = $112 >= 0.004999999888241291;
  if ($113) {
   label = 41;
  } else {
   ;HEAP32[$moveDownPosition$byval_copy20>>2]=HEAP32[34256>>2]|0;HEAP32[$moveDownPosition$byval_copy20+4>>2]=HEAP32[34256+4>>2]|0;
   ;HEAP32[$moveDownPosition2$byval_copy21>>2]=HEAP32[34236>>2]|0;HEAP32[$moveDownPosition2$byval_copy21+4>>2]=HEAP32[34236+4>>2]|0;
   $114 = (+_Vector2Distance($moveDownPosition$byval_copy20,$moveDownPosition2$byval_copy21));
   $115 = $114 >= 0.004999999888241291;
   if ($115) {
    label = 41;
   } else {
    HEAP32[8583] = 4;
    $120 = (+_GetCurrentTime());
    $121 = $120;
    HEAPF32[8561] = $121;
   }
  }
  do {
   if ((label|0) == 41) {
    ;HEAP32[$moveDownPosition$byval_copy20>>2]=HEAP32[34268>>2]|0;HEAP32[$moveDownPosition$byval_copy20+4>>2]=HEAP32[34268+4>>2]|0;
    ;HEAP32[$moveDownPosition2$byval_copy21>>2]=HEAP32[34236>>2]|0;HEAP32[$moveDownPosition2$byval_copy21+4>>2]=HEAP32[34236+4>>2]|0;
    $116 = (+_Vector2Distance($moveDownPosition$byval_copy20,$moveDownPosition2$byval_copy21));
    $117 = +HEAPF32[8558];
    $118 = $116 - $117;
    $119 = $118 < 0.0;
    if ($119) {
     HEAP32[8583] = 256;
     break;
    } else {
     HEAP32[8583] = 512;
     break;
    }
   }
  } while(0);
  ;HEAP32[$moveDownPosition$byval_copy20>>2]=HEAP32[34268>>2]|0;HEAP32[$moveDownPosition$byval_copy20+4>>2]=HEAP32[34268+4>>2]|0;
  ;HEAP32[$moveDownPosition2$byval_copy21>>2]=HEAP32[34236>>2]|0;HEAP32[$moveDownPosition2$byval_copy21+4>>2]=HEAP32[34236+4>>2]|0;
  $122 = (+_Vector2Angle($moveDownPosition$byval_copy20,$moveDownPosition2$byval_copy21));
  $123 = 360.0 - $122;
  HEAPF32[8557] = $123;
  STACKTOP = sp;return;
 }
 if ($9) {
  $10 = HEAP32[8581]|0;
  $11 = (($10) + 1)|0;
  HEAP32[8581] = $11;
  $12 = HEAP32[8583]|0;
  $13 = ($12|0)==(0);
  $14 = HEAP32[8581]|0;
  $15 = ($14|0)>=(2);
  $or$cond = $13 & $15;
  if ($or$cond) {
   $16 = (+_GetCurrentTime());
   $17 = +HEAPF64[3969];
   $18 = $16 - $17;
   $19 = $18 < 300.0;
   if ($19) {
    $20 = ((($0)) + 24|0);
    ;HEAP32[$moveDownPosition$byval_copy20>>2]=HEAP32[34316>>2]|0;HEAP32[$moveDownPosition$byval_copy20+4>>2]=HEAP32[34316+4>>2]|0;
    ;HEAP32[$moveDownPosition2$byval_copy21>>2]=HEAP32[$20>>2]|0;HEAP32[$moveDownPosition2$byval_copy21+4>>2]=HEAP32[$20+4>>2]|0;
    $21 = (+_Vector2Distance($moveDownPosition$byval_copy20,$moveDownPosition2$byval_copy21));
    $22 = $21 < 0.029999999329447746;
    if ($22) {
     HEAP32[8583] = 2;
     HEAP32[8581] = 0;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   HEAP32[8581] = 1;
   HEAP32[8583] = 1;
  }
  $23 = ((($0)) + 24|0);
  ;HEAP32[34316>>2]=HEAP32[$23>>2]|0;HEAP32[34316+4>>2]=HEAP32[$23+4>>2]|0;
  $24 = ((($0)) + 24|0);
  ;HEAP32[34308>>2]=HEAP32[$24>>2]|0;HEAP32[34308+4>>2]=HEAP32[$24+4>>2]|0;
  ;HEAP32[34300>>2]=HEAP32[34316>>2]|0;HEAP32[34300+4>>2]=HEAP32[34316+4>>2]|0;
  $25 = (+_GetCurrentTime());
  HEAPF64[3969] = $25;
  $26 = ((($0)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[485] = $27;
  HEAPF32[$1>>2] = 0.0;
  $28 = ((($1)) + 4|0);
  HEAPF32[$28>>2] = 0.0;
  ;HEAP32[34292>>2]=HEAP32[$1>>2]|0;HEAP32[34292+4>>2]=HEAP32[$1+4>>2]|0;
  STACKTOP = sp;return;
 }
 $29 = HEAP32[$0>>2]|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $66 = HEAP32[$0>>2]|0;
  $67 = ($66|0)==(2);
  if (!($67)) {
   STACKTOP = sp;return;
  }
  $68 = HEAP32[8583]|0;
  $69 = ($68|0)==(8);
  if ($69) {
   $70 = (+_GetCurrentTime());
   HEAPF64[3969] = $70;
  }
  $71 = HEAP32[8570]|0;
  $72 = ($71|0)!=(0);
  if (!($72)) {
   $73 = (+_GetCurrentTime());
   HEAPF64[3968] = $73;
   HEAP32[8570] = 1;
  }
  $74 = ((($0)) + 24|0);
  ;HEAP32[34268>>2]=HEAP32[$74>>2]|0;HEAP32[34268+4>>2]=HEAP32[$74+4>>2]|0;
  $75 = HEAP32[8583]|0;
  $76 = ($75|0)==(4);
  if ($76) {
   $77 = HEAP32[8566]|0;
   $78 = ($77|0)!=(0);
   if ($78) {
    $79 = ((($0)) + 24|0);
    ;HEAP32[34316>>2]=HEAP32[$79>>2]|0;HEAP32[34316+4>>2]=HEAP32[$79+4>>2]|0;
   }
   HEAP32[8566] = 0;
   ;HEAP32[$moveDownPosition$byval_copy20>>2]=HEAP32[34316>>2]|0;HEAP32[$moveDownPosition$byval_copy20+4>>2]=HEAP32[34316+4>>2]|0;
   ;HEAP32[$moveDownPosition2$byval_copy21>>2]=HEAP32[34268>>2]|0;HEAP32[$moveDownPosition2$byval_copy21+4>>2]=HEAP32[34268+4>>2]|0;
   $80 = (+_Vector2Distance($moveDownPosition$byval_copy20,$moveDownPosition2$byval_copy21));
   $81 = $80 >= 0.014999999664723873;
   if ($81) {
    $82 = (+_GetCurrentTime());
    HEAPF64[3969] = $82;
    HEAP32[8583] = 8;
   }
  }
  $83 = +HEAPF32[8567];
  $84 = +HEAPF32[8577];
  $85 = $83 - $84;
  HEAPF32[8573] = $85;
  $86 = +HEAPF32[(34272)>>2];
  $87 = +HEAPF32[(34312)>>2];
  $88 = $86 - $87;
  HEAPF32[(34296)>>2] = $88;
  STACKTOP = sp;return;
 }
 $31 = HEAP32[8583]|0;
 $32 = ($31|0)==(8);
 if ($32) {
  $33 = ((($0)) + 24|0);
  ;HEAP32[34300>>2]=HEAP32[$33>>2]|0;HEAP32[34300+4>>2]=HEAP32[$33+4>>2]|0;
 }
 ;HEAP32[$moveDownPosition$byval_copy20>>2]=HEAP32[34316>>2]|0;HEAP32[$moveDownPosition$byval_copy20+4>>2]=HEAP32[34316+4>>2]|0;
 ;HEAP32[$moveDownPosition2$byval_copy21>>2]=HEAP32[34300>>2]|0;HEAP32[$moveDownPosition2$byval_copy21+4>>2]=HEAP32[34300+4>>2]|0;
 $34 = (+_Vector2Distance($moveDownPosition$byval_copy20,$moveDownPosition2$byval_copy21));
 HEAPF32[8572] = $34;
 $35 = +HEAPF32[8572];
 $36 = (+_GetCurrentTime());
 $37 = +HEAPF64[3968];
 $38 = $36 - $37;
 $39 = $38;
 $40 = $35 / $39;
 HEAPF32[8571] = $40;
 HEAP32[8570] = 0;
 $41 = +HEAPF32[8571];
 $42 = $41 > 5.0000002374872565E-4;
 do {
  if ($42) {
   $43 = HEAP32[485]|0;
   $44 = ((($0)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($43|0)==($45|0);
   if ($46) {
    ;HEAP32[$moveDownPosition$byval_copy20>>2]=HEAP32[34316>>2]|0;HEAP32[$moveDownPosition$byval_copy20+4>>2]=HEAP32[34316+4>>2]|0;
    ;HEAP32[$moveDownPosition2$byval_copy21>>2]=HEAP32[34300>>2]|0;HEAP32[$moveDownPosition2$byval_copy21+4>>2]=HEAP32[34300+4>>2]|0;
    $47 = (+_Vector2Angle($moveDownPosition$byval_copy20,$moveDownPosition2$byval_copy21));
    $48 = 360.0 - $47;
    HEAPF32[8569] = $48;
    $49 = +HEAPF32[8569];
    $50 = $49 < 30.0;
    $51 = +HEAPF32[8569];
    $52 = $51 > 330.0;
    $or$cond3 = $50 | $52;
    if ($or$cond3) {
     HEAP32[8583] = 16;
     break;
    }
    $53 = +HEAPF32[8569];
    $54 = $53 > 30.0;
    $55 = +HEAPF32[8569];
    $56 = $55 < 120.0;
    $or$cond5 = $54 & $56;
    if ($or$cond5) {
     HEAP32[8583] = 64;
     break;
    }
    $57 = +HEAPF32[8569];
    $58 = $57 > 120.0;
    $59 = +HEAPF32[8569];
    $60 = $59 < 210.0;
    $or$cond7 = $58 & $60;
    if ($or$cond7) {
     HEAP32[8583] = 32;
     break;
    }
    $61 = +HEAPF32[8569];
    $62 = $61 > 210.0;
    $63 = +HEAPF32[8569];
    $64 = $63 < 300.0;
    $or$cond9 = $62 & $64;
    if ($or$cond9) {
     HEAP32[8583] = 128;
     break;
    } else {
     HEAP32[8583] = 0;
     break;
    }
   } else {
    label = 23;
   }
  } else {
   label = 23;
  }
 } while(0);
 if ((label|0) == 23) {
  HEAPF32[8572] = 0.0;
  HEAPF32[8571] = 0.0;
  HEAPF32[8569] = 0.0;
  HEAP32[8583] = 0;
 }
 HEAPF32[$2>>2] = 0.0;
 $65 = ((($2)) + 4|0);
 HEAPF32[$65>>2] = 0.0;
 ;HEAP32[34308>>2]=HEAP32[$2>>2]|0;HEAP32[34308+4>>2]=HEAP32[$2+4>>2]|0;
 HEAP32[8582] = 0;
 STACKTOP = sp;return;
}
function _GetCurrentTime() {
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 HEAPF64[$0>>3] = 0.0;
 $1 = +HEAPF64[$0>>3];
 STACKTOP = sp;return (+$1);
}
function _Vector2Distance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = +HEAPF32[$1>>2];
 $6 = +HEAPF32[$0>>2];
 $7 = $5 - $6;
 HEAPF32[$3>>2] = $7;
 $8 = ((($1)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = ((($0)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $9 - $11;
 HEAPF32[$4>>2] = $12;
 $13 = +HEAPF32[$3>>2];
 $14 = +HEAPF32[$3>>2];
 $15 = $13 * $14;
 $16 = +HEAPF32[$4>>2];
 $17 = +HEAPF32[$4>>2];
 $18 = $16 * $17;
 $19 = $15 + $18;
 $20 = $19;
 $21 = (+Math_sqrt((+$20)));
 $22 = $21;
 HEAPF32[$2>>2] = $22;
 $23 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$23);
}
function _Vector2Angle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($1)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($0)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 - $6;
 $8 = $7;
 $9 = +HEAPF32[$1>>2];
 $10 = +HEAPF32[$0>>2];
 $11 = $9 - $10;
 $12 = $11;
 $13 = (+Math_atan2((+$8),(+$12)));
 $14 = $13 * 57.2957763671875;
 $15 = $14;
 HEAPF32[$2>>2] = $15;
 $16 = +HEAPF32[$2>>2];
 $17 = $16 < 0.0;
 if (!($17)) {
  $20 = +HEAPF32[$2>>2];
  STACKTOP = sp;return (+$20);
 }
 $18 = +HEAPF32[$2>>2];
 $19 = $18 + 360.0;
 HEAPF32[$2>>2] = $19;
 $20 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$20);
}
function _UpdateGestures() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8583]|0;
 $1 = ($0|0)==(1);
 $2 = HEAP32[8583]|0;
 $3 = ($2|0)==(2);
 $or$cond = $1 | $3;
 $4 = HEAP32[8582]|0;
 $5 = ($4|0)<(2);
 $or$cond3 = $or$cond & $5;
 if ($or$cond3) {
  HEAP32[8583] = 4;
  $6 = (+_GetCurrentTime());
  $7 = $6;
  HEAPF32[8561] = $7;
 }
 $8 = (+_GetCurrentTime());
 $9 = +HEAPF64[3969];
 $10 = $8 - $9;
 $11 = $10 > 300.0;
 $12 = HEAP32[8583]|0;
 $13 = ($12|0)==(8);
 $or$cond5 = $11 & $13;
 $14 = HEAP32[8582]|0;
 $15 = ($14|0)<(2);
 $or$cond7 = $or$cond5 & $15;
 if ($or$cond7) {
  HEAP32[8583] = 4;
  $16 = (+_GetCurrentTime());
  $17 = $16;
  HEAPF32[8561] = $17;
  HEAP32[8566] = 1;
 }
 $18 = HEAP32[8583]|0;
 $19 = ($18|0)==(16);
 $20 = HEAP32[8583]|0;
 $21 = ($20|0)==(64);
 $or$cond9 = $19 | $21;
 $22 = HEAP32[8583]|0;
 $23 = ($22|0)==(32);
 $or$cond11 = $or$cond9 | $23;
 $24 = HEAP32[8583]|0;
 $25 = ($24|0)==(128);
 $or$cond13 = $or$cond11 | $25;
 if (!($or$cond13)) {
  return;
 }
 HEAP32[8583] = 0;
 return;
}
function _GetGestureDetected() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[486]|0;
 $1 = HEAP32[8583]|0;
 $2 = $0 & $1;
 return ($2|0);
}
function _GetMousePosition($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[34352>>2]|0;HEAP32[$0+4>>2]=HEAP32[34352+4>>2]|0;
 return;
}
function _IsMouseButtonDown($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_GetMouseButtonStatus($3)|0);
 $5 = ($4|0)==(1);
 if ($5) {
  HEAP32[$2>>2] = 1;
 }
 $6 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _IsKeyDown($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_GetKeyStatus($3)|0);
 $5 = ($4|0)==(1);
 if ($5) {
  HEAP32[$1>>2] = 1;
 } else {
  HEAP32[$1>>2] = 0;
 }
 $6 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _GetScreenWidth() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8610]|0;
 return ($0|0);
}
function _GetScreenHeight() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8609]|0;
 return ($0|0);
}
function _GetKeyStatus($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[8613]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_glfwGetKey(($2|0),($3|0))|0);
 STACKTOP = sp;return ($4|0);
}
function _GetMouseButtonStatus($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[8613]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_glfwGetMouseButton(($2|0),($3|0))|0);
 STACKTOP = sp;return ($4|0);
}
function _InitWindow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 _TraceLog(0,14299,$vararg_buffer);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[8590] = $6;
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$4>>2]|0;
 _InitGraphicsDevice($7,$8);
 _LoadDefaultFont();
 _InitTimer();
 (_emscripten_set_fullscreenchange_callback((0|0),(0|0),1,(28|0))|0);
 (_emscripten_set_touchstart_callback((14328|0),(0|0),1,(29|0))|0);
 (_emscripten_set_touchend_callback((14328|0),(0|0),1,(29|0))|0);
 (_emscripten_set_touchmove_callback((14328|0),(0|0),1,(29|0))|0);
 (_emscripten_set_touchcancel_callback((14328|0),(0|0),1,(29|0))|0);
 $9 = HEAP32[8610]|0;
 $10 = (+($9|0));
 $11 = $10 / 2.0;
 HEAPF32[8588] = $11;
 $12 = HEAP32[8609]|0;
 $13 = (+($12|0));
 $14 = $13 / 2.0;
 HEAPF32[(34356)>>2] = $14;
 $15 = HEAP32[8556]|0;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 _SetTargetFPS(60);
 _LogoAnimation();
 STACKTOP = sp;return;
}
function _InitGraphicsDevice($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0;
 var $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy = sp + 156|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $4 = sp + 80|0;
 $5 = sp + 76|0;
 $6 = sp + 72|0;
 $7 = sp + 68|0;
 $8 = sp + 152|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[8610] = $9;
 $10 = HEAP32[$3>>2]|0;
 HEAP32[8609] = $10;
 _MatrixIdentity($4);
 dest=34364; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 (_glfwSetErrorCallback((41|0))|0);
 $11 = (_glfwInit()|0);
 $12 = ($11|0)!=(0);
 if (!($12)) {
  _TraceLog(1,15140,$vararg_buffer);
 }
 $13 = HEAP32[8610]|0;
 HEAP32[8612] = $13;
 $14 = HEAP32[8609]|0;
 HEAP32[8611] = $14;
 _glfwDefaultWindowHints();
 $15 = HEAP8[41366]|0;
 $16 = $15 << 24 >> 24;
 $17 = $16 & 2;
 $18 = ($17|0)!=(0);
 if ($18) {
  _glfwWindowHint(131075,1);
 } else {
  _glfwWindowHint(131075,0);
 }
 $19 = HEAP8[41366]|0;
 $20 = $19 << 24 >> 24;
 $21 = $20 & 32;
 $22 = ($21|0)!=(0);
 if ($22) {
  _glfwWindowHint(135181,4);
  _TraceLog(0,15166,$vararg_buffer1);
 }
 $23 = (_rlGetVersion()|0);
 $24 = ($23|0)==(2);
 if ($24) {
  _glfwWindowHint(139266,2);
  _glfwWindowHint(139267,1);
 } else {
  $25 = (_rlGetVersion()|0);
  $26 = ($25|0)==(3);
  if ($26) {
   _glfwWindowHint(139266,3);
   _glfwWindowHint(139267,3);
   _glfwWindowHint(139272,204801);
   _glfwWindowHint(139270,0);
  }
 }
 $27 = HEAP32[8554]|0;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = (_glfwGetPrimaryMonitor()|0);
  $30 = (_glfwGetVideoModes(($29|0),($5|0))|0);
  HEAP32[$6>>2] = $30;
  HEAP32[$7>>2] = 0;
  while(1) {
   $31 = HEAP32[$7>>2]|0;
   $32 = HEAP32[$5>>2]|0;
   $33 = ($31|0)<($32|0);
   if (!($33)) {
    break;
   }
   $34 = HEAP32[$7>>2]|0;
   $35 = HEAP32[$6>>2]|0;
   $36 = (($35) + (($34*24)|0)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = HEAP32[8610]|0;
   $39 = ($37|0)>=($38|0);
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = HEAP32[$6>>2]|0;
    $42 = (($41) + (($40*24)|0)|0);
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[8609]|0;
    $46 = ($44|0)>=($45|0);
    if ($46) {
     label = 17;
     break;
    }
   }
   $56 = HEAP32[$7>>2]|0;
   $57 = (($56) + 1)|0;
   HEAP32[$7>>2] = $57;
  }
  if ((label|0) == 17) {
   $47 = HEAP32[$7>>2]|0;
   $48 = HEAP32[$6>>2]|0;
   $49 = (($48) + (($47*24)|0)|0);
   $50 = HEAP32[$49>>2]|0;
   HEAP32[8612] = $50;
   $51 = HEAP32[$7>>2]|0;
   $52 = HEAP32[$6>>2]|0;
   $53 = (($52) + (($51*24)|0)|0);
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP32[8611] = $55;
  }
  $58 = HEAP32[8612]|0;
  $59 = HEAP32[8611]|0;
  HEAP32[$vararg_buffer3>>2] = $58;
  $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $59;
  _TraceLog(2,15191,$vararg_buffer3);
  $60 = HEAP32[8612]|0;
  $61 = HEAP32[8611]|0;
  _SetupFramebufferSize($60,$61);
  $62 = HEAP32[8612]|0;
  $63 = HEAP32[8611]|0;
  $64 = HEAP32[8590]|0;
  $65 = (_glfwGetPrimaryMonitor()|0);
  $66 = (_glfwCreateWindow(($62|0),($63|0),($64|0),($65|0),(0|0))|0);
  HEAP32[8613] = $66;
 } else {
  $67 = HEAP32[8610]|0;
  $68 = HEAP32[8609]|0;
  $69 = HEAP32[8590]|0;
  $70 = (_glfwCreateWindow(($67|0),($68|0),($69|0),(0|0),(0|0))|0);
  HEAP32[8613] = $70;
  $71 = HEAP32[8610]|0;
  HEAP32[8608] = $71;
  $72 = HEAP32[8609]|0;
  HEAP32[8607] = $72;
 }
 $73 = HEAP32[8613]|0;
 $74 = ($73|0)!=(0|0);
 if ($74) {
  _TraceLog(0,15262,$vararg_buffer8);
  $75 = HEAP32[8608]|0;
  $76 = HEAP32[8607]|0;
  HEAP32[$vararg_buffer10>>2] = $75;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $76;
  _TraceLog(0,15302,$vararg_buffer10);
  $77 = HEAP32[8610]|0;
  $78 = HEAP32[8609]|0;
  HEAP32[$vararg_buffer14>>2] = $77;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $78;
  _TraceLog(0,15323,$vararg_buffer14);
  $79 = HEAP32[8551]|0;
  $80 = HEAP32[8550]|0;
  HEAP32[$vararg_buffer18>>2] = $79;
  $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
  HEAP32[$vararg_ptr21>>2] = $80;
  _TraceLog(0,15344,$vararg_buffer18);
 } else {
  _glfwTerminate();
  _TraceLog(1,15229,$vararg_buffer6);
 }
 $81 = HEAP32[8613]|0;
 (_glfwSetWindowSizeCallback(($81|0),(1|0))|0);
 $82 = HEAP32[8613]|0;
 (_glfwSetCursorEnterCallback(($82|0),(42|0))|0);
 $83 = HEAP32[8613]|0;
 (_glfwSetKeyCallback(($83|0),(4|0))|0);
 $84 = HEAP32[8613]|0;
 (_glfwSetMouseButtonCallback(($84|0),(9|0))|0);
 $85 = HEAP32[8613]|0;
 (_glfwSetCursorPosCallback(($85|0),(1|0))|0);
 $86 = HEAP32[8613]|0;
 (_glfwSetCharCallback(($86|0),(43|0))|0);
 $87 = HEAP32[8613]|0;
 (_glfwSetScrollCallback(($87|0),(2|0))|0);
 $88 = HEAP32[8613]|0;
 (_glfwSetWindowIconifyCallback(($88|0),(44|0))|0);
 $89 = HEAP32[8613]|0;
 (_glfwSetWindowFocusCallback(($89|0),(45|0))|0);
 $90 = HEAP32[8613]|0;
 _glfwMakeContextCurrent(($90|0));
 _glfwSwapInterval(0);
 $91 = HEAP8[41366]|0;
 $92 = $91 << 24 >> 24;
 $93 = $92 & 64;
 $94 = ($93|0)!=(0);
 if (!($94)) {
  $95 = HEAP32[8610]|0;
  $96 = HEAP32[8609]|0;
  _rlglInit($95,$96);
  $97 = HEAP32[8551]|0;
  $98 = (($97|0) / 2)&-1;
  $99 = HEAP32[8550]|0;
  $100 = (($99|0) / 2)&-1;
  $101 = HEAP32[8608]|0;
  $102 = HEAP32[8551]|0;
  $103 = (($101) - ($102))|0;
  $104 = HEAP32[8607]|0;
  $105 = HEAP32[8550]|0;
  $106 = (($104) - ($105))|0;
  _rlViewport($98,$100,$103,$106);
  _rlMatrixMode(0);
  _rlLoadIdentity();
  $107 = HEAP32[8608]|0;
  $108 = HEAP32[8551]|0;
  $109 = (($107) - ($108))|0;
  $110 = (+($109|0));
  $111 = HEAP32[8607]|0;
  $112 = HEAP32[8550]|0;
  $113 = (($111) - ($112))|0;
  $114 = (+($113|0));
  _rlOrtho(0.0,$110,$114,0.0,0.0,1.0);
  _rlMatrixMode(1);
  _rlLoadIdentity();
  HEAP8[$8>>0] = -11;
  $115 = ((($8)) + 1|0);
  HEAP8[$115>>0] = -11;
  $116 = ((($8)) + 2|0);
  HEAP8[$116>>0] = -11;
  $117 = ((($8)) + 3|0);
  HEAP8[$117>>0] = -1;
  ;HEAP8[$$byval_copy>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$8+3>>0]|0;
  _ClearBackground($$byval_copy);
  STACKTOP = sp;return;
 }
 _glfwSwapInterval(1);
 _TraceLog(0,15369,$vararg_buffer22);
 $95 = HEAP32[8610]|0;
 $96 = HEAP32[8609]|0;
 _rlglInit($95,$96);
 $97 = HEAP32[8551]|0;
 $98 = (($97|0) / 2)&-1;
 $99 = HEAP32[8550]|0;
 $100 = (($99|0) / 2)&-1;
 $101 = HEAP32[8608]|0;
 $102 = HEAP32[8551]|0;
 $103 = (($101) - ($102))|0;
 $104 = HEAP32[8607]|0;
 $105 = HEAP32[8550]|0;
 $106 = (($104) - ($105))|0;
 _rlViewport($98,$100,$103,$106);
 _rlMatrixMode(0);
 _rlLoadIdentity();
 $107 = HEAP32[8608]|0;
 $108 = HEAP32[8551]|0;
 $109 = (($107) - ($108))|0;
 $110 = (+($109|0));
 $111 = HEAP32[8607]|0;
 $112 = HEAP32[8550]|0;
 $113 = (($111) - ($112))|0;
 $114 = (+($113|0));
 _rlOrtho(0.0,$110,$114,0.0,0.0,1.0);
 _rlMatrixMode(1);
 _rlLoadIdentity();
 HEAP8[$8>>0] = -11;
 $115 = ((($8)) + 1|0);
 HEAP8[$115>>0] = -11;
 $116 = ((($8)) + 2|0);
 HEAP8[$116>>0] = -11;
 $117 = ((($8)) + 3|0);
 HEAP8[$117>>0] = -1;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$8+3>>0]|0;
 _ClearBackground($$byval_copy);
 STACKTOP = sp;return;
}
function _LoadDefaultFont() {
 var $$ = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3088|0);
 $$byval_copy1 = sp + 3056|0;
 $vararg_buffer = sp;
 $0 = sp + 1008|0;
 $1 = sp + 1004|0;
 $2 = sp + 1000|0;
 $3 = sp + 104|0;
 $4 = sp + 96|0;
 $5 = sp + 92|0;
 $6 = sp + 88|0;
 $7 = sp + 84|0;
 $8 = sp + 3080|0;
 $9 = sp + 80|0;
 $10 = sp + 76|0;
 $11 = sp + 72|0;
 $12 = sp + 3076|0;
 $13 = sp + 52|0;
 $14 = sp + 32|0;
 $15 = sp + 28|0;
 $16 = sp + 24|0;
 $17 = sp + 20|0;
 $18 = sp + 16|0;
 $19 = sp + 8|0;
 HEAP32[(34544)>>2] = 224;
 _memcpy(($0|0),(1948|0),2048)|0;
 HEAP32[$1>>2] = 10;
 HEAP32[$2>>2] = 1;
 _memcpy(($3|0),(3996|0),896)|0;
 HEAP32[$4>>2] = 128;
 HEAP32[$5>>2] = 128;
 $20 = HEAP32[$4>>2]|0;
 $21 = HEAP32[$5>>2]|0;
 $22 = Math_imul($20, $21)|0;
 $23 = $22<<2;
 $24 = (_malloc($23)|0);
 HEAP32[$6>>2] = $24;
 HEAP32[$7>>2] = 0;
 while(1) {
  $25 = HEAP32[$7>>2]|0;
  $26 = HEAP32[$4>>2]|0;
  $27 = HEAP32[$5>>2]|0;
  $28 = Math_imul($26, $27)|0;
  $29 = ($25|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = HEAP32[$7>>2]|0;
  $31 = HEAP32[$6>>2]|0;
  $32 = (($31) + ($30<<2)|0);
  HEAP8[$8>>0] = 0;
  $33 = ((($8)) + 1|0);
  HEAP8[$33>>0] = 0;
  $34 = ((($8)) + 2|0);
  HEAP8[$34>>0] = 0;
  $35 = ((($8)) + 3|0);
  HEAP8[$35>>0] = 0;
  ;HEAP8[$32>>0]=HEAP8[$8>>0]|0;HEAP8[$32+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$32+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$32+3>>0]=HEAP8[$8+3>>0]|0;
  $36 = HEAP32[$7>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$7>>2] = $37;
 }
 HEAP32[$9>>2] = 0;
 HEAP32[$10>>2] = 0;
 while(1) {
  $38 = HEAP32[$10>>2]|0;
  $39 = HEAP32[$4>>2]|0;
  $40 = HEAP32[$5>>2]|0;
  $41 = Math_imul($39, $40)|0;
  $42 = ($38|0)<($41|0);
  if (!($42)) {
   break;
  }
  HEAP32[$11>>2] = 31;
  while(1) {
   $43 = HEAP32[$11>>2]|0;
   $44 = ($43|0)>=(0);
   $45 = HEAP32[$9>>2]|0;
   if (!($44)) {
    break;
   }
   $46 = (($0) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = HEAP32[$11>>2]|0;
   $49 = 1 << $48;
   $50 = $47 & $49;
   $51 = ($50|0)!=(0);
   if ($51) {
    $52 = HEAP32[$10>>2]|0;
    $53 = HEAP32[$11>>2]|0;
    $54 = (($52) + ($53))|0;
    $55 = HEAP32[$6>>2]|0;
    $56 = (($55) + ($54<<2)|0);
    HEAP8[$12>>0] = -1;
    $57 = ((($12)) + 1|0);
    HEAP8[$57>>0] = -1;
    $58 = ((($12)) + 2|0);
    HEAP8[$58>>0] = -1;
    $59 = ((($12)) + 3|0);
    HEAP8[$59>>0] = -1;
    ;HEAP8[$56>>0]=HEAP8[$12>>0]|0;HEAP8[$56+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$56+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$56+3>>0]=HEAP8[$12+3>>0]|0;
   }
   $60 = HEAP32[$11>>2]|0;
   $61 = (($60) + -1)|0;
   HEAP32[$11>>2] = $61;
  }
  $62 = (($45) + 1)|0;
  HEAP32[$9>>2] = $62;
  $63 = HEAP32[$9>>2]|0;
  $64 = ($63|0)>(512);
  $$ = $64 ? 0 : $62;
  HEAP32[$9>>2] = $$;
  $65 = HEAP32[$10>>2]|0;
  $66 = (($65) + 32)|0;
  HEAP32[$10>>2] = $66;
 }
 $67 = HEAP32[$6>>2]|0;
 $68 = HEAP32[$4>>2]|0;
 $69 = HEAP32[$5>>2]|0;
 _LoadImageEx($13,$67,$68,$69);
 _ImageFormat($13,2);
 $70 = HEAP32[$6>>2]|0;
 _free($70);
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$13+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$13+16>>2]|0;
 _LoadTextureFromImage($14,$$byval_copy1);
 ;HEAP32[34520>>2]=HEAP32[$14>>2]|0;HEAP32[34520+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[34520+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[34520+12>>2]=HEAP32[$14+12>>2]|0;HEAP32[34520+16>>2]=HEAP32[$14+16>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$13+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$13+16>>2]|0;
 _UnloadImage($$byval_copy1);
 $71 = HEAP32[(34544)>>2]|0;
 $72 = $71<<2;
 $73 = (_malloc($72)|0);
 HEAP32[(34548)>>2] = $73;
 $74 = HEAP32[(34544)>>2]|0;
 $75 = $74<<4;
 $76 = (_malloc($75)|0);
 HEAP32[(34552)>>2] = $76;
 $77 = HEAP32[(34544)>>2]|0;
 $78 = $77<<3;
 $79 = (_malloc($78)|0);
 HEAP32[(34556)>>2] = $79;
 $80 = HEAP32[(34544)>>2]|0;
 $81 = $80<<2;
 $82 = (_malloc($81)|0);
 HEAP32[(34560)>>2] = $82;
 HEAP32[$15>>2] = 0;
 $83 = HEAP32[$2>>2]|0;
 HEAP32[$16>>2] = $83;
 $84 = HEAP32[$2>>2]|0;
 HEAP32[$17>>2] = $84;
 HEAP32[$18>>2] = 0;
 while(1) {
  $85 = HEAP32[$18>>2]|0;
  $86 = HEAP32[(34544)>>2]|0;
  $87 = ($85|0)<($86|0);
  if (!($87)) {
   break;
  }
  $88 = HEAP32[$18>>2]|0;
  $89 = (32 + ($88))|0;
  $90 = HEAP32[$18>>2]|0;
  $91 = HEAP32[(34548)>>2]|0;
  $92 = (($91) + ($90<<2)|0);
  HEAP32[$92>>2] = $89;
  $93 = HEAP32[$16>>2]|0;
  $94 = HEAP32[$18>>2]|0;
  $95 = HEAP32[(34552)>>2]|0;
  $96 = (($95) + ($94<<4)|0);
  HEAP32[$96>>2] = $93;
  $97 = HEAP32[$2>>2]|0;
  $98 = HEAP32[$15>>2]|0;
  $99 = HEAP32[$1>>2]|0;
  $100 = HEAP32[$2>>2]|0;
  $101 = (($99) + ($100))|0;
  $102 = Math_imul($98, $101)|0;
  $103 = (($97) + ($102))|0;
  $104 = HEAP32[$18>>2]|0;
  $105 = HEAP32[(34552)>>2]|0;
  $106 = (($105) + ($104<<4)|0);
  $107 = ((($106)) + 4|0);
  HEAP32[$107>>2] = $103;
  $108 = HEAP32[$18>>2]|0;
  $109 = (($3) + ($108<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = HEAP32[$18>>2]|0;
  $112 = HEAP32[(34552)>>2]|0;
  $113 = (($112) + ($111<<4)|0);
  $114 = ((($113)) + 8|0);
  HEAP32[$114>>2] = $110;
  $115 = HEAP32[$1>>2]|0;
  $116 = HEAP32[$18>>2]|0;
  $117 = HEAP32[(34552)>>2]|0;
  $118 = (($117) + ($116<<4)|0);
  $119 = ((($118)) + 12|0);
  HEAP32[$119>>2] = $115;
  $120 = HEAP32[$18>>2]|0;
  $121 = HEAP32[(34552)>>2]|0;
  $122 = (($121) + ($120<<4)|0);
  $123 = ((($122)) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = HEAP32[$2>>2]|0;
  $126 = (($124) + ($125))|0;
  $127 = HEAP32[$17>>2]|0;
  $128 = (($127) + ($126))|0;
  HEAP32[$17>>2] = $128;
  $129 = HEAP32[$17>>2]|0;
  $130 = HEAP32[(34524)>>2]|0;
  $131 = ($129|0)>=($130|0);
  if ($131) {
   $132 = HEAP32[$15>>2]|0;
   $133 = (($132) + 1)|0;
   HEAP32[$15>>2] = $133;
   $134 = HEAP32[$2>>2]|0;
   $135 = $134<<1;
   $136 = HEAP32[$18>>2]|0;
   $137 = (($3) + ($136<<2)|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($135) + ($138))|0;
   HEAP32[$16>>2] = $139;
   $140 = HEAP32[$16>>2]|0;
   HEAP32[$17>>2] = $140;
   $141 = HEAP32[$2>>2]|0;
   $142 = HEAP32[$18>>2]|0;
   $143 = HEAP32[(34552)>>2]|0;
   $144 = (($143) + ($142<<4)|0);
   HEAP32[$144>>2] = $141;
   $145 = HEAP32[$2>>2]|0;
   $146 = HEAP32[$15>>2]|0;
   $147 = HEAP32[$1>>2]|0;
   $148 = HEAP32[$2>>2]|0;
   $149 = (($147) + ($148))|0;
   $150 = Math_imul($146, $149)|0;
   $151 = (($145) + ($150))|0;
   $152 = HEAP32[$18>>2]|0;
   $153 = HEAP32[(34552)>>2]|0;
   $154 = (($153) + ($152<<4)|0);
   $155 = ((($154)) + 4|0);
   HEAP32[$155>>2] = $151;
  } else {
   $156 = HEAP32[$17>>2]|0;
   HEAP32[$16>>2] = $156;
  }
  $157 = HEAP32[$18>>2]|0;
  $158 = HEAP32[(34556)>>2]|0;
  $159 = (($158) + ($157<<3)|0);
  HEAPF32[$19>>2] = 0.0;
  $160 = ((($19)) + 4|0);
  HEAPF32[$160>>2] = 0.0;
  ;HEAP32[$159>>2]=HEAP32[$19>>2]|0;HEAP32[$159+4>>2]=HEAP32[$19+4>>2]|0;
  $161 = HEAP32[$18>>2]|0;
  $162 = HEAP32[(34560)>>2]|0;
  $163 = (($162) + ($161<<2)|0);
  HEAP32[$163>>2] = 0;
  $164 = HEAP32[$18>>2]|0;
  $165 = (($164) + 1)|0;
  HEAP32[$18>>2] = $165;
 }
 $166 = HEAP32[(34552)>>2]|0;
 $167 = ((($166)) + 12|0);
 $168 = HEAP32[$167>>2]|0;
 HEAP32[(34540)>>2] = $168;
 $169 = HEAP32[8630]|0;
 HEAP32[$vararg_buffer>>2] = $169;
 _TraceLog(0,14516,$vararg_buffer);
 STACKTOP = sp;return;
}
function _InitTimer() {
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_time((0|0))|0);
 _srand($0);
 $1 = (+_GetTime());
 HEAPF64[3973] = $1;
 return;
}
function _EmscriptenFullscreenChangeCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($9)) + 264|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = ((($12)) + 268|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$4>>2]|0;
 $16 = ((($15)) + 272|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$4>>2]|0;
 $19 = ((($18)) + 276|0);
 $20 = HEAP32[$19>>2]|0;
 if ($8) {
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $17;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $20;
  _TraceLog(0,14380,$vararg_buffer);
  STACKTOP = sp;return 0;
 } else {
  HEAP32[$vararg_buffer4>>2] = $11;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $14;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $17;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $20;
  _TraceLog(0,14449,$vararg_buffer4);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _EmscriptenInputCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $9 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 88|0;
 $3 = sp + 80|0;
 $4 = sp + 76|0;
 $5 = sp + 72|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $9 = HEAP32[$3>>2]|0;
 $10 = ($9|0)==(22);
 do {
  if ($10) {
   HEAP32[$6>>2] = 1;
  } else {
   $11 = HEAP32[$3>>2]|0;
   $12 = ($11|0)==(23);
   if ($12) {
    HEAP32[$6>>2] = 0;
    break;
   }
   $13 = HEAP32[$3>>2]|0;
   $14 = ($13|0)==(24);
   if ($14) {
    HEAP32[$6>>2] = 2;
   }
  }
 } while(0);
 $15 = HEAP32[$4>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($6)) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$4>>2]|0;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($6)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$4>>2]|0;
 $23 = ((($22)) + 20|0);
 $24 = ((($23)) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($6)) + 8|0);
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = $25;
 $28 = ((($6)) + 24|0);
 $29 = HEAP32[$4>>2]|0;
 $30 = ((($29)) + 20|0);
 $31 = ((($30)) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (+($32|0));
 HEAPF32[$7>>2] = $33;
 $34 = ((($7)) + 4|0);
 $35 = HEAP32[$4>>2]|0;
 $36 = ((($35)) + 20|0);
 $37 = ((($36)) + 40|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (+($38|0));
 HEAPF32[$34>>2] = $39;
 ;HEAP32[$28>>2]=HEAP32[$7>>2]|0;HEAP32[$28+4>>2]=HEAP32[$7+4>>2]|0;
 $40 = ((($6)) + 24|0);
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$4>>2]|0;
 $43 = ((($42)) + 20|0);
 $44 = ((($43)) + 52|0);
 $45 = ((($44)) + 36|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (+($46|0));
 HEAPF32[$8>>2] = $47;
 $48 = ((($8)) + 4|0);
 $49 = HEAP32[$4>>2]|0;
 $50 = ((($49)) + 20|0);
 $51 = ((($50)) + 52|0);
 $52 = ((($51)) + 40|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (+($53|0));
 HEAPF32[$48>>2] = $54;
 ;HEAP32[$41>>2]=HEAP32[$8>>2]|0;HEAP32[$41+4>>2]=HEAP32[$8+4>>2]|0;
 $55 = ((($6)) + 24|0);
 ;HEAP32[34336>>2]=HEAP32[$55>>2]|0;HEAP32[34336+4>>2]=HEAP32[$55+4>>2]|0;
 $56 = ((($6)) + 24|0);
 $57 = ((($56)) + 8|0);
 ;HEAP32[(34344)>>2]=HEAP32[$57>>2]|0;HEAP32[(34344)+4>>2]=HEAP32[$57+4>>2]|0;
 $58 = (_GetScreenWidth()|0);
 $59 = (+($58|0));
 $60 = ((($6)) + 24|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $61 / $59;
 HEAPF32[$60>>2] = $62;
 $63 = (_GetScreenHeight()|0);
 $64 = (+($63|0));
 $65 = ((($6)) + 24|0);
 $66 = ((($65)) + 4|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $67 / $64;
 HEAPF32[$66>>2] = $68;
 $69 = (_GetScreenWidth()|0);
 $70 = (+($69|0));
 $71 = ((($6)) + 24|0);
 $72 = ((($71)) + 8|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $73 / $70;
 HEAPF32[$72>>2] = $74;
 $75 = (_GetScreenHeight()|0);
 $76 = (+($75|0));
 $77 = ((($6)) + 24|0);
 $78 = ((($77)) + 8|0);
 $79 = ((($78)) + 4|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $80 / $76;
 HEAPF32[$79>>2] = $81;
 dest=$$byval_copy; src=$6; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _ProcessGestureEvent($$byval_copy);
 STACKTOP = sp;return 1;
}
function _SetTargetFPS($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(1);
 if ($3) {
  HEAPF64[3967] = 0.0;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (+($4|0));
  $6 = 1.0 / $5;
  HEAPF64[3967] = $6;
 }
 $7 = +HEAPF64[3967];
 $8 = $7;
 $9 = $8 * 1000.0;
 $10 = $9;
 HEAPF64[$vararg_buffer>>3] = $10;
 _TraceLog(0,14336,$vararg_buffer);
 STACKTOP = sp;return;
}
function _LogoAnimation() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8556] = 0;
 return;
}
function _GetTime() {
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_glfwGetTime());
 return (+$0);
}
function _LoadImageEx($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$6>>2] = $3;
 HEAP32[$7>>2] = 0;
 $10 = HEAP32[$5>>2]|0;
 $11 = ((($7)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$6>>2]|0;
 $13 = ((($7)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($7)) + 12|0);
 HEAP32[$14>>2] = 1;
 $15 = ((($7)) + 16|0);
 HEAP32[$15>>2] = 7;
 HEAP32[$8>>2] = 0;
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($7)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($17, $19)|0;
 $21 = $20<<2;
 $22 = $21;
 $23 = (_malloc($22)|0);
 HEAP32[$7>>2] = $23;
 HEAP32[$9>>2] = 0;
 while(1) {
  $24 = HEAP32[$9>>2]|0;
  $25 = ((($7)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($7)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = Math_imul($26, $28)|0;
  $30 = $29<<2;
  $31 = ($24|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = HEAP32[$8>>2]|0;
  $33 = HEAP32[$4>>2]|0;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = HEAP32[$9>>2]|0;
  $37 = HEAP32[$7>>2]|0;
  $38 = (($37) + ($36)|0);
  HEAP8[$38>>0] = $35;
  $39 = HEAP32[$8>>2]|0;
  $40 = HEAP32[$4>>2]|0;
  $41 = (($40) + ($39<<2)|0);
  $42 = ((($41)) + 1|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = HEAP32[$9>>2]|0;
  $45 = (($44) + 1)|0;
  $46 = HEAP32[$7>>2]|0;
  $47 = (($46) + ($45)|0);
  HEAP8[$47>>0] = $43;
  $48 = HEAP32[$8>>2]|0;
  $49 = HEAP32[$4>>2]|0;
  $50 = (($49) + ($48<<2)|0);
  $51 = ((($50)) + 2|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = HEAP32[$9>>2]|0;
  $54 = (($53) + 2)|0;
  $55 = HEAP32[$7>>2]|0;
  $56 = (($55) + ($54)|0);
  HEAP8[$56>>0] = $52;
  $57 = HEAP32[$8>>2]|0;
  $58 = HEAP32[$4>>2]|0;
  $59 = (($58) + ($57<<2)|0);
  $60 = ((($59)) + 3|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = HEAP32[$9>>2]|0;
  $63 = (($62) + 3)|0;
  $64 = HEAP32[$7>>2]|0;
  $65 = (($64) + ($63)|0);
  HEAP8[$65>>0] = $61;
  $66 = HEAP32[$8>>2]|0;
  $67 = (($66) + 1)|0;
  HEAP32[$8>>2] = $67;
  $68 = HEAP32[$9>>2]|0;
  $69 = (($68) + 4)|0;
  HEAP32[$9>>2] = $69;
 }
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$7+16>>2]|0;
 STACKTOP = sp;return;
}
function _ImageFormat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0;
 var $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0.0;
 var $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0;
 var $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 48|0;
 $vararg_buffer = sp;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 78|0;
 $9 = sp + 77|0;
 $10 = sp + 76|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = sp + 75|0;
 $14 = sp + 74|0;
 $15 = sp + 73|0;
 $16 = sp + 72|0;
 $17 = sp + 12|0;
 $18 = sp + 71|0;
 $19 = sp + 70|0;
 $20 = sp + 69|0;
 $21 = sp + 68|0;
 $22 = sp + 8|0;
 $23 = sp + 4|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $24 = HEAP32[$2>>2]|0;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$3>>2]|0;
 $28 = ($26|0)!=($27|0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = HEAP32[$2>>2]|0;
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)<(8);
 $33 = HEAP32[$3>>2]|0;
 $34 = ($33|0)<(8);
 $or$cond = $32 & $34;
 if (!($or$cond)) {
  _TraceLog(2,15040,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $35 = HEAP32[$2>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$35+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$35+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$35+16>>2]|0;
 $36 = (_GetImageData($$byval_copy)|0);
 HEAP32[$4>>2] = $36;
 $37 = HEAP32[$2>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 _free($38);
 $39 = HEAP32[$3>>2]|0;
 $40 = HEAP32[$2>>2]|0;
 $41 = ((($40)) + 16|0);
 HEAP32[$41>>2] = $39;
 HEAP32[$5>>2] = 0;
 $42 = HEAP32[$2>>2]|0;
 $43 = ((($42)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 L8: do {
  switch ($44|0) {
  case 1:  {
   $45 = HEAP32[$2>>2]|0;
   $46 = ((($45)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = HEAP32[$2>>2]|0;
   $49 = ((($48)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = Math_imul($47, $50)|0;
   $52 = $51;
   $53 = (_malloc($52)|0);
   $54 = HEAP32[$2>>2]|0;
   HEAP32[$54>>2] = $53;
   HEAP32[$6>>2] = 0;
   while(1) {
    $55 = HEAP32[$6>>2]|0;
    $56 = HEAP32[$2>>2]|0;
    $57 = ((($56)) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = HEAP32[$2>>2]|0;
    $60 = ((($59)) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = Math_imul($58, $61)|0;
    $63 = ($55|0)<($62|0);
    if (!($63)) {
     break L8;
    }
    $64 = HEAP32[$6>>2]|0;
    $65 = HEAP32[$4>>2]|0;
    $66 = (($65) + ($64<<2)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = (+($67&255));
    $69 = $68 * 0.29899999499320984;
    $70 = HEAP32[$6>>2]|0;
    $71 = HEAP32[$4>>2]|0;
    $72 = (($71) + ($70<<2)|0);
    $73 = ((($72)) + 1|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = (+($74&255));
    $76 = $75 * 0.58700001239776611;
    $77 = $69 + $76;
    $78 = HEAP32[$6>>2]|0;
    $79 = HEAP32[$4>>2]|0;
    $80 = (($79) + ($78<<2)|0);
    $81 = ((($80)) + 2|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = (+($82&255));
    $84 = $83 * 0.11400000005960464;
    $85 = $77 + $84;
    $86 = (~~(($85))&255);
    $87 = HEAP32[$6>>2]|0;
    $88 = HEAP32[$2>>2]|0;
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + ($87)|0);
    HEAP8[$90>>0] = $86;
    $91 = HEAP32[$6>>2]|0;
    $92 = (($91) + 1)|0;
    HEAP32[$6>>2] = $92;
   }
   break;
  }
  case 2:  {
   $93 = HEAP32[$2>>2]|0;
   $94 = ((($93)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = HEAP32[$2>>2]|0;
   $97 = ((($96)) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = Math_imul($95, $98)|0;
   $100 = $99<<1;
   $101 = $100;
   $102 = (_malloc($101)|0);
   $103 = HEAP32[$2>>2]|0;
   HEAP32[$103>>2] = $102;
   HEAP32[$7>>2] = 0;
   while(1) {
    $104 = HEAP32[$7>>2]|0;
    $105 = HEAP32[$2>>2]|0;
    $106 = ((($105)) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = HEAP32[$2>>2]|0;
    $109 = ((($108)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = Math_imul($107, $110)|0;
    $112 = $111<<1;
    $113 = ($104|0)<($112|0);
    if (!($113)) {
     break L8;
    }
    $114 = HEAP32[$5>>2]|0;
    $115 = HEAP32[$4>>2]|0;
    $116 = (($115) + ($114<<2)|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = (+($117&255));
    $119 = $118 * 0.29899999499320984;
    $120 = HEAP32[$5>>2]|0;
    $121 = HEAP32[$4>>2]|0;
    $122 = (($121) + ($120<<2)|0);
    $123 = ((($122)) + 1|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = (+($124&255));
    $126 = $125 * 0.58700001239776611;
    $127 = $119 + $126;
    $128 = HEAP32[$5>>2]|0;
    $129 = HEAP32[$4>>2]|0;
    $130 = (($129) + ($128<<2)|0);
    $131 = ((($130)) + 2|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = (+($132&255));
    $134 = $133 * 0.11400000005960464;
    $135 = $127 + $134;
    $136 = (~~(($135))&255);
    $137 = HEAP32[$7>>2]|0;
    $138 = HEAP32[$2>>2]|0;
    $139 = HEAP32[$138>>2]|0;
    $140 = (($139) + ($137)|0);
    HEAP8[$140>>0] = $136;
    $141 = HEAP32[$5>>2]|0;
    $142 = HEAP32[$4>>2]|0;
    $143 = (($142) + ($141<<2)|0);
    $144 = ((($143)) + 3|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = HEAP32[$7>>2]|0;
    $147 = (($146) + 1)|0;
    $148 = HEAP32[$2>>2]|0;
    $149 = HEAP32[$148>>2]|0;
    $150 = (($149) + ($147)|0);
    HEAP8[$150>>0] = $145;
    $151 = HEAP32[$5>>2]|0;
    $152 = (($151) + 1)|0;
    HEAP32[$5>>2] = $152;
    $153 = HEAP32[$7>>2]|0;
    $154 = (($153) + 2)|0;
    HEAP32[$7>>2] = $154;
   }
   break;
  }
  case 3:  {
   $155 = HEAP32[$2>>2]|0;
   $156 = ((($155)) + 4|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = HEAP32[$2>>2]|0;
   $159 = ((($158)) + 8|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = Math_imul($157, $160)|0;
   $162 = $161<<1;
   $163 = (_malloc($162)|0);
   $164 = HEAP32[$2>>2]|0;
   HEAP32[$164>>2] = $163;
   HEAP8[$8>>0] = 0;
   HEAP8[$9>>0] = 0;
   HEAP8[$10>>0] = 0;
   HEAP32[$11>>2] = 0;
   while(1) {
    $165 = HEAP32[$11>>2]|0;
    $166 = HEAP32[$2>>2]|0;
    $167 = ((($166)) + 4|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = HEAP32[$2>>2]|0;
    $170 = ((($169)) + 8|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = Math_imul($168, $171)|0;
    $173 = ($165|0)<($172|0);
    if (!($173)) {
     break L8;
    }
    $174 = HEAP32[$5>>2]|0;
    $175 = HEAP32[$4>>2]|0;
    $176 = (($175) + ($174<<2)|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = (+($177&255));
    $179 = $178 * 31.0;
    $180 = $179 / 255.0;
    $181 = $180;
    $182 = (+_round((+$181)));
    $183 = (~~(($182))&255);
    HEAP8[$8>>0] = $183;
    $184 = HEAP32[$5>>2]|0;
    $185 = HEAP32[$4>>2]|0;
    $186 = (($185) + ($184<<2)|0);
    $187 = ((($186)) + 1|0);
    $188 = HEAP8[$187>>0]|0;
    $189 = (+($188&255));
    $190 = $189 * 63.0;
    $191 = $190 / 255.0;
    $192 = $191;
    $193 = (+_round((+$192)));
    $194 = (~~(($193))&255);
    HEAP8[$9>>0] = $194;
    $195 = HEAP32[$5>>2]|0;
    $196 = HEAP32[$4>>2]|0;
    $197 = (($196) + ($195<<2)|0);
    $198 = ((($197)) + 2|0);
    $199 = HEAP8[$198>>0]|0;
    $200 = (+($199&255));
    $201 = $200 * 31.0;
    $202 = $201 / 255.0;
    $203 = $202;
    $204 = (+_round((+$203)));
    $205 = (~~(($204))&255);
    HEAP8[$10>>0] = $205;
    $206 = HEAP8[$8>>0]|0;
    $207 = $206&255;
    $208 = $207&65535;
    $209 = $208 << 11;
    $210 = HEAP8[$9>>0]|0;
    $211 = $210&255;
    $212 = $211&65535;
    $213 = $212 << 5;
    $214 = $209 | $213;
    $215 = HEAP8[$10>>0]|0;
    $216 = $215&255;
    $217 = $216&65535;
    $218 = $214 | $217;
    $219 = $218&65535;
    $220 = HEAP32[$11>>2]|0;
    $221 = HEAP32[$2>>2]|0;
    $222 = HEAP32[$221>>2]|0;
    $223 = (($222) + ($220<<1)|0);
    HEAP16[$223>>1] = $219;
    $224 = HEAP32[$11>>2]|0;
    $225 = (($224) + 1)|0;
    HEAP32[$11>>2] = $225;
   }
   break;
  }
  case 4:  {
   $226 = HEAP32[$2>>2]|0;
   $227 = ((($226)) + 4|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = HEAP32[$2>>2]|0;
   $230 = ((($229)) + 8|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = Math_imul($228, $231)|0;
   $233 = ($232*3)|0;
   $234 = $233;
   $235 = (_malloc($234)|0);
   $236 = HEAP32[$2>>2]|0;
   HEAP32[$236>>2] = $235;
   HEAP32[$12>>2] = 0;
   while(1) {
    $237 = HEAP32[$12>>2]|0;
    $238 = HEAP32[$2>>2]|0;
    $239 = ((($238)) + 4|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = HEAP32[$2>>2]|0;
    $242 = ((($241)) + 8|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = Math_imul($240, $243)|0;
    $245 = ($244*3)|0;
    $246 = ($237|0)<($245|0);
    if (!($246)) {
     break L8;
    }
    $247 = HEAP32[$5>>2]|0;
    $248 = HEAP32[$4>>2]|0;
    $249 = (($248) + ($247<<2)|0);
    $250 = HEAP8[$249>>0]|0;
    $251 = HEAP32[$12>>2]|0;
    $252 = HEAP32[$2>>2]|0;
    $253 = HEAP32[$252>>2]|0;
    $254 = (($253) + ($251)|0);
    HEAP8[$254>>0] = $250;
    $255 = HEAP32[$5>>2]|0;
    $256 = HEAP32[$4>>2]|0;
    $257 = (($256) + ($255<<2)|0);
    $258 = ((($257)) + 1|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = HEAP32[$12>>2]|0;
    $261 = (($260) + 1)|0;
    $262 = HEAP32[$2>>2]|0;
    $263 = HEAP32[$262>>2]|0;
    $264 = (($263) + ($261)|0);
    HEAP8[$264>>0] = $259;
    $265 = HEAP32[$5>>2]|0;
    $266 = HEAP32[$4>>2]|0;
    $267 = (($266) + ($265<<2)|0);
    $268 = ((($267)) + 2|0);
    $269 = HEAP8[$268>>0]|0;
    $270 = HEAP32[$12>>2]|0;
    $271 = (($270) + 2)|0;
    $272 = HEAP32[$2>>2]|0;
    $273 = HEAP32[$272>>2]|0;
    $274 = (($273) + ($271)|0);
    HEAP8[$274>>0] = $269;
    $275 = HEAP32[$5>>2]|0;
    $276 = (($275) + 1)|0;
    HEAP32[$5>>2] = $276;
    $277 = HEAP32[$12>>2]|0;
    $278 = (($277) + 3)|0;
    HEAP32[$12>>2] = $278;
   }
   break;
  }
  case 5:  {
   $279 = HEAP32[$2>>2]|0;
   $280 = ((($279)) + 4|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = HEAP32[$2>>2]|0;
   $283 = ((($282)) + 8|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = Math_imul($281, $284)|0;
   $286 = $285<<1;
   $287 = (_malloc($286)|0);
   $288 = HEAP32[$2>>2]|0;
   HEAP32[$288>>2] = $287;
   HEAP8[$13>>0] = 0;
   HEAP8[$14>>0] = 0;
   HEAP8[$15>>0] = 0;
   HEAP8[$16>>0] = 0;
   HEAP32[$17>>2] = 0;
   while(1) {
    $289 = HEAP32[$17>>2]|0;
    $290 = HEAP32[$2>>2]|0;
    $291 = ((($290)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = HEAP32[$2>>2]|0;
    $294 = ((($293)) + 8|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = Math_imul($292, $295)|0;
    $297 = ($289|0)<($296|0);
    if (!($297)) {
     break L8;
    }
    $298 = HEAP32[$17>>2]|0;
    $299 = HEAP32[$4>>2]|0;
    $300 = (($299) + ($298<<2)|0);
    $301 = HEAP8[$300>>0]|0;
    $302 = (+($301&255));
    $303 = $302 * 31.0;
    $304 = $303 / 255.0;
    $305 = $304;
    $306 = (+_round((+$305)));
    $307 = (~~(($306))&255);
    HEAP8[$13>>0] = $307;
    $308 = HEAP32[$17>>2]|0;
    $309 = HEAP32[$4>>2]|0;
    $310 = (($309) + ($308<<2)|0);
    $311 = ((($310)) + 1|0);
    $312 = HEAP8[$311>>0]|0;
    $313 = (+($312&255));
    $314 = $313 * 31.0;
    $315 = $314 / 255.0;
    $316 = $315;
    $317 = (+_round((+$316)));
    $318 = (~~(($317))&255);
    HEAP8[$14>>0] = $318;
    $319 = HEAP32[$17>>2]|0;
    $320 = HEAP32[$4>>2]|0;
    $321 = (($320) + ($319<<2)|0);
    $322 = ((($321)) + 2|0);
    $323 = HEAP8[$322>>0]|0;
    $324 = (+($323&255));
    $325 = $324 * 31.0;
    $326 = $325 / 255.0;
    $327 = $326;
    $328 = (+_round((+$327)));
    $329 = (~~(($328))&255);
    HEAP8[$15>>0] = $329;
    $330 = HEAP32[$17>>2]|0;
    $331 = HEAP32[$4>>2]|0;
    $332 = (($331) + ($330<<2)|0);
    $333 = ((($332)) + 3|0);
    $334 = HEAP8[$333>>0]|0;
    $335 = $334&255;
    $336 = ($335|0)>(50);
    $337 = $336 ? 1 : 0;
    $338 = $337&255;
    HEAP8[$16>>0] = $338;
    $339 = HEAP8[$13>>0]|0;
    $340 = $339&255;
    $341 = $340&65535;
    $342 = $341 << 11;
    $343 = HEAP8[$14>>0]|0;
    $344 = $343&255;
    $345 = $344&65535;
    $346 = $345 << 6;
    $347 = $342 | $346;
    $348 = HEAP8[$15>>0]|0;
    $349 = $348&255;
    $350 = $349&65535;
    $351 = $350 << 1;
    $352 = $347 | $351;
    $353 = HEAP8[$16>>0]|0;
    $354 = $353&255;
    $355 = $354&65535;
    $356 = $352 | $355;
    $357 = $356&65535;
    $358 = HEAP32[$17>>2]|0;
    $359 = HEAP32[$2>>2]|0;
    $360 = HEAP32[$359>>2]|0;
    $361 = (($360) + ($358<<1)|0);
    HEAP16[$361>>1] = $357;
    $362 = HEAP32[$17>>2]|0;
    $363 = (($362) + 1)|0;
    HEAP32[$17>>2] = $363;
   }
   break;
  }
  case 6:  {
   $364 = HEAP32[$2>>2]|0;
   $365 = ((($364)) + 4|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = HEAP32[$2>>2]|0;
   $368 = ((($367)) + 8|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = Math_imul($366, $369)|0;
   $371 = $370<<1;
   $372 = (_malloc($371)|0);
   $373 = HEAP32[$2>>2]|0;
   HEAP32[$373>>2] = $372;
   HEAP8[$18>>0] = 0;
   HEAP8[$19>>0] = 0;
   HEAP8[$20>>0] = 0;
   HEAP8[$21>>0] = 0;
   HEAP32[$22>>2] = 0;
   while(1) {
    $374 = HEAP32[$22>>2]|0;
    $375 = HEAP32[$2>>2]|0;
    $376 = ((($375)) + 4|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = HEAP32[$2>>2]|0;
    $379 = ((($378)) + 8|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = Math_imul($377, $380)|0;
    $382 = ($374|0)<($381|0);
    if (!($382)) {
     break L8;
    }
    $383 = HEAP32[$22>>2]|0;
    $384 = HEAP32[$4>>2]|0;
    $385 = (($384) + ($383<<2)|0);
    $386 = HEAP8[$385>>0]|0;
    $387 = (+($386&255));
    $388 = $387 * 15.0;
    $389 = $388 / 255.0;
    $390 = $389;
    $391 = (+_round((+$390)));
    $392 = (~~(($391))&255);
    HEAP8[$18>>0] = $392;
    $393 = HEAP32[$22>>2]|0;
    $394 = HEAP32[$4>>2]|0;
    $395 = (($394) + ($393<<2)|0);
    $396 = ((($395)) + 1|0);
    $397 = HEAP8[$396>>0]|0;
    $398 = (+($397&255));
    $399 = $398 * 15.0;
    $400 = $399 / 255.0;
    $401 = $400;
    $402 = (+_round((+$401)));
    $403 = (~~(($402))&255);
    HEAP8[$19>>0] = $403;
    $404 = HEAP32[$22>>2]|0;
    $405 = HEAP32[$4>>2]|0;
    $406 = (($405) + ($404<<2)|0);
    $407 = ((($406)) + 2|0);
    $408 = HEAP8[$407>>0]|0;
    $409 = (+($408&255));
    $410 = $409 * 15.0;
    $411 = $410 / 255.0;
    $412 = $411;
    $413 = (+_round((+$412)));
    $414 = (~~(($413))&255);
    HEAP8[$20>>0] = $414;
    $415 = HEAP32[$22>>2]|0;
    $416 = HEAP32[$4>>2]|0;
    $417 = (($416) + ($415<<2)|0);
    $418 = ((($417)) + 3|0);
    $419 = HEAP8[$418>>0]|0;
    $420 = (+($419&255));
    $421 = $420 * 15.0;
    $422 = $421 / 255.0;
    $423 = $422;
    $424 = (+_round((+$423)));
    $425 = (~~(($424))&255);
    HEAP8[$21>>0] = $425;
    $426 = HEAP8[$18>>0]|0;
    $427 = $426&255;
    $428 = $427&65535;
    $429 = $428 << 12;
    $430 = HEAP8[$19>>0]|0;
    $431 = $430&255;
    $432 = $431&65535;
    $433 = $432 << 8;
    $434 = $429 | $433;
    $435 = HEAP8[$20>>0]|0;
    $436 = $435&255;
    $437 = $436&65535;
    $438 = $437 << 4;
    $439 = $434 | $438;
    $440 = HEAP8[$21>>0]|0;
    $441 = $440&255;
    $442 = $441&65535;
    $443 = $439 | $442;
    $444 = $443&65535;
    $445 = HEAP32[$22>>2]|0;
    $446 = HEAP32[$2>>2]|0;
    $447 = HEAP32[$446>>2]|0;
    $448 = (($447) + ($445<<1)|0);
    HEAP16[$448>>1] = $444;
    $449 = HEAP32[$22>>2]|0;
    $450 = (($449) + 1)|0;
    HEAP32[$22>>2] = $450;
   }
   break;
  }
  case 7:  {
   $451 = HEAP32[$2>>2]|0;
   $452 = ((($451)) + 4|0);
   $453 = HEAP32[$452>>2]|0;
   $454 = HEAP32[$2>>2]|0;
   $455 = ((($454)) + 8|0);
   $456 = HEAP32[$455>>2]|0;
   $457 = Math_imul($453, $456)|0;
   $458 = $457<<2;
   $459 = $458;
   $460 = (_malloc($459)|0);
   $461 = HEAP32[$2>>2]|0;
   HEAP32[$461>>2] = $460;
   HEAP32[$23>>2] = 0;
   while(1) {
    $462 = HEAP32[$23>>2]|0;
    $463 = HEAP32[$2>>2]|0;
    $464 = ((($463)) + 4|0);
    $465 = HEAP32[$464>>2]|0;
    $466 = HEAP32[$2>>2]|0;
    $467 = ((($466)) + 8|0);
    $468 = HEAP32[$467>>2]|0;
    $469 = Math_imul($465, $468)|0;
    $470 = $469<<2;
    $471 = ($462|0)<($470|0);
    if (!($471)) {
     break L8;
    }
    $472 = HEAP32[$5>>2]|0;
    $473 = HEAP32[$4>>2]|0;
    $474 = (($473) + ($472<<2)|0);
    $475 = HEAP8[$474>>0]|0;
    $476 = HEAP32[$23>>2]|0;
    $477 = HEAP32[$2>>2]|0;
    $478 = HEAP32[$477>>2]|0;
    $479 = (($478) + ($476)|0);
    HEAP8[$479>>0] = $475;
    $480 = HEAP32[$5>>2]|0;
    $481 = HEAP32[$4>>2]|0;
    $482 = (($481) + ($480<<2)|0);
    $483 = ((($482)) + 1|0);
    $484 = HEAP8[$483>>0]|0;
    $485 = HEAP32[$23>>2]|0;
    $486 = (($485) + 1)|0;
    $487 = HEAP32[$2>>2]|0;
    $488 = HEAP32[$487>>2]|0;
    $489 = (($488) + ($486)|0);
    HEAP8[$489>>0] = $484;
    $490 = HEAP32[$5>>2]|0;
    $491 = HEAP32[$4>>2]|0;
    $492 = (($491) + ($490<<2)|0);
    $493 = ((($492)) + 2|0);
    $494 = HEAP8[$493>>0]|0;
    $495 = HEAP32[$23>>2]|0;
    $496 = (($495) + 2)|0;
    $497 = HEAP32[$2>>2]|0;
    $498 = HEAP32[$497>>2]|0;
    $499 = (($498) + ($496)|0);
    HEAP8[$499>>0] = $494;
    $500 = HEAP32[$5>>2]|0;
    $501 = HEAP32[$4>>2]|0;
    $502 = (($501) + ($500<<2)|0);
    $503 = ((($502)) + 3|0);
    $504 = HEAP8[$503>>0]|0;
    $505 = HEAP32[$23>>2]|0;
    $506 = (($505) + 3)|0;
    $507 = HEAP32[$2>>2]|0;
    $508 = HEAP32[$507>>2]|0;
    $509 = (($508) + ($506)|0);
    HEAP8[$509>>0] = $504;
    $510 = HEAP32[$5>>2]|0;
    $511 = (($510) + 1)|0;
    HEAP32[$5>>2] = $511;
    $512 = HEAP32[$23>>2]|0;
    $513 = (($512) + 4)|0;
    HEAP32[$23>>2] = $513;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $514 = HEAP32[$4>>2]|0;
 _free($514);
 STACKTOP = sp;return;
}
function _LoadTextureFromImage($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_rlglLoadTexture($7,$9,$11,$13,$15)|0);
 HEAP32[$2>>2] = $16;
 $17 = ((($1)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($2)) + 4|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($1)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($2)) + 8|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($1)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($2)) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($1)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($2)) + 16|0);
 HEAP32[$28>>2] = $27;
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$2+16>>2]|0;
 STACKTOP = sp;return;
}
function _UnloadImage($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _free($1);
 return;
}
function _stbi__stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $8 = HEAP32[$3>>2]|0;
 $9 = (_fread($6,1,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _stbi__stdio_skip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 (_fseek($4,$5,1)|0);
 STACKTOP = sp;return;
}
function _stbi__stdio_eof($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_feof($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _rlglLoadTexture($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer28 = sp + 64|0;
 $vararg_buffer24 = sp + 48|0;
 $vararg_buffer22 = sp + 40|0;
 $vararg_buffer20 = sp + 32|0;
 $vararg_buffer18 = sp + 24|0;
 $vararg_buffer16 = sp + 16|0;
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 92|0;
 $6 = sp + 88|0;
 $7 = sp + 84|0;
 $8 = sp + 80|0;
 $9 = sp + 76|0;
 $10 = sp + 72|0;
 $11 = sp + 68|0;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 _glBindTexture(3553,0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[8716]|0;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $14 = HEAP32[$9>>2]|0;
  $15 = ($14|0)==(8);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(9);
  $or$cond = $15 | $17;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($18|0)==(10);
  $or$cond3 = $or$cond | $19;
  $20 = HEAP32[$9>>2]|0;
  $21 = ($20|0)==(11);
  $or$cond5 = $or$cond3 | $21;
  if ($or$cond5) {
   _TraceLog(2,14709,$vararg_buffer);
   $22 = HEAP32[$11>>2]|0;
   HEAP32[$5>>2] = $22;
   $146 = HEAP32[$5>>2]|0;
   STACKTOP = sp;return ($146|0);
  }
 }
 $23 = HEAP32[8715]|0;
 $24 = ($23|0)==(0);
 $25 = HEAP32[$9>>2]|0;
 $26 = ($25|0)==(12);
 $or$cond7 = $24 & $26;
 if ($or$cond7) {
  _TraceLog(2,14753,$vararg_buffer14);
  $27 = HEAP32[$11>>2]|0;
  HEAP32[$5>>2] = $27;
  $146 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($146|0);
 }
 $28 = HEAP32[8714]|0;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $30 = HEAP32[$9>>2]|0;
  $31 = ($30|0)==(13);
  $32 = HEAP32[$9>>2]|0;
  $33 = ($32|0)==(14);
  $or$cond9 = $31 | $33;
  if ($or$cond9) {
   _TraceLog(2,14798,$vararg_buffer16);
   $34 = HEAP32[$11>>2]|0;
   HEAP32[$5>>2] = $34;
   $146 = HEAP32[$5>>2]|0;
   STACKTOP = sp;return ($146|0);
  }
 }
 $35 = HEAP32[8713]|0;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $37 = HEAP32[$9>>2]|0;
  $38 = ($37|0)==(15);
  $39 = HEAP32[$9>>2]|0;
  $40 = ($39|0)==(16);
  $or$cond11 = $38 | $40;
  if ($or$cond11) {
   _TraceLog(2,14843,$vararg_buffer18);
   $41 = HEAP32[$11>>2]|0;
   HEAP32[$5>>2] = $41;
   $146 = HEAP32[$5>>2]|0;
   STACKTOP = sp;return ($146|0);
  }
 }
 $42 = HEAP32[8712]|0;
 $43 = ($42|0)!=(0);
 if (!($43)) {
  $44 = HEAP32[$9>>2]|0;
  $45 = ($44|0)==(17);
  $46 = HEAP32[$9>>2]|0;
  $47 = ($46|0)==(18);
  $or$cond13 = $45 | $47;
  if ($or$cond13) {
   _TraceLog(2,14888,$vararg_buffer20);
   $48 = HEAP32[$11>>2]|0;
   HEAP32[$5>>2] = $48;
   $146 = HEAP32[$5>>2]|0;
   STACKTOP = sp;return ($146|0);
  }
 }
 _glGenTextures(1,($11|0));
 $49 = HEAP32[$11>>2]|0;
 _glBindTexture(3553,($49|0));
 $50 = HEAP32[$9>>2]|0;
 do {
  switch ($50|0) {
  case 1:  {
   $51 = HEAP32[$7>>2]|0;
   $52 = HEAP32[$8>>2]|0;
   $53 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6409,($51|0),($52|0),0,6409,5121,($53|0));
   break;
  }
  case 2:  {
   $54 = HEAP32[$7>>2]|0;
   $55 = HEAP32[$8>>2]|0;
   $56 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6410,($54|0),($55|0),0,6410,5121,($56|0));
   break;
  }
  case 3:  {
   $57 = HEAP32[$7>>2]|0;
   $58 = HEAP32[$8>>2]|0;
   $59 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6407,($57|0),($58|0),0,6407,33635,($59|0));
   break;
  }
  case 4:  {
   $60 = HEAP32[$7>>2]|0;
   $61 = HEAP32[$8>>2]|0;
   $62 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6407,($60|0),($61|0),0,6407,5121,($62|0));
   break;
  }
  case 5:  {
   $63 = HEAP32[$7>>2]|0;
   $64 = HEAP32[$8>>2]|0;
   $65 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6408,($63|0),($64|0),0,6408,32820,($65|0));
   break;
  }
  case 6:  {
   $66 = HEAP32[$7>>2]|0;
   $67 = HEAP32[$8>>2]|0;
   $68 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6408,($66|0),($67|0),0,6408,32819,($68|0));
   break;
  }
  case 7:  {
   $69 = HEAP32[$7>>2]|0;
   $70 = HEAP32[$8>>2]|0;
   $71 = HEAP32[$6>>2]|0;
   _glTexImage2D(3553,0,6408,($69|0),($70|0),0,6408,5121,($71|0));
   break;
  }
  case 8:  {
   $72 = HEAP32[8716]|0;
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = HEAP32[$6>>2]|0;
    $75 = HEAP32[$7>>2]|0;
    $76 = HEAP32[$8>>2]|0;
    $77 = HEAP32[$10>>2]|0;
    _LoadCompressedTexture($74,$75,$76,$77,33776);
   }
   break;
  }
  case 9:  {
   $78 = HEAP32[8716]|0;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = HEAP32[$6>>2]|0;
    $81 = HEAP32[$7>>2]|0;
    $82 = HEAP32[$8>>2]|0;
    $83 = HEAP32[$10>>2]|0;
    _LoadCompressedTexture($80,$81,$82,$83,33777);
   }
   break;
  }
  case 10:  {
   $84 = HEAP32[8716]|0;
   $85 = ($84|0)!=(0);
   if ($85) {
    $86 = HEAP32[$6>>2]|0;
    $87 = HEAP32[$7>>2]|0;
    $88 = HEAP32[$8>>2]|0;
    $89 = HEAP32[$10>>2]|0;
    _LoadCompressedTexture($86,$87,$88,$89,33778);
   }
   break;
  }
  case 11:  {
   $90 = HEAP32[8716]|0;
   $91 = ($90|0)!=(0);
   if ($91) {
    $92 = HEAP32[$6>>2]|0;
    $93 = HEAP32[$7>>2]|0;
    $94 = HEAP32[$8>>2]|0;
    $95 = HEAP32[$10>>2]|0;
    _LoadCompressedTexture($92,$93,$94,$95,33779);
   }
   break;
  }
  case 12:  {
   $96 = HEAP32[8715]|0;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = HEAP32[$6>>2]|0;
    $99 = HEAP32[$7>>2]|0;
    $100 = HEAP32[$8>>2]|0;
    $101 = HEAP32[$10>>2]|0;
    _LoadCompressedTexture($98,$99,$100,$101,36196);
   }
   break;
  }
  case 13:  {
   $102 = HEAP32[8714]|0;
   $103 = ($102|0)!=(0);
   if ($103) {
    $104 = HEAP32[$6>>2]|0;
    $105 = HEAP32[$7>>2]|0;
    $106 = HEAP32[$8>>2]|0;
    $107 = HEAP32[$10>>2]|0;
    _LoadCompressedTexture($104,$105,$106,$107,37492);
   }
   break;
  }
  case 14:  {
   $108 = HEAP32[8714]|0;
   $109 = ($108|0)!=(0);
   if ($109) {
    $110 = HEAP32[$6>>2]|0;
    $111 = HEAP32[$7>>2]|0;
    $112 = HEAP32[$8>>2]|0;
    $113 = HEAP32[$10>>2]|0;
    _LoadCompressedTexture($110,$111,$112,$113,37496);
   }
   break;
  }
  case 15:  {
   $114 = HEAP32[8713]|0;
   $115 = ($114|0)!=(0);
   if ($115) {
    $116 = HEAP32[$6>>2]|0;
    $117 = HEAP32[$7>>2]|0;
    $118 = HEAP32[$8>>2]|0;
    $119 = HEAP32[$10>>2]|0;
    _LoadCompressedTexture($116,$117,$118,$119,35840);
   }
   break;
  }
  case 16:  {
   $120 = HEAP32[8713]|0;
   $121 = ($120|0)!=(0);
   if ($121) {
    $122 = HEAP32[$6>>2]|0;
    $123 = HEAP32[$7>>2]|0;
    $124 = HEAP32[$8>>2]|0;
    $125 = HEAP32[$10>>2]|0;
    _LoadCompressedTexture($122,$123,$124,$125,35842);
   }
   break;
  }
  case 17:  {
   $126 = HEAP32[8712]|0;
   $127 = ($126|0)!=(0);
   if ($127) {
    $128 = HEAP32[$6>>2]|0;
    $129 = HEAP32[$7>>2]|0;
    $130 = HEAP32[$8>>2]|0;
    $131 = HEAP32[$10>>2]|0;
    _LoadCompressedTexture($128,$129,$130,$131,37808);
   }
   break;
  }
  case 18:  {
   $132 = HEAP32[8712]|0;
   $133 = ($132|0)!=(0);
   if ($133) {
    $134 = HEAP32[$6>>2]|0;
    $135 = HEAP32[$7>>2]|0;
    $136 = HEAP32[$8>>2]|0;
    $137 = HEAP32[$10>>2]|0;
    _LoadCompressedTexture($134,$135,$136,$137,37815);
   }
   break;
  }
  default: {
   _TraceLog(2,14933,$vararg_buffer22);
  }
  }
 } while(0);
 $138 = HEAP32[8717]|0;
 $139 = ($138|0)!=(0);
 if ($139) {
  _glTexParameteri(3553,10242,10497);
  _glTexParameteri(3553,10243,10497);
 } else {
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
 }
 _glTexParameteri(3553,10240,9728);
 _glTexParameteri(3553,10241,9728);
 _glBindTexture(3553,0);
 $140 = HEAP32[$11>>2]|0;
 $141 = ($140>>>0)>(0);
 if ($141) {
  $142 = HEAP32[$11>>2]|0;
  $143 = HEAP32[$7>>2]|0;
  $144 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer24>>2] = $142;
  $vararg_ptr26 = ((($vararg_buffer24)) + 4|0);
  HEAP32[$vararg_ptr26>>2] = $143;
  $vararg_ptr27 = ((($vararg_buffer24)) + 8|0);
  HEAP32[$vararg_ptr27>>2] = $144;
  _TraceLog(0,14962,$vararg_buffer24);
 } else {
  _TraceLog(2,15011,$vararg_buffer28);
 }
 $145 = HEAP32[$11>>2]|0;
 HEAP32[$5>>2] = $145;
 $146 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($146|0);
}
function _LoadCompressedTexture($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 20|0;
 $9 = sp + 16|0;
 $10 = sp + 12|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 _glPixelStorei(3317,1);
 HEAP32[$10>>2] = 0;
 HEAP32[$11>>2] = 0;
 $14 = HEAP32[$9>>2]|0;
 $15 = ($14|0)==(33776);
 $16 = HEAP32[$9>>2]|0;
 $17 = ($16|0)==(33777);
 $or$cond = $15 | $17;
 $18 = HEAP32[$9>>2]|0;
 $19 = ($18|0)==(36196);
 $or$cond3 = $or$cond | $19;
 $20 = HEAP32[$9>>2]|0;
 $21 = ($20|0)==(37492);
 $or$cond5 = $or$cond3 | $21;
 if ($or$cond5) {
  HEAP32[$10>>2] = 8;
 } else {
  HEAP32[$10>>2] = 16;
 }
 HEAP32[$12>>2] = 0;
 while(1) {
  $22 = HEAP32[$12>>2]|0;
  $23 = HEAP32[$8>>2]|0;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   label = 12;
   break;
  }
  $25 = HEAP32[$6>>2]|0;
  $26 = ($25|0)!=(0);
  $27 = HEAP32[$7>>2]|0;
  $28 = ($27|0)!=(0);
  $29 = $26 ? 1 : $28;
  if (!($29)) {
   label = 12;
   break;
  }
  HEAP32[$13>>2] = 0;
  $30 = HEAP32[$6>>2]|0;
  $31 = (($30) + 3)|0;
  $32 = (($31|0) / 4)&-1;
  $33 = HEAP32[$7>>2]|0;
  $34 = (($33) + 3)|0;
  $35 = (($34|0) / 4)&-1;
  $36 = Math_imul($32, $35)|0;
  $37 = HEAP32[$10>>2]|0;
  $38 = Math_imul($36, $37)|0;
  HEAP32[$13>>2] = $38;
  $39 = HEAP32[$12>>2]|0;
  $40 = HEAP32[$9>>2]|0;
  $41 = HEAP32[$6>>2]|0;
  $42 = HEAP32[$7>>2]|0;
  $43 = HEAP32[$13>>2]|0;
  $44 = HEAP32[$5>>2]|0;
  $45 = HEAP32[$11>>2]|0;
  $46 = (($44) + ($45)|0);
  _glCompressedTexImage2D(3553,($39|0),($40|0),($41|0),($42|0),0,($43|0),($46|0));
  $47 = HEAP32[$13>>2]|0;
  $48 = HEAP32[$11>>2]|0;
  $49 = (($48) + ($47))|0;
  HEAP32[$11>>2] = $49;
  $50 = HEAP32[$6>>2]|0;
  $51 = (($50|0) / 2)&-1;
  HEAP32[$6>>2] = $51;
  $52 = HEAP32[$7>>2]|0;
  $53 = (($52|0) / 2)&-1;
  HEAP32[$7>>2] = $53;
  $54 = HEAP32[$6>>2]|0;
  $55 = ($54|0)<(1);
  if ($55) {
   HEAP32[$6>>2] = 1;
  }
  $56 = HEAP32[$7>>2]|0;
  $57 = ($56|0)<(1);
  if ($57) {
   HEAP32[$7>>2] = 1;
  }
  $58 = HEAP32[$12>>2]|0;
  $59 = (($58) + 1)|0;
  HEAP32[$12>>2] = $59;
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _GetImageData($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp + 20|0;
 $5 = sp + 18|0;
 $6 = sp + 16|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($8, $10)|0;
 $12 = $11<<2;
 $13 = (_malloc($12)|0);
 HEAP32[$1>>2] = $13;
 HEAP32[$2>>2] = 0;
 HEAP32[$3>>2] = 0;
 while(1) {
  $14 = HEAP32[$3>>2]|0;
  $15 = ((($0)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = Math_imul($16, $18)|0;
  $20 = ($14|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = ((($0)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  switch ($22|0) {
  case 1:  {
   $23 = HEAP32[$2>>2]|0;
   $24 = HEAP32[$0>>2]|0;
   $25 = (($24) + ($23)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = HEAP32[$3>>2]|0;
   $28 = HEAP32[$1>>2]|0;
   $29 = (($28) + ($27<<2)|0);
   HEAP8[$29>>0] = $26;
   $30 = HEAP32[$2>>2]|0;
   $31 = HEAP32[$0>>2]|0;
   $32 = (($31) + ($30)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = HEAP32[$3>>2]|0;
   $35 = HEAP32[$1>>2]|0;
   $36 = (($35) + ($34<<2)|0);
   $37 = ((($36)) + 1|0);
   HEAP8[$37>>0] = $33;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$0>>2]|0;
   $40 = (($39) + ($38)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = HEAP32[$3>>2]|0;
   $43 = HEAP32[$1>>2]|0;
   $44 = (($43) + ($42<<2)|0);
   $45 = ((($44)) + 2|0);
   HEAP8[$45>>0] = $41;
   $46 = HEAP32[$3>>2]|0;
   $47 = HEAP32[$1>>2]|0;
   $48 = (($47) + ($46<<2)|0);
   $49 = ((($48)) + 3|0);
   HEAP8[$49>>0] = -1;
   $50 = HEAP32[$2>>2]|0;
   $51 = (($50) + 1)|0;
   HEAP32[$2>>2] = $51;
   break;
  }
  case 2:  {
   $52 = HEAP32[$2>>2]|0;
   $53 = HEAP32[$0>>2]|0;
   $54 = (($53) + ($52)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = HEAP32[$3>>2]|0;
   $57 = HEAP32[$1>>2]|0;
   $58 = (($57) + ($56<<2)|0);
   HEAP8[$58>>0] = $55;
   $59 = HEAP32[$2>>2]|0;
   $60 = HEAP32[$0>>2]|0;
   $61 = (($60) + ($59)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = HEAP32[$3>>2]|0;
   $64 = HEAP32[$1>>2]|0;
   $65 = (($64) + ($63<<2)|0);
   $66 = ((($65)) + 1|0);
   HEAP8[$66>>0] = $62;
   $67 = HEAP32[$2>>2]|0;
   $68 = HEAP32[$0>>2]|0;
   $69 = (($68) + ($67)|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = HEAP32[$3>>2]|0;
   $72 = HEAP32[$1>>2]|0;
   $73 = (($72) + ($71<<2)|0);
   $74 = ((($73)) + 2|0);
   HEAP8[$74>>0] = $70;
   $75 = HEAP32[$2>>2]|0;
   $76 = (($75) + 1)|0;
   $77 = HEAP32[$0>>2]|0;
   $78 = (($77) + ($76)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = HEAP32[$3>>2]|0;
   $81 = HEAP32[$1>>2]|0;
   $82 = (($81) + ($80<<2)|0);
   $83 = ((($82)) + 3|0);
   HEAP8[$83>>0] = $79;
   $84 = HEAP32[$2>>2]|0;
   $85 = (($84) + 2)|0;
   HEAP32[$2>>2] = $85;
   break;
  }
  case 5:  {
   $86 = HEAP32[$2>>2]|0;
   $87 = HEAP32[$0>>2]|0;
   $88 = (($87) + ($86<<1)|0);
   $89 = HEAP16[$88>>1]|0;
   HEAP16[$4>>1] = $89;
   $90 = HEAP16[$4>>1]|0;
   $91 = $90&65535;
   $92 = $91 & 63488;
   $93 = $92 >> 11;
   $94 = (+($93|0));
   $95 = $94 * 8.0;
   $96 = (~~(($95))&255);
   $97 = HEAP32[$3>>2]|0;
   $98 = HEAP32[$1>>2]|0;
   $99 = (($98) + ($97<<2)|0);
   HEAP8[$99>>0] = $96;
   $100 = HEAP16[$4>>1]|0;
   $101 = $100&65535;
   $102 = $101 & 1984;
   $103 = $102 >> 6;
   $104 = (+($103|0));
   $105 = $104 * 8.0;
   $106 = (~~(($105))&255);
   $107 = HEAP32[$3>>2]|0;
   $108 = HEAP32[$1>>2]|0;
   $109 = (($108) + ($107<<2)|0);
   $110 = ((($109)) + 1|0);
   HEAP8[$110>>0] = $106;
   $111 = HEAP16[$4>>1]|0;
   $112 = $111&65535;
   $113 = $112 & 62;
   $114 = $113 >> 1;
   $115 = (+($114|0));
   $116 = $115 * 8.0;
   $117 = (~~(($116))&255);
   $118 = HEAP32[$3>>2]|0;
   $119 = HEAP32[$1>>2]|0;
   $120 = (($119) + ($118<<2)|0);
   $121 = ((($120)) + 2|0);
   HEAP8[$121>>0] = $117;
   $122 = HEAP16[$4>>1]|0;
   $123 = $122&65535;
   $124 = $123 & 1;
   $125 = ($124*255)|0;
   $126 = $125&255;
   $127 = HEAP32[$3>>2]|0;
   $128 = HEAP32[$1>>2]|0;
   $129 = (($128) + ($127<<2)|0);
   $130 = ((($129)) + 3|0);
   HEAP8[$130>>0] = $126;
   $131 = HEAP32[$2>>2]|0;
   $132 = (($131) + 1)|0;
   HEAP32[$2>>2] = $132;
   break;
  }
  case 3:  {
   $133 = HEAP32[$2>>2]|0;
   $134 = HEAP32[$0>>2]|0;
   $135 = (($134) + ($133<<1)|0);
   $136 = HEAP16[$135>>1]|0;
   HEAP16[$5>>1] = $136;
   $137 = HEAP16[$5>>1]|0;
   $138 = $137&65535;
   $139 = $138 & 63488;
   $140 = $139 >> 11;
   $141 = (+($140|0));
   $142 = $141 * 8.0;
   $143 = (~~(($142))&255);
   $144 = HEAP32[$3>>2]|0;
   $145 = HEAP32[$1>>2]|0;
   $146 = (($145) + ($144<<2)|0);
   HEAP8[$146>>0] = $143;
   $147 = HEAP16[$5>>1]|0;
   $148 = $147&65535;
   $149 = $148 & 2016;
   $150 = $149 >> 5;
   $151 = (+($150|0));
   $152 = $151 * 4.0;
   $153 = (~~(($152))&255);
   $154 = HEAP32[$3>>2]|0;
   $155 = HEAP32[$1>>2]|0;
   $156 = (($155) + ($154<<2)|0);
   $157 = ((($156)) + 1|0);
   HEAP8[$157>>0] = $153;
   $158 = HEAP16[$5>>1]|0;
   $159 = $158&65535;
   $160 = $159 & 31;
   $161 = (+($160|0));
   $162 = $161 * 8.0;
   $163 = (~~(($162))&255);
   $164 = HEAP32[$3>>2]|0;
   $165 = HEAP32[$1>>2]|0;
   $166 = (($165) + ($164<<2)|0);
   $167 = ((($166)) + 2|0);
   HEAP8[$167>>0] = $163;
   $168 = HEAP32[$3>>2]|0;
   $169 = HEAP32[$1>>2]|0;
   $170 = (($169) + ($168<<2)|0);
   $171 = ((($170)) + 3|0);
   HEAP8[$171>>0] = -1;
   $172 = HEAP32[$2>>2]|0;
   $173 = (($172) + 1)|0;
   HEAP32[$2>>2] = $173;
   break;
  }
  case 6:  {
   $174 = HEAP32[$2>>2]|0;
   $175 = HEAP32[$0>>2]|0;
   $176 = (($175) + ($174<<1)|0);
   $177 = HEAP16[$176>>1]|0;
   HEAP16[$6>>1] = $177;
   $178 = HEAP16[$6>>1]|0;
   $179 = $178&65535;
   $180 = $179 & 61440;
   $181 = $180 >> 12;
   $182 = (+($181|0));
   $183 = $182 * 17.0;
   $184 = (~~(($183))&255);
   $185 = HEAP32[$3>>2]|0;
   $186 = HEAP32[$1>>2]|0;
   $187 = (($186) + ($185<<2)|0);
   HEAP8[$187>>0] = $184;
   $188 = HEAP16[$6>>1]|0;
   $189 = $188&65535;
   $190 = $189 & 3840;
   $191 = $190 >> 8;
   $192 = (+($191|0));
   $193 = $192 * 17.0;
   $194 = (~~(($193))&255);
   $195 = HEAP32[$3>>2]|0;
   $196 = HEAP32[$1>>2]|0;
   $197 = (($196) + ($195<<2)|0);
   $198 = ((($197)) + 1|0);
   HEAP8[$198>>0] = $194;
   $199 = HEAP16[$6>>1]|0;
   $200 = $199&65535;
   $201 = $200 & 240;
   $202 = $201 >> 4;
   $203 = (+($202|0));
   $204 = $203 * 17.0;
   $205 = (~~(($204))&255);
   $206 = HEAP32[$3>>2]|0;
   $207 = HEAP32[$1>>2]|0;
   $208 = (($207) + ($206<<2)|0);
   $209 = ((($208)) + 2|0);
   HEAP8[$209>>0] = $205;
   $210 = HEAP16[$6>>1]|0;
   $211 = $210&65535;
   $212 = $211 & 15;
   $213 = (+($212|0));
   $214 = $213 * 17.0;
   $215 = (~~(($214))&255);
   $216 = HEAP32[$3>>2]|0;
   $217 = HEAP32[$1>>2]|0;
   $218 = (($217) + ($216<<2)|0);
   $219 = ((($218)) + 3|0);
   HEAP8[$219>>0] = $215;
   $220 = HEAP32[$2>>2]|0;
   $221 = (($220) + 1)|0;
   HEAP32[$2>>2] = $221;
   break;
  }
  case 7:  {
   $222 = HEAP32[$2>>2]|0;
   $223 = HEAP32[$0>>2]|0;
   $224 = (($223) + ($222)|0);
   $225 = HEAP8[$224>>0]|0;
   $226 = HEAP32[$3>>2]|0;
   $227 = HEAP32[$1>>2]|0;
   $228 = (($227) + ($226<<2)|0);
   HEAP8[$228>>0] = $225;
   $229 = HEAP32[$2>>2]|0;
   $230 = (($229) + 1)|0;
   $231 = HEAP32[$0>>2]|0;
   $232 = (($231) + ($230)|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = HEAP32[$3>>2]|0;
   $235 = HEAP32[$1>>2]|0;
   $236 = (($235) + ($234<<2)|0);
   $237 = ((($236)) + 1|0);
   HEAP8[$237>>0] = $233;
   $238 = HEAP32[$2>>2]|0;
   $239 = (($238) + 2)|0;
   $240 = HEAP32[$0>>2]|0;
   $241 = (($240) + ($239)|0);
   $242 = HEAP8[$241>>0]|0;
   $243 = HEAP32[$3>>2]|0;
   $244 = HEAP32[$1>>2]|0;
   $245 = (($244) + ($243<<2)|0);
   $246 = ((($245)) + 2|0);
   HEAP8[$246>>0] = $242;
   $247 = HEAP32[$2>>2]|0;
   $248 = (($247) + 3)|0;
   $249 = HEAP32[$0>>2]|0;
   $250 = (($249) + ($248)|0);
   $251 = HEAP8[$250>>0]|0;
   $252 = HEAP32[$3>>2]|0;
   $253 = HEAP32[$1>>2]|0;
   $254 = (($253) + ($252<<2)|0);
   $255 = ((($254)) + 3|0);
   HEAP8[$255>>0] = $251;
   $256 = HEAP32[$2>>2]|0;
   $257 = (($256) + 4)|0;
   HEAP32[$2>>2] = $257;
   break;
  }
  case 4:  {
   $258 = HEAP32[$2>>2]|0;
   $259 = HEAP32[$0>>2]|0;
   $260 = (($259) + ($258)|0);
   $261 = HEAP8[$260>>0]|0;
   $262 = HEAP32[$3>>2]|0;
   $263 = HEAP32[$1>>2]|0;
   $264 = (($263) + ($262<<2)|0);
   HEAP8[$264>>0] = $261;
   $265 = HEAP32[$2>>2]|0;
   $266 = (($265) + 1)|0;
   $267 = HEAP32[$0>>2]|0;
   $268 = (($267) + ($266)|0);
   $269 = HEAP8[$268>>0]|0;
   $270 = HEAP32[$3>>2]|0;
   $271 = HEAP32[$1>>2]|0;
   $272 = (($271) + ($270<<2)|0);
   $273 = ((($272)) + 1|0);
   HEAP8[$273>>0] = $269;
   $274 = HEAP32[$2>>2]|0;
   $275 = (($274) + 2)|0;
   $276 = HEAP32[$0>>2]|0;
   $277 = (($276) + ($275)|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = HEAP32[$3>>2]|0;
   $280 = HEAP32[$1>>2]|0;
   $281 = (($280) + ($279<<2)|0);
   $282 = ((($281)) + 2|0);
   HEAP8[$282>>0] = $278;
   $283 = HEAP32[$3>>2]|0;
   $284 = HEAP32[$1>>2]|0;
   $285 = (($284) + ($283<<2)|0);
   $286 = ((($285)) + 3|0);
   HEAP8[$286>>0] = -1;
   $287 = HEAP32[$2>>2]|0;
   $288 = (($287) + 3)|0;
   HEAP32[$2>>2] = $288;
   break;
  }
  default: {
   _TraceLog(2,15094,$vararg_buffer);
  }
  }
  $289 = HEAP32[$3>>2]|0;
  $290 = (($289) + 1)|0;
  HEAP32[$3>>2] = $290;
 }
 $291 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($291|0);
}
function _ErrorCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 _TraceLog(2,19071,$vararg_buffer);
 STACKTOP = sp;return;
}
function _rlGetVersion() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function _SetupFramebufferSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 128|0;
 $3 = sp + 124|0;
 $4 = sp + 120|0;
 $5 = sp + 116|0;
 $6 = sp + 112|0;
 $7 = sp + 48|0;
 $8 = sp + 44|0;
 $9 = sp + 40|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $10 = HEAP32[8610]|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = ($10|0)>($11|0);
 if (!($12)) {
  $13 = HEAP32[8609]|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = ($13|0)>($14|0);
  if (!($15)) {
   $67 = HEAP32[8610]|0;
   $68 = HEAP32[$2>>2]|0;
   $69 = ($67|0)<($68|0);
   if (!($69)) {
    $70 = HEAP32[8609]|0;
    $71 = HEAP32[$3>>2]|0;
    $72 = ($70|0)<($71|0);
    if (!($72)) {
     $112 = HEAP32[8610]|0;
     HEAP32[8608] = $112;
     $113 = HEAP32[8609]|0;
     HEAP32[8607] = $113;
     HEAP32[8551] = 0;
     HEAP32[8550] = 0;
     STACKTOP = sp;return;
    }
   }
   $73 = HEAP32[8610]|0;
   $74 = HEAP32[8609]|0;
   $75 = HEAP32[$2>>2]|0;
   $76 = HEAP32[$3>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $73;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $74;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = $75;
   $vararg_ptr13 = ((($vararg_buffer8)) + 12|0);
   HEAP32[$vararg_ptr13>>2] = $76;
   _TraceLog(0,19005,$vararg_buffer8);
   $77 = HEAP32[$2>>2]|0;
   $78 = (+($77|0));
   $79 = HEAP32[$3>>2]|0;
   $80 = (+($79|0));
   $81 = $78 / $80;
   HEAPF32[$8>>2] = $81;
   $82 = HEAP32[8610]|0;
   $83 = (+($82|0));
   $84 = HEAP32[8609]|0;
   $85 = (+($84|0));
   $86 = $83 / $85;
   HEAPF32[$9>>2] = $86;
   $87 = +HEAPF32[$8>>2];
   $88 = +HEAPF32[$9>>2];
   $89 = $87 <= $88;
   if ($89) {
    $90 = HEAP32[8610]|0;
    HEAP32[8608] = $90;
    $91 = HEAP32[8610]|0;
    $92 = (+($91|0));
    $93 = +HEAPF32[$8>>2];
    $94 = $92 / $93;
    $95 = $94;
    $96 = (+_round((+$95)));
    $97 = (~~(($96)));
    HEAP32[8607] = $97;
    HEAP32[8551] = 0;
    $98 = HEAP32[8607]|0;
    $99 = HEAP32[8609]|0;
    $100 = (($98) - ($99))|0;
    HEAP32[8550] = $100;
    STACKTOP = sp;return;
   } else {
    $101 = HEAP32[8609]|0;
    $102 = (+($101|0));
    $103 = +HEAPF32[$8>>2];
    $104 = $102 * $103;
    $105 = $104;
    $106 = (+_round((+$105)));
    $107 = (~~(($106)));
    HEAP32[8608] = $107;
    $108 = HEAP32[8609]|0;
    HEAP32[8607] = $108;
    $109 = HEAP32[8608]|0;
    $110 = HEAP32[8610]|0;
    $111 = (($109) - ($110))|0;
    HEAP32[8551] = $111;
    HEAP32[8550] = 0;
    STACKTOP = sp;return;
   }
  }
 }
 $16 = HEAP32[8610]|0;
 $17 = HEAP32[8609]|0;
 $18 = HEAP32[$2>>2]|0;
 $19 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $16;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $17;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $18;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $19;
 _TraceLog(2,18862,$vararg_buffer);
 $20 = HEAP32[$2>>2]|0;
 $21 = (+($20|0));
 $22 = HEAP32[8610]|0;
 $23 = (+($22|0));
 $24 = $21 / $23;
 HEAPF32[$4>>2] = $24;
 $25 = HEAP32[$3>>2]|0;
 $26 = (+($25|0));
 $27 = HEAP32[8609]|0;
 $28 = (+($27|0));
 $29 = $26 / $28;
 HEAPF32[$5>>2] = $29;
 $30 = +HEAPF32[$4>>2];
 $31 = +HEAPF32[$5>>2];
 $32 = $30 <= $31;
 if ($32) {
  $33 = HEAP32[$2>>2]|0;
  HEAP32[8608] = $33;
  $34 = HEAP32[8609]|0;
  $35 = (+($34|0));
  $36 = +HEAPF32[$4>>2];
  $37 = $35 * $36;
  $38 = $37;
  $39 = (+_round((+$38)));
  $40 = (~~(($39)));
  HEAP32[8607] = $40;
  HEAP32[8551] = 0;
  $41 = HEAP32[$3>>2]|0;
  $42 = HEAP32[8607]|0;
  $43 = (($41) - ($42))|0;
  HEAP32[8550] = $43;
 } else {
  $44 = HEAP32[8610]|0;
  $45 = (+($44|0));
  $46 = +HEAPF32[$5>>2];
  $47 = $45 * $46;
  $48 = $47;
  $49 = (+_round((+$48)));
  $50 = (~~(($49)));
  HEAP32[8608] = $50;
  $51 = HEAP32[$3>>2]|0;
  HEAP32[8607] = $51;
  $52 = HEAP32[$2>>2]|0;
  $53 = HEAP32[8608]|0;
  $54 = (($52) - ($53))|0;
  HEAP32[8551] = $54;
  HEAP32[8550] = 0;
 }
 $55 = HEAP32[8608]|0;
 $56 = (+($55|0));
 $57 = HEAP32[8610]|0;
 $58 = (+($57|0));
 $59 = $56 / $58;
 HEAPF32[$6>>2] = $59;
 $60 = +HEAPF32[$6>>2];
 $61 = +HEAPF32[$6>>2];
 $62 = +HEAPF32[$6>>2];
 _MatrixScale($7,$60,$61,$62);
 dest=34364; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $63 = HEAP32[$2>>2]|0;
 HEAP32[8608] = $63;
 $64 = HEAP32[$3>>2]|0;
 HEAP32[8607] = $64;
 $65 = HEAP32[8608]|0;
 $66 = HEAP32[8607]|0;
 HEAP32[$vararg_buffer4>>2] = $65;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $66;
 _TraceLog(2,18940,$vararg_buffer4);
 STACKTOP = sp;return;
}
function _WindowSizeCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 _rlViewport(0,0,$6,$7);
 _rlMatrixMode(0);
 _rlLoadIdentity();
 $8 = HEAP32[$4>>2]|0;
 $9 = (+($8|0));
 $10 = HEAP32[$5>>2]|0;
 $11 = (+($10|0));
 _rlOrtho(0.0,$9,$11,0.0,0.0,1.0);
 _rlMatrixMode(1);
 _rlLoadIdentity();
 _rlClearScreenBuffers();
 $12 = HEAP32[$4>>2]|0;
 HEAP32[8610] = $12;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[8609] = $13;
 $14 = HEAP32[$4>>2]|0;
 HEAP32[8608] = $14;
 $15 = HEAP32[$5>>2]|0;
 HEAP32[8607] = $15;
 STACKTOP = sp;return;
}
function _CursorEnterCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  HEAP32[8549] = 1;
  STACKTOP = sp;return;
 } else {
  HEAP32[8549] = 0;
  STACKTOP = sp;return;
 }
}
function _KeyCallback($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $10 = HEAP32[$6>>2]|0;
 $11 = HEAP32[482]|0;
 $12 = ($10|0)==($11|0);
 $13 = HEAP32[$8>>2]|0;
 $14 = ($13|0)==(1);
 $or$cond = $12 & $14;
 if ($or$cond) {
  $15 = HEAP32[$5>>2]|0;
  _glfwSetWindowShouldClose(($15|0),1);
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$8>>2]|0;
 $17 = $16&255;
 $18 = HEAP32[$6>>2]|0;
 $19 = (40854 + ($18)|0);
 HEAP8[$19>>0] = $17;
 $20 = HEAP32[$8>>2]|0;
 $21 = ($20|0)==(1);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = HEAP32[$6>>2]|0;
 HEAP32[483] = $22;
 STACKTOP = sp;return;
}
function _MouseButtonCallback($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 80|0;
 $4 = sp + 76|0;
 $5 = sp + 72|0;
 $6 = sp + 68|0;
 $7 = sp + 64|0;
 $8 = sp + 8|0;
 $9 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $10 = HEAP32[$6>>2]|0;
 $11 = $10&255;
 $12 = HEAP32[$5>>2]|0;
 $13 = (40339 + ($12)|0);
 HEAP8[$13>>0] = $11;
 $14 = (_IsMouseButtonPressed(0)|0);
 $15 = ($14|0)!=(0);
 if ($15) {
  HEAP32[$8>>2] = 1;
 } else {
  $16 = (_IsMouseButtonReleased(0)|0);
  $17 = ($16|0)!=(0);
  if ($17) {
   HEAP32[$8>>2] = 0;
  }
 }
 $18 = ((($8)) + 8|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($8)) + 4|0);
 HEAP32[$19>>2] = 1;
 $20 = ((($8)) + 24|0);
 _GetMousePosition($9);
 ;HEAP32[$20>>2]=HEAP32[$9>>2]|0;HEAP32[$20+4>>2]=HEAP32[$9+4>>2]|0;
 $21 = (_GetScreenWidth()|0);
 $22 = (+($21|0));
 $23 = ((($8)) + 24|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24 / $22;
 HEAPF32[$23>>2] = $25;
 $26 = (_GetScreenHeight()|0);
 $27 = (+($26|0));
 $28 = ((($8)) + 24|0);
 $29 = ((($28)) + 4|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $30 / $27;
 HEAPF32[$29>>2] = $31;
 dest=$$byval_copy; src=$8; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _ProcessGestureEvent($$byval_copy);
 STACKTOP = sp;return;
}
function _MouseCursorPosCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$byval_copy = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 88|0;
 $3 = sp + 80|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 HEAP32[$3>>2] = $0;
 HEAPF64[$4>>3] = $1;
 HEAPF64[$5>>3] = $2;
 HEAP32[$6>>2] = 2;
 $8 = ((($6)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 4|0);
 HEAP32[$9>>2] = 1;
 $10 = ((($6)) + 24|0);
 $11 = +HEAPF64[$4>>3];
 $12 = $11;
 HEAPF32[$7>>2] = $12;
 $13 = ((($7)) + 4|0);
 $14 = +HEAPF64[$5>>3];
 $15 = $14;
 HEAPF32[$13>>2] = $15;
 ;HEAP32[$10>>2]=HEAP32[$7>>2]|0;HEAP32[$10+4>>2]=HEAP32[$7+4>>2]|0;
 $16 = ((($6)) + 24|0);
 ;HEAP32[34336>>2]=HEAP32[$16>>2]|0;HEAP32[34336+4>>2]=HEAP32[$16+4>>2]|0;
 $17 = (_GetScreenWidth()|0);
 $18 = (+($17|0));
 $19 = ((($6)) + 24|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $20 / $18;
 HEAPF32[$19>>2] = $21;
 $22 = (_GetScreenHeight()|0);
 $23 = (+($22|0));
 $24 = ((($6)) + 24|0);
 $25 = ((($24)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $26 / $23;
 HEAPF32[$25>>2] = $27;
 dest=$$byval_copy; src=$6; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _ProcessGestureEvent($$byval_copy);
 STACKTOP = sp;return;
}
function _CharCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[483] = $4;
 STACKTOP = sp;return;
}
function _ScrollCallback($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAPF64[$4>>3] = $1;
 HEAPF64[$5>>3] = $2;
 $6 = +HEAPF64[$5>>3];
 $7 = (~~(($6)));
 HEAP32[8548] = $7;
 STACKTOP = sp;return;
}
function _WindowIconifyCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  HEAP32[8555] = 1;
  STACKTOP = sp;return;
 } else {
  HEAP32[8555] = 0;
  STACKTOP = sp;return;
 }
}
function _WindowFocusCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  HEAP32[484] = 1;
  STACKTOP = sp;return;
 } else {
  HEAP32[484] = 0;
  STACKTOP = sp;return;
 }
}
function _rlglInit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer41 = 0, $vararg_buffer7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2512|0);
 $vararg_buffer41 = sp + 144|0;
 $vararg_buffer39 = sp + 136|0;
 $vararg_buffer36 = sp + 128|0;
 $vararg_buffer34 = sp + 120|0;
 $vararg_buffer31 = sp + 112|0;
 $vararg_buffer29 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 2504|0;
 $3 = sp + 2500|0;
 $4 = sp + 2496|0;
 $5 = sp + 2492|0;
 $6 = sp + 2488|0;
 $7 = sp + 2484|0;
 $8 = sp + 2480|0;
 $9 = sp + 432|0;
 $10 = sp + 424|0;
 $11 = sp + 2508|0;
 $12 = sp + 368|0;
 $13 = sp + 364|0;
 $14 = sp + 352|0;
 $15 = sp + 348|0;
 $16 = sp + 344|0;
 $17 = sp + 280|0;
 $18 = sp + 216|0;
 $19 = sp + 152|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $20 = (_glGetString(7936)|0);
 HEAP32[$vararg_buffer>>2] = $20;
 _TraceLog(0,15392,$vararg_buffer);
 $21 = (_glGetString(7937)|0);
 HEAP32[$vararg_buffer1>>2] = $21;
 _TraceLog(0,15410,$vararg_buffer1);
 $22 = (_glGetString(7938)|0);
 HEAP32[$vararg_buffer4>>2] = $22;
 _TraceLog(0,15428,$vararg_buffer4);
 $23 = (_glGetString(35724)|0);
 HEAP32[$vararg_buffer7>>2] = $23;
 _TraceLog(0,15446,$vararg_buffer7);
 HEAP32[$4>>2] = 0;
 $24 = (_glGetString(7939)|0);
 HEAP32[$5>>2] = $24;
 $25 = HEAP32[$5>>2]|0;
 $26 = (_strlen($25)|0);
 $27 = (($26) + 1)|0;
 HEAP32[$7>>2] = $27;
 $28 = HEAP32[$7>>2]|0;
 $29 = (_malloc($28)|0);
 HEAP32[$8>>2] = $29;
 $30 = HEAP32[$8>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  HEAP32[$6>>2] = 0;
 }
 $32 = HEAP32[$8>>2]|0;
 $33 = HEAP32[$5>>2]|0;
 $34 = HEAP32[$7>>2]|0;
 _memcpy(($32|0),($33|0),($34|0))|0;
 HEAP32[$6>>2] = $32;
 $35 = HEAP32[$6>>2]|0;
 $36 = (_strtok($35,15464)|0);
 $37 = HEAP32[$4>>2]|0;
 $38 = (($9) + ($37<<2)|0);
 HEAP32[$38>>2] = $36;
 while(1) {
  $39 = HEAP32[$4>>2]|0;
  $40 = (($9) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0|0);
  if (!($42)) {
   break;
  }
  $43 = HEAP32[$4>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$4>>2] = $44;
  $45 = (_strtok(0,15464)|0);
  $46 = HEAP32[$4>>2]|0;
  $47 = (($9) + ($46<<2)|0);
  HEAP32[$47>>2] = $45;
 }
 $48 = HEAP32[$6>>2]|0;
 _free($48);
 $49 = HEAP32[$4>>2]|0;
 $50 = (($49) - 1)|0;
 HEAP32[$4>>2] = $50;
 $51 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer10>>2] = $51;
 _TraceLog(0,15466,$vararg_buffer10);
 HEAP32[$10>>2] = 0;
 while(1) {
  $52 = HEAP32[$10>>2]|0;
  $53 = HEAP32[$4>>2]|0;
  $54 = ($52|0)<($53|0);
  if (!($54)) {
   break;
  }
  $55 = HEAP32[$10>>2]|0;
  $56 = (($9) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (_strcmp($57,15501)|0);
  $59 = ($58|0)==(0);
  if ($59) {
   HEAP32[8718] = 1;
   $60 = (_eglGetProcAddress((15528|0))|0);
   HEAP32[8737] = $60;
   $61 = (_eglGetProcAddress((15549|0))|0);
   HEAP32[8736] = $61;
   $62 = (_eglGetProcAddress((15570|0))|0);
   HEAP32[8735] = $62;
  }
  $63 = HEAP32[$10>>2]|0;
  $64 = (($9) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_strcmp($65,15594)|0);
  $67 = ($66|0)==(0);
  if ($67) {
   HEAP32[8717] = 1;
  }
  $68 = HEAP32[$10>>2]|0;
  $69 = (($9) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (_strcmp($70,15614)|0);
  $72 = ($71|0)==(0);
  if ($72) {
   label = 15;
  } else {
   $73 = HEAP32[$10>>2]|0;
   $74 = (($9) + ($73<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (_strcmp($75,15646)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    label = 15;
   } else {
    $78 = HEAP32[$10>>2]|0;
    $79 = (($9) + ($78<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (_strcmp($80,15679)|0);
    $82 = ($81|0)==(0);
    if ($82) {
     label = 15;
    }
   }
  }
  if ((label|0) == 15) {
   label = 0;
   HEAP32[8716] = 1;
  }
  $83 = HEAP32[$10>>2]|0;
  $84 = (($9) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (_strcmp($85,15719)|0);
  $87 = ($86|0)==(0);
  if ($87) {
   label = 18;
  } else {
   $88 = HEAP32[$10>>2]|0;
   $89 = (($9) + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (_strcmp($90,15755)|0);
   $92 = ($91|0)==(0);
   if ($92) {
    label = 18;
   }
  }
  if ((label|0) == 18) {
   label = 0;
   HEAP32[8715] = 1;
  }
  $93 = HEAP32[$10>>2]|0;
  $94 = (($9) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (_strcmp($95,15788)|0);
  $97 = ($96|0)==(0);
  if ($97) {
   HEAP32[8714] = 1;
  }
  $98 = HEAP32[$10>>2]|0;
  $99 = (($9) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (_strcmp($100,15813)|0);
  $102 = ($101|0)==(0);
  if ($102) {
   HEAP32[8713] = 1;
  }
  $103 = HEAP32[$10>>2]|0;
  $104 = (($9) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (_strcmp($105,15846)|0);
  $107 = ($106|0)==(0);
  if ($107) {
   HEAP32[8712] = 1;
  }
  $108 = HEAP32[$10>>2]|0;
  $109 = (($9) + ($108<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (_strcmp($110,15882)|0);
  $112 = ($111|0)==(0);
  if ($112) {
   HEAP32[8711] = 1;
   _glGetFloatv(34047,(34876|0));
  }
  $113 = HEAP32[$10>>2]|0;
  $114 = (($9) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (_strcmp($115,15916)|0);
  $117 = ($116|0)==(0);
  if ($117) {
   HEAP32[8720] = 1;
  }
  $118 = HEAP32[$10>>2]|0;
  $119 = (($118) + 1)|0;
  HEAP32[$10>>2] = $119;
 }
 $120 = HEAP32[8718]|0;
 $121 = ($120|0)!=(0);
 if ($121) {
  _TraceLog(0,15944,$vararg_buffer13);
 } else {
  _TraceLog(2,16019,$vararg_buffer15);
 }
 $122 = HEAP32[8717]|0;
 $123 = ($122|0)!=(0);
 if ($123) {
  _TraceLog(0,16080,$vararg_buffer17);
 } else {
  _TraceLog(2,16155,$vararg_buffer19);
 }
 $124 = HEAP32[8716]|0;
 $125 = ($124|0)!=(0);
 if ($125) {
  _TraceLog(0,16247,$vararg_buffer21);
 }
 $126 = HEAP32[8715]|0;
 $127 = ($126|0)!=(0);
 if ($127) {
  _TraceLog(0,16293,$vararg_buffer23);
 }
 $128 = HEAP32[8714]|0;
 $129 = ($128|0)!=(0);
 if ($129) {
  _TraceLog(0,16340,$vararg_buffer25);
 }
 $130 = HEAP32[8713]|0;
 $131 = ($130|0)!=(0);
 if ($131) {
  _TraceLog(0,16391,$vararg_buffer27);
 }
 $132 = HEAP32[8712]|0;
 $133 = ($132|0)!=(0);
 if ($133) {
  _TraceLog(0,16438,$vararg_buffer29);
 }
 $134 = HEAP32[8711]|0;
 $135 = ($134|0)!=(0);
 if ($135) {
  $136 = +HEAPF32[8719];
  $137 = $136;
  HEAPF64[$vararg_buffer31>>3] = $137;
  _TraceLog(0,16485,$vararg_buffer31);
 }
 $138 = HEAP32[8720]|0;
 $139 = ($138|0)!=(0);
 if ($139) {
  _TraceLog(0,16551,$vararg_buffer34);
 }
 ;HEAP8[$11>>0]=HEAP8[16604>>0]|0;HEAP8[$11+1>>0]=HEAP8[16604+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[16604+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[16604+3>>0]|0;
 $140 = (_rlglLoadTexture($11,1,1,7,1)|0);
 HEAP32[8734] = $140;
 $141 = HEAP32[8734]|0;
 $142 = ($141|0)!=(0);
 if ($142) {
  $143 = HEAP32[8734]|0;
  HEAP32[$vararg_buffer36>>2] = $143;
  _TraceLog(0,16608,$vararg_buffer36);
 } else {
  _TraceLog(2,16659,$vararg_buffer39);
 }
 _LoadDefaultShader($12);
 dest=35420; src=$12; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=35308; src=35420; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _LoadDefaultBuffers();
 $144 = (_malloc(49152)|0);
 HEAP32[8869] = $144;
 HEAP32[$13>>2] = 0;
 while(1) {
  $145 = HEAP32[$13>>2]|0;
  $146 = ($145|0)<(4096);
  if (!($146)) {
   break;
  }
  $147 = HEAP32[$13>>2]|0;
  $148 = HEAP32[8869]|0;
  $149 = (($148) + (($147*12)|0)|0);
  _VectorZero($14);
  ;HEAP32[$149>>2]=HEAP32[$14>>2]|0;HEAP32[$149+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$149+8>>2]=HEAP32[$14+8>>2]|0;
  $150 = HEAP32[$13>>2]|0;
  $151 = (($150) + 1)|0;
  HEAP32[$13>>2] = $151;
 }
 $152 = (_malloc(36864)|0);
 HEAP32[8871] = $152;
 HEAP32[$15>>2] = 0;
 while(1) {
  $153 = HEAP32[$15>>2]|0;
  $154 = ($153|0)<(256);
  if (!($154)) {
   break;
  }
  $155 = HEAP32[$15>>2]|0;
  $156 = HEAP32[8871]|0;
  $157 = (($156) + (($155*144)|0)|0);
  $158 = ((($157)) + 8|0);
  HEAP32[$158>>2] = 0;
  $159 = HEAP32[$15>>2]|0;
  $160 = HEAP32[8871]|0;
  $161 = (($160) + (($159*144)|0)|0);
  HEAP32[$161>>2] = 0;
  $162 = HEAP32[$15>>2]|0;
  $163 = (($162) + 1)|0;
  HEAP32[$15>>2] = $163;
 }
 HEAP32[8870] = 1;
 $164 = HEAP32[8734]|0;
 $165 = HEAP32[8870]|0;
 $166 = (($165) - 1)|0;
 $167 = HEAP32[8871]|0;
 $168 = (($167) + (($166*144)|0)|0);
 $169 = ((($168)) + 8|0);
 HEAP32[$169>>2] = $164;
 HEAP32[8908] = 1;
 HEAP32[$16>>2] = 0;
 while(1) {
  $170 = HEAP32[$16>>2]|0;
  $171 = ($170|0)<(16);
  if (!($171)) {
   break;
  }
  $172 = HEAP32[$16>>2]|0;
  $173 = (35772 + ($172<<6)|0);
  _MatrixIdentity($17);
  dest=$173; src=$17; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $174 = HEAP32[$16>>2]|0;
  $175 = (($174) + 1)|0;
  HEAP32[$16>>2] = $175;
 }
 _MatrixIdentity($18);
 dest=35644; src=$18; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($19);
 dest=35708; src=$19; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[8910] = 35708;
 _glDepthFunc(515);
 _glDisable(2929);
 _glBlendFunc(770,771);
 _glEnable(3042);
 _glCullFace(1029);
 _glFrontFace(2305);
 _glEnable(2884);
 _glClearColor(0.0,0.0,0.0,1.0);
 _glClearDepthf(1.0);
 _glClear(16640);
 $176 = HEAP32[$2>>2]|0;
 HEAP32[8733] = $176;
 $177 = HEAP32[$3>>2]|0;
 HEAP32[8732] = $177;
 _TraceLog(0,16698,$vararg_buffer41);
 STACKTOP = sp;return;
}
function _rlViewport($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$7>>2] = $3;
 $8 = HEAP32[$4>>2]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = HEAP32[$6>>2]|0;
 $11 = HEAP32[$7>>2]|0;
 _glViewport(($8|0),($9|0),($10|0),($11|0));
 STACKTOP = sp;return;
}
function _rlMatrixMode($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[8910] = 35644;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = ($4|0)==(1);
  if ($5) {
   HEAP32[8910] = 35708;
  }
 }
 $6 = HEAP32[$1>>2]|0;
 HEAP32[8909] = $6;
 STACKTOP = sp;return;
}
function _rlLoadIdentity() {
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $0 = sp;
 $1 = HEAP32[8910]|0;
 _MatrixIdentity($0);
 dest=$1; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlOrtho($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $$byval_copy1 = sp + 240|0;
 $$byval_copy = sp + 176|0;
 $6 = sp + 40|0;
 $7 = sp + 32|0;
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $12 = sp + 112|0;
 $13 = sp + 48|0;
 HEAPF64[$6>>3] = $0;
 HEAPF64[$7>>3] = $1;
 HEAPF64[$8>>3] = $2;
 HEAPF64[$9>>3] = $3;
 HEAPF64[$10>>3] = $4;
 HEAPF64[$11>>3] = $5;
 $14 = +HEAPF64[$6>>3];
 $15 = +HEAPF64[$7>>3];
 $16 = +HEAPF64[$8>>3];
 $17 = +HEAPF64[$9>>3];
 $18 = +HEAPF64[$10>>3];
 $19 = +HEAPF64[$11>>3];
 _MatrixOrtho($12,$14,$15,$16,$17,$18,$19);
 _MatrixTranspose($12);
 $20 = HEAP32[8910]|0;
 $21 = HEAP32[8910]|0;
 dest=$$byval_copy; src=$21; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy1; src=$12; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($13,$$byval_copy,$$byval_copy1);
 dest=$20; src=$13; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _ClearBackground($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ((($0)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($0)) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ((($0)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 _rlClearColor($1,$3,$5,$7);
 return;
}
function _rlClearColor($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 19|0;
 $5 = sp + 18|0;
 $6 = sp + 17|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP8[$4>>0] = $0;
 HEAP8[$5>>0] = $1;
 HEAP8[$6>>0] = $2;
 HEAP8[$7>>0] = $3;
 $12 = HEAP8[$4>>0]|0;
 $13 = (+($12&255));
 $14 = $13 / 255.0;
 HEAPF32[$8>>2] = $14;
 $15 = HEAP8[$5>>0]|0;
 $16 = (+($15&255));
 $17 = $16 / 255.0;
 HEAPF32[$9>>2] = $17;
 $18 = HEAP8[$6>>0]|0;
 $19 = (+($18&255));
 $20 = $19 / 255.0;
 HEAPF32[$10>>2] = $20;
 $21 = HEAP8[$7>>0]|0;
 $22 = (+($21&255));
 $23 = $22 / 255.0;
 HEAPF32[$11>>2] = $23;
 $24 = +HEAPF32[$8>>2];
 $25 = +HEAPF32[$9>>2];
 $26 = +HEAPF32[$10>>2];
 $27 = +HEAPF32[$11>>2];
 _glClearColor((+$24),(+$25),(+$26),(+$27));
 STACKTOP = sp;return;
}
function _LoadDefaultShader($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1008|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = sp + 513|0;
 $3 = sp + 72|0;
 _memcpy(($2|0),(17274|0),489)|0;
 _memcpy(($3|0),(17763|0),441)|0;
 $4 = (_LoadShaderProgram($2,$3)|0);
 HEAP32[$1>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)!=(0);
 $7 = HEAP32[$1>>2]|0;
 if ($6) {
  HEAP32[$vararg_buffer>>2] = $7;
  _TraceLog(0,18204,$vararg_buffer);
 } else {
  HEAP32[$vararg_buffer1>>2] = $7;
  _TraceLog(2,18252,$vararg_buffer1);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  _LoadDefaultShaderLocations($1);
 }
 dest=$0; src=$1; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _LoadDefaultBuffers() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 96|0;
 $1 = sp + 92|0;
 $2 = sp + 88|0;
 $3 = sp + 84|0;
 $4 = sp + 80|0;
 $5 = sp + 76|0;
 $6 = sp + 72|0;
 $7 = sp + 68|0;
 $8 = sp + 64|0;
 $9 = (_malloc(24576)|0);
 HEAP32[(35596)>>2] = $9;
 $10 = (_malloc(8192)|0);
 HEAP32[(35604)>>2] = $10;
 HEAP32[(35600)>>2] = 0;
 HEAP32[(35608)>>2] = 0;
 HEAP32[$0>>2] = 0;
 while(1) {
  $11 = HEAP32[$0>>2]|0;
  $12 = ($11|0)<(6144);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = HEAP32[(35596)>>2]|0;
  $15 = (($14) + ($13<<2)|0);
  HEAPF32[$15>>2] = 0.0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$0>>2] = $17;
 }
 HEAP32[$1>>2] = 0;
 while(1) {
  $18 = HEAP32[$1>>2]|0;
  $19 = ($18|0)<(8192);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$1>>2]|0;
  $21 = HEAP32[(35604)>>2]|0;
  $22 = (($21) + ($20)|0);
  HEAP8[$22>>0] = 0;
  $23 = HEAP32[$1>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$1>>2] = $24;
 }
 HEAP32[8896] = 0;
 HEAP32[(35592)>>2] = 0;
 HEAP32[(35588)>>2] = 0;
 $25 = (_malloc(73728)|0);
 HEAP32[(35548)>>2] = $25;
 $26 = (_malloc(24576)|0);
 HEAP32[(35556)>>2] = $26;
 HEAP32[(35552)>>2] = 0;
 HEAP32[(35560)>>2] = 0;
 HEAP32[$2>>2] = 0;
 while(1) {
  $27 = HEAP32[$2>>2]|0;
  $28 = ($27|0)<(18432);
  if (!($28)) {
   break;
  }
  $29 = HEAP32[$2>>2]|0;
  $30 = HEAP32[(35548)>>2]|0;
  $31 = (($30) + ($29<<2)|0);
  HEAPF32[$31>>2] = 0.0;
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$2>>2] = $33;
 }
 HEAP32[$3>>2] = 0;
 while(1) {
  $34 = HEAP32[$3>>2]|0;
  $35 = ($34|0)<(24576);
  if (!($35)) {
   break;
  }
  $36 = HEAP32[$3>>2]|0;
  $37 = HEAP32[(35556)>>2]|0;
  $38 = (($37) + ($36)|0);
  HEAP8[$38>>0] = 0;
  $39 = HEAP32[$3>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$3>>2] = $40;
 }
 HEAP32[8884] = 0;
 HEAP32[(35544)>>2] = 0;
 HEAP32[(35540)>>2] = 0;
 $41 = (_malloc(49152)|0);
 HEAP32[(35500)>>2] = $41;
 $42 = (_malloc(32768)|0);
 HEAP32[(35504)>>2] = $42;
 $43 = (_malloc(16384)|0);
 HEAP32[(35508)>>2] = $43;
 $44 = (_malloc(12288)|0);
 HEAP32[(35512)>>2] = $44;
 HEAP32[$4>>2] = 0;
 while(1) {
  $45 = HEAP32[$4>>2]|0;
  $46 = ($45|0)<(12288);
  if (!($46)) {
   break;
  }
  $47 = HEAP32[$4>>2]|0;
  $48 = HEAP32[(35500)>>2]|0;
  $49 = (($48) + ($47<<2)|0);
  HEAPF32[$49>>2] = 0.0;
  $50 = HEAP32[$4>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$4>>2] = $51;
 }
 HEAP32[$5>>2] = 0;
 while(1) {
  $52 = HEAP32[$5>>2]|0;
  $53 = ($52|0)<(8192);
  if (!($53)) {
   break;
  }
  $54 = HEAP32[$5>>2]|0;
  $55 = HEAP32[(35504)>>2]|0;
  $56 = (($55) + ($54<<2)|0);
  HEAPF32[$56>>2] = 0.0;
  $57 = HEAP32[$5>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$5>>2] = $58;
 }
 HEAP32[$6>>2] = 0;
 while(1) {
  $59 = HEAP32[$6>>2]|0;
  $60 = ($59|0)<(16384);
  if (!($60)) {
   break;
  }
  $61 = HEAP32[$6>>2]|0;
  $62 = HEAP32[(35508)>>2]|0;
  $63 = (($62) + ($61)|0);
  HEAP8[$63>>0] = 0;
  $64 = HEAP32[$6>>2]|0;
  $65 = (($64) + 1)|0;
  HEAP32[$6>>2] = $65;
 }
 HEAP32[$7>>2] = 0;
 HEAP32[$8>>2] = 0;
 while(1) {
  $66 = HEAP32[$8>>2]|0;
  $67 = ($66|0)<(6144);
  if (!($67)) {
   break;
  }
  $68 = HEAP32[$7>>2]|0;
  $69 = $68<<2;
  $70 = $69&65535;
  $71 = HEAP32[$8>>2]|0;
  $72 = HEAP32[(35512)>>2]|0;
  $73 = (($72) + ($71<<1)|0);
  HEAP16[$73>>1] = $70;
  $74 = HEAP32[$7>>2]|0;
  $75 = $74<<2;
  $76 = (($75) + 1)|0;
  $77 = $76&65535;
  $78 = HEAP32[$8>>2]|0;
  $79 = (($78) + 1)|0;
  $80 = HEAP32[(35512)>>2]|0;
  $81 = (($80) + ($79<<1)|0);
  HEAP16[$81>>1] = $77;
  $82 = HEAP32[$7>>2]|0;
  $83 = $82<<2;
  $84 = (($83) + 2)|0;
  $85 = $84&65535;
  $86 = HEAP32[$8>>2]|0;
  $87 = (($86) + 2)|0;
  $88 = HEAP32[(35512)>>2]|0;
  $89 = (($88) + ($87<<1)|0);
  HEAP16[$89>>1] = $85;
  $90 = HEAP32[$7>>2]|0;
  $91 = $90<<2;
  $92 = $91&65535;
  $93 = HEAP32[$8>>2]|0;
  $94 = (($93) + 3)|0;
  $95 = HEAP32[(35512)>>2]|0;
  $96 = (($95) + ($94<<1)|0);
  HEAP16[$96>>1] = $92;
  $97 = HEAP32[$7>>2]|0;
  $98 = $97<<2;
  $99 = (($98) + 2)|0;
  $100 = $99&65535;
  $101 = HEAP32[$8>>2]|0;
  $102 = (($101) + 4)|0;
  $103 = HEAP32[(35512)>>2]|0;
  $104 = (($103) + ($102<<1)|0);
  HEAP16[$104>>1] = $100;
  $105 = HEAP32[$7>>2]|0;
  $106 = $105<<2;
  $107 = (($106) + 3)|0;
  $108 = $107&65535;
  $109 = HEAP32[$8>>2]|0;
  $110 = (($109) + 5)|0;
  $111 = HEAP32[(35512)>>2]|0;
  $112 = (($111) + ($110<<1)|0);
  HEAP16[$112>>1] = $108;
  $113 = HEAP32[$7>>2]|0;
  $114 = (($113) + 1)|0;
  HEAP32[$7>>2] = $114;
  $115 = HEAP32[$8>>2]|0;
  $116 = (($115) + 6)|0;
  HEAP32[$8>>2] = $116;
 }
 HEAP32[8872] = 0;
 HEAP32[(35492)>>2] = 0;
 HEAP32[(35496)>>2] = 0;
 _TraceLog(0,16745,$vararg_buffer);
 $117 = HEAP32[8718]|0;
 $118 = ($117|0)!=(0);
 if ($118) {
  $119 = HEAP32[8737]|0;
  FUNCTION_TABLE_vii[$119 & 127](1,(35612));
  $120 = HEAP32[8736]|0;
  $121 = HEAP32[(35612)>>2]|0;
  FUNCTION_TABLE_vi[$120 & 255]($121);
 }
 _glGenBuffers(2,((35616)|0));
 $122 = HEAP32[(35616)>>2]|0;
 _glBindBuffer(34962,($122|0));
 $123 = HEAP32[(35596)>>2]|0;
 _glBufferData(34962,24576,($123|0),35048);
 $124 = HEAP32[(35312)>>2]|0;
 _glEnableVertexAttribArray(($124|0));
 $125 = HEAP32[(35312)>>2]|0;
 _glVertexAttribPointer(($125|0),3,5126,0,0,(0|0));
 _glGenBuffers(2,((35620)|0));
 $126 = HEAP32[(35620)>>2]|0;
 _glBindBuffer(34962,($126|0));
 $127 = HEAP32[(35604)>>2]|0;
 _glBufferData(34962,8192,($127|0),35048);
 $128 = HEAP32[(35332)>>2]|0;
 _glEnableVertexAttribArray(($128|0));
 $129 = HEAP32[(35332)>>2]|0;
 _glVertexAttribPointer(($129|0),4,5121,1,0,(0|0));
 $130 = HEAP32[8718]|0;
 $131 = ($130|0)!=(0);
 if ($131) {
  $132 = HEAP32[(35612)>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $132;
  _TraceLog(0,16818,$vararg_buffer1);
 } else {
  $133 = HEAP32[(35616)>>2]|0;
  $134 = HEAP32[(35620)>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $133;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $134;
  _TraceLog(0,16883,$vararg_buffer3);
 }
 $135 = HEAP32[8718]|0;
 $136 = ($135|0)!=(0);
 if ($136) {
  $137 = HEAP32[8737]|0;
  FUNCTION_TABLE_vii[$137 & 127](1,(35564));
  $138 = HEAP32[8736]|0;
  $139 = HEAP32[(35564)>>2]|0;
  FUNCTION_TABLE_vi[$138 & 255]($139);
 }
 _glGenBuffers(1,((35568)|0));
 $140 = HEAP32[(35568)>>2]|0;
 _glBindBuffer(34962,($140|0));
 $141 = HEAP32[(35548)>>2]|0;
 _glBufferData(34962,73728,($141|0),35048);
 $142 = HEAP32[(35312)>>2]|0;
 _glEnableVertexAttribArray(($142|0));
 $143 = HEAP32[(35312)>>2]|0;
 _glVertexAttribPointer(($143|0),3,5126,0,0,(0|0));
 _glGenBuffers(1,((35572)|0));
 $144 = HEAP32[(35572)>>2]|0;
 _glBindBuffer(34962,($144|0));
 $145 = HEAP32[(35556)>>2]|0;
 _glBufferData(34962,24576,($145|0),35048);
 $146 = HEAP32[(35332)>>2]|0;
 _glEnableVertexAttribArray(($146|0));
 $147 = HEAP32[(35332)>>2]|0;
 _glVertexAttribPointer(($147|0),4,5121,1,0,(0|0));
 $148 = HEAP32[8718]|0;
 $149 = ($148|0)!=(0);
 if ($149) {
  $150 = HEAP32[(35564)>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $150;
  _TraceLog(0,16960,$vararg_buffer7);
 } else {
  $151 = HEAP32[(35568)>>2]|0;
  $152 = HEAP32[(35572)>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $151;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $152;
  _TraceLog(0,17029,$vararg_buffer10);
 }
 $153 = HEAP32[8718]|0;
 $154 = ($153|0)!=(0);
 if ($154) {
  $155 = HEAP32[8737]|0;
  FUNCTION_TABLE_vii[$155 & 127](1,(35516));
  $156 = HEAP32[8736]|0;
  $157 = HEAP32[(35516)>>2]|0;
  FUNCTION_TABLE_vi[$156 & 255]($157);
 }
 _glGenBuffers(1,((35520)|0));
 $158 = HEAP32[(35520)>>2]|0;
 _glBindBuffer(34962,($158|0));
 $159 = HEAP32[(35500)>>2]|0;
 _glBufferData(34962,49152,($159|0),35048);
 $160 = HEAP32[(35312)>>2]|0;
 _glEnableVertexAttribArray(($160|0));
 $161 = HEAP32[(35312)>>2]|0;
 _glVertexAttribPointer(($161|0),3,5126,0,0,(0|0));
 _glGenBuffers(1,((35524)|0));
 $162 = HEAP32[(35524)>>2]|0;
 _glBindBuffer(34962,($162|0));
 $163 = HEAP32[(35504)>>2]|0;
 _glBufferData(34962,32768,($163|0),35048);
 $164 = HEAP32[(35316)>>2]|0;
 _glEnableVertexAttribArray(($164|0));
 $165 = HEAP32[(35316)>>2]|0;
 _glVertexAttribPointer(($165|0),2,5126,0,0,(0|0));
 _glGenBuffers(1,((35528)|0));
 $166 = HEAP32[(35528)>>2]|0;
 _glBindBuffer(34962,($166|0));
 $167 = HEAP32[(35508)>>2]|0;
 _glBufferData(34962,16384,($167|0),35048);
 $168 = HEAP32[(35332)>>2]|0;
 _glEnableVertexAttribArray(($168|0));
 $169 = HEAP32[(35332)>>2]|0;
 _glVertexAttribPointer(($169|0),4,5121,1,0,(0|0));
 _glGenBuffers(1,((35532)|0));
 $170 = HEAP32[(35532)>>2]|0;
 _glBindBuffer(34963,($170|0));
 $171 = HEAP32[(35512)>>2]|0;
 _glBufferData(34963,12288,($171|0),35044);
 $172 = HEAP32[8718]|0;
 $173 = ($172|0)!=(0);
 if ($173) {
  $174 = HEAP32[(35516)>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $174;
  _TraceLog(0,17110,$vararg_buffer14);
 } else {
  $175 = HEAP32[(35520)>>2]|0;
  $176 = HEAP32[(35524)>>2]|0;
  $177 = HEAP32[(35528)>>2]|0;
  $178 = HEAP32[(35532)>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $175;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = $176;
  $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
  HEAP32[$vararg_ptr21>>2] = $177;
  $vararg_ptr22 = ((($vararg_buffer17)) + 12|0);
  HEAP32[$vararg_ptr22>>2] = $178;
  _TraceLog(0,17175,$vararg_buffer17);
 }
 $179 = HEAP32[8718]|0;
 $180 = ($179|0)!=(0);
 if (!($180)) {
  STACKTOP = sp;return;
 }
 $181 = HEAP32[8736]|0;
 FUNCTION_TABLE_vi[$181 & 255](0);
 STACKTOP = sp;return;
}
function _LoadShaderProgram($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$alloca_mul = 0, $$alloca_mul42 = 0, $$alloca_mul44 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 132|0;
 $3 = sp + 128|0;
 $4 = sp + 124|0;
 $5 = sp + 120|0;
 $6 = sp + 116|0;
 $7 = sp + 112|0;
 $8 = sp + 108|0;
 $9 = sp + 104|0;
 $10 = sp + 100|0;
 $11 = sp + 96|0;
 $12 = sp + 92|0;
 $13 = sp + 88|0;
 $14 = sp + 84|0;
 $15 = sp + 80|0;
 $16 = sp + 76|0;
 $17 = sp + 72|0;
 $18 = sp + 68|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 HEAP32[$4>>2] = 0;
 $19 = (_glCreateShader(35633)|0);
 HEAP32[$5>>2] = $19;
 $20 = (_glCreateShader(35632)|0);
 HEAP32[$6>>2] = $20;
 $21 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $21;
 $22 = HEAP32[$3>>2]|0;
 HEAP32[$8>>2] = $22;
 $23 = HEAP32[$5>>2]|0;
 _glShaderSource(($23|0),1,($7|0),(0|0));
 $24 = HEAP32[$6>>2]|0;
 _glShaderSource(($24|0),1,($8|0),(0|0));
 HEAP32[$9>>2] = 0;
 $25 = HEAP32[$5>>2]|0;
 _glCompileShader(($25|0));
 $26 = HEAP32[$5>>2]|0;
 _glGetShaderiv(($26|0),35713,($9|0));
 $27 = HEAP32[$9>>2]|0;
 $28 = ($27|0)!=(1);
 $29 = HEAP32[$5>>2]|0;
 if ($28) {
  HEAP32[$vararg_buffer>>2] = $29;
  _TraceLog(2,18563,$vararg_buffer);
  HEAP32[$10>>2] = 0;
  $30 = HEAP32[$5>>2]|0;
  _glGetShaderiv(($30|0),35716,($10|0));
  $31 = HEAP32[$10>>2]|0;
  $32 = (_llvm_stacksave()|0);
  HEAP32[$12>>2] = $32;
  $$alloca_mul = $31;
  $33 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $34 = HEAP32[$5>>2]|0;
  $35 = HEAP32[$10>>2]|0;
  _glGetShaderInfoLog(($34|0),($35|0),($11|0),($33|0));
  HEAP32[$vararg_buffer1>>2] = $33;
  _TraceLog(0,18612,$vararg_buffer1);
  $36 = HEAP32[$12>>2]|0;
  _llvm_stackrestore(($36|0));
 } else {
  HEAP32[$vararg_buffer4>>2] = $29;
  _TraceLog(0,18615,$vararg_buffer4);
 }
 $37 = HEAP32[$6>>2]|0;
 _glCompileShader(($37|0));
 $38 = HEAP32[$6>>2]|0;
 _glGetShaderiv(($38|0),35713,($9|0));
 $39 = HEAP32[$9>>2]|0;
 $40 = ($39|0)!=(1);
 $41 = HEAP32[$6>>2]|0;
 if ($40) {
  HEAP32[$vararg_buffer7>>2] = $41;
  _TraceLog(2,18665,$vararg_buffer7);
  HEAP32[$13>>2] = 0;
  $42 = HEAP32[$6>>2]|0;
  _glGetShaderiv(($42|0),35716,($13|0));
  $43 = HEAP32[$13>>2]|0;
  $44 = (_llvm_stacksave()|0);
  HEAP32[$15>>2] = $44;
  $$alloca_mul42 = $43;
  $45 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul42)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul42)|0)+15)&-16)|0);;
  $46 = HEAP32[$6>>2]|0;
  $47 = HEAP32[$13>>2]|0;
  _glGetShaderInfoLog(($46|0),($47|0),($14|0),($45|0));
  HEAP32[$vararg_buffer10>>2] = $45;
  _TraceLog(0,18612,$vararg_buffer10);
  $48 = HEAP32[$15>>2]|0;
  _llvm_stackrestore(($48|0));
 } else {
  HEAP32[$vararg_buffer13>>2] = $41;
  _TraceLog(0,18716,$vararg_buffer13);
 }
 $49 = (_glCreateProgram()|0);
 HEAP32[$4>>2] = $49;
 $50 = HEAP32[$4>>2]|0;
 $51 = HEAP32[$5>>2]|0;
 _glAttachShader(($50|0),($51|0));
 $52 = HEAP32[$4>>2]|0;
 $53 = HEAP32[$6>>2]|0;
 _glAttachShader(($52|0),($53|0));
 $54 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($54|0),0,(18300|0));
 $55 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($55|0),1,(18315|0));
 $56 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($56|0),2,(18346|0));
 $57 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($57|0),3,(18373|0));
 $58 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($58|0),4,(18359|0));
 $59 = HEAP32[$4>>2]|0;
 _glBindAttribLocation(($59|0),5,(18330|0));
 $60 = HEAP32[$4>>2]|0;
 _glLinkProgram(($60|0));
 $61 = HEAP32[$4>>2]|0;
 _glGetProgramiv(($61|0),35714,($9|0));
 $62 = HEAP32[$9>>2]|0;
 $63 = ($62|0)==(0);
 $64 = HEAP32[$4>>2]|0;
 if ($63) {
  HEAP32[$vararg_buffer16>>2] = $64;
  _TraceLog(2,18768,$vararg_buffer16);
  HEAP32[$16>>2] = 0;
  $65 = HEAP32[$4>>2]|0;
  _glGetProgramiv(($65|0),35716,($16|0));
  $66 = HEAP32[$16>>2]|0;
  $67 = (_llvm_stacksave()|0);
  HEAP32[$18>>2] = $67;
  $$alloca_mul44 = $66;
  $68 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul44)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul44)|0)+15)&-16)|0);;
  $69 = HEAP32[$4>>2]|0;
  $70 = HEAP32[$16>>2]|0;
  _glGetProgramInfoLog(($69|0),($70|0),($17|0),($68|0));
  HEAP32[$vararg_buffer19>>2] = $68;
  _TraceLog(0,18612,$vararg_buffer19);
  $71 = HEAP32[$4>>2]|0;
  _glDeleteProgram(($71|0));
  HEAP32[$4>>2] = 0;
  $72 = HEAP32[$18>>2]|0;
  _llvm_stackrestore(($72|0));
  $73 = HEAP32[$5>>2]|0;
  _glDeleteShader(($73|0));
  $74 = HEAP32[$6>>2]|0;
  _glDeleteShader(($74|0));
  $75 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($75|0);
 } else {
  HEAP32[$vararg_buffer22>>2] = $64;
  _TraceLog(0,18814,$vararg_buffer22);
  $73 = HEAP32[$5>>2]|0;
  _glDeleteShader(($73|0));
  $74 = HEAP32[$6>>2]|0;
  _glDeleteShader(($74|0));
  $75 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _LoadDefaultShaderLocations($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 8|0;
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_glGetAttribLocation(($3|0),(18300|0))|0);
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_glGetAttribLocation(($8|0),(18315|0))|0);
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = $9;
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_glGetAttribLocation(($13|0),(18330|0))|0);
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = $14;
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_glGetAttribLocation(($18|0),(18346|0))|0);
 $20 = HEAP32[$1>>2]|0;
 $21 = ((($20)) + 16|0);
 HEAP32[$21>>2] = $19;
 $22 = HEAP32[$1>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = (_glGetAttribLocation(($23|0),(18359|0))|0);
 $25 = HEAP32[$1>>2]|0;
 $26 = ((($25)) + 20|0);
 HEAP32[$26>>2] = $24;
 $27 = HEAP32[$1>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = (_glGetAttribLocation(($28|0),(18373|0))|0);
 $30 = HEAP32[$1>>2]|0;
 $31 = ((($30)) + 24|0);
 HEAP32[$31>>2] = $29;
 $32 = HEAP32[$1>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = (_glGetUniformLocation(($33|0),(18385|0))|0);
 $35 = HEAP32[$1>>2]|0;
 $36 = ((($35)) + 28|0);
 HEAP32[$36>>2] = $34;
 $37 = HEAP32[$1>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 $39 = (_glGetUniformLocation(($38|0),(18395|0))|0);
 $40 = HEAP32[$1>>2]|0;
 $41 = ((($40)) + 32|0);
 HEAP32[$41>>2] = $39;
 $42 = HEAP32[$1>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 $44 = (_glGetUniformLocation(($43|0),(18406|0))|0);
 $45 = HEAP32[$1>>2]|0;
 $46 = ((($45)) + 36|0);
 HEAP32[$46>>2] = $44;
 $47 = HEAP32[$1>>2]|0;
 $48 = HEAP32[$47>>2]|0;
 $49 = (_glGetUniformLocation(($48|0),(18417|0))|0);
 $50 = HEAP32[$1>>2]|0;
 $51 = ((($50)) + 40|0);
 HEAP32[$51>>2] = $49;
 $52 = HEAP32[$1>>2]|0;
 $53 = HEAP32[$52>>2]|0;
 $54 = (_glGetUniformLocation(($53|0),(18429|0))|0);
 $55 = HEAP32[$1>>2]|0;
 $56 = ((($55)) + 44|0);
 HEAP32[$56>>2] = $54;
 $57 = HEAP32[$1>>2]|0;
 $58 = HEAP32[$57>>2]|0;
 $59 = (_glGetUniformLocation(($58|0),(18438|0))|0);
 $60 = HEAP32[$1>>2]|0;
 $61 = ((($60)) + 48|0);
 HEAP32[$61>>2] = $59;
 $62 = HEAP32[$1>>2]|0;
 $63 = HEAP32[$62>>2]|0;
 $64 = (_glGetUniformLocation(($63|0),(18447|0))|0);
 $65 = HEAP32[$1>>2]|0;
 $66 = ((($65)) + 52|0);
 HEAP32[$66>>2] = $64;
 $67 = HEAP32[$1>>2]|0;
 dest=$$byval_copy; src=$67; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _GetShaderLightsLocations($$byval_copy);
 STACKTOP = sp;return;
}
function _GetShaderLightsLocations($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $1 = sp + 72|0;
 $2 = sp + 8|0;
 $3 = sp;
 dest=$1; src=18456; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$3>>2] = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<(8);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = (48 + ($6))|0;
  $8 = $7&255;
  $9 = ((($1)) + 7|0);
  HEAP8[$9>>0] = $8;
  (_strcpy($2,$1)|0);
  (_strcat($2,18488)|0);
  $10 = HEAP32[$0>>2]|0;
  $11 = (_glGetUniformLocation(($10|0),($2|0))|0);
  $12 = HEAP32[$3>>2]|0;
  $13 = (34580 + ($12<<5)|0);
  HEAP32[$13>>2] = $11;
  HEAP8[$2>>0] = 0;
  (_strcpy($2,$1)|0);
  (_strcat($2,18497)|0);
  $14 = HEAP32[$0>>2]|0;
  $15 = (_glGetUniformLocation(($14|0),($2|0))|0);
  $16 = HEAP32[$3>>2]|0;
  $17 = (34580 + ($16<<5)|0);
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $15;
  HEAP8[$2>>0] = 0;
  (_strcpy($2,$1)|0);
  (_strcat($2,18503)|0);
  $19 = HEAP32[$0>>2]|0;
  $20 = (_glGetUniformLocation(($19|0),($2|0))|0);
  $21 = HEAP32[$3>>2]|0;
  $22 = (34580 + ($21<<5)|0);
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $20;
  HEAP8[$2>>0] = 0;
  (_strcpy($2,$1)|0);
  (_strcat($2,18513)|0);
  $24 = HEAP32[$0>>2]|0;
  $25 = (_glGetUniformLocation(($24|0),($2|0))|0);
  $26 = HEAP32[$3>>2]|0;
  $27 = (34580 + ($26<<5)|0);
  $28 = ((($27)) + 12|0);
  HEAP32[$28>>2] = $25;
  HEAP8[$2>>0] = 0;
  (_strcpy($2,$1)|0);
  (_strcat($2,18524)|0);
  $29 = HEAP32[$0>>2]|0;
  $30 = (_glGetUniformLocation(($29|0),($2|0))|0);
  $31 = HEAP32[$3>>2]|0;
  $32 = (34580 + ($31<<5)|0);
  $33 = ((($32)) + 16|0);
  HEAP32[$33>>2] = $30;
  HEAP8[$2>>0] = 0;
  (_strcpy($2,$1)|0);
  (_strcat($2,18532)|0);
  $34 = HEAP32[$0>>2]|0;
  $35 = (_glGetUniformLocation(($34|0),($2|0))|0);
  $36 = HEAP32[$3>>2]|0;
  $37 = (34580 + ($36<<5)|0);
  $38 = ((($37)) + 20|0);
  HEAP32[$38>>2] = $35;
  HEAP8[$2>>0] = 0;
  (_strcpy($2,$1)|0);
  (_strcat($2,18541)|0);
  $39 = HEAP32[$0>>2]|0;
  $40 = (_glGetUniformLocation(($39|0),($2|0))|0);
  $41 = HEAP32[$3>>2]|0;
  $42 = (34580 + ($41<<5)|0);
  $43 = ((($42)) + 24|0);
  HEAP32[$43>>2] = $40;
  HEAP8[$2>>0] = 0;
  (_strcpy($2,$1)|0);
  (_strcat($2,18552)|0);
  $44 = HEAP32[$0>>2]|0;
  $45 = (_glGetUniformLocation(($44|0),($2|0))|0);
  $46 = HEAP32[$3>>2]|0;
  $47 = (34580 + ($46<<5)|0);
  $48 = ((($47)) + 28|0);
  HEAP32[$48>>2] = $45;
  $49 = HEAP32[$3>>2]|0;
  $50 = (($49) + 1)|0;
  HEAP32[$3>>2] = $50;
 }
 STACKTOP = sp;return;
}
function _IsMouseButtonPressed($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (40339 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = HEAP32[$1>>2]|0;
 $8 = (40336 + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($6|0)!=($10|0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = (40339 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(1);
  if ($16) {
   HEAP32[$2>>2] = 1;
  }
 }
 $17 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _IsMouseButtonReleased($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (40339 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = HEAP32[$1>>2]|0;
 $8 = (40336 + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($6|0)!=($10|0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = (40339 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(0);
  if ($16) {
   HEAP32[$2>>2] = 1;
  }
 }
 $17 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _rlClearScreenBuffers() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glClear(16640);
 return;
}
function _CloseWindow() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _UnloadDefaultFont();
 _rlglClose();
 $0 = HEAP32[8613]|0;
 _glfwDestroyWindow(($0|0));
 _glfwTerminate();
 _TraceLog(0,19109,$vararg_buffer);
 STACKTOP = sp;return;
}
function _UnloadDefaultFont() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 ;HEAP32[$$byval_copy>>2]=HEAP32[34520>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[34520+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[34520+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[34520+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[34520+16>>2]|0;
 _UnloadTexture($$byval_copy);
 $0 = HEAP32[(34548)>>2]|0;
 _free($0);
 $1 = HEAP32[(34552)>>2]|0;
 _free($1);
 $2 = HEAP32[(34556)>>2]|0;
 _free($2);
 $3 = HEAP32[(34560)>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function _rlglClose() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 _UnloadDefaultShader();
 _UnloadStandardShader();
 _UnloadDefaultBuffers();
 _glDeleteTextures(1,(34936|0));
 $1 = HEAP32[8734]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 _TraceLog(0,19136,$vararg_buffer);
 $2 = HEAP32[8710]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $12 = HEAP32[8871]|0;
  _free($12);
  STACKTOP = sp;return;
 }
 HEAP32[$0>>2] = 0;
 while(1) {
  $4 = HEAP32[$0>>2]|0;
  $5 = HEAP32[8710]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$0>>2]|0;
  $8 = (34896 + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$0>>2] = $11;
 }
 HEAP32[8710] = 0;
 $12 = HEAP32[8871]|0;
 _free($12);
 STACKTOP = sp;return;
}
function _UnloadDefaultShader() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _glUseProgram(0);
 $0 = HEAP32[8855]|0;
 _glDeleteProgram(($0|0));
 return;
}
function _UnloadStandardShader() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _glUseProgram(0);
 $0 = HEAP32[8841]|0;
 _glDeleteProgram(($0|0));
 return;
}
function _UnloadDefaultBuffers() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8718]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[8736]|0;
  FUNCTION_TABLE_vi[$2 & 255](0);
 }
 _glDisableVertexAttribArray(0);
 _glDisableVertexAttribArray(1);
 _glDisableVertexAttribArray(2);
 _glDisableVertexAttribArray(3);
 _glBindBuffer(34962,0);
 _glBindBuffer(34963,0);
 _glDeleteBuffers(1,((35616)|0));
 _glDeleteBuffers(1,((35620)|0));
 _glDeleteBuffers(1,((35568)|0));
 _glDeleteBuffers(1,((35572)|0));
 _glDeleteBuffers(1,((35520)|0));
 _glDeleteBuffers(1,((35524)|0));
 _glDeleteBuffers(1,((35528)|0));
 _glDeleteBuffers(1,((35532)|0));
 $3 = HEAP32[8718]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[8735]|0;
  FUNCTION_TABLE_vii[$5 & 127](1,(35612));
  $6 = HEAP32[8735]|0;
  FUNCTION_TABLE_vii[$6 & 127](1,(35564));
  $7 = HEAP32[8735]|0;
  FUNCTION_TABLE_vii[$7 & 127](1,(35516));
 }
 $8 = HEAP32[(35596)>>2]|0;
 _free($8);
 $9 = HEAP32[(35604)>>2]|0;
 _free($9);
 $10 = HEAP32[(35548)>>2]|0;
 _free($10);
 $11 = HEAP32[(35556)>>2]|0;
 _free($11);
 $12 = HEAP32[(35500)>>2]|0;
 _free($12);
 $13 = HEAP32[(35504)>>2]|0;
 _free($13);
 $14 = HEAP32[(35508)>>2]|0;
 _free($14);
 $15 = HEAP32[(35512)>>2]|0;
 _free($15);
 return;
}
function _UnloadTexture($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 _rlDeleteTextures($3);
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 _TraceLog(0,19201,$vararg_buffer);
 STACKTOP = sp;return;
}
function _rlDeleteTextures($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 _glDeleteTextures(1,($1|0));
 STACKTOP = sp;return;
}
function _IsWindowMinimized() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8555]|0;
 return ($0|0);
}
function _IsWindowFocused() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[484]|0;
 return ($0|0);
}
function _BeginDrawing() {
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $downscaleView$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $downscaleView$byval_copy = sp;
 $0 = (+_GetTime());
 HEAPF64[3974] = $0;
 $1 = +HEAPF64[3974];
 $2 = +HEAPF64[3973];
 $3 = $1 - $2;
 HEAPF64[3972] = $3;
 $4 = +HEAPF64[3974];
 HEAPF64[3973] = $4;
 _rlClearScreenBuffers();
 _rlLoadIdentity();
 dest=$downscaleView$byval_copy; src=34364; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $5 = (_MatrixToFloat($downscaleView$byval_copy)|0);
 _rlMultMatrixf($5);
 STACKTOP = sp;return;
}
function _MatrixToFloat($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$0>>2];
 HEAPF32[8614] = $1;
 $2 = ((($0)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 HEAPF32[(34460)>>2] = $3;
 $4 = ((($0)) + 8|0);
 $5 = +HEAPF32[$4>>2];
 HEAPF32[(34464)>>2] = $5;
 $6 = ((($0)) + 12|0);
 $7 = +HEAPF32[$6>>2];
 HEAPF32[(34468)>>2] = $7;
 $8 = ((($0)) + 16|0);
 $9 = +HEAPF32[$8>>2];
 HEAPF32[(34472)>>2] = $9;
 $10 = ((($0)) + 20|0);
 $11 = +HEAPF32[$10>>2];
 HEAPF32[(34476)>>2] = $11;
 $12 = ((($0)) + 24|0);
 $13 = +HEAPF32[$12>>2];
 HEAPF32[(34480)>>2] = $13;
 $14 = ((($0)) + 28|0);
 $15 = +HEAPF32[$14>>2];
 HEAPF32[(34484)>>2] = $15;
 $16 = ((($0)) + 32|0);
 $17 = +HEAPF32[$16>>2];
 HEAPF32[(34488)>>2] = $17;
 $18 = ((($0)) + 36|0);
 $19 = +HEAPF32[$18>>2];
 HEAPF32[(34492)>>2] = $19;
 $20 = ((($0)) + 40|0);
 $21 = +HEAPF32[$20>>2];
 HEAPF32[(34496)>>2] = $21;
 $22 = ((($0)) + 44|0);
 $23 = +HEAPF32[$22>>2];
 HEAPF32[(34500)>>2] = $23;
 $24 = ((($0)) + 48|0);
 $25 = +HEAPF32[$24>>2];
 HEAPF32[(34504)>>2] = $25;
 $26 = ((($0)) + 52|0);
 $27 = +HEAPF32[$26>>2];
 HEAPF32[(34508)>>2] = $27;
 $28 = ((($0)) + 56|0);
 $29 = +HEAPF32[$28>>2];
 HEAPF32[(34512)>>2] = $29;
 $30 = ((($0)) + 60|0);
 $31 = +HEAPF32[$30>>2];
 HEAPF32[(34516)>>2] = $31;
 return (34456|0);
}
function _rlMultMatrixf($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $$byval_copy1 = sp + 200|0;
 $$byval_copy = sp + 136|0;
 $1 = sp + 128|0;
 $2 = sp + 64|0;
 $3 = sp;
 HEAP32[$1>>2] = $0;
 $4 = HEAP32[$1>>2]|0;
 $5 = +HEAPF32[$4>>2];
 HEAPF32[$2>>2] = $5;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 HEAPF32[$6>>2] = $9;
 $10 = ((($2)) + 8|0);
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF32[$12>>2];
 HEAPF32[$10>>2] = $13;
 $14 = ((($2)) + 12|0);
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 12|0);
 $17 = +HEAPF32[$16>>2];
 HEAPF32[$14>>2] = $17;
 $18 = ((($2)) + 16|0);
 $19 = HEAP32[$1>>2]|0;
 $20 = ((($19)) + 16|0);
 $21 = +HEAPF32[$20>>2];
 HEAPF32[$18>>2] = $21;
 $22 = ((($2)) + 20|0);
 $23 = HEAP32[$1>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = +HEAPF32[$24>>2];
 HEAPF32[$22>>2] = $25;
 $26 = ((($2)) + 24|0);
 $27 = HEAP32[$1>>2]|0;
 $28 = ((($27)) + 24|0);
 $29 = +HEAPF32[$28>>2];
 HEAPF32[$26>>2] = $29;
 $30 = ((($2)) + 28|0);
 $31 = HEAP32[$1>>2]|0;
 $32 = ((($31)) + 28|0);
 $33 = +HEAPF32[$32>>2];
 HEAPF32[$30>>2] = $33;
 $34 = ((($2)) + 32|0);
 $35 = HEAP32[$1>>2]|0;
 $36 = ((($35)) + 32|0);
 $37 = +HEAPF32[$36>>2];
 HEAPF32[$34>>2] = $37;
 $38 = ((($2)) + 36|0);
 $39 = HEAP32[$1>>2]|0;
 $40 = ((($39)) + 36|0);
 $41 = +HEAPF32[$40>>2];
 HEAPF32[$38>>2] = $41;
 $42 = ((($2)) + 40|0);
 $43 = HEAP32[$1>>2]|0;
 $44 = ((($43)) + 40|0);
 $45 = +HEAPF32[$44>>2];
 HEAPF32[$42>>2] = $45;
 $46 = ((($2)) + 44|0);
 $47 = HEAP32[$1>>2]|0;
 $48 = ((($47)) + 44|0);
 $49 = +HEAPF32[$48>>2];
 HEAPF32[$46>>2] = $49;
 $50 = ((($2)) + 48|0);
 $51 = HEAP32[$1>>2]|0;
 $52 = ((($51)) + 48|0);
 $53 = +HEAPF32[$52>>2];
 HEAPF32[$50>>2] = $53;
 $54 = ((($2)) + 52|0);
 $55 = HEAP32[$1>>2]|0;
 $56 = ((($55)) + 52|0);
 $57 = +HEAPF32[$56>>2];
 HEAPF32[$54>>2] = $57;
 $58 = ((($2)) + 56|0);
 $59 = HEAP32[$1>>2]|0;
 $60 = ((($59)) + 56|0);
 $61 = +HEAPF32[$60>>2];
 HEAPF32[$58>>2] = $61;
 $62 = ((($2)) + 60|0);
 $63 = HEAP32[$1>>2]|0;
 $64 = ((($63)) + 60|0);
 $65 = +HEAPF32[$64>>2];
 HEAPF32[$62>>2] = $65;
 $66 = HEAP32[8910]|0;
 $67 = HEAP32[8910]|0;
 dest=$$byval_copy; src=$67; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy1; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($3,$$byval_copy,$$byval_copy1);
 dest=$66; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _EndDrawing() {
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 _rlglDraw();
 _SwapBuffers();
 _PollInputEvents();
 $1 = (+_GetTime());
 HEAPF64[3974] = $1;
 $2 = +HEAPF64[3974];
 $3 = +HEAPF64[3973];
 $4 = $2 - $3;
 HEAPF64[3971] = $4;
 $5 = +HEAPF64[3974];
 HEAPF64[3973] = $5;
 $6 = +HEAPF64[3972];
 $7 = +HEAPF64[3971];
 $8 = $6 + $7;
 HEAPF64[3970] = $8;
 HEAPF64[$0>>3] = 0.0;
 while(1) {
  $9 = +HEAPF64[3970];
  $10 = +HEAPF64[3967];
  $11 = $9 < $10;
  if (!($11)) {
   break;
  }
  $12 = (+_GetTime());
  HEAPF64[3974] = $12;
  $13 = +HEAPF64[3974];
  $14 = +HEAPF64[3973];
  $15 = $13 - $14;
  HEAPF64[$0>>3] = $15;
  $16 = +HEAPF64[3974];
  HEAPF64[3973] = $16;
  $17 = +HEAPF64[$0>>3];
  $18 = +HEAPF64[3970];
  $19 = $18 + $17;
  HEAPF64[3970] = $19;
 }
 STACKTOP = sp;return;
}
function _rlglDraw() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _UpdateDefaultBuffers();
 $0 = HEAP32[8709]|0;
 $1 = ($0|0)!=(0);
 $2 = HEAP32[1385]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 & $3;
 if ($or$cond) {
  _DrawDefaultBuffers(2);
  return;
 } else {
  _DrawDefaultBuffers(1);
  return;
 }
}
function _SwapBuffers() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8613]|0;
 _glfwSwapBuffers(($0|0));
 return;
}
function _PollInputEvents() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 8|0;
 $1 = sp;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 _UpdateGestures();
 HEAP32[483] = -1;
 HEAP32[481] = -1;
 HEAP32[8553] = 0;
 $4 = HEAP32[8613]|0;
 _glfwGetCursorPos(($4|0),($0|0),($1|0));
 $5 = +HEAPF64[$0>>3];
 $6 = $5;
 HEAPF32[8588] = $6;
 $7 = +HEAPF64[$1>>3];
 $8 = $7;
 HEAPF32[(34356)>>2] = $8;
 HEAP32[$2>>2] = 0;
 while(1) {
  $9 = HEAP32[$2>>2]|0;
  $10 = ($9|0)<(512);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$2>>2]|0;
  $12 = (40854 + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = HEAP32[$2>>2]|0;
  $15 = (40342 + ($14)|0);
  HEAP8[$15>>0] = $13;
  $16 = HEAP32[$2>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$2>>2] = $17;
 }
 HEAP32[$3>>2] = 0;
 while(1) {
  $18 = HEAP32[$3>>2]|0;
  $19 = ($18|0)<(3);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$3>>2]|0;
  $21 = (40339 + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = HEAP32[$3>>2]|0;
  $24 = (40336 + ($23)|0);
  HEAP8[$24>>0] = $22;
  $25 = HEAP32[$3>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$3>>2] = $26;
 }
 $27 = HEAP32[8548]|0;
 HEAP32[8552] = $27;
 HEAP32[8548] = 0;
 STACKTOP = sp;return;
}
function _UpdateDefaultBuffers() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8896]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[8718]|0;
  $3 = ($2|0)!=(0);
  if ($3) {
   $4 = HEAP32[8736]|0;
   $5 = HEAP32[(35612)>>2]|0;
   FUNCTION_TABLE_vi[$4 & 255]($5);
  }
  $6 = HEAP32[(35616)>>2]|0;
  _glBindBuffer(34962,($6|0));
  $7 = HEAP32[8896]|0;
  $8 = ($7*12)|0;
  $9 = HEAP32[(35596)>>2]|0;
  _glBufferSubData(34962,0,($8|0),($9|0));
  $10 = HEAP32[(35620)>>2]|0;
  _glBindBuffer(34962,($10|0));
  $11 = HEAP32[(35592)>>2]|0;
  $12 = $11<<2;
  $13 = HEAP32[(35604)>>2]|0;
  _glBufferSubData(34962,0,($12|0),($13|0));
 }
 $14 = HEAP32[8884]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $16 = HEAP32[8718]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = HEAP32[8736]|0;
   $19 = HEAP32[(35564)>>2]|0;
   FUNCTION_TABLE_vi[$18 & 255]($19);
  }
  $20 = HEAP32[(35568)>>2]|0;
  _glBindBuffer(34962,($20|0));
  $21 = HEAP32[8884]|0;
  $22 = ($21*12)|0;
  $23 = HEAP32[(35548)>>2]|0;
  _glBufferSubData(34962,0,($22|0),($23|0));
  $24 = HEAP32[(35572)>>2]|0;
  _glBindBuffer(34962,($24|0));
  $25 = HEAP32[(35544)>>2]|0;
  $26 = $25<<2;
  $27 = HEAP32[(35556)>>2]|0;
  _glBufferSubData(34962,0,($26|0),($27|0));
 }
 $28 = HEAP32[8872]|0;
 $29 = ($28|0)>(0);
 if ($29) {
  $30 = HEAP32[8718]|0;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = HEAP32[8736]|0;
   $33 = HEAP32[(35516)>>2]|0;
   FUNCTION_TABLE_vi[$32 & 255]($33);
  }
  $34 = HEAP32[(35520)>>2]|0;
  _glBindBuffer(34962,($34|0));
  $35 = HEAP32[8872]|0;
  $36 = ($35*12)|0;
  $37 = HEAP32[(35500)>>2]|0;
  _glBufferSubData(34962,0,($36|0),($37|0));
  $38 = HEAP32[(35524)>>2]|0;
  _glBindBuffer(34962,($38|0));
  $39 = HEAP32[8872]|0;
  $40 = $39<<3;
  $41 = HEAP32[(35504)>>2]|0;
  _glBufferSubData(34962,0,($40|0),($41|0));
  $42 = HEAP32[(35528)>>2]|0;
  _glBindBuffer(34962,($42|0));
  $43 = HEAP32[8872]|0;
  $44 = $43<<2;
  $45 = HEAP32[(35508)>>2]|0;
  _glBufferSubData(34962,0,($44|0),($45|0));
 }
 $46 = HEAP32[8718]|0;
 $47 = ($46|0)!=(0);
 if (!($47)) {
  return;
 }
 $48 = HEAP32[8736]|0;
 FUNCTION_TABLE_vi[$48 & 255](0);
 return;
}
function _DrawDefaultBuffers($0) {
 $0 = $0|0;
 var $$byval_copy5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $modelview$byval_copy = 0, $or$cond = 0, $or$cond3 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy5 = sp + 288|0;
 $modelview$byval_copy = sp + 224|0;
 $1 = sp + 216|0;
 $2 = sp + 152|0;
 $3 = sp + 88|0;
 $4 = sp + 80|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$1>>2] = $0;
 dest=$2; src=35644; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$3; src=35708; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$4>>2] = 0;
 while(1) {
  $10 = HEAP32[$4>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[$1>>2]|0;
  $14 = ($13|0)==(2);
  if ($14) {
   $15 = HEAP32[$4>>2]|0;
   dest=$modelview$byval_copy; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   dest=$$byval_copy5; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   _SetStereoView($15,$modelview$byval_copy,$$byval_copy5);
  }
  $16 = HEAP32[8896]|0;
  $17 = ($16|0)>(0);
  $18 = HEAP32[8884]|0;
  $19 = ($18|0)>(0);
  $or$cond = $17 | $19;
  $20 = HEAP32[8872]|0;
  $21 = ($20|0)>(0);
  $or$cond3 = $or$cond | $21;
  if ($or$cond3) {
   $22 = HEAP32[8827]|0;
   _glUseProgram(($22|0));
   dest=$modelview$byval_copy; src=35708; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   dest=$$byval_copy5; src=35644; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   _MatrixMultiply($5,$modelview$byval_copy,$$byval_copy5);
   $23 = HEAP32[(35336)>>2]|0;
   dest=$$byval_copy5; src=$5; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $24 = (_MatrixToFloat($$byval_copy5)|0);
   _glUniformMatrix4fv(($23|0),1,0,($24|0));
   $25 = HEAP32[(35340)>>2]|0;
   _glUniform4f(($25|0),1.0,1.0,1.0,1.0);
   $26 = HEAP32[(35352)>>2]|0;
   _glUniform1i(($26|0),0);
  }
  $27 = HEAP32[8896]|0;
  $28 = ($27|0)>(0);
  if ($28) {
   $29 = HEAP32[8734]|0;
   _glBindTexture(3553,($29|0));
   $30 = HEAP32[8718]|0;
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = HEAP32[8736]|0;
    $33 = HEAP32[(35612)>>2]|0;
    FUNCTION_TABLE_vi[$32 & 255]($33);
   } else {
    $34 = HEAP32[(35616)>>2]|0;
    _glBindBuffer(34962,($34|0));
    $35 = HEAP32[(35312)>>2]|0;
    _glVertexAttribPointer(($35|0),3,5126,0,0,(0|0));
    $36 = HEAP32[(35312)>>2]|0;
    _glEnableVertexAttribArray(($36|0));
    $37 = HEAP32[(35620)>>2]|0;
    _glBindBuffer(34962,($37|0));
    $38 = HEAP32[(35332)>>2]|0;
    _glVertexAttribPointer(($38|0),4,5121,1,0,(0|0));
    $39 = HEAP32[(35332)>>2]|0;
    _glEnableVertexAttribArray(($39|0));
   }
   $40 = HEAP32[8896]|0;
   _glDrawArrays(1,0,($40|0));
   $41 = HEAP32[8718]|0;
   $42 = ($41|0)!=(0);
   if (!($42)) {
    _glBindBuffer(34962,0);
   }
   _glBindTexture(3553,0);
  }
  $43 = HEAP32[8884]|0;
  $44 = ($43|0)>(0);
  if ($44) {
   $45 = HEAP32[8734]|0;
   _glBindTexture(3553,($45|0));
   $46 = HEAP32[8718]|0;
   $47 = ($46|0)!=(0);
   if ($47) {
    $48 = HEAP32[8736]|0;
    $49 = HEAP32[(35564)>>2]|0;
    FUNCTION_TABLE_vi[$48 & 255]($49);
   } else {
    $50 = HEAP32[(35568)>>2]|0;
    _glBindBuffer(34962,($50|0));
    $51 = HEAP32[(35312)>>2]|0;
    _glVertexAttribPointer(($51|0),3,5126,0,0,(0|0));
    $52 = HEAP32[(35312)>>2]|0;
    _glEnableVertexAttribArray(($52|0));
    $53 = HEAP32[(35572)>>2]|0;
    _glBindBuffer(34962,($53|0));
    $54 = HEAP32[(35332)>>2]|0;
    _glVertexAttribPointer(($54|0),4,5121,1,0,(0|0));
    $55 = HEAP32[(35332)>>2]|0;
    _glEnableVertexAttribArray(($55|0));
   }
   $56 = HEAP32[8884]|0;
   _glDrawArrays(4,0,($56|0));
   $57 = HEAP32[8718]|0;
   $58 = ($57|0)!=(0);
   if (!($58)) {
    _glBindBuffer(34962,0);
   }
   _glBindTexture(3553,0);
  }
  $59 = HEAP32[8872]|0;
  $60 = ($59|0)>(0);
  if ($60) {
   HEAP32[$6>>2] = 0;
   HEAP32[$7>>2] = 0;
   HEAP32[$8>>2] = 0;
   $61 = HEAP32[8718]|0;
   $62 = ($61|0)!=(0);
   if ($62) {
    $63 = HEAP32[8736]|0;
    $64 = HEAP32[(35516)>>2]|0;
    FUNCTION_TABLE_vi[$63 & 255]($64);
   } else {
    $65 = HEAP32[(35520)>>2]|0;
    _glBindBuffer(34962,($65|0));
    $66 = HEAP32[(35312)>>2]|0;
    _glVertexAttribPointer(($66|0),3,5126,0,0,(0|0));
    $67 = HEAP32[(35312)>>2]|0;
    _glEnableVertexAttribArray(($67|0));
    $68 = HEAP32[(35524)>>2]|0;
    _glBindBuffer(34962,($68|0));
    $69 = HEAP32[(35316)>>2]|0;
    _glVertexAttribPointer(($69|0),2,5126,0,0,(0|0));
    $70 = HEAP32[(35316)>>2]|0;
    _glEnableVertexAttribArray(($70|0));
    $71 = HEAP32[(35528)>>2]|0;
    _glBindBuffer(34962,($71|0));
    $72 = HEAP32[(35332)>>2]|0;
    _glVertexAttribPointer(($72|0),4,5121,1,0,(0|0));
    $73 = HEAP32[(35332)>>2]|0;
    _glEnableVertexAttribArray(($73|0));
    $74 = HEAP32[(35532)>>2]|0;
    _glBindBuffer(34963,($74|0));
   }
   HEAP32[$9>>2] = 0;
   while(1) {
    $75 = HEAP32[$9>>2]|0;
    $76 = HEAP32[8870]|0;
    $77 = ($75|0)<($76|0);
    if (!($77)) {
     break;
    }
    $78 = HEAP32[$9>>2]|0;
    $79 = HEAP32[8871]|0;
    $80 = (($79) + (($78*144)|0)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81|0) / 4)&-1;
    HEAP32[$6>>2] = $82;
    $83 = HEAP32[$6>>2]|0;
    $84 = ($83*6)|0;
    HEAP32[$7>>2] = $84;
    $85 = HEAP32[$9>>2]|0;
    $86 = HEAP32[8871]|0;
    $87 = (($86) + (($85*144)|0)|0);
    $88 = ((($87)) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    _glBindTexture(3553,($89|0));
    $90 = HEAP32[$7>>2]|0;
    $91 = HEAP32[$8>>2]|0;
    $92 = $91<<1;
    $93 = $92;
    _glDrawElements(4,($90|0),5123,($93|0));
    $94 = HEAP32[$9>>2]|0;
    $95 = HEAP32[8871]|0;
    $96 = (($95) + (($94*144)|0)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97|0) / 4)&-1;
    $99 = ($98*6)|0;
    $100 = HEAP32[$8>>2]|0;
    $101 = (($100) + ($99))|0;
    HEAP32[$8>>2] = $101;
    $102 = HEAP32[$9>>2]|0;
    $103 = (($102) + 1)|0;
    HEAP32[$9>>2] = $103;
   }
   $104 = HEAP32[8718]|0;
   $105 = ($104|0)!=(0);
   if (!($105)) {
    _glBindBuffer(34962,0);
    _glBindBuffer(34963,0);
   }
   _glBindTexture(3553,0);
  }
  $106 = HEAP32[8718]|0;
  $107 = ($106|0)!=(0);
  if ($107) {
   $108 = HEAP32[8736]|0;
   FUNCTION_TABLE_vi[$108 & 255](0);
  }
  _glUseProgram(0);
  $109 = HEAP32[$4>>2]|0;
  $110 = (($109) + 1)|0;
  HEAP32[$4>>2] = $110;
 }
 HEAP32[8870] = 1;
 $111 = HEAP32[8734]|0;
 $112 = HEAP32[8871]|0;
 $113 = ((($112)) + 8|0);
 HEAP32[$113>>2] = $111;
 $114 = HEAP32[8871]|0;
 HEAP32[$114>>2] = 0;
 HEAP32[8896] = 0;
 HEAP32[(35592)>>2] = 0;
 HEAP32[8884] = 0;
 HEAP32[(35544)>>2] = 0;
 HEAP32[8872] = 0;
 HEAP32[(35492)>>2] = 0;
 HEAP32[(35496)>>2] = 0;
 HEAPF32[1386] = -1.0;
 dest=35644; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=35708; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _SetStereoView($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy3 = sp + 264|0;
 $$byval_copy = sp + 128|0;
 $3 = sp + 256|0;
 $4 = sp + 192|0;
 $5 = sp + 64|0;
 $6 = sp;
 HEAP32[$3>>2] = $0;
 $7 = HEAP32[8709]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 dest=$4; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$5; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[8733]|0;
 $11 = Math_imul($9, $10)|0;
 $12 = (($11|0) / 2)&-1;
 $13 = HEAP32[8733]|0;
 $14 = (($13|0) / 2)&-1;
 $15 = HEAP32[8732]|0;
 _rlViewport($12,0,$14,$15);
 $16 = HEAP32[$3>>2]|0;
 $17 = ((35180) + ($16<<6)|0);
 dest=$$byval_copy; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy3; src=$17; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($6,$$byval_copy,$$byval_copy3);
 dest=$5; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $18 = HEAP32[$3>>2]|0;
 $19 = ((35052) + ($18<<6)|0);
 dest=$4; src=$19; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy3; src=$5; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _SetMatrixModelview($$byval_copy3);
 dest=$$byval_copy3; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _SetMatrixProjection($$byval_copy3);
 STACKTOP = sp;return;
}
function _SetMatrixModelview($0) {
 $0 = $0|0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=35708; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _SetMatrixProjection($0) {
 $0 = $0|0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=35644; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _rlPushMatrix() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[8723]|0;
 $1 = ($0|0)==(15);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = 16;
  _TraceLog(1,19251,$vararg_buffer);
 }
 $2 = HEAP32[8723]|0;
 $3 = (35772 + ($2<<6)|0);
 $4 = HEAP32[8910]|0;
 dest=$3; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _rlLoadIdentity();
 $5 = HEAP32[8723]|0;
 $6 = (($5) + 1)|0;
 HEAP32[8723] = $6;
 $7 = HEAP32[8909]|0;
 $8 = ($7|0)==(1);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[8722] = 1;
 STACKTOP = sp;return;
}
function _rlPopMatrix() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $0 = sp;
 $1 = HEAP32[8723]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[8723]|0;
 $4 = (($3) - 1)|0;
 $5 = (35772 + ($4<<6)|0);
 dest=$0; src=$5; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = HEAP32[8910]|0;
 dest=$6; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $7 = HEAP32[8723]|0;
 $8 = (($7) + -1)|0;
 HEAP32[8723] = $8;
 STACKTOP = sp;return;
}
function _rlEnableTexture($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[8870]|0;
 $3 = (($2) - 1)|0;
 $4 = HEAP32[8871]|0;
 $5 = (($4) + (($3*144)|0)|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = ($7|0)!=($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[8870]|0;
 $11 = (($10) - 1)|0;
 $12 = HEAP32[8871]|0;
 $13 = (($12) + (($11*144)|0)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $16 = HEAP32[8870]|0;
  $17 = (($16) + 1)|0;
  HEAP32[8870] = $17;
 }
 $18 = HEAP32[$1>>2]|0;
 $19 = HEAP32[8870]|0;
 $20 = (($19) - 1)|0;
 $21 = HEAP32[8871]|0;
 $22 = (($21) + (($20*144)|0)|0);
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $18;
 $24 = HEAP32[8870]|0;
 $25 = (($24) - 1)|0;
 $26 = HEAP32[8871]|0;
 $27 = (($26) + (($25*144)|0)|0);
 HEAP32[$27>>2] = 0;
 STACKTOP = sp;return;
}
function _rlBegin($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[8908] = $2;
 STACKTOP = sp;return;
}
function _rlColor4ub($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 3|0;
 $5 = sp + 2|0;
 $6 = sp + 1|0;
 $7 = sp;
 HEAP8[$4>>0] = $0;
 HEAP8[$5>>0] = $1;
 HEAP8[$6>>0] = $2;
 HEAP8[$7>>0] = $3;
 $8 = HEAP32[8908]|0;
 switch ($8|0) {
 case 0:  {
  $9 = HEAP8[$4>>0]|0;
  $10 = HEAP32[(35592)>>2]|0;
  $11 = $10<<2;
  $12 = HEAP32[(35604)>>2]|0;
  $13 = (($12) + ($11)|0);
  HEAP8[$13>>0] = $9;
  $14 = HEAP8[$5>>0]|0;
  $15 = HEAP32[(35592)>>2]|0;
  $16 = $15<<2;
  $17 = (($16) + 1)|0;
  $18 = HEAP32[(35604)>>2]|0;
  $19 = (($18) + ($17)|0);
  HEAP8[$19>>0] = $14;
  $20 = HEAP8[$6>>0]|0;
  $21 = HEAP32[(35592)>>2]|0;
  $22 = $21<<2;
  $23 = (($22) + 2)|0;
  $24 = HEAP32[(35604)>>2]|0;
  $25 = (($24) + ($23)|0);
  HEAP8[$25>>0] = $20;
  $26 = HEAP8[$7>>0]|0;
  $27 = HEAP32[(35592)>>2]|0;
  $28 = $27<<2;
  $29 = (($28) + 3)|0;
  $30 = HEAP32[(35604)>>2]|0;
  $31 = (($30) + ($29)|0);
  HEAP8[$31>>0] = $26;
  $32 = HEAP32[(35592)>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[(35592)>>2] = $33;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $34 = HEAP8[$4>>0]|0;
  $35 = HEAP32[(35544)>>2]|0;
  $36 = $35<<2;
  $37 = HEAP32[(35556)>>2]|0;
  $38 = (($37) + ($36)|0);
  HEAP8[$38>>0] = $34;
  $39 = HEAP8[$5>>0]|0;
  $40 = HEAP32[(35544)>>2]|0;
  $41 = $40<<2;
  $42 = (($41) + 1)|0;
  $43 = HEAP32[(35556)>>2]|0;
  $44 = (($43) + ($42)|0);
  HEAP8[$44>>0] = $39;
  $45 = HEAP8[$6>>0]|0;
  $46 = HEAP32[(35544)>>2]|0;
  $47 = $46<<2;
  $48 = (($47) + 2)|0;
  $49 = HEAP32[(35556)>>2]|0;
  $50 = (($49) + ($48)|0);
  HEAP8[$50>>0] = $45;
  $51 = HEAP8[$7>>0]|0;
  $52 = HEAP32[(35544)>>2]|0;
  $53 = $52<<2;
  $54 = (($53) + 3)|0;
  $55 = HEAP32[(35556)>>2]|0;
  $56 = (($55) + ($54)|0);
  HEAP8[$56>>0] = $51;
  $57 = HEAP32[(35544)>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[(35544)>>2] = $58;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $59 = HEAP8[$4>>0]|0;
  $60 = HEAP32[(35496)>>2]|0;
  $61 = $60<<2;
  $62 = HEAP32[(35508)>>2]|0;
  $63 = (($62) + ($61)|0);
  HEAP8[$63>>0] = $59;
  $64 = HEAP8[$5>>0]|0;
  $65 = HEAP32[(35496)>>2]|0;
  $66 = $65<<2;
  $67 = (($66) + 1)|0;
  $68 = HEAP32[(35508)>>2]|0;
  $69 = (($68) + ($67)|0);
  HEAP8[$69>>0] = $64;
  $70 = HEAP8[$6>>0]|0;
  $71 = HEAP32[(35496)>>2]|0;
  $72 = $71<<2;
  $73 = (($72) + 2)|0;
  $74 = HEAP32[(35508)>>2]|0;
  $75 = (($74) + ($73)|0);
  HEAP8[$75>>0] = $70;
  $76 = HEAP8[$7>>0]|0;
  $77 = HEAP32[(35496)>>2]|0;
  $78 = $77<<2;
  $79 = (($78) + 3)|0;
  $80 = HEAP32[(35508)>>2]|0;
  $81 = (($80) + ($79)|0);
  HEAP8[$81>>0] = $76;
  $82 = HEAP32[(35496)>>2]|0;
  $83 = (($82) + 1)|0;
  HEAP32[(35496)>>2] = $83;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _rlNormal3f($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAPF32[$3>>2] = $0;
 HEAPF32[$4>>2] = $1;
 HEAPF32[$5>>2] = $2;
 STACKTOP = sp;return;
}
function _rlTexCoord2f($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAPF32[$2>>2] = $0;
 HEAPF32[$3>>2] = $1;
 $4 = HEAP32[8908]|0;
 $5 = ($4|0)==(2);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = +HEAPF32[$2>>2];
 $7 = HEAP32[(35492)>>2]|0;
 $8 = $7<<1;
 $9 = HEAP32[(35504)>>2]|0;
 $10 = (($9) + ($8<<2)|0);
 HEAPF32[$10>>2] = $6;
 $11 = +HEAPF32[$3>>2];
 $12 = HEAP32[(35492)>>2]|0;
 $13 = $12<<1;
 $14 = (($13) + 1)|0;
 $15 = HEAP32[(35504)>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 HEAPF32[$16>>2] = $11;
 $17 = HEAP32[(35492)>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[(35492)>>2] = $18;
 STACKTOP = sp;return;
}
function _rlVertex2f($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAPF32[$2>>2] = $0;
 HEAPF32[$3>>2] = $1;
 $4 = +HEAPF32[$2>>2];
 $5 = +HEAPF32[$3>>2];
 $6 = +HEAPF32[1386];
 _rlVertex3f($4,$5,$6);
 STACKTOP = sp;return;
}
function _rlEnd() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 40|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = HEAP32[8722]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  HEAP32[$0>>2] = 0;
  while(1) {
   $12 = HEAP32[$0>>2]|0;
   $13 = HEAP32[8721]|0;
   $14 = ($12|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = HEAP32[$0>>2]|0;
   $16 = HEAP32[8869]|0;
   $17 = (($16) + (($15*12)|0)|0);
   $18 = HEAP32[8910]|0;
   dest=$$byval_copy; src=$18; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   _VectorTransform($17,$$byval_copy);
   $19 = HEAP32[$0>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[$0>>2] = $20;
  }
  HEAP32[8722] = 0;
  HEAP32[$1>>2] = 0;
  while(1) {
   $21 = HEAP32[$1>>2]|0;
   $22 = HEAP32[8721]|0;
   $23 = ($21|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = HEAP32[$1>>2]|0;
   $25 = HEAP32[8869]|0;
   $26 = (($25) + (($24*12)|0)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = HEAP32[$1>>2]|0;
   $29 = HEAP32[8869]|0;
   $30 = (($29) + (($28*12)|0)|0);
   $31 = ((($30)) + 4|0);
   $32 = +HEAPF32[$31>>2];
   $33 = HEAP32[$1>>2]|0;
   $34 = HEAP32[8869]|0;
   $35 = (($34) + (($33*12)|0)|0);
   $36 = ((($35)) + 8|0);
   $37 = +HEAPF32[$36>>2];
   _rlVertex3f($27,$32,$37);
   $38 = HEAP32[$1>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[$1>>2] = $39;
  }
  HEAP32[8721] = 0;
 }
 $40 = HEAP32[8908]|0;
 switch ($40|0) {
 case 0:  {
  $41 = HEAP32[8896]|0;
  $42 = HEAP32[(35592)>>2]|0;
  $43 = ($41|0)!=($42|0);
  if (!($43)) {
   $231 = +HEAPF32[1386];
   $232 = $231 + 4.9999998736893758E-5;
   HEAPF32[1386] = $232;
   STACKTOP = sp;return;
  }
  $44 = HEAP32[8896]|0;
  $45 = HEAP32[(35592)>>2]|0;
  $46 = (($44) - ($45))|0;
  HEAP32[$2>>2] = $46;
  HEAP32[$3>>2] = 0;
  while(1) {
   $47 = HEAP32[$3>>2]|0;
   $48 = HEAP32[$2>>2]|0;
   $49 = ($47|0)<($48|0);
   if (!($49)) {
    break;
   }
   $50 = HEAP32[(35592)>>2]|0;
   $51 = $50<<2;
   $52 = (($51) - 4)|0;
   $53 = HEAP32[(35604)>>2]|0;
   $54 = (($53) + ($52)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = HEAP32[(35592)>>2]|0;
   $57 = $56<<2;
   $58 = HEAP32[(35604)>>2]|0;
   $59 = (($58) + ($57)|0);
   HEAP8[$59>>0] = $55;
   $60 = HEAP32[(35592)>>2]|0;
   $61 = $60<<2;
   $62 = (($61) - 3)|0;
   $63 = HEAP32[(35604)>>2]|0;
   $64 = (($63) + ($62)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = HEAP32[(35592)>>2]|0;
   $67 = $66<<2;
   $68 = (($67) + 1)|0;
   $69 = HEAP32[(35604)>>2]|0;
   $70 = (($69) + ($68)|0);
   HEAP8[$70>>0] = $65;
   $71 = HEAP32[(35592)>>2]|0;
   $72 = $71<<2;
   $73 = (($72) - 2)|0;
   $74 = HEAP32[(35604)>>2]|0;
   $75 = (($74) + ($73)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = HEAP32[(35592)>>2]|0;
   $78 = $77<<2;
   $79 = (($78) + 2)|0;
   $80 = HEAP32[(35604)>>2]|0;
   $81 = (($80) + ($79)|0);
   HEAP8[$81>>0] = $76;
   $82 = HEAP32[(35592)>>2]|0;
   $83 = $82<<2;
   $84 = (($83) - 1)|0;
   $85 = HEAP32[(35604)>>2]|0;
   $86 = (($85) + ($84)|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = HEAP32[(35592)>>2]|0;
   $89 = $88<<2;
   $90 = (($89) + 3)|0;
   $91 = HEAP32[(35604)>>2]|0;
   $92 = (($91) + ($90)|0);
   HEAP8[$92>>0] = $87;
   $93 = HEAP32[(35592)>>2]|0;
   $94 = (($93) + 1)|0;
   HEAP32[(35592)>>2] = $94;
   $95 = HEAP32[$3>>2]|0;
   $96 = (($95) + 1)|0;
   HEAP32[$3>>2] = $96;
  }
  $231 = +HEAPF32[1386];
  $232 = $231 + 4.9999998736893758E-5;
  HEAPF32[1386] = $232;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $97 = HEAP32[8884]|0;
  $98 = HEAP32[(35544)>>2]|0;
  $99 = ($97|0)!=($98|0);
  if (!($99)) {
   $231 = +HEAPF32[1386];
   $232 = $231 + 4.9999998736893758E-5;
   HEAPF32[1386] = $232;
   STACKTOP = sp;return;
  }
  $100 = HEAP32[8884]|0;
  $101 = HEAP32[(35544)>>2]|0;
  $102 = (($100) - ($101))|0;
  HEAP32[$4>>2] = $102;
  HEAP32[$5>>2] = 0;
  while(1) {
   $103 = HEAP32[$5>>2]|0;
   $104 = HEAP32[$4>>2]|0;
   $105 = ($103|0)<($104|0);
   if (!($105)) {
    break;
   }
   $106 = HEAP32[(35544)>>2]|0;
   $107 = $106<<2;
   $108 = (($107) - 4)|0;
   $109 = HEAP32[(35556)>>2]|0;
   $110 = (($109) + ($108)|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = HEAP32[(35544)>>2]|0;
   $113 = $112<<2;
   $114 = HEAP32[(35556)>>2]|0;
   $115 = (($114) + ($113)|0);
   HEAP8[$115>>0] = $111;
   $116 = HEAP32[(35544)>>2]|0;
   $117 = $116<<2;
   $118 = (($117) - 3)|0;
   $119 = HEAP32[(35556)>>2]|0;
   $120 = (($119) + ($118)|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = HEAP32[(35544)>>2]|0;
   $123 = $122<<2;
   $124 = (($123) + 1)|0;
   $125 = HEAP32[(35556)>>2]|0;
   $126 = (($125) + ($124)|0);
   HEAP8[$126>>0] = $121;
   $127 = HEAP32[(35544)>>2]|0;
   $128 = $127<<2;
   $129 = (($128) - 2)|0;
   $130 = HEAP32[(35556)>>2]|0;
   $131 = (($130) + ($129)|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = HEAP32[(35544)>>2]|0;
   $134 = $133<<2;
   $135 = (($134) + 2)|0;
   $136 = HEAP32[(35556)>>2]|0;
   $137 = (($136) + ($135)|0);
   HEAP8[$137>>0] = $132;
   $138 = HEAP32[(35544)>>2]|0;
   $139 = $138<<2;
   $140 = (($139) - 1)|0;
   $141 = HEAP32[(35556)>>2]|0;
   $142 = (($141) + ($140)|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = HEAP32[(35544)>>2]|0;
   $145 = $144<<2;
   $146 = (($145) + 3)|0;
   $147 = HEAP32[(35556)>>2]|0;
   $148 = (($147) + ($146)|0);
   HEAP8[$148>>0] = $143;
   $149 = HEAP32[(35544)>>2]|0;
   $150 = (($149) + 1)|0;
   HEAP32[(35544)>>2] = $150;
   $151 = HEAP32[$5>>2]|0;
   $152 = (($151) + 1)|0;
   HEAP32[$5>>2] = $152;
  }
  $231 = +HEAPF32[1386];
  $232 = $231 + 4.9999998736893758E-5;
  HEAPF32[1386] = $232;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $153 = HEAP32[8872]|0;
  $154 = HEAP32[(35496)>>2]|0;
  $155 = ($153|0)!=($154|0);
  L30: do {
   if ($155) {
    $156 = HEAP32[8872]|0;
    $157 = HEAP32[(35496)>>2]|0;
    $158 = (($156) - ($157))|0;
    HEAP32[$6>>2] = $158;
    HEAP32[$7>>2] = 0;
    while(1) {
     $159 = HEAP32[$7>>2]|0;
     $160 = HEAP32[$6>>2]|0;
     $161 = ($159|0)<($160|0);
     if (!($161)) {
      break L30;
     }
     $162 = HEAP32[(35496)>>2]|0;
     $163 = $162<<2;
     $164 = (($163) - 4)|0;
     $165 = HEAP32[(35508)>>2]|0;
     $166 = (($165) + ($164)|0);
     $167 = HEAP8[$166>>0]|0;
     $168 = HEAP32[(35496)>>2]|0;
     $169 = $168<<2;
     $170 = HEAP32[(35508)>>2]|0;
     $171 = (($170) + ($169)|0);
     HEAP8[$171>>0] = $167;
     $172 = HEAP32[(35496)>>2]|0;
     $173 = $172<<2;
     $174 = (($173) - 3)|0;
     $175 = HEAP32[(35508)>>2]|0;
     $176 = (($175) + ($174)|0);
     $177 = HEAP8[$176>>0]|0;
     $178 = HEAP32[(35496)>>2]|0;
     $179 = $178<<2;
     $180 = (($179) + 1)|0;
     $181 = HEAP32[(35508)>>2]|0;
     $182 = (($181) + ($180)|0);
     HEAP8[$182>>0] = $177;
     $183 = HEAP32[(35496)>>2]|0;
     $184 = $183<<2;
     $185 = (($184) - 2)|0;
     $186 = HEAP32[(35508)>>2]|0;
     $187 = (($186) + ($185)|0);
     $188 = HEAP8[$187>>0]|0;
     $189 = HEAP32[(35496)>>2]|0;
     $190 = $189<<2;
     $191 = (($190) + 2)|0;
     $192 = HEAP32[(35508)>>2]|0;
     $193 = (($192) + ($191)|0);
     HEAP8[$193>>0] = $188;
     $194 = HEAP32[(35496)>>2]|0;
     $195 = $194<<2;
     $196 = (($195) - 1)|0;
     $197 = HEAP32[(35508)>>2]|0;
     $198 = (($197) + ($196)|0);
     $199 = HEAP8[$198>>0]|0;
     $200 = HEAP32[(35496)>>2]|0;
     $201 = $200<<2;
     $202 = (($201) + 3)|0;
     $203 = HEAP32[(35508)>>2]|0;
     $204 = (($203) + ($202)|0);
     HEAP8[$204>>0] = $199;
     $205 = HEAP32[(35496)>>2]|0;
     $206 = (($205) + 1)|0;
     HEAP32[(35496)>>2] = $206;
     $207 = HEAP32[$7>>2]|0;
     $208 = (($207) + 1)|0;
     HEAP32[$7>>2] = $208;
    }
   }
  } while(0);
  $209 = HEAP32[8872]|0;
  $210 = HEAP32[(35492)>>2]|0;
  $211 = ($209|0)!=($210|0);
  if (!($211)) {
   $231 = +HEAPF32[1386];
   $232 = $231 + 4.9999998736893758E-5;
   HEAPF32[1386] = $232;
   STACKTOP = sp;return;
  }
  $212 = HEAP32[8872]|0;
  $213 = HEAP32[(35492)>>2]|0;
  $214 = (($212) - ($213))|0;
  HEAP32[$8>>2] = $214;
  HEAP32[$9>>2] = 0;
  while(1) {
   $215 = HEAP32[$9>>2]|0;
   $216 = HEAP32[$8>>2]|0;
   $217 = ($215|0)<($216|0);
   if (!($217)) {
    break;
   }
   $218 = HEAP32[(35492)>>2]|0;
   $219 = $218<<1;
   $220 = HEAP32[(35504)>>2]|0;
   $221 = (($220) + ($219<<2)|0);
   HEAPF32[$221>>2] = 0.0;
   $222 = HEAP32[(35492)>>2]|0;
   $223 = $222<<1;
   $224 = (($223) + 1)|0;
   $225 = HEAP32[(35504)>>2]|0;
   $226 = (($225) + ($224<<2)|0);
   HEAPF32[$226>>2] = 0.0;
   $227 = HEAP32[(35492)>>2]|0;
   $228 = (($227) + 1)|0;
   HEAP32[(35492)>>2] = $228;
   $229 = HEAP32[$9>>2]|0;
   $230 = (($229) + 1)|0;
   HEAP32[$9>>2] = $230;
  }
  $231 = +HEAPF32[1386];
  $232 = $231 + 4.9999998736893758E-5;
  HEAPF32[1386] = $232;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $231 = +HEAPF32[1386];
  $232 = $231 + 4.9999998736893758E-5;
  HEAPF32[1386] = $232;
  STACKTOP = sp;return;
 }
 }
}
function _rlDisableTexture() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _rlVertex3f($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 HEAPF32[$3>>2] = $0;
 HEAPF32[$4>>2] = $1;
 HEAPF32[$5>>2] = $2;
 $6 = HEAP32[8722]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = +HEAPF32[$3>>2];
  $9 = HEAP32[8721]|0;
  $10 = HEAP32[8869]|0;
  $11 = (($10) + (($9*12)|0)|0);
  HEAPF32[$11>>2] = $8;
  $12 = +HEAPF32[$4>>2];
  $13 = HEAP32[8721]|0;
  $14 = HEAP32[8869]|0;
  $15 = (($14) + (($13*12)|0)|0);
  $16 = ((($15)) + 4|0);
  HEAPF32[$16>>2] = $12;
  $17 = +HEAPF32[$5>>2];
  $18 = HEAP32[8721]|0;
  $19 = HEAP32[8869]|0;
  $20 = (($19) + (($18*12)|0)|0);
  $21 = ((($20)) + 8|0);
  HEAPF32[$21>>2] = $17;
  $22 = HEAP32[8721]|0;
  $23 = (($22) + 1)|0;
  HEAP32[8721] = $23;
  STACKTOP = sp;return;
 }
 $24 = HEAP32[8908]|0;
 switch ($24|0) {
 case 0:  {
  $25 = HEAP32[8896]|0;
  $26 = (($25|0) / 2)&-1;
  $27 = ($26|0)<(1024);
  if ($27) {
   $28 = +HEAPF32[$3>>2];
   $29 = HEAP32[8896]|0;
   $30 = ($29*3)|0;
   $31 = HEAP32[(35596)>>2]|0;
   $32 = (($31) + ($30<<2)|0);
   HEAPF32[$32>>2] = $28;
   $33 = +HEAPF32[$4>>2];
   $34 = HEAP32[8896]|0;
   $35 = ($34*3)|0;
   $36 = (($35) + 1)|0;
   $37 = HEAP32[(35596)>>2]|0;
   $38 = (($37) + ($36<<2)|0);
   HEAPF32[$38>>2] = $33;
   $39 = +HEAPF32[$5>>2];
   $40 = HEAP32[8896]|0;
   $41 = ($40*3)|0;
   $42 = (($41) + 2)|0;
   $43 = HEAP32[(35596)>>2]|0;
   $44 = (($43) + ($42<<2)|0);
   HEAPF32[$44>>2] = $39;
   $45 = HEAP32[8896]|0;
   $46 = (($45) + 1)|0;
   HEAP32[8896] = $46;
   STACKTOP = sp;return;
  } else {
   _TraceLog(1,19289,$vararg_buffer);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  $47 = HEAP32[8884]|0;
  $48 = (($47|0) / 3)&-1;
  $49 = ($48|0)<(2048);
  if ($49) {
   $50 = +HEAPF32[$3>>2];
   $51 = HEAP32[8884]|0;
   $52 = ($51*3)|0;
   $53 = HEAP32[(35548)>>2]|0;
   $54 = (($53) + ($52<<2)|0);
   HEAPF32[$54>>2] = $50;
   $55 = +HEAPF32[$4>>2];
   $56 = HEAP32[8884]|0;
   $57 = ($56*3)|0;
   $58 = (($57) + 1)|0;
   $59 = HEAP32[(35548)>>2]|0;
   $60 = (($59) + ($58<<2)|0);
   HEAPF32[$60>>2] = $55;
   $61 = +HEAPF32[$5>>2];
   $62 = HEAP32[8884]|0;
   $63 = ($62*3)|0;
   $64 = (($63) + 2)|0;
   $65 = HEAP32[(35548)>>2]|0;
   $66 = (($65) + ($64<<2)|0);
   HEAPF32[$66>>2] = $61;
   $67 = HEAP32[8884]|0;
   $68 = (($67) + 1)|0;
   HEAP32[8884] = $68;
   STACKTOP = sp;return;
  } else {
   _TraceLog(1,19314,$vararg_buffer1);
   STACKTOP = sp;return;
  }
  break;
 }
 case 2:  {
  $69 = HEAP32[8872]|0;
  $70 = (($69|0) / 4)&-1;
  $71 = ($70|0)<(1024);
  if ($71) {
   $72 = +HEAPF32[$3>>2];
   $73 = HEAP32[8872]|0;
   $74 = ($73*3)|0;
   $75 = HEAP32[(35500)>>2]|0;
   $76 = (($75) + ($74<<2)|0);
   HEAPF32[$76>>2] = $72;
   $77 = +HEAPF32[$4>>2];
   $78 = HEAP32[8872]|0;
   $79 = ($78*3)|0;
   $80 = (($79) + 1)|0;
   $81 = HEAP32[(35500)>>2]|0;
   $82 = (($81) + ($80<<2)|0);
   HEAPF32[$82>>2] = $77;
   $83 = +HEAPF32[$5>>2];
   $84 = HEAP32[8872]|0;
   $85 = ($84*3)|0;
   $86 = (($85) + 2)|0;
   $87 = HEAP32[(35500)>>2]|0;
   $88 = (($87) + ($86<<2)|0);
   HEAPF32[$88>>2] = $83;
   $89 = HEAP32[8872]|0;
   $90 = (($89) + 1)|0;
   HEAP32[8872] = $90;
   $91 = HEAP32[8870]|0;
   $92 = (($91) - 1)|0;
   $93 = HEAP32[8871]|0;
   $94 = (($93) + (($92*144)|0)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + 1)|0;
   HEAP32[$94>>2] = $96;
   STACKTOP = sp;return;
  } else {
   _TraceLog(1,19343,$vararg_buffer3);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _GetFrameTime() {
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = +HEAPF64[3970];
 $2 = $1 * 1.0E+4;
 $3 = (+_round((+$2)));
 $4 = $3 / 1.0E+4;
 HEAPF64[$0>>3] = $4;
 $5 = +HEAPF64[$0>>3];
 $6 = $5;
 STACKTOP = sp;return (+$6);
}
function _GetColor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 HEAP32[$2>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = $4 >> 24;
 $6 = $5&255;
 $7 = $6&255;
 $8 = $7 & 255;
 $9 = $8&255;
 HEAP8[$3>>0] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = $10 >> 16;
 $12 = $11&255;
 $13 = $12&255;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = ((($3)) + 1|0);
 HEAP8[$16>>0] = $15;
 $17 = HEAP32[$2>>2]|0;
 $18 = $17 >> 8;
 $19 = $18&255;
 $20 = $19&255;
 $21 = $20 & 255;
 $22 = $21&255;
 $23 = ((($3)) + 2|0);
 HEAP8[$23>>0] = $22;
 $24 = HEAP32[$2>>2]|0;
 $25 = $24&255;
 $26 = $25&255;
 $27 = $26 & 255;
 $28 = $27&255;
 $29 = ((($3)) + 3|0);
 HEAP8[$29>>0] = $28;
 ;HEAP8[$0>>0]=HEAP8[$3>>0]|0;HEAP8[$0+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$3+3>>0]|0;
 STACKTOP = sp;return;
}
function _GetRandomValue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = ($5|0)>($6|0);
 if ($7) {
  $8 = HEAP32[$3>>2]|0;
  HEAP32[$4>>2] = $8;
  $9 = HEAP32[$2>>2]|0;
  HEAP32[$3>>2] = $9;
  $10 = HEAP32[$4>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 $11 = (_rand()|0);
 $12 = HEAP32[$3>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = (($12) - ($13))|0;
 $15 = (Math_abs(($14|0))|0);
 $16 = (($15) + 1)|0;
 $17 = (($11|0) % ($16|0))&-1;
 $18 = HEAP32[$2>>2]|0;
 $19 = (($17) + ($18))|0;
 STACKTOP = sp;return ($19|0);
}
function _ShowLogo() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8556] = 1;
 return;
}
function _StorageSaveValue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 32|0;
 $6 = sp + 12|0;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 HEAP32[$4>>2] = 0;
 (_strcpy($5,19368)|0);
 $7 = (_fopen($5,19381)|0);
 HEAP32[$4>>2] = $7;
 $8 = HEAP32[$4>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $10 = (_fopen($5,19385)|0);
  HEAP32[$4>>2] = $10;
 }
 $11 = HEAP32[$4>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  _TraceLog(2,19388,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$4>>2]|0;
 (_fseek($13,0,2)|0);
 $14 = HEAP32[$4>>2]|0;
 $15 = (_ftell($14)|0);
 HEAP32[$6>>2] = $15;
 $16 = HEAP32[$4>>2]|0;
 (_fseek($16,0,0)|0);
 $17 = HEAP32[$6>>2]|0;
 $18 = HEAP32[$2>>2]|0;
 $19 = $18<<2;
 $20 = ($17|0)<($19|0);
 if ($20) {
  _TraceLog(2,19427,$vararg_buffer1);
 } else {
  $21 = HEAP32[$4>>2]|0;
  $22 = HEAP32[$2>>2]|0;
  $23 = $22<<2;
  (_fseek($21,$23,0)|0);
  $24 = HEAP32[$4>>2]|0;
  (_fwrite($3,1,4,$24)|0);
 }
 $25 = HEAP32[$4>>2]|0;
 (_fclose($25)|0);
 STACKTOP = sp;return;
}
function _StorageLoadValue($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 0;
 (_strcpy($3,19368)|0);
 $6 = (_fopen($3,19628)|0);
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$4>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  _TraceLog(2,19463,$vararg_buffer);
  $22 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($22|0);
 }
 $9 = HEAP32[$4>>2]|0;
 (_fseek($9,0,2)|0);
 $10 = HEAP32[$4>>2]|0;
 $11 = (_ftell($10)|0);
 HEAP32[$5>>2] = $11;
 $12 = HEAP32[$4>>2]|0;
 _rewind($12);
 $13 = HEAP32[$5>>2]|0;
 $14 = HEAP32[$1>>2]|0;
 $15 = $14<<2;
 $16 = ($13|0)<($15|0);
 if ($16) {
  _TraceLog(2,19427,$vararg_buffer1);
 } else {
  $17 = HEAP32[$4>>2]|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = $18<<2;
  (_fseek($17,$19,0)|0);
  $20 = HEAP32[$4>>2]|0;
  (_fread($2,1,4,$20)|0);
 }
 $21 = HEAP32[$4>>2]|0;
 (_fclose($21)|0);
 $22 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($22|0);
}
function _IsKeyPressed($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (40854 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = HEAP32[$1>>2]|0;
 $8 = (40342 + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($6|0)!=($10|0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = (40854 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(1);
  if ($16) {
   HEAP32[$2>>2] = 1;
   $17 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($17|0);
  }
 }
 HEAP32[$2>>2] = 0;
 $17 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _SetExitKey($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[482] = $2;
 STACKTOP = sp;return;
}
function _rlTranslatef($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $$byval_copy1 = sp + 208|0;
 $$byval_copy = sp + 144|0;
 $3 = sp + 136|0;
 $4 = sp + 132|0;
 $5 = sp + 128|0;
 $6 = sp + 64|0;
 $7 = sp;
 HEAPF32[$3>>2] = $0;
 HEAPF32[$4>>2] = $1;
 HEAPF32[$5>>2] = $2;
 $8 = +HEAPF32[$3>>2];
 $9 = +HEAPF32[$4>>2];
 $10 = +HEAPF32[$5>>2];
 _MatrixTranslate($6,$8,$9,$10);
 _MatrixTranspose($6);
 $11 = HEAP32[8910]|0;
 $12 = HEAP32[8910]|0;
 dest=$$byval_copy; src=$12; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy1; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($7,$$byval_copy,$$byval_copy1);
 dest=$11; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlRotatef($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy2 = sp + 288|0;
 $$byval_copy1 = sp + 224|0;
 $4 = sp + 220|0;
 $5 = sp + 216|0;
 $6 = sp + 212|0;
 $7 = sp + 208|0;
 $8 = sp + 144|0;
 $9 = sp + 128|0;
 $10 = sp + 64|0;
 $11 = sp;
 HEAPF32[$4>>2] = $0;
 HEAPF32[$5>>2] = $1;
 HEAPF32[$6>>2] = $2;
 HEAPF32[$7>>2] = $3;
 _MatrixIdentity($8);
 $12 = +HEAPF32[$5>>2];
 HEAPF32[$9>>2] = $12;
 $13 = ((($9)) + 4|0);
 $14 = +HEAPF32[$6>>2];
 HEAPF32[$13>>2] = $14;
 $15 = ((($9)) + 8|0);
 $16 = +HEAPF32[$7>>2];
 HEAPF32[$15>>2] = $16;
 _VectorNormalize($9);
 $17 = +HEAPF32[$4>>2];
 $18 = $17 * 0.01745329238474369;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$9+8>>2]|0;
 _MatrixRotate($10,$$byval_copy2,$18);
 dest=$8; src=$10; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixTranspose($8);
 $19 = HEAP32[8910]|0;
 $20 = HEAP32[8910]|0;
 dest=$$byval_copy1; src=$20; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy2; src=$8; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($11,$$byval_copy1,$$byval_copy2);
 dest=$19; src=$11; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _GetDefaultTexture($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = HEAP32[8734]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 1;
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($1)) + 16|0);
 HEAP32[$6>>2] = 7;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$1+16>>2]|0;
 STACKTOP = sp;return;
}
function _LoadImage($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 152|0;
 $3 = sp + 132|0;
 $4 = sp + 128|0;
 $5 = sp + 124|0;
 $6 = sp + 120|0;
 $7 = sp + 100|0;
 $8 = sp + 80|0;
 $9 = sp + 60|0;
 $10 = sp + 40|0;
 $11 = sp + 20|0;
 HEAP32[$2>>2] = $1;
 HEAP32[$3>>2] = 0;
 $12 = ((($3)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($3)) + 8|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($3)) + 12|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($3)) + 16|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP32[$2>>2]|0;
 $17 = (_GetExtension($16)|0);
 $18 = (_strcmp($17,19500)|0);
 $19 = ($18|0)==(0);
 do {
  if ($19) {
   label = 5;
  } else {
   $20 = HEAP32[$2>>2]|0;
   $21 = (_GetExtension($20)|0);
   $22 = (_strcmp($21,19504)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    label = 5;
   } else {
    $24 = HEAP32[$2>>2]|0;
    $25 = (_GetExtension($24)|0);
    $26 = (_strcmp($25,19508)|0);
    $27 = ($26|0)==(0);
    if ($27) {
     label = 5;
    } else {
     $28 = HEAP32[$2>>2]|0;
     $29 = (_GetExtension($28)|0);
     $30 = (_strcmp($29,19512)|0);
     $31 = ($30|0)==(0);
     if ($31) {
      label = 5;
     } else {
      $51 = HEAP32[$2>>2]|0;
      $52 = (_GetExtension($51)|0);
      $53 = (_strcmp($52,19516)|0);
      $54 = ($53|0)==(0);
      $55 = HEAP32[$2>>2]|0;
      if ($54) {
       _LoadDDS($7,$55);
       ;HEAP32[$3>>2]=HEAP32[$7>>2]|0;HEAP32[$3+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$7+16>>2]|0;
       break;
      }
      $56 = (_GetExtension($55)|0);
      $57 = (_strcmp($56,19520)|0);
      $58 = ($57|0)==(0);
      $59 = HEAP32[$2>>2]|0;
      if ($58) {
       _LoadPKM($8,$59);
       ;HEAP32[$3>>2]=HEAP32[$8>>2]|0;HEAP32[$3+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$8+16>>2]|0;
       break;
      }
      $60 = (_GetExtension($59)|0);
      $61 = (_strcmp($60,19524)|0);
      $62 = ($61|0)==(0);
      $63 = HEAP32[$2>>2]|0;
      if ($62) {
       _LoadKTX($9,$63);
       ;HEAP32[$3>>2]=HEAP32[$9>>2]|0;HEAP32[$3+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$9+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$9+16>>2]|0;
       break;
      }
      $64 = (_GetExtension($63)|0);
      $65 = (_strcmp($64,19528)|0);
      $66 = ($65|0)==(0);
      $67 = HEAP32[$2>>2]|0;
      if ($66) {
       _LoadPVR($10,$67);
       ;HEAP32[$3>>2]=HEAP32[$10>>2]|0;HEAP32[$3+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$10+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$10+16>>2]|0;
       break;
      }
      $68 = (_GetExtension($67)|0);
      $69 = (_strcmp($68,19532)|0);
      $70 = ($69|0)==(0);
      if ($70) {
       $71 = HEAP32[$2>>2]|0;
       _LoadASTC($11,$71);
       ;HEAP32[$3>>2]=HEAP32[$11>>2]|0;HEAP32[$3+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$11+16>>2]|0;
      }
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   HEAP32[$4>>2] = 0;
   HEAP32[$5>>2] = 0;
   HEAP32[$6>>2] = 0;
   $32 = HEAP32[$2>>2]|0;
   $33 = (_stbi_load($32,$4,$5,$6,0)|0);
   HEAP32[$3>>2] = $33;
   $34 = HEAP32[$4>>2]|0;
   $35 = ((($3)) + 4|0);
   HEAP32[$35>>2] = $34;
   $36 = HEAP32[$5>>2]|0;
   $37 = ((($3)) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = ((($3)) + 12|0);
   HEAP32[$38>>2] = 1;
   $39 = HEAP32[$6>>2]|0;
   $40 = ($39|0)==(1);
   if ($40) {
    $41 = ((($3)) + 16|0);
    HEAP32[$41>>2] = 1;
    break;
   }
   $42 = HEAP32[$6>>2]|0;
   $43 = ($42|0)==(2);
   if ($43) {
    $44 = ((($3)) + 16|0);
    HEAP32[$44>>2] = 2;
    break;
   }
   $45 = HEAP32[$6>>2]|0;
   $46 = ($45|0)==(3);
   if ($46) {
    $47 = ((($3)) + 16|0);
    HEAP32[$47>>2] = 4;
    break;
   }
   $48 = HEAP32[$6>>2]|0;
   $49 = ($48|0)==(4);
   if ($49) {
    $50 = ((($3)) + 16|0);
    HEAP32[$50>>2] = 7;
   }
  }
 } while(0);
 $72 = HEAP32[$3>>2]|0;
 $73 = ($72|0)!=(0|0);
 $74 = HEAP32[$2>>2]|0;
 if ($73) {
  $75 = ((($3)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($3)) + 8|0);
  $78 = HEAP32[$77>>2]|0;
  HEAP32[$vararg_buffer>>2] = $74;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $76;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $78;
  _TraceLog(0,19537,$vararg_buffer);
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer3>>2] = $74;
  _TraceLog(2,19576,$vararg_buffer3);
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
  STACKTOP = sp;return;
 }
}
function _stbi_load($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 $12 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $13 = HEAP32[$6>>2]|0;
 $14 = (_stbi__fopen($13,19628)|0);
 HEAP32[$11>>2] = $14;
 $15 = HEAP32[$11>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $22 = HEAP32[$11>>2]|0;
  $23 = HEAP32[$7>>2]|0;
  $24 = HEAP32[$8>>2]|0;
  $25 = HEAP32[$9>>2]|0;
  $26 = HEAP32[$10>>2]|0;
  $27 = (_stbi_load_from_file($22,$23,$24,$25,$26)|0);
  HEAP32[$12>>2] = $27;
  $28 = HEAP32[$11>>2]|0;
  (_fclose($28)|0);
  $29 = HEAP32[$12>>2]|0;
  HEAP32[$5>>2] = $29;
  $30 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($30|0);
 } else {
  $17 = (_stbi__err(20574)|0);
  $18 = ($17|0)!=(0);
  $19 = $18 ? 0 : 0;
  $20 = $19;
  $21 = $20;
  HEAP32[$5>>2] = $21;
  $30 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _LoadDDS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch$split2D = 0, $switch$split382D = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer24 = sp + 56|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 224|0;
 $3 = sp + 204|0;
 $4 = sp + 200|0;
 $5 = sp + 232|0;
 $6 = sp + 76|0;
 $7 = sp + 230|0;
 $8 = sp + 72|0;
 $9 = sp + 229|0;
 $10 = sp + 68|0;
 $11 = sp + 228|0;
 $12 = sp + 64|0;
 $13 = sp + 60|0;
 HEAP32[$2>>2] = $1;
 HEAP32[$3>>2] = 0;
 $14 = ((($3)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($3)) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($3)) + 12|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($3)) + 16|0);
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$2>>2]|0;
 $19 = (_fopen($18,19628)|0);
 HEAP32[$4>>2] = $19;
 $20 = HEAP32[$4>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  _TraceLog(2,20300,$vararg_buffer);
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
  STACKTOP = sp;return;
 }
 $23 = HEAP32[$4>>2]|0;
 (_fread($5,1,4,$23)|0);
 $24 = (_strncmp($5,20334,4)|0);
 $25 = ($24|0)!=(0);
 L5: do {
  if ($25) {
   $26 = HEAP32[$2>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $26;
   _TraceLog(2,20339,$vararg_buffer1);
  } else {
   $27 = HEAP32[$4>>2]|0;
   (_fread($6,124,1,$27)|0);
   $28 = HEAP32[$2>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $28;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = 124;
   _TraceLog(3,20387,$vararg_buffer4);
   $29 = HEAP32[$2>>2]|0;
   $30 = ((($6)) + 72|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $29;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $31;
   _TraceLog(3,20417,$vararg_buffer8);
   $32 = HEAP32[$2>>2]|0;
   $33 = ((($6)) + 72|0);
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$vararg_buffer12>>2] = $32;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $35;
   _TraceLog(3,20453,$vararg_buffer12);
   $36 = HEAP32[$2>>2]|0;
   $37 = ((($6)) + 72|0);
   $38 = ((($37)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   HEAP32[$vararg_buffer16>>2] = $36;
   $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
   HEAP32[$vararg_ptr19>>2] = $39;
   _TraceLog(3,20492,$vararg_buffer16);
   $40 = HEAP32[$2>>2]|0;
   $41 = ((($6)) + 72|0);
   $42 = ((($41)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   HEAP32[$vararg_buffer20>>2] = $40;
   $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
   HEAP32[$vararg_ptr23>>2] = $43;
   _TraceLog(3,20519,$vararg_buffer20);
   $44 = ((($6)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($3)) + 4|0);
   HEAP32[$46>>2] = $45;
   $47 = ((($6)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($3)) + 8|0);
   HEAP32[$49>>2] = $48;
   $50 = ((($3)) + 12|0);
   HEAP32[$50>>2] = 1;
   $51 = ((($6)) + 72|0);
   $52 = ((($51)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(16);
   do {
    if ($54) {
     $55 = ((($6)) + 72|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(64);
     if ($58) {
      $59 = ((($3)) + 4|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ((($3)) + 8|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = Math_imul($60, $62)|0;
      $64 = $63<<1;
      $65 = (_malloc($64)|0);
      HEAP32[$3>>2] = $65;
      $66 = HEAP32[$3>>2]|0;
      $67 = ((($3)) + 4|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ((($3)) + 8|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = Math_imul($68, $70)|0;
      $72 = $71<<1;
      $73 = HEAP32[$4>>2]|0;
      (_fread($66,$72,1,$73)|0);
      $74 = ((($3)) + 16|0);
      HEAP32[$74>>2] = 3;
      break;
     }
     $75 = ((($6)) + 72|0);
     $76 = ((($75)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)==(65);
     if ($78) {
      $79 = ((($6)) + 72|0);
      $80 = ((($79)) + 28|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($81|0)==(32768);
      if ($82) {
       $83 = ((($3)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ((($3)) + 8|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = Math_imul($84, $86)|0;
       $88 = $87<<1;
       $89 = (_malloc($88)|0);
       HEAP32[$3>>2] = $89;
       $90 = HEAP32[$3>>2]|0;
       $91 = ((($3)) + 4|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ((($3)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = Math_imul($92, $94)|0;
       $96 = $95<<1;
       $97 = HEAP32[$4>>2]|0;
       (_fread($90,$96,1,$97)|0);
       HEAP8[$7>>0] = 0;
       HEAP32[$8>>2] = 0;
       while(1) {
        $98 = HEAP32[$8>>2]|0;
        $99 = ((($3)) + 4|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = ((($3)) + 8|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = Math_imul($100, $102)|0;
        $104 = ($98|0)<($103|0);
        if (!($104)) {
         break;
        }
        $105 = HEAP32[$8>>2]|0;
        $106 = HEAP32[$3>>2]|0;
        $107 = (($106) + ($105<<1)|0);
        $108 = HEAP16[$107>>1]|0;
        $109 = $108&65535;
        $110 = $109 >> 15;
        $111 = $110&255;
        HEAP8[$7>>0] = $111;
        $112 = HEAP32[$8>>2]|0;
        $113 = HEAP32[$3>>2]|0;
        $114 = (($113) + ($112<<1)|0);
        $115 = HEAP16[$114>>1]|0;
        $116 = $115&65535;
        $117 = $116 << 1;
        $118 = $117&65535;
        $119 = HEAP32[$8>>2]|0;
        $120 = HEAP32[$3>>2]|0;
        $121 = (($120) + ($119<<1)|0);
        HEAP16[$121>>1] = $118;
        $122 = HEAP8[$7>>0]|0;
        $123 = $122&255;
        $124 = HEAP32[$8>>2]|0;
        $125 = HEAP32[$3>>2]|0;
        $126 = (($125) + ($124<<1)|0);
        $127 = HEAP16[$126>>1]|0;
        $128 = $127&65535;
        $129 = (($128) + ($123))|0;
        $130 = $129&65535;
        HEAP16[$126>>1] = $130;
        $131 = HEAP32[$8>>2]|0;
        $132 = (($131) + 1)|0;
        HEAP32[$8>>2] = $132;
       }
       $133 = ((($3)) + 16|0);
       HEAP32[$133>>2] = 5;
       break;
      }
      $134 = ((($6)) + 72|0);
      $135 = ((($134)) + 28|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(61440);
      if ($137) {
       $138 = ((($3)) + 4|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ((($3)) + 8|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = Math_imul($139, $141)|0;
       $143 = $142<<1;
       $144 = (_malloc($143)|0);
       HEAP32[$3>>2] = $144;
       $145 = HEAP32[$3>>2]|0;
       $146 = ((($3)) + 4|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = ((($3)) + 8|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = Math_imul($147, $149)|0;
       $151 = $150<<1;
       $152 = HEAP32[$4>>2]|0;
       (_fread($145,$151,1,$152)|0);
       HEAP8[$9>>0] = 0;
       HEAP32[$10>>2] = 0;
       while(1) {
        $153 = HEAP32[$10>>2]|0;
        $154 = ((($3)) + 4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ((($3)) + 8|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = Math_imul($155, $157)|0;
        $159 = ($153|0)<($158|0);
        if (!($159)) {
         break;
        }
        $160 = HEAP32[$10>>2]|0;
        $161 = HEAP32[$3>>2]|0;
        $162 = (($161) + ($160<<1)|0);
        $163 = HEAP16[$162>>1]|0;
        $164 = $163&65535;
        $165 = $164 >> 12;
        $166 = $165&255;
        HEAP8[$9>>0] = $166;
        $167 = HEAP32[$10>>2]|0;
        $168 = HEAP32[$3>>2]|0;
        $169 = (($168) + ($167<<1)|0);
        $170 = HEAP16[$169>>1]|0;
        $171 = $170&65535;
        $172 = $171 << 4;
        $173 = $172&65535;
        $174 = HEAP32[$10>>2]|0;
        $175 = HEAP32[$3>>2]|0;
        $176 = (($175) + ($174<<1)|0);
        HEAP16[$176>>1] = $173;
        $177 = HEAP8[$9>>0]|0;
        $178 = $177&255;
        $179 = HEAP32[$10>>2]|0;
        $180 = HEAP32[$3>>2]|0;
        $181 = (($180) + ($179<<1)|0);
        $182 = HEAP16[$181>>1]|0;
        $183 = $182&65535;
        $184 = (($183) + ($178))|0;
        $185 = $184&65535;
        HEAP16[$181>>1] = $185;
        $186 = HEAP32[$10>>2]|0;
        $187 = (($186) + 1)|0;
        HEAP32[$10>>2] = $187;
       }
       $188 = ((($3)) + 16|0);
       HEAP32[$188>>2] = 6;
      }
     }
    }
   } while(0);
   $189 = ((($6)) + 72|0);
   $190 = ((($189)) + 4|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ($191|0)==(64);
   if ($192) {
    $193 = ((($6)) + 72|0);
    $194 = ((($193)) + 12|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = ($195|0)==(24);
    if ($196) {
     $197 = ((($3)) + 4|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = ((($3)) + 8|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = Math_imul($198, $200)|0;
     $202 = ($201*3)|0;
     $203 = $202;
     $204 = (_malloc($203)|0);
     HEAP32[$3>>2] = $204;
     $205 = HEAP32[$3>>2]|0;
     $206 = ((($3)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ((($3)) + 8|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = Math_imul($207, $209)|0;
     $211 = ($210*3)|0;
     $212 = HEAP32[$4>>2]|0;
     (_fread($205,$211,1,$212)|0);
     $213 = ((($3)) + 16|0);
     HEAP32[$213>>2] = 4;
     break;
    }
   }
   $214 = ((($6)) + 72|0);
   $215 = ((($214)) + 4|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ($216|0)==(65);
   if ($217) {
    $218 = ((($6)) + 72|0);
    $219 = ((($218)) + 12|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = ($220|0)==(32);
    if ($221) {
     $222 = ((($3)) + 4|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = ((($3)) + 8|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = Math_imul($223, $225)|0;
     $227 = $226<<2;
     $228 = $227;
     $229 = (_malloc($228)|0);
     HEAP32[$3>>2] = $229;
     $230 = HEAP32[$3>>2]|0;
     $231 = ((($3)) + 4|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = ((($3)) + 8|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = Math_imul($232, $234)|0;
     $236 = $235<<2;
     $237 = HEAP32[$4>>2]|0;
     (_fread($230,$236,1,$237)|0);
     HEAP8[$11>>0] = 0;
     HEAP32[$12>>2] = 0;
     while(1) {
      $238 = HEAP32[$12>>2]|0;
      $239 = ((($3)) + 4|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = ((($3)) + 8|0);
      $242 = HEAP32[$241>>2]|0;
      $243 = Math_imul($240, $242)|0;
      $244 = $243<<2;
      $245 = ($238|0)<($244|0);
      if (!($245)) {
       break;
      }
      $246 = HEAP32[$12>>2]|0;
      $247 = HEAP32[$3>>2]|0;
      $248 = (($247) + ($246)|0);
      $249 = HEAP8[$248>>0]|0;
      HEAP8[$11>>0] = $249;
      $250 = HEAP32[$12>>2]|0;
      $251 = (($250) + 2)|0;
      $252 = HEAP32[$3>>2]|0;
      $253 = (($252) + ($251)|0);
      $254 = HEAP8[$253>>0]|0;
      $255 = HEAP32[$12>>2]|0;
      $256 = HEAP32[$3>>2]|0;
      $257 = (($256) + ($255)|0);
      HEAP8[$257>>0] = $254;
      $258 = HEAP8[$11>>0]|0;
      $259 = HEAP32[$12>>2]|0;
      $260 = (($259) + 2)|0;
      $261 = HEAP32[$3>>2]|0;
      $262 = (($261) + ($260)|0);
      HEAP8[$262>>0] = $258;
      $263 = HEAP32[$12>>2]|0;
      $264 = (($263) + 4)|0;
      HEAP32[$12>>2] = $264;
     }
     $265 = ((($3)) + 16|0);
     HEAP32[$265>>2] = 7;
     break;
    }
   }
   $266 = ((($6)) + 72|0);
   $267 = ((($266)) + 4|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = ($268|0)==(4);
   if (!($269)) {
    $270 = ((($6)) + 72|0);
    $271 = ((($270)) + 4|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = ($272|0)==(5);
    if (!($273)) {
     break;
    }
   }
   $274 = ((($6)) + 72|0);
   $275 = ((($274)) + 8|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = ($276>>>0)>(0);
   if ($277) {
    $278 = ((($6)) + 24|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = ($279>>>0)>(1);
    $281 = ((($6)) + 16|0);
    $282 = HEAP32[$281>>2]|0;
    if ($280) {
     $283 = $282<<1;
     HEAP32[$13>>2] = $283;
    } else {
     HEAP32[$13>>2] = $282;
    }
    $284 = ((($6)) + 16|0);
    $285 = HEAP32[$284>>2]|0;
    HEAP32[$vararg_buffer24>>2] = $285;
    _TraceLog(3,20549,$vararg_buffer24);
    $286 = HEAP32[$13>>2]|0;
    $287 = $286;
    $288 = (_malloc($287)|0);
    HEAP32[$3>>2] = $288;
    $289 = HEAP32[$3>>2]|0;
    $290 = HEAP32[$13>>2]|0;
    $291 = HEAP32[$4>>2]|0;
    (_fread($289,1,$290,$291)|0);
    $292 = ((($6)) + 24|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = ((($3)) + 12|0);
    HEAP32[$294>>2] = $293;
    $295 = ((($6)) + 72|0);
    $296 = ((($295)) + 8|0);
    $297 = HEAP32[$296>>2]|0;
    $switch$split2D = ($297|0)<(861165636);
    if ($switch$split2D) {
     switch ($297|0) {
     case 827611204:  {
      break;
     }
     default: {
      break L5;
     }
     }
     $298 = ((($6)) + 72|0);
     $299 = ((($298)) + 4|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = ($300|0)==(4);
     $302 = ((($3)) + 16|0);
     if ($301) {
      HEAP32[$302>>2] = 8;
      break;
     } else {
      HEAP32[$302>>2] = 9;
      break;
     }
    }
    $switch$split382D = ($297|0)<(894720068);
    if ($switch$split382D) {
     switch ($297|0) {
     case 861165636:  {
      break;
     }
     default: {
      break L5;
     }
     }
     $303 = ((($3)) + 16|0);
     HEAP32[$303>>2] = 10;
     break;
    } else {
     switch ($297|0) {
     case 894720068:  {
      break;
     }
     default: {
      break L5;
     }
     }
     $304 = ((($3)) + 16|0);
     HEAP32[$304>>2] = 11;
     break;
    }
   }
  }
 } while(0);
 $305 = HEAP32[$4>>2]|0;
 (_fclose($305)|0);
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
 STACKTOP = sp;return;
}
function _LoadPKM($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 68|0;
 $3 = sp + 48|0;
 $4 = sp + 44|0;
 $5 = sp + 72|0;
 $6 = sp + 40|0;
 $7 = sp + 36|0;
 HEAP32[$2>>2] = $1;
 HEAP32[$3>>2] = 0;
 $8 = ((($3)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($3)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($3)) + 16|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$2>>2]|0;
 $13 = (_fopen($12,19628)|0);
 HEAP32[$4>>2] = $13;
 $14 = HEAP32[$4>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer>>2] = $16;
  _TraceLog(2,20133,$vararg_buffer);
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
  STACKTOP = sp;return;
 }
 $17 = HEAP32[$4>>2]|0;
 (_fread($5,16,1,$17)|0);
 $18 = (_strncmp($5,20167,4)|0);
 $19 = ($18|0)!=(0);
 do {
  if ($19) {
   $20 = HEAP32[$2>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $20;
   _TraceLog(2,20172,$vararg_buffer1);
  } else {
   $21 = ((($5)) + 6|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = $22&65535;
   $24 = $23 & 255;
   $25 = $24 << 8;
   $26 = ((($5)) + 6|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27&65535;
   $29 = $28 & 65280;
   $30 = $29 >> 8;
   $31 = $25 | $30;
   $32 = $31&65535;
   $33 = ((($5)) + 6|0);
   HEAP16[$33>>1] = $32;
   $34 = ((($5)) + 8|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35&65535;
   $37 = $36 & 255;
   $38 = $37 << 8;
   $39 = ((($5)) + 8|0);
   $40 = HEAP16[$39>>1]|0;
   $41 = $40&65535;
   $42 = $41 & 65280;
   $43 = $42 >> 8;
   $44 = $38 | $43;
   $45 = $44&65535;
   $46 = ((($5)) + 8|0);
   HEAP16[$46>>1] = $45;
   $47 = ((($5)) + 10|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = $48&65535;
   $50 = $49 & 255;
   $51 = $50 << 8;
   $52 = ((($5)) + 10|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $53&65535;
   $55 = $54 & 65280;
   $56 = $55 >> 8;
   $57 = $51 | $56;
   $58 = $57&65535;
   $59 = ((($5)) + 10|0);
   HEAP16[$59>>1] = $58;
   $60 = ((($5)) + 8|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   HEAP32[$vararg_buffer4>>2] = $62;
   _TraceLog(3,20220,$vararg_buffer4);
   $63 = ((($5)) + 10|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $64&65535;
   HEAP32[$vararg_buffer7>>2] = $65;
   _TraceLog(3,20246,$vararg_buffer7);
   $66 = ((($5)) + 6|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67&65535;
   HEAP32[$vararg_buffer10>>2] = $68;
   _TraceLog(3,20273,$vararg_buffer10);
   $69 = ((($5)) + 8|0);
   $70 = HEAP16[$69>>1]|0;
   $71 = $70&65535;
   $72 = ((($3)) + 4|0);
   HEAP32[$72>>2] = $71;
   $73 = ((($5)) + 10|0);
   $74 = HEAP16[$73>>1]|0;
   $75 = $74&65535;
   $76 = ((($3)) + 8|0);
   HEAP32[$76>>2] = $75;
   $77 = ((($3)) + 12|0);
   HEAP32[$77>>2] = 1;
   HEAP32[$6>>2] = 4;
   $78 = ((($5)) + 6|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79&65535;
   $81 = ($80|0)==(3);
   $$ = $81 ? 8 : 4;
   HEAP32[$6>>2] = $$;
   $82 = ((($3)) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ((($3)) + 8|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = Math_imul($83, $85)|0;
   $87 = HEAP32[$6>>2]|0;
   $88 = Math_imul($86, $87)|0;
   $89 = (($88|0) / 8)&-1;
   HEAP32[$7>>2] = $89;
   $90 = HEAP32[$7>>2]|0;
   $91 = $90;
   $92 = (_malloc($91)|0);
   HEAP32[$3>>2] = $92;
   $93 = HEAP32[$3>>2]|0;
   $94 = HEAP32[$7>>2]|0;
   $95 = HEAP32[$4>>2]|0;
   (_fread($93,1,$94,$95)|0);
   $96 = ((($5)) + 6|0);
   $97 = HEAP16[$96>>1]|0;
   $98 = $97&65535;
   $99 = ($98|0)==(0);
   if ($99) {
    $100 = ((($3)) + 16|0);
    HEAP32[$100>>2] = 12;
    break;
   }
   $101 = ((($5)) + 6|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102&65535;
   $104 = ($103|0)==(1);
   if ($104) {
    $105 = ((($3)) + 16|0);
    HEAP32[$105>>2] = 13;
    break;
   }
   $106 = ((($5)) + 6|0);
   $107 = HEAP16[$106>>1]|0;
   $108 = $107&65535;
   $109 = ($108|0)==(3);
   if ($109) {
    $110 = ((($3)) + 16|0);
    HEAP32[$110>>2] = 14;
   }
  }
 } while(0);
 $111 = HEAP32[$4>>2]|0;
 (_fclose($111)|0);
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
 STACKTOP = sp;return;
}
function _LoadKTX($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 136|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 48|0;
 $6 = sp + 140|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 HEAP32[$2>>2] = $1;
 $9 = ((($3)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($3)) + 16|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$2>>2]|0;
 $14 = (_fopen($13,19628)|0);
 HEAP32[$4>>2] = $14;
 $15 = HEAP32[$4>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  _TraceLog(2,19964,$vararg_buffer);
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$4>>2]|0;
 (_fread($5,64,1,$18)|0);
 $19 = ((($5)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($21|0)!=(75);
 do {
  if ($22) {
   label = 9;
  } else {
   $23 = ((($5)) + 2|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)!=(84);
   if ($26) {
    label = 9;
   } else {
    $27 = ((($5)) + 3|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($29|0)!=(88);
    if ($30) {
     label = 9;
    } else {
     $31 = ((($5)) + 4|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = ($33|0)!=(32);
     if ($34) {
      label = 9;
     } else {
      $35 = ((($5)) + 5|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = $36 << 24 >> 24;
      $38 = ($37|0)!=(49);
      if ($38) {
       label = 9;
      } else {
       $39 = ((($5)) + 6|0);
       $40 = HEAP8[$39>>0]|0;
       $41 = $40 << 24 >> 24;
       $42 = ($41|0)!=(49);
       if ($42) {
        label = 9;
       } else {
        $44 = ((($5)) + 36|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ((($3)) + 4|0);
        HEAP32[$46>>2] = $45;
        $47 = ((($5)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ((($3)) + 8|0);
        HEAP32[$49>>2] = $48;
        $50 = ((($5)) + 56|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ((($3)) + 12|0);
        HEAP32[$52>>2] = $51;
        $53 = ((($5)) + 36|0);
        $54 = HEAP32[$53>>2]|0;
        HEAP32[$vararg_buffer4>>2] = $54;
        _TraceLog(3,20051,$vararg_buffer4);
        $55 = ((($5)) + 40|0);
        $56 = HEAP32[$55>>2]|0;
        HEAP32[$vararg_buffer7>>2] = $56;
        _TraceLog(3,20077,$vararg_buffer7);
        $57 = ((($5)) + 28|0);
        $58 = HEAP32[$57>>2]|0;
        HEAP32[$vararg_buffer10>>2] = $58;
        _TraceLog(3,20104,$vararg_buffer10);
        $59 = ((($5)) + 60|0);
        $60 = HEAP32[$59>>2]|0;
        $61 = ($60>>>0)>(0);
        L12: do {
         if ($61) {
          HEAP32[$7>>2] = 0;
          while(1) {
           $62 = HEAP32[$7>>2]|0;
           $63 = ((($5)) + 60|0);
           $64 = HEAP32[$63>>2]|0;
           $65 = ($62>>>0)<($64>>>0);
           if (!($65)) {
            break L12;
           }
           $66 = HEAP32[$4>>2]|0;
           (_fread($6,1,1,$66)|0);
           $67 = HEAP32[$7>>2]|0;
           $68 = (($67) + 1)|0;
           HEAP32[$7>>2] = $68;
          }
         }
        } while(0);
        $69 = HEAP32[$4>>2]|0;
        (_fread($8,4,1,$69)|0);
        $70 = HEAP32[$8>>2]|0;
        $71 = $70;
        $72 = (_malloc($71)|0);
        HEAP32[$3>>2] = $72;
        $73 = HEAP32[$3>>2]|0;
        $74 = HEAP32[$8>>2]|0;
        $75 = HEAP32[$4>>2]|0;
        (_fread($73,1,$74,$75)|0);
        $76 = ((($5)) + 28|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = ($77|0)==(36196);
        if ($78) {
         $79 = ((($3)) + 16|0);
         HEAP32[$79>>2] = 12;
         break;
        }
        $80 = ((($5)) + 28|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = ($81|0)==(37492);
        if ($82) {
         $83 = ((($3)) + 16|0);
         HEAP32[$83>>2] = 13;
         break;
        }
        $84 = ((($5)) + 28|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ($85|0)==(37496);
        if ($86) {
         $87 = ((($3)) + 16|0);
         HEAP32[$87>>2] = 14;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $43 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $43;
  _TraceLog(2,20004,$vararg_buffer1);
 }
 $88 = HEAP32[$4>>2]|0;
 (_fclose($88)|0);
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
 STACKTOP = sp;return;
}
function _LoadPVR($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 108|0;
 $3 = sp + 88|0;
 $4 = sp + 84|0;
 $5 = sp + 113|0;
 $6 = sp + 32|0;
 $7 = sp + 112|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 HEAP32[$2>>2] = $1;
 HEAP32[$3>>2] = 0;
 $11 = ((($3)) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($3)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$2>>2]|0;
 $16 = (_fopen($15,19628)|0);
 HEAP32[$4>>2] = $16;
 $17 = HEAP32[$4>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer>>2] = $19;
  _TraceLog(2,19832,$vararg_buffer);
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
  STACKTOP = sp;return;
 }
 HEAP8[$5>>0] = 0;
 $20 = HEAP32[$4>>2]|0;
 (_fread($5,1,1,$20)|0);
 $21 = HEAP32[$4>>2]|0;
 (_fseek($21,0,0)|0);
 $22 = HEAP8[$5>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)==(80);
 do {
  if ($24) {
   $25 = HEAP32[$4>>2]|0;
   (_fread($6,52,1,$25)|0);
   $26 = HEAP8[$6>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = ($27|0)!=(80);
   if (!($28)) {
    $29 = ((($6)) + 1|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 << 24 >> 24;
    $32 = ($31|0)!=(86);
    if (!($32)) {
     $33 = ((($6)) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34 << 24 >> 24;
     $36 = ($35|0)!=(82);
     if (!($36)) {
      $37 = ((($6)) + 3|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38 << 24 >> 24;
      $40 = ($39|0)!=(3);
      if (!($40)) {
       $42 = ((($6)) + 28|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ((($3)) + 4|0);
       HEAP32[$44>>2] = $43;
       $45 = ((($6)) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ((($3)) + 8|0);
       HEAP32[$47>>2] = $46;
       $48 = ((($6)) + 44|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = ((($3)) + 12|0);
       HEAP32[$50>>2] = $49;
       $51 = ((($6)) + 8|0);
       $52 = HEAP8[$51>>0]|0;
       $53 = $52&255;
       $54 = ($53|0)==(108);
       if ($54) {
        $55 = ((($6)) + 8|0);
        $56 = ((($55)) + 1|0);
        $57 = HEAP8[$56>>0]|0;
        $58 = $57&255;
        $59 = ($58|0)==(0);
        if ($59) {
         $60 = ((($6)) + 12|0);
         $61 = HEAP8[$60>>0]|0;
         $62 = $61&255;
         $63 = ($62|0)==(8);
         if ($63) {
          $64 = ((($3)) + 16|0);
          HEAP32[$64>>2] = 1;
         } else {
          label = 13;
         }
        } else {
         label = 13;
        }
       } else {
        label = 13;
       }
       L16: do {
        if ((label|0) == 13) {
         $65 = ((($6)) + 8|0);
         $66 = HEAP8[$65>>0]|0;
         $67 = $66&255;
         $68 = ($67|0)==(108);
         if ($68) {
          $69 = ((($6)) + 8|0);
          $70 = ((($69)) + 1|0);
          $71 = HEAP8[$70>>0]|0;
          $72 = $71&255;
          $73 = ($72|0)==(97);
          if ($73) {
           $74 = ((($6)) + 12|0);
           $75 = HEAP8[$74>>0]|0;
           $76 = $75&255;
           $77 = ($76|0)==(8);
           if ($77) {
            $78 = ((($6)) + 12|0);
            $79 = ((($78)) + 1|0);
            $80 = HEAP8[$79>>0]|0;
            $81 = $80&255;
            $82 = ($81|0)==(8);
            if ($82) {
             $83 = ((($3)) + 16|0);
             HEAP32[$83>>2] = 2;
             break;
            }
           }
          }
         }
         $84 = ((($6)) + 8|0);
         $85 = HEAP8[$84>>0]|0;
         $86 = $85&255;
         $87 = ($86|0)==(114);
         if ($87) {
          $88 = ((($6)) + 8|0);
          $89 = ((($88)) + 1|0);
          $90 = HEAP8[$89>>0]|0;
          $91 = $90&255;
          $92 = ($91|0)==(103);
          if ($92) {
           $93 = ((($6)) + 8|0);
           $94 = ((($93)) + 2|0);
           $95 = HEAP8[$94>>0]|0;
           $96 = $95&255;
           $97 = ($96|0)==(98);
           if ($97) {
            $98 = ((($6)) + 8|0);
            $99 = ((($98)) + 3|0);
            $100 = HEAP8[$99>>0]|0;
            $101 = $100&255;
            $102 = ($101|0)==(97);
            if (!($102)) {
             $163 = ((($6)) + 8|0);
             $164 = ((($163)) + 3|0);
             $165 = HEAP8[$164>>0]|0;
             $166 = $165&255;
             $167 = ($166|0)==(0);
             if (!($167)) {
              break;
             }
             $168 = ((($6)) + 12|0);
             $169 = HEAP8[$168>>0]|0;
             $170 = $169&255;
             $171 = ($170|0)==(5);
             do {
              if ($171) {
               $172 = ((($6)) + 12|0);
               $173 = ((($172)) + 1|0);
               $174 = HEAP8[$173>>0]|0;
               $175 = $174&255;
               $176 = ($175|0)==(6);
               if (!($176)) {
                break;
               }
               $177 = ((($6)) + 12|0);
               $178 = ((($177)) + 2|0);
               $179 = HEAP8[$178>>0]|0;
               $180 = $179&255;
               $181 = ($180|0)==(5);
               if (!($181)) {
                break;
               }
               $182 = ((($3)) + 16|0);
               HEAP32[$182>>2] = 3;
               break L16;
              }
             } while(0);
             $183 = ((($6)) + 12|0);
             $184 = HEAP8[$183>>0]|0;
             $185 = $184&255;
             $186 = ($185|0)==(8);
             if (!($186)) {
              break;
             }
             $187 = ((($6)) + 12|0);
             $188 = ((($187)) + 1|0);
             $189 = HEAP8[$188>>0]|0;
             $190 = $189&255;
             $191 = ($190|0)==(8);
             if (!($191)) {
              break;
             }
             $192 = ((($6)) + 12|0);
             $193 = ((($192)) + 2|0);
             $194 = HEAP8[$193>>0]|0;
             $195 = $194&255;
             $196 = ($195|0)==(8);
             if (!($196)) {
              break;
             }
             $197 = ((($3)) + 16|0);
             HEAP32[$197>>2] = 4;
             break;
            }
            $103 = ((($6)) + 12|0);
            $104 = HEAP8[$103>>0]|0;
            $105 = $104&255;
            $106 = ($105|0)==(5);
            do {
             if ($106) {
              $107 = ((($6)) + 12|0);
              $108 = ((($107)) + 1|0);
              $109 = HEAP8[$108>>0]|0;
              $110 = $109&255;
              $111 = ($110|0)==(5);
              if ($111) {
               $112 = ((($6)) + 12|0);
               $113 = ((($112)) + 2|0);
               $114 = HEAP8[$113>>0]|0;
               $115 = $114&255;
               $116 = ($115|0)==(5);
               if ($116) {
                $117 = ((($6)) + 12|0);
                $118 = ((($117)) + 3|0);
                $119 = HEAP8[$118>>0]|0;
                $120 = $119&255;
                $121 = ($120|0)==(1);
                if (!($121)) {
                 break;
                }
                $122 = ((($3)) + 16|0);
                HEAP32[$122>>2] = 5;
                break L16;
               }
              }
             }
            } while(0);
            $123 = ((($6)) + 12|0);
            $124 = HEAP8[$123>>0]|0;
            $125 = $124&255;
            $126 = ($125|0)==(4);
            do {
             if ($126) {
              $127 = ((($6)) + 12|0);
              $128 = ((($127)) + 1|0);
              $129 = HEAP8[$128>>0]|0;
              $130 = $129&255;
              $131 = ($130|0)==(4);
              if ($131) {
               $132 = ((($6)) + 12|0);
               $133 = ((($132)) + 2|0);
               $134 = HEAP8[$133>>0]|0;
               $135 = $134&255;
               $136 = ($135|0)==(4);
               if (!($136)) {
                break;
               }
               $137 = ((($6)) + 12|0);
               $138 = ((($137)) + 3|0);
               $139 = HEAP8[$138>>0]|0;
               $140 = $139&255;
               $141 = ($140|0)==(4);
               if (!($141)) {
                break;
               }
               $142 = ((($3)) + 16|0);
               HEAP32[$142>>2] = 6;
               break L16;
              }
             }
            } while(0);
            $143 = ((($6)) + 12|0);
            $144 = HEAP8[$143>>0]|0;
            $145 = $144&255;
            $146 = ($145|0)==(8);
            if (!($146)) {
             break;
            }
            $147 = ((($6)) + 12|0);
            $148 = ((($147)) + 1|0);
            $149 = HEAP8[$148>>0]|0;
            $150 = $149&255;
            $151 = ($150|0)==(8);
            if (!($151)) {
             break;
            }
            $152 = ((($6)) + 12|0);
            $153 = ((($152)) + 2|0);
            $154 = HEAP8[$153>>0]|0;
            $155 = $154&255;
            $156 = ($155|0)==(8);
            if (!($156)) {
             break;
            }
            $157 = ((($6)) + 12|0);
            $158 = ((($157)) + 3|0);
            $159 = HEAP8[$158>>0]|0;
            $160 = $159&255;
            $161 = ($160|0)==(8);
            if (!($161)) {
             break;
            }
            $162 = ((($3)) + 16|0);
            HEAP32[$162>>2] = 7;
            break;
           }
          }
         }
         $198 = ((($6)) + 8|0);
         $199 = HEAP8[$198>>0]|0;
         $200 = $199&255;
         $201 = ($200|0)==(2);
         if ($201) {
          $202 = ((($3)) + 16|0);
          HEAP32[$202>>2] = 15;
          break;
         }
         $203 = ((($6)) + 8|0);
         $204 = HEAP8[$203>>0]|0;
         $205 = $204&255;
         $206 = ($205|0)==(3);
         if ($206) {
          $207 = ((($3)) + 16|0);
          HEAP32[$207>>2] = 16;
         }
        }
       } while(0);
       HEAP8[$7>>0] = 0;
       HEAP32[$8>>2] = 0;
       while(1) {
        $208 = HEAP32[$8>>2]|0;
        $209 = ((($6)) + 48|0);
        $210 = HEAP32[$209>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if (!($211)) {
         break;
        }
        $212 = HEAP32[$4>>2]|0;
        (_fread($7,1,1,$212)|0);
        $213 = HEAP32[$8>>2]|0;
        $214 = (($213) + 1)|0;
        HEAP32[$8>>2] = $214;
       }
       HEAP32[$9>>2] = 0;
       $215 = ((($3)) + 16|0);
       $216 = HEAP32[$215>>2]|0;
       switch ($216|0) {
       case 1:  {
        HEAP32[$9>>2] = 8;
        break;
       }
       case 6: case 3: case 5: case 2:  {
        HEAP32[$9>>2] = 16;
        break;
       }
       case 7:  {
        HEAP32[$9>>2] = 32;
        break;
       }
       case 4:  {
        HEAP32[$9>>2] = 24;
        break;
       }
       case 16: case 15:  {
        HEAP32[$9>>2] = 4;
        break;
       }
       default: {
       }
       }
       $217 = ((($3)) + 4|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = ((($3)) + 8|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = Math_imul($218, $220)|0;
       $222 = HEAP32[$9>>2]|0;
       $223 = Math_imul($221, $222)|0;
       $224 = (($223|0) / 8)&-1;
       HEAP32[$10>>2] = $224;
       $225 = HEAP32[$10>>2]|0;
       $226 = $225;
       $227 = (_malloc($226)|0);
       HEAP32[$3>>2] = $227;
       $228 = HEAP32[$3>>2]|0;
       $229 = HEAP32[$10>>2]|0;
       $230 = HEAP32[$4>>2]|0;
       (_fread($228,$229,1,$230)|0);
       break;
      }
     }
    }
   }
   $41 = HEAP32[$2>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $41;
   _TraceLog(2,19866,$vararg_buffer1);
  } else {
   $231 = HEAP8[$5>>0]|0;
   $232 = $231&255;
   $233 = ($232|0)==(52);
   if ($233) {
    _TraceLog(0,19914,$vararg_buffer4);
   }
  }
 } while(0);
 $234 = HEAP32[$4>>2]|0;
 (_fclose($234)|0);
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
 STACKTOP = sp;return;
}
function _LoadASTC($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 76|0;
 $3 = sp + 56|0;
 $4 = sp + 52|0;
 $5 = sp + 80|0;
 $6 = sp + 48|0;
 $7 = sp + 44|0;
 HEAP32[$2>>2] = $1;
 HEAP32[$3>>2] = 0;
 $8 = ((($3)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($3)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($3)) + 16|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$2>>2]|0;
 $13 = (_fopen($12,19628)|0);
 HEAP32[$4>>2] = $13;
 $14 = HEAP32[$4>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer>>2] = $16;
  _TraceLog(2,19631,$vararg_buffer);
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
  STACKTOP = sp;return;
 }
 $17 = HEAP32[$4>>2]|0;
 (_fread($5,16,1,$17)|0);
 $18 = ((($5)) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)!=(92);
 do {
  if ($21) {
   label = 7;
  } else {
   $22 = ((($5)) + 2|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($24|0)!=(161);
   if ($25) {
    label = 7;
   } else {
    $26 = ((($5)) + 1|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = ($28|0)!=(171);
    if ($29) {
     label = 7;
    } else {
     $30 = HEAP8[$5>>0]|0;
     $31 = $30&255;
     $32 = ($31|0)!=(19);
     if ($32) {
      label = 7;
     } else {
      $34 = ((($5)) + 7|0);
      $35 = ((($34)) + 2|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = $36&255;
      $38 = $37 << 16;
      $39 = 0 | $38;
      $40 = ((($5)) + 7|0);
      $41 = ((($40)) + 1|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42&255;
      $44 = $43 << 8;
      $45 = $39 | $44;
      $46 = ((($5)) + 7|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47&255;
      $49 = $45 | $48;
      $50 = ((($3)) + 4|0);
      HEAP32[$50>>2] = $49;
      $51 = ((($5)) + 10|0);
      $52 = ((($51)) + 2|0);
      $53 = HEAP8[$52>>0]|0;
      $54 = $53&255;
      $55 = $54 << 16;
      $56 = 0 | $55;
      $57 = ((($5)) + 10|0);
      $58 = ((($57)) + 1|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = $59&255;
      $61 = $60 << 8;
      $62 = $56 | $61;
      $63 = ((($5)) + 10|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64&255;
      $66 = $62 | $65;
      $67 = ((($3)) + 8|0);
      HEAP32[$67>>2] = $66;
      $68 = ((($3)) + 12|0);
      HEAP32[$68>>2] = 1;
      $69 = ((($3)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      HEAP32[$vararg_buffer5>>2] = $70;
      _TraceLog(3,19715,$vararg_buffer5);
      $71 = ((($3)) + 8|0);
      $72 = HEAP32[$71>>2]|0;
      HEAP32[$vararg_buffer8>>2] = $72;
      _TraceLog(3,19736,$vararg_buffer8);
      $73 = ((($5)) + 4|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = $74&255;
      $76 = ((($5)) + 5|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = $77&255;
      HEAP32[$vararg_buffer11>>2] = $75;
      $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
      HEAP32[$vararg_ptr14>>2] = $78;
      _TraceLog(3,19758,$vararg_buffer11);
      $79 = ((($5)) + 4|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = $80&255;
      $82 = ((($5)) + 5|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = $83&255;
      $85 = Math_imul($81, $84)|0;
      $86 = (128 / ($85|0))&-1;
      HEAP32[$6>>2] = $86;
      $87 = HEAP32[$6>>2]|0;
      $88 = ($87|0)==(8);
      $89 = HEAP32[$6>>2]|0;
      $90 = ($89|0)==(2);
      $or$cond = $88 | $90;
      if (!($or$cond)) {
       $111 = HEAP32[$2>>2]|0;
       HEAP32[$vararg_buffer15>>2] = $111;
       _TraceLog(2,19783,$vararg_buffer15);
       break;
      }
      $91 = ((($3)) + 4|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ((($3)) + 8|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = Math_imul($92, $94)|0;
      $96 = HEAP32[$6>>2]|0;
      $97 = Math_imul($95, $96)|0;
      $98 = (($97|0) / 8)&-1;
      HEAP32[$7>>2] = $98;
      $99 = HEAP32[$7>>2]|0;
      $100 = $99;
      $101 = (_malloc($100)|0);
      HEAP32[$3>>2] = $101;
      $102 = HEAP32[$3>>2]|0;
      $103 = HEAP32[$7>>2]|0;
      $104 = HEAP32[$4>>2]|0;
      (_fread($102,$103,1,$104)|0);
      $105 = HEAP32[$6>>2]|0;
      $106 = ($105|0)==(8);
      if ($106) {
       $107 = ((($3)) + 16|0);
       HEAP32[$107>>2] = 17;
       break;
      }
      $108 = HEAP32[$6>>2]|0;
      $109 = ($108|0)==(2);
      if ($109) {
       $110 = ((($3)) + 16|0);
       HEAP32[$110>>2] = 17;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $33 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $33;
  _TraceLog(2,19666,$vararg_buffer2);
 }
 $112 = HEAP32[$4>>2]|0;
 (_fclose($112)|0);
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;
 STACKTOP = sp;return;
}
function _stbi__fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = (_fopen($5,$6)|0);
 HEAP32[$4>>2] = $7;
 $8 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _stbi__err($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[8644] = $2;
 STACKTOP = sp;return 0;
}
function _stbi_load_from_file($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $5 = sp + 204|0;
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 192|0;
 $9 = sp + 188|0;
 $10 = sp + 184|0;
 $11 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $12 = HEAP32[$5>>2]|0;
 _stbi__start_file($11,$12);
 $13 = HEAP32[$6>>2]|0;
 $14 = HEAP32[$7>>2]|0;
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$9>>2]|0;
 $17 = (_stbi__load_flip($11,$13,$14,$15,$16)|0);
 HEAP32[$10>>2] = $17;
 $18 = HEAP32[$10>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $29 = HEAP32[$10>>2]|0;
  STACKTOP = sp;return ($29|0);
 }
 $20 = HEAP32[$5>>2]|0;
 $21 = ((($11)) + 172|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($11)) + 168|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $22;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (0 - ($27))|0;
 (_fseek($20,$28,1)|0);
 $29 = HEAP32[$10>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _stbi__start_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 _stbi__start_callbacks($4,5528,$5);
 STACKTOP = sp;return;
}
function _stbi__load_flip($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 44|0;
 $6 = sp + 40|0;
 $7 = sp + 36|0;
 $8 = sp + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = sp + 8|0;
 $15 = sp + 4|0;
 $16 = sp;
 $17 = sp + 48|0;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $18 = HEAP32[$5>>2]|0;
 $19 = HEAP32[$6>>2]|0;
 $20 = HEAP32[$7>>2]|0;
 $21 = HEAP32[$8>>2]|0;
 $22 = HEAP32[$9>>2]|0;
 $23 = (_stbi__load_main($18,$19,$20,$21,$22)|0);
 HEAP32[$10>>2] = $23;
 $24 = HEAP32[8643]|0;
 $25 = ($24|0)!=(0);
 $26 = HEAP32[$10>>2]|0;
 $27 = ($26|0)!=(0|0);
 $or$cond = $25 & $27;
 if (!($or$cond)) {
  $107 = HEAP32[$10>>2]|0;
  STACKTOP = sp;return ($107|0);
 }
 $28 = HEAP32[$6>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 HEAP32[$11>>2] = $29;
 $30 = HEAP32[$7>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$12>>2] = $31;
 $32 = HEAP32[$9>>2]|0;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = HEAP32[$9>>2]|0;
  $37 = $34;
 } else {
  $35 = HEAP32[$8>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = $36;
 }
 HEAP32[$13>>2] = $37;
 HEAP32[$14>>2] = 0;
 while(1) {
  $38 = HEAP32[$14>>2]|0;
  $39 = HEAP32[$12>>2]|0;
  $40 = $39 >> 1;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   break;
  }
  HEAP32[$15>>2] = 0;
  while(1) {
   $42 = HEAP32[$15>>2]|0;
   $43 = HEAP32[$11>>2]|0;
   $44 = ($42|0)<($43|0);
   if (!($44)) {
    break;
   }
   HEAP32[$16>>2] = 0;
   while(1) {
    $45 = HEAP32[$16>>2]|0;
    $46 = HEAP32[$13>>2]|0;
    $47 = ($45|0)<($46|0);
    if (!($47)) {
     break;
    }
    $48 = HEAP32[$14>>2]|0;
    $49 = HEAP32[$11>>2]|0;
    $50 = Math_imul($48, $49)|0;
    $51 = HEAP32[$15>>2]|0;
    $52 = (($50) + ($51))|0;
    $53 = HEAP32[$13>>2]|0;
    $54 = Math_imul($52, $53)|0;
    $55 = HEAP32[$16>>2]|0;
    $56 = (($54) + ($55))|0;
    $57 = HEAP32[$10>>2]|0;
    $58 = (($57) + ($56)|0);
    $59 = HEAP8[$58>>0]|0;
    HEAP8[$17>>0] = $59;
    $60 = HEAP32[$12>>2]|0;
    $61 = HEAP32[$14>>2]|0;
    $62 = (($60) - ($61))|0;
    $63 = (($62) - 1)|0;
    $64 = HEAP32[$11>>2]|0;
    $65 = Math_imul($63, $64)|0;
    $66 = HEAP32[$15>>2]|0;
    $67 = (($65) + ($66))|0;
    $68 = HEAP32[$13>>2]|0;
    $69 = Math_imul($67, $68)|0;
    $70 = HEAP32[$16>>2]|0;
    $71 = (($69) + ($70))|0;
    $72 = HEAP32[$10>>2]|0;
    $73 = (($72) + ($71)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = HEAP32[$14>>2]|0;
    $76 = HEAP32[$11>>2]|0;
    $77 = Math_imul($75, $76)|0;
    $78 = HEAP32[$15>>2]|0;
    $79 = (($77) + ($78))|0;
    $80 = HEAP32[$13>>2]|0;
    $81 = Math_imul($79, $80)|0;
    $82 = HEAP32[$16>>2]|0;
    $83 = (($81) + ($82))|0;
    $84 = HEAP32[$10>>2]|0;
    $85 = (($84) + ($83)|0);
    HEAP8[$85>>0] = $74;
    $86 = HEAP8[$17>>0]|0;
    $87 = HEAP32[$12>>2]|0;
    $88 = HEAP32[$14>>2]|0;
    $89 = (($87) - ($88))|0;
    $90 = (($89) - 1)|0;
    $91 = HEAP32[$11>>2]|0;
    $92 = Math_imul($90, $91)|0;
    $93 = HEAP32[$15>>2]|0;
    $94 = (($92) + ($93))|0;
    $95 = HEAP32[$13>>2]|0;
    $96 = Math_imul($94, $95)|0;
    $97 = HEAP32[$16>>2]|0;
    $98 = (($96) + ($97))|0;
    $99 = HEAP32[$10>>2]|0;
    $100 = (($99) + ($98)|0);
    HEAP8[$100>>0] = $86;
    $101 = HEAP32[$16>>2]|0;
    $102 = (($101) + 1)|0;
    HEAP32[$16>>2] = $102;
   }
   $103 = HEAP32[$15>>2]|0;
   $104 = (($103) + 1)|0;
   HEAP32[$15>>2] = $104;
  }
  $105 = HEAP32[$14>>2]|0;
  $106 = (($105) + 1)|0;
  HEAP32[$14>>2] = $106;
 }
 $107 = HEAP32[$10>>2]|0;
 STACKTOP = sp;return ($107|0);
}
function _stbi__load_main($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $11 = HEAP32[$6>>2]|0;
 $12 = (_stbi__jpeg_test($11)|0);
 $13 = ($12|0)!=(0);
 $14 = HEAP32[$6>>2]|0;
 if ($13) {
  $15 = HEAP32[$7>>2]|0;
  $16 = HEAP32[$8>>2]|0;
  $17 = HEAP32[$9>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (_stbi__jpeg_load($14,$15,$16,$17,$18)|0);
  HEAP32[$5>>2] = $19;
  $49 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($49|0);
 }
 $20 = (_stbi__png_test($14)|0);
 $21 = ($20|0)!=(0);
 $22 = HEAP32[$6>>2]|0;
 if ($21) {
  $23 = HEAP32[$7>>2]|0;
  $24 = HEAP32[$8>>2]|0;
  $25 = HEAP32[$9>>2]|0;
  $26 = HEAP32[$10>>2]|0;
  $27 = (_stbi__png_load($22,$23,$24,$25,$26)|0);
  HEAP32[$5>>2] = $27;
  $49 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($49|0);
 }
 $28 = (_stbi__bmp_test($22)|0);
 $29 = ($28|0)!=(0);
 $30 = HEAP32[$6>>2]|0;
 if ($29) {
  $31 = HEAP32[$7>>2]|0;
  $32 = HEAP32[$8>>2]|0;
  $33 = HEAP32[$9>>2]|0;
  $34 = HEAP32[$10>>2]|0;
  $35 = (_stbi__bmp_load($30,$31,$32,$33,$34)|0);
  HEAP32[$5>>2] = $35;
  $49 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($49|0);
 }
 $36 = (_stbi__tga_test($30)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = HEAP32[$6>>2]|0;
  $39 = HEAP32[$7>>2]|0;
  $40 = HEAP32[$8>>2]|0;
  $41 = HEAP32[$9>>2]|0;
  $42 = HEAP32[$10>>2]|0;
  $43 = (_stbi__tga_load($38,$39,$40,$41,$42)|0);
  HEAP32[$5>>2] = $43;
  $49 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($49|0);
 } else {
  $44 = (_stbi__err(20586)|0);
  $45 = ($44|0)!=(0);
  $46 = $45 ? 0 : 0;
  $47 = $46;
  $48 = $47;
  HEAP32[$5>>2] = $48;
  $49 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _stbi__jpeg_test($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(18208|0);
 $1 = sp + 18196|0;
 $2 = sp + 18192|0;
 $3 = sp;
 HEAP32[$1>>2] = $0;
 $4 = HEAP32[$1>>2]|0;
 HEAP32[$3>>2] = $4;
 _stbi__setup_jpeg($3);
 $5 = (_stbi__decode_jpeg_header($3,1)|0);
 HEAP32[$2>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 _stbi__rewind($6);
 $7 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _stbi__jpeg_load($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $12 = (_stbi__malloc(18192)|0);
 HEAP32[$11>>2] = $12;
 $13 = HEAP32[$5>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$11>>2]|0;
 _stbi__setup_jpeg($15);
 $16 = HEAP32[$11>>2]|0;
 $17 = HEAP32[$6>>2]|0;
 $18 = HEAP32[$7>>2]|0;
 $19 = HEAP32[$8>>2]|0;
 $20 = HEAP32[$9>>2]|0;
 $21 = (_load_jpeg_image($16,$17,$18,$19,$20)|0);
 HEAP32[$10>>2] = $21;
 $22 = HEAP32[$11>>2]|0;
 _free($22);
 $23 = HEAP32[$10>>2]|0;
 STACKTOP = sp;return ($23|0);
}
function _stbi__png_test($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_stbi__check_png_header($3)|0);
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 _stbi__rewind($5);
 $6 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _stbi__png_load($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 36|0;
 $6 = sp + 32|0;
 $7 = sp + 28|0;
 $8 = sp + 24|0;
 $9 = sp + 20|0;
 $10 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $11 = HEAP32[$5>>2]|0;
 HEAP32[$10>>2] = $11;
 $12 = HEAP32[$6>>2]|0;
 $13 = HEAP32[$7>>2]|0;
 $14 = HEAP32[$8>>2]|0;
 $15 = HEAP32[$9>>2]|0;
 $16 = (_stbi__do_png($10,$12,$13,$14,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function _stbi__bmp_test($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_stbi__bmp_test_raw($3)|0);
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 _stbi__rewind($5);
 $6 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _stbi__bmp_load($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1216|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1216|0);
 $5 = sp + 176|0;
 $6 = sp + 172|0;
 $7 = sp + 168|0;
 $8 = sp + 164|0;
 $9 = sp + 160|0;
 $10 = sp + 156|0;
 $11 = sp + 152|0;
 $12 = sp + 148|0;
 $13 = sp + 144|0;
 $14 = sp + 140|0;
 $15 = sp + 136|0;
 $16 = sp + 132|0;
 $17 = sp + 184|0;
 $18 = sp + 128|0;
 $19 = sp + 124|0;
 $20 = sp + 120|0;
 $21 = sp + 116|0;
 $22 = sp + 112|0;
 $23 = sp + 108|0;
 $24 = sp + 104|0;
 $25 = sp + 72|0;
 $26 = sp + 68|0;
 $27 = sp + 64|0;
 $28 = sp + 60|0;
 $29 = sp + 56|0;
 $30 = sp + 52|0;
 $31 = sp + 48|0;
 $32 = sp + 44|0;
 $33 = sp + 40|0;
 $34 = sp + 36|0;
 $35 = sp + 32|0;
 $36 = sp + 28|0;
 $37 = sp + 24|0;
 $38 = sp + 20|0;
 $39 = sp + 181|0;
 $40 = sp + 16|0;
 $41 = sp + 12|0;
 $42 = sp + 8|0;
 $43 = sp + 180|0;
 $44 = sp + 4|0;
 $45 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 HEAP32[$12>>2] = 0;
 HEAP32[$13>>2] = 0;
 HEAP32[$14>>2] = 0;
 HEAP32[$15>>2] = 0;
 HEAP32[$18>>2] = 0;
 $46 = ((($25)) + 28|0);
 HEAP32[$46>>2] = 255;
 $47 = HEAP32[$6>>2]|0;
 $48 = (_stbi__bmp_parse_header($47,$25)|0);
 $49 = ($48|0)==(0|0);
 if ($49) {
  HEAP32[$5>>2] = 0;
  $577 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($577|0);
 }
 $50 = HEAP32[$6>>2]|0;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)>(0);
 $54 = $53&1;
 HEAP32[$22>>2] = $54;
 $55 = HEAP32[$6>>2]|0;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (Math_abs(($57|0))|0);
 $59 = HEAP32[$6>>2]|0;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = ((($25)) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$12>>2] = $62;
 $63 = ((($25)) + 16|0);
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$13>>2] = $64;
 $65 = ((($25)) + 20|0);
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$14>>2] = $66;
 $67 = ((($25)) + 24|0);
 $68 = HEAP32[$67>>2]|0;
 HEAP32[$15>>2] = $68;
 $69 = ((($25)) + 28|0);
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$16>>2] = $70;
 $71 = ((($25)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(12);
 $74 = HEAP32[$25>>2]|0;
 if ($73) {
  $75 = ($74|0)<(24);
  if ($75) {
   $76 = ((($25)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) - 14)|0;
   $79 = (($78) - 24)|0;
   $80 = (($79|0) / 3)&-1;
   HEAP32[$18>>2] = $80;
  }
 } else {
  $81 = ($74|0)<(16);
  if ($81) {
   $82 = ((($25)) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) - 14)|0;
   $85 = ((($25)) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($84) - ($86))|0;
   $88 = $87 >> 2;
   HEAP32[$18>>2] = $88;
  }
 }
 $89 = HEAP32[$15>>2]|0;
 $90 = ($89|0)!=(0);
 $91 = $90 ? 4 : 3;
 $92 = HEAP32[$6>>2]|0;
 $93 = ((($92)) + 8|0);
 HEAP32[$93>>2] = $91;
 $94 = HEAP32[$10>>2]|0;
 $95 = ($94|0)!=(0);
 $96 = HEAP32[$10>>2]|0;
 $97 = ($96|0)>=(3);
 $or$cond = $95 & $97;
 if ($or$cond) {
  $98 = HEAP32[$10>>2]|0;
  HEAP32[$24>>2] = $98;
 } else {
  $99 = HEAP32[$6>>2]|0;
  $100 = ((($99)) + 8|0);
  $101 = HEAP32[$100>>2]|0;
  HEAP32[$24>>2] = $101;
 }
 $102 = HEAP32[$24>>2]|0;
 $103 = HEAP32[$6>>2]|0;
 $104 = HEAP32[$103>>2]|0;
 $105 = Math_imul($102, $104)|0;
 $106 = HEAP32[$6>>2]|0;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = Math_imul($105, $108)|0;
 $110 = (_stbi__malloc($109)|0);
 HEAP32[$11>>2] = $110;
 $111 = HEAP32[$11>>2]|0;
 $112 = ($111|0)!=(0|0);
 if (!($112)) {
  $113 = (_stbi__err(20616)|0);
  $114 = ($113|0)!=(0);
  $115 = $114 ? 0 : 0;
  $116 = $115;
  $117 = $116;
  HEAP32[$5>>2] = $117;
  $577 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($577|0);
 }
 $118 = HEAP32[$25>>2]|0;
 $119 = ($118|0)<(16);
 L19: do {
  if ($119) {
   HEAP32[$26>>2] = 0;
   $120 = HEAP32[$18>>2]|0;
   $121 = ($120|0)==(0);
   $122 = HEAP32[$18>>2]|0;
   $123 = ($122|0)>(256);
   $or$cond3 = $121 | $123;
   if ($or$cond3) {
    $124 = HEAP32[$11>>2]|0;
    _free($124);
    $125 = (_stbi__err(20750)|0);
    $126 = ($125|0)!=(0);
    $127 = $126 ? 0 : 0;
    $128 = $127;
    $129 = $128;
    HEAP32[$5>>2] = $129;
    $577 = HEAP32[$5>>2]|0;
    STACKTOP = sp;return ($577|0);
   }
   HEAP32[$19>>2] = 0;
   while(1) {
    $130 = HEAP32[$19>>2]|0;
    $131 = HEAP32[$18>>2]|0;
    $132 = ($130|0)<($131|0);
    $133 = HEAP32[$6>>2]|0;
    if (!($132)) {
     break;
    }
    $134 = (_stbi__get8($133)|0);
    $135 = HEAP32[$19>>2]|0;
    $136 = (($17) + ($135<<2)|0);
    $137 = ((($136)) + 2|0);
    HEAP8[$137>>0] = $134;
    $138 = HEAP32[$6>>2]|0;
    $139 = (_stbi__get8($138)|0);
    $140 = HEAP32[$19>>2]|0;
    $141 = (($17) + ($140<<2)|0);
    $142 = ((($141)) + 1|0);
    HEAP8[$142>>0] = $139;
    $143 = HEAP32[$6>>2]|0;
    $144 = (_stbi__get8($143)|0);
    $145 = HEAP32[$19>>2]|0;
    $146 = (($17) + ($145<<2)|0);
    HEAP8[$146>>0] = $144;
    $147 = ((($25)) + 8|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)!=(12);
    if ($149) {
     $150 = HEAP32[$6>>2]|0;
     (_stbi__get8($150)|0);
    }
    $151 = HEAP32[$19>>2]|0;
    $152 = (($17) + ($151<<2)|0);
    $153 = ((($152)) + 3|0);
    HEAP8[$153>>0] = -1;
    $154 = HEAP32[$19>>2]|0;
    $155 = (($154) + 1)|0;
    HEAP32[$19>>2] = $155;
   }
   $156 = ((($25)) + 4|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = (($157) - 14)|0;
   $159 = ((($25)) + 8|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($158) - ($160))|0;
   $162 = HEAP32[$18>>2]|0;
   $163 = ((($25)) + 8|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ($164|0)==(12);
   $166 = $165 ? 3 : 4;
   $167 = Math_imul($162, $166)|0;
   $168 = (($161) - ($167))|0;
   _stbi__skip($133,$168);
   $169 = HEAP32[$25>>2]|0;
   $170 = ($169|0)==(4);
   do {
    if ($170) {
     $171 = HEAP32[$6>>2]|0;
     $172 = HEAP32[$171>>2]|0;
     $173 = (($172) + 1)|0;
     $174 = $173 >>> 1;
     HEAP32[$21>>2] = $174;
    } else {
     $175 = HEAP32[$25>>2]|0;
     $176 = ($175|0)==(8);
     if ($176) {
      $177 = HEAP32[$6>>2]|0;
      $178 = HEAP32[$177>>2]|0;
      HEAP32[$21>>2] = $178;
      break;
     }
     $179 = HEAP32[$11>>2]|0;
     _free($179);
     $180 = (_stbi__err(20758)|0);
     $181 = ($180|0)!=(0);
     $182 = $181 ? 0 : 0;
     $183 = $182;
     $184 = $183;
     HEAP32[$5>>2] = $184;
     $577 = HEAP32[$5>>2]|0;
     STACKTOP = sp;return ($577|0);
    }
   } while(0);
   $185 = HEAP32[$21>>2]|0;
   $186 = (0 - ($185))|0;
   $187 = $186 & 3;
   HEAP32[$23>>2] = $187;
   HEAP32[$20>>2] = 0;
   while(1) {
    $188 = HEAP32[$20>>2]|0;
    $189 = HEAP32[$6>>2]|0;
    $190 = ((($189)) + 4|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ($188|0)<($191|0);
    if (!($192)) {
     break L19;
    }
    HEAP32[$19>>2] = 0;
    while(1) {
     $193 = HEAP32[$19>>2]|0;
     $194 = HEAP32[$6>>2]|0;
     $195 = HEAP32[$194>>2]|0;
     $196 = ($193|0)<($195|0);
     if (!($196)) {
      break;
     }
     $197 = HEAP32[$6>>2]|0;
     $198 = (_stbi__get8($197)|0);
     $199 = $198&255;
     HEAP32[$27>>2] = $199;
     HEAP32[$28>>2] = 0;
     $200 = HEAP32[$25>>2]|0;
     $201 = ($200|0)==(4);
     if ($201) {
      $202 = HEAP32[$27>>2]|0;
      $203 = $202 & 15;
      HEAP32[$28>>2] = $203;
      $204 = HEAP32[$27>>2]|0;
      $205 = $204 >> 4;
      HEAP32[$27>>2] = $205;
     }
     $206 = HEAP32[$27>>2]|0;
     $207 = (($17) + ($206<<2)|0);
     $208 = HEAP8[$207>>0]|0;
     $209 = HEAP32[$26>>2]|0;
     $210 = (($209) + 1)|0;
     HEAP32[$26>>2] = $210;
     $211 = HEAP32[$11>>2]|0;
     $212 = (($211) + ($209)|0);
     HEAP8[$212>>0] = $208;
     $213 = HEAP32[$27>>2]|0;
     $214 = (($17) + ($213<<2)|0);
     $215 = ((($214)) + 1|0);
     $216 = HEAP8[$215>>0]|0;
     $217 = HEAP32[$26>>2]|0;
     $218 = (($217) + 1)|0;
     HEAP32[$26>>2] = $218;
     $219 = HEAP32[$11>>2]|0;
     $220 = (($219) + ($217)|0);
     HEAP8[$220>>0] = $216;
     $221 = HEAP32[$27>>2]|0;
     $222 = (($17) + ($221<<2)|0);
     $223 = ((($222)) + 2|0);
     $224 = HEAP8[$223>>0]|0;
     $225 = HEAP32[$26>>2]|0;
     $226 = (($225) + 1)|0;
     HEAP32[$26>>2] = $226;
     $227 = HEAP32[$11>>2]|0;
     $228 = (($227) + ($225)|0);
     HEAP8[$228>>0] = $224;
     $229 = HEAP32[$24>>2]|0;
     $230 = ($229|0)==(4);
     if ($230) {
      $231 = HEAP32[$26>>2]|0;
      $232 = (($231) + 1)|0;
      HEAP32[$26>>2] = $232;
      $233 = HEAP32[$11>>2]|0;
      $234 = (($233) + ($231)|0);
      HEAP8[$234>>0] = -1;
     }
     $235 = HEAP32[$19>>2]|0;
     $236 = (($235) + 1)|0;
     $237 = HEAP32[$6>>2]|0;
     $238 = HEAP32[$237>>2]|0;
     $239 = ($236|0)==($238|0);
     if ($239) {
      break;
     }
     $240 = HEAP32[$25>>2]|0;
     $241 = ($240|0)==(8);
     if ($241) {
      $242 = HEAP32[$6>>2]|0;
      $243 = (_stbi__get8($242)|0);
      $244 = $243&255;
      $246 = $244;
     } else {
      $245 = HEAP32[$28>>2]|0;
      $246 = $245;
     }
     HEAP32[$27>>2] = $246;
     $247 = HEAP32[$27>>2]|0;
     $248 = (($17) + ($247<<2)|0);
     $249 = HEAP8[$248>>0]|0;
     $250 = HEAP32[$26>>2]|0;
     $251 = (($250) + 1)|0;
     HEAP32[$26>>2] = $251;
     $252 = HEAP32[$11>>2]|0;
     $253 = (($252) + ($250)|0);
     HEAP8[$253>>0] = $249;
     $254 = HEAP32[$27>>2]|0;
     $255 = (($17) + ($254<<2)|0);
     $256 = ((($255)) + 1|0);
     $257 = HEAP8[$256>>0]|0;
     $258 = HEAP32[$26>>2]|0;
     $259 = (($258) + 1)|0;
     HEAP32[$26>>2] = $259;
     $260 = HEAP32[$11>>2]|0;
     $261 = (($260) + ($258)|0);
     HEAP8[$261>>0] = $257;
     $262 = HEAP32[$27>>2]|0;
     $263 = (($17) + ($262<<2)|0);
     $264 = ((($263)) + 2|0);
     $265 = HEAP8[$264>>0]|0;
     $266 = HEAP32[$26>>2]|0;
     $267 = (($266) + 1)|0;
     HEAP32[$26>>2] = $267;
     $268 = HEAP32[$11>>2]|0;
     $269 = (($268) + ($266)|0);
     HEAP8[$269>>0] = $265;
     $270 = HEAP32[$24>>2]|0;
     $271 = ($270|0)==(4);
     if ($271) {
      $272 = HEAP32[$26>>2]|0;
      $273 = (($272) + 1)|0;
      HEAP32[$26>>2] = $273;
      $274 = HEAP32[$11>>2]|0;
      $275 = (($274) + ($272)|0);
      HEAP8[$275>>0] = -1;
     }
     $276 = HEAP32[$19>>2]|0;
     $277 = (($276) + 2)|0;
     HEAP32[$19>>2] = $277;
    }
    $278 = HEAP32[$6>>2]|0;
    $279 = HEAP32[$23>>2]|0;
    _stbi__skip($278,$279);
    $280 = HEAP32[$20>>2]|0;
    $281 = (($280) + 1)|0;
    HEAP32[$20>>2] = $281;
   }
  } else {
   HEAP32[$29>>2] = 0;
   HEAP32[$30>>2] = 0;
   HEAP32[$31>>2] = 0;
   HEAP32[$32>>2] = 0;
   HEAP32[$33>>2] = 0;
   HEAP32[$34>>2] = 0;
   HEAP32[$35>>2] = 0;
   HEAP32[$36>>2] = 0;
   HEAP32[$37>>2] = 0;
   HEAP32[$38>>2] = 0;
   $282 = HEAP32[$6>>2]|0;
   $283 = ((($25)) + 4|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = (($284) - 14)|0;
   $286 = ((($25)) + 8|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = (($285) - ($287))|0;
   _stbi__skip($282,$288);
   $289 = HEAP32[$25>>2]|0;
   $290 = ($289|0)==(24);
   do {
    if ($290) {
     $291 = HEAP32[$6>>2]|0;
     $292 = HEAP32[$291>>2]|0;
     $293 = ($292*3)|0;
     HEAP32[$21>>2] = $293;
    } else {
     $294 = HEAP32[$25>>2]|0;
     $295 = ($294|0)==(16);
     if ($295) {
      $296 = HEAP32[$6>>2]|0;
      $297 = HEAP32[$296>>2]|0;
      $298 = $297<<1;
      HEAP32[$21>>2] = $298;
      break;
     } else {
      HEAP32[$21>>2] = 0;
      break;
     }
    }
   } while(0);
   $299 = HEAP32[$21>>2]|0;
   $300 = (0 - ($299))|0;
   $301 = $300 & 3;
   HEAP32[$23>>2] = $301;
   $302 = HEAP32[$25>>2]|0;
   $303 = ($302|0)==(24);
   if ($303) {
    HEAP32[$38>>2] = 1;
   } else {
    $304 = HEAP32[$25>>2]|0;
    $305 = ($304|0)==(32);
    if ($305) {
     $306 = HEAP32[$14>>2]|0;
     $307 = ($306|0)==(255);
     $308 = HEAP32[$13>>2]|0;
     $309 = ($308|0)==(65280);
     $or$cond5 = $307 & $309;
     $310 = HEAP32[$12>>2]|0;
     $311 = ($310|0)==(16711680);
     $or$cond7 = $or$cond5 & $311;
     $312 = HEAP32[$15>>2]|0;
     $313 = ($312|0)==(-16777216);
     $or$cond9 = $or$cond7 & $313;
     if ($or$cond9) {
      HEAP32[$38>>2] = 2;
     }
    }
   }
   $314 = HEAP32[$38>>2]|0;
   $315 = ($314|0)!=(0);
   do {
    if (!($315)) {
     $316 = HEAP32[$12>>2]|0;
     $317 = ($316|0)!=(0);
     $318 = HEAP32[$13>>2]|0;
     $319 = ($318|0)!=(0);
     $or$cond11 = $317 & $319;
     $320 = HEAP32[$14>>2]|0;
     $321 = ($320|0)!=(0);
     $or$cond13 = $or$cond11 & $321;
     if ($or$cond13) {
      $328 = HEAP32[$12>>2]|0;
      $329 = (_stbi__high_bit($328)|0);
      $330 = (($329) - 7)|0;
      HEAP32[$29>>2] = $330;
      $331 = HEAP32[$12>>2]|0;
      $332 = (_stbi__bitcount($331)|0);
      HEAP32[$33>>2] = $332;
      $333 = HEAP32[$13>>2]|0;
      $334 = (_stbi__high_bit($333)|0);
      $335 = (($334) - 7)|0;
      HEAP32[$30>>2] = $335;
      $336 = HEAP32[$13>>2]|0;
      $337 = (_stbi__bitcount($336)|0);
      HEAP32[$34>>2] = $337;
      $338 = HEAP32[$14>>2]|0;
      $339 = (_stbi__high_bit($338)|0);
      $340 = (($339) - 7)|0;
      HEAP32[$31>>2] = $340;
      $341 = HEAP32[$14>>2]|0;
      $342 = (_stbi__bitcount($341)|0);
      HEAP32[$35>>2] = $342;
      $343 = HEAP32[$15>>2]|0;
      $344 = (_stbi__high_bit($343)|0);
      $345 = (($344) - 7)|0;
      HEAP32[$32>>2] = $345;
      $346 = HEAP32[$15>>2]|0;
      $347 = (_stbi__bitcount($346)|0);
      HEAP32[$36>>2] = $347;
      break;
     }
     $322 = HEAP32[$11>>2]|0;
     _free($322);
     $323 = (_stbi__err(20766)|0);
     $324 = ($323|0)!=(0);
     $325 = $324 ? 0 : 0;
     $326 = $325;
     $327 = $326;
     HEAP32[$5>>2] = $327;
     $577 = HEAP32[$5>>2]|0;
     STACKTOP = sp;return ($577|0);
    }
   } while(0);
   HEAP32[$20>>2] = 0;
   while(1) {
    $348 = HEAP32[$20>>2]|0;
    $349 = HEAP32[$6>>2]|0;
    $350 = ((($349)) + 4|0);
    $351 = HEAP32[$350>>2]|0;
    $352 = ($348|0)<($351|0);
    if (!($352)) {
     break L19;
    }
    $353 = HEAP32[$38>>2]|0;
    $354 = ($353|0)!=(0);
    L85: do {
     if ($354) {
      HEAP32[$19>>2] = 0;
      while(1) {
       $355 = HEAP32[$19>>2]|0;
       $356 = HEAP32[$6>>2]|0;
       $357 = HEAP32[$356>>2]|0;
       $358 = ($355|0)<($357|0);
       if (!($358)) {
        break L85;
       }
       $359 = HEAP32[$6>>2]|0;
       $360 = (_stbi__get8($359)|0);
       $361 = HEAP32[$37>>2]|0;
       $362 = (($361) + 2)|0;
       $363 = HEAP32[$11>>2]|0;
       $364 = (($363) + ($362)|0);
       HEAP8[$364>>0] = $360;
       $365 = HEAP32[$6>>2]|0;
       $366 = (_stbi__get8($365)|0);
       $367 = HEAP32[$37>>2]|0;
       $368 = (($367) + 1)|0;
       $369 = HEAP32[$11>>2]|0;
       $370 = (($369) + ($368)|0);
       HEAP8[$370>>0] = $366;
       $371 = HEAP32[$6>>2]|0;
       $372 = (_stbi__get8($371)|0);
       $373 = HEAP32[$37>>2]|0;
       $374 = (($373) + 0)|0;
       $375 = HEAP32[$11>>2]|0;
       $376 = (($375) + ($374)|0);
       HEAP8[$376>>0] = $372;
       $377 = HEAP32[$37>>2]|0;
       $378 = (($377) + 3)|0;
       HEAP32[$37>>2] = $378;
       $379 = HEAP32[$38>>2]|0;
       $380 = ($379|0)==(2);
       if ($380) {
        $381 = HEAP32[$6>>2]|0;
        $382 = (_stbi__get8($381)|0);
        $383 = $382&255;
        $385 = $383;
       } else {
        $385 = 255;
       }
       $384 = $385&255;
       HEAP8[$39>>0] = $384;
       $386 = HEAP8[$39>>0]|0;
       $387 = $386&255;
       $388 = HEAP32[$16>>2]|0;
       $389 = $388 | $387;
       HEAP32[$16>>2] = $389;
       $390 = HEAP32[$24>>2]|0;
       $391 = ($390|0)==(4);
       if ($391) {
        $392 = HEAP8[$39>>0]|0;
        $393 = HEAP32[$37>>2]|0;
        $394 = (($393) + 1)|0;
        HEAP32[$37>>2] = $394;
        $395 = HEAP32[$11>>2]|0;
        $396 = (($395) + ($393)|0);
        HEAP8[$396>>0] = $392;
       }
       $397 = HEAP32[$19>>2]|0;
       $398 = (($397) + 1)|0;
       HEAP32[$19>>2] = $398;
      }
     } else {
      $399 = HEAP32[$25>>2]|0;
      HEAP32[$40>>2] = $399;
      HEAP32[$19>>2] = 0;
      while(1) {
       $400 = HEAP32[$19>>2]|0;
       $401 = HEAP32[$6>>2]|0;
       $402 = HEAP32[$401>>2]|0;
       $403 = ($400|0)<($402|0);
       if (!($403)) {
        break L85;
       }
       $404 = HEAP32[$40>>2]|0;
       $405 = ($404|0)==(16);
       $406 = HEAP32[$6>>2]|0;
       if ($405) {
        $407 = (_stbi__get16le($406)|0);
        $409 = $407;
       } else {
        $408 = (_stbi__get32le($406)|0);
        $409 = $408;
       }
       HEAP32[$41>>2] = $409;
       $410 = HEAP32[$41>>2]|0;
       $411 = HEAP32[$12>>2]|0;
       $412 = $410 & $411;
       $413 = HEAP32[$29>>2]|0;
       $414 = HEAP32[$33>>2]|0;
       $415 = (_stbi__shiftsigned($412,$413,$414)|0);
       $416 = $415 & 255;
       $417 = $416&255;
       $418 = HEAP32[$37>>2]|0;
       $419 = (($418) + 1)|0;
       HEAP32[$37>>2] = $419;
       $420 = HEAP32[$11>>2]|0;
       $421 = (($420) + ($418)|0);
       HEAP8[$421>>0] = $417;
       $422 = HEAP32[$41>>2]|0;
       $423 = HEAP32[$13>>2]|0;
       $424 = $422 & $423;
       $425 = HEAP32[$30>>2]|0;
       $426 = HEAP32[$34>>2]|0;
       $427 = (_stbi__shiftsigned($424,$425,$426)|0);
       $428 = $427 & 255;
       $429 = $428&255;
       $430 = HEAP32[$37>>2]|0;
       $431 = (($430) + 1)|0;
       HEAP32[$37>>2] = $431;
       $432 = HEAP32[$11>>2]|0;
       $433 = (($432) + ($430)|0);
       HEAP8[$433>>0] = $429;
       $434 = HEAP32[$41>>2]|0;
       $435 = HEAP32[$14>>2]|0;
       $436 = $434 & $435;
       $437 = HEAP32[$31>>2]|0;
       $438 = HEAP32[$35>>2]|0;
       $439 = (_stbi__shiftsigned($436,$437,$438)|0);
       $440 = $439 & 255;
       $441 = $440&255;
       $442 = HEAP32[$37>>2]|0;
       $443 = (($442) + 1)|0;
       HEAP32[$37>>2] = $443;
       $444 = HEAP32[$11>>2]|0;
       $445 = (($444) + ($442)|0);
       HEAP8[$445>>0] = $441;
       $446 = HEAP32[$15>>2]|0;
       $447 = ($446|0)!=(0);
       if ($447) {
        $448 = HEAP32[$41>>2]|0;
        $449 = HEAP32[$15>>2]|0;
        $450 = $448 & $449;
        $451 = HEAP32[$32>>2]|0;
        $452 = HEAP32[$36>>2]|0;
        $453 = (_stbi__shiftsigned($450,$451,$452)|0);
        $454 = $453;
       } else {
        $454 = 255;
       }
       HEAP32[$42>>2] = $454;
       $455 = HEAP32[$42>>2]|0;
       $456 = HEAP32[$16>>2]|0;
       $457 = $456 | $455;
       HEAP32[$16>>2] = $457;
       $458 = HEAP32[$24>>2]|0;
       $459 = ($458|0)==(4);
       if ($459) {
        $460 = HEAP32[$42>>2]|0;
        $461 = $460 & 255;
        $462 = $461&255;
        $463 = HEAP32[$37>>2]|0;
        $464 = (($463) + 1)|0;
        HEAP32[$37>>2] = $464;
        $465 = HEAP32[$11>>2]|0;
        $466 = (($465) + ($463)|0);
        HEAP8[$466>>0] = $462;
       }
       $467 = HEAP32[$19>>2]|0;
       $468 = (($467) + 1)|0;
       HEAP32[$19>>2] = $468;
      }
     }
    } while(0);
    $469 = HEAP32[$6>>2]|0;
    $470 = HEAP32[$23>>2]|0;
    _stbi__skip($469,$470);
    $471 = HEAP32[$20>>2]|0;
    $472 = (($471) + 1)|0;
    HEAP32[$20>>2] = $472;
   }
  }
 } while(0);
 $473 = HEAP32[$24>>2]|0;
 $474 = ($473|0)==(4);
 $475 = HEAP32[$16>>2]|0;
 $476 = ($475|0)==(0);
 $or$cond15 = $474 & $476;
 L112: do {
  if ($or$cond15) {
   $477 = HEAP32[$6>>2]|0;
   $478 = HEAP32[$477>>2]|0;
   $479 = $478<<2;
   $480 = HEAP32[$6>>2]|0;
   $481 = ((($480)) + 4|0);
   $482 = HEAP32[$481>>2]|0;
   $483 = Math_imul($479, $482)|0;
   $484 = (($483) - 1)|0;
   HEAP32[$19>>2] = $484;
   while(1) {
    $485 = HEAP32[$19>>2]|0;
    $486 = ($485|0)>=(0);
    if (!($486)) {
     break L112;
    }
    $487 = HEAP32[$19>>2]|0;
    $488 = HEAP32[$11>>2]|0;
    $489 = (($488) + ($487)|0);
    HEAP8[$489>>0] = -1;
    $490 = HEAP32[$19>>2]|0;
    $491 = (($490) - 4)|0;
    HEAP32[$19>>2] = $491;
   }
  }
 } while(0);
 $492 = HEAP32[$22>>2]|0;
 $493 = ($492|0)!=(0);
 L118: do {
  if ($493) {
   HEAP32[$20>>2] = 0;
   while(1) {
    $494 = HEAP32[$20>>2]|0;
    $495 = HEAP32[$6>>2]|0;
    $496 = ((($495)) + 4|0);
    $497 = HEAP32[$496>>2]|0;
    $498 = $497 >> 1;
    $499 = ($494|0)<($498|0);
    if (!($499)) {
     break L118;
    }
    $500 = HEAP32[$11>>2]|0;
    $501 = HEAP32[$20>>2]|0;
    $502 = HEAP32[$6>>2]|0;
    $503 = HEAP32[$502>>2]|0;
    $504 = Math_imul($501, $503)|0;
    $505 = HEAP32[$24>>2]|0;
    $506 = Math_imul($504, $505)|0;
    $507 = (($500) + ($506)|0);
    HEAP32[$44>>2] = $507;
    $508 = HEAP32[$11>>2]|0;
    $509 = HEAP32[$6>>2]|0;
    $510 = ((($509)) + 4|0);
    $511 = HEAP32[$510>>2]|0;
    $512 = (($511) - 1)|0;
    $513 = HEAP32[$20>>2]|0;
    $514 = (($512) - ($513))|0;
    $515 = HEAP32[$6>>2]|0;
    $516 = HEAP32[$515>>2]|0;
    $517 = Math_imul($514, $516)|0;
    $518 = HEAP32[$24>>2]|0;
    $519 = Math_imul($517, $518)|0;
    $520 = (($508) + ($519)|0);
    HEAP32[$45>>2] = $520;
    HEAP32[$19>>2] = 0;
    while(1) {
     $521 = HEAP32[$19>>2]|0;
     $522 = HEAP32[$6>>2]|0;
     $523 = HEAP32[$522>>2]|0;
     $524 = HEAP32[$24>>2]|0;
     $525 = Math_imul($523, $524)|0;
     $526 = ($521|0)<($525|0);
     if (!($526)) {
      break;
     }
     $527 = HEAP32[$19>>2]|0;
     $528 = HEAP32[$44>>2]|0;
     $529 = (($528) + ($527)|0);
     $530 = HEAP8[$529>>0]|0;
     HEAP8[$43>>0] = $530;
     $531 = HEAP32[$19>>2]|0;
     $532 = HEAP32[$45>>2]|0;
     $533 = (($532) + ($531)|0);
     $534 = HEAP8[$533>>0]|0;
     $535 = HEAP32[$19>>2]|0;
     $536 = HEAP32[$44>>2]|0;
     $537 = (($536) + ($535)|0);
     HEAP8[$537>>0] = $534;
     $538 = HEAP8[$43>>0]|0;
     $539 = HEAP32[$19>>2]|0;
     $540 = HEAP32[$45>>2]|0;
     $541 = (($540) + ($539)|0);
     HEAP8[$541>>0] = $538;
     $542 = HEAP32[$19>>2]|0;
     $543 = (($542) + 1)|0;
     HEAP32[$19>>2] = $543;
    }
    $544 = HEAP32[$20>>2]|0;
    $545 = (($544) + 1)|0;
    HEAP32[$20>>2] = $545;
   }
  }
 } while(0);
 $546 = HEAP32[$10>>2]|0;
 $547 = ($546|0)!=(0);
 if ($547) {
  $548 = HEAP32[$10>>2]|0;
  $549 = HEAP32[$24>>2]|0;
  $550 = ($548|0)!=($549|0);
  if ($550) {
   $551 = HEAP32[$11>>2]|0;
   $552 = HEAP32[$24>>2]|0;
   $553 = HEAP32[$10>>2]|0;
   $554 = HEAP32[$6>>2]|0;
   $555 = HEAP32[$554>>2]|0;
   $556 = HEAP32[$6>>2]|0;
   $557 = ((($556)) + 4|0);
   $558 = HEAP32[$557>>2]|0;
   $559 = (_stbi__convert_format($551,$552,$553,$555,$558)|0);
   HEAP32[$11>>2] = $559;
   $560 = HEAP32[$11>>2]|0;
   $561 = ($560|0)==(0|0);
   if ($561) {
    $562 = HEAP32[$11>>2]|0;
    HEAP32[$5>>2] = $562;
    $577 = HEAP32[$5>>2]|0;
    STACKTOP = sp;return ($577|0);
   }
  }
 }
 $563 = HEAP32[$6>>2]|0;
 $564 = HEAP32[$563>>2]|0;
 $565 = HEAP32[$7>>2]|0;
 HEAP32[$565>>2] = $564;
 $566 = HEAP32[$6>>2]|0;
 $567 = ((($566)) + 4|0);
 $568 = HEAP32[$567>>2]|0;
 $569 = HEAP32[$8>>2]|0;
 HEAP32[$569>>2] = $568;
 $570 = HEAP32[$9>>2]|0;
 $571 = ($570|0)!=(0|0);
 if ($571) {
  $572 = HEAP32[$6>>2]|0;
  $573 = ((($572)) + 8|0);
  $574 = HEAP32[$573>>2]|0;
  $575 = HEAP32[$9>>2]|0;
  HEAP32[$575>>2] = $574;
 }
 $576 = HEAP32[$11>>2]|0;
 HEAP32[$5>>2] = $576;
 $577 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($577|0);
}
function _stbi__tga_test($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 0;
 $5 = HEAP32[$1>>2]|0;
 (_stbi__get8($5)|0);
 $6 = HEAP32[$1>>2]|0;
 $7 = (_stbi__get8($6)|0);
 $8 = $7&255;
 HEAP32[$4>>2] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = ($9|0)>(1);
 do {
  if (!($10)) {
   $11 = HEAP32[$1>>2]|0;
   $12 = (_stbi__get8($11)|0);
   $13 = $12&255;
   HEAP32[$3>>2] = $13;
   $14 = HEAP32[$4>>2]|0;
   $15 = ($14|0)==(1);
   $16 = HEAP32[$3>>2]|0;
   if ($15) {
    $17 = ($16|0)!=(1);
    $18 = HEAP32[$3>>2]|0;
    $19 = ($18|0)!=(9);
    $or$cond = $17 & $19;
    if ($or$cond) {
     break;
    }
    $20 = HEAP32[$1>>2]|0;
    _stbi__skip($20,4);
    $21 = HEAP32[$1>>2]|0;
    $22 = (_stbi__get8($21)|0);
    $23 = $22&255;
    HEAP32[$3>>2] = $23;
    $24 = HEAP32[$3>>2]|0;
    $25 = ($24|0)!=(8);
    $26 = HEAP32[$3>>2]|0;
    $27 = ($26|0)!=(15);
    $or$cond3 = $25 & $27;
    $28 = HEAP32[$3>>2]|0;
    $29 = ($28|0)!=(16);
    $or$cond5 = $or$cond3 & $29;
    $30 = HEAP32[$3>>2]|0;
    $31 = ($30|0)!=(24);
    $or$cond7 = $or$cond5 & $31;
    $32 = HEAP32[$3>>2]|0;
    $33 = ($32|0)!=(32);
    $or$cond9 = $or$cond7 & $33;
    if ($or$cond9) {
     break;
    }
    $34 = HEAP32[$1>>2]|0;
    _stbi__skip($34,4);
   } else {
    $35 = ($16|0)!=(2);
    $36 = HEAP32[$3>>2]|0;
    $37 = ($36|0)!=(3);
    $or$cond11 = $35 & $37;
    $38 = HEAP32[$3>>2]|0;
    $39 = ($38|0)!=(10);
    $or$cond13 = $or$cond11 & $39;
    $40 = HEAP32[$3>>2]|0;
    $41 = ($40|0)!=(11);
    $or$cond15 = $or$cond13 & $41;
    if ($or$cond15) {
     break;
    }
    $42 = HEAP32[$1>>2]|0;
    _stbi__skip($42,9);
   }
   $43 = HEAP32[$1>>2]|0;
   $44 = (_stbi__get16le($43)|0);
   $45 = ($44|0)<(1);
   if (!($45)) {
    $46 = HEAP32[$1>>2]|0;
    $47 = (_stbi__get16le($46)|0);
    $48 = ($47|0)<(1);
    if (!($48)) {
     $49 = HEAP32[$1>>2]|0;
     $50 = (_stbi__get8($49)|0);
     $51 = $50&255;
     HEAP32[$3>>2] = $51;
     $52 = HEAP32[$4>>2]|0;
     $53 = ($52|0)==(1);
     $54 = HEAP32[$3>>2]|0;
     $55 = ($54|0)!=(8);
     $or$cond17 = $53 & $55;
     $56 = HEAP32[$3>>2]|0;
     $57 = ($56|0)!=(16);
     $or$cond19 = $or$cond17 & $57;
     if (!($or$cond19)) {
      $58 = HEAP32[$3>>2]|0;
      $59 = ($58|0)!=(8);
      $60 = HEAP32[$3>>2]|0;
      $61 = ($60|0)!=(15);
      $or$cond21 = $59 & $61;
      $62 = HEAP32[$3>>2]|0;
      $63 = ($62|0)!=(16);
      $or$cond23 = $or$cond21 & $63;
      $64 = HEAP32[$3>>2]|0;
      $65 = ($64|0)!=(24);
      $or$cond25 = $or$cond23 & $65;
      $66 = HEAP32[$3>>2]|0;
      $67 = ($66|0)!=(32);
      $or$cond27 = $or$cond25 & $67;
      if (!($or$cond27)) {
       HEAP32[$2>>2] = 1;
      }
     }
    }
   }
  }
 } while(0);
 $68 = HEAP32[$1>>2]|0;
 _stbi__rewind($68);
 $69 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($69|0);
}
function _stbi__tga_load($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $5 = sp + 140|0;
 $6 = sp + 136|0;
 $7 = sp + 132|0;
 $8 = sp + 128|0;
 $9 = sp + 124|0;
 $10 = sp + 120|0;
 $11 = sp + 116|0;
 $12 = sp + 112|0;
 $13 = sp + 108|0;
 $14 = sp + 104|0;
 $15 = sp + 100|0;
 $16 = sp + 96|0;
 $17 = sp + 92|0;
 $18 = sp + 88|0;
 $19 = sp + 84|0;
 $20 = sp + 80|0;
 $21 = sp + 76|0;
 $22 = sp + 72|0;
 $23 = sp + 68|0;
 $24 = sp + 64|0;
 $25 = sp + 60|0;
 $26 = sp + 56|0;
 $27 = sp + 52|0;
 $28 = sp + 48|0;
 $29 = sp + 44|0;
 $30 = sp + 148|0;
 $31 = sp + 40|0;
 $32 = sp + 36|0;
 $33 = sp + 32|0;
 $34 = sp + 28|0;
 $35 = sp + 24|0;
 $36 = sp + 20|0;
 $37 = sp + 16|0;
 $38 = sp + 12|0;
 $39 = sp + 8|0;
 $40 = sp + 4|0;
 $41 = sp + 145|0;
 $42 = sp;
 $43 = sp + 144|0;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $44 = HEAP32[$6>>2]|0;
 $45 = (_stbi__get8($44)|0);
 $46 = $45&255;
 HEAP32[$11>>2] = $46;
 $47 = HEAP32[$6>>2]|0;
 $48 = (_stbi__get8($47)|0);
 $49 = $48&255;
 HEAP32[$12>>2] = $49;
 $50 = HEAP32[$6>>2]|0;
 $51 = (_stbi__get8($50)|0);
 $52 = $51&255;
 HEAP32[$13>>2] = $52;
 HEAP32[$14>>2] = 0;
 $53 = HEAP32[$6>>2]|0;
 $54 = (_stbi__get16le($53)|0);
 HEAP32[$15>>2] = $54;
 $55 = HEAP32[$6>>2]|0;
 $56 = (_stbi__get16le($55)|0);
 HEAP32[$16>>2] = $56;
 $57 = HEAP32[$6>>2]|0;
 $58 = (_stbi__get8($57)|0);
 $59 = $58&255;
 HEAP32[$17>>2] = $59;
 $60 = HEAP32[$6>>2]|0;
 $61 = (_stbi__get16le($60)|0);
 HEAP32[$18>>2] = $61;
 $62 = HEAP32[$6>>2]|0;
 $63 = (_stbi__get16le($62)|0);
 HEAP32[$19>>2] = $63;
 $64 = HEAP32[$6>>2]|0;
 $65 = (_stbi__get16le($64)|0);
 HEAP32[$20>>2] = $65;
 $66 = HEAP32[$6>>2]|0;
 $67 = (_stbi__get16le($66)|0);
 HEAP32[$21>>2] = $67;
 $68 = HEAP32[$6>>2]|0;
 $69 = (_stbi__get8($68)|0);
 $70 = $69&255;
 HEAP32[$22>>2] = $70;
 HEAP32[$24>>2] = 0;
 $71 = HEAP32[$6>>2]|0;
 $72 = (_stbi__get8($71)|0);
 $73 = $72&255;
 HEAP32[$25>>2] = $73;
 HEAP32[$27>>2] = 0;
 HEAP32[$31>>2] = 0;
 HEAP32[$32>>2] = 0;
 HEAP32[$33>>2] = 1;
 $74 = HEAP32[$13>>2]|0;
 $75 = ($74|0)>=(8);
 if ($75) {
  $76 = HEAP32[$13>>2]|0;
  $77 = (($76) - 8)|0;
  HEAP32[$13>>2] = $77;
  HEAP32[$14>>2] = 1;
 }
 $78 = HEAP32[$25>>2]|0;
 $79 = $78 >> 5;
 $80 = $79 & 1;
 $81 = (1 - ($80))|0;
 HEAP32[$25>>2] = $81;
 $82 = HEAP32[$12>>2]|0;
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = HEAP32[$17>>2]|0;
  $85 = (_stbi__tga_get_comp($84,0,$24)|0);
  HEAP32[$23>>2] = $85;
 } else {
  $86 = HEAP32[$22>>2]|0;
  $87 = HEAP32[$13>>2]|0;
  $88 = ($87|0)==(3);
  $89 = $88&1;
  $90 = (_stbi__tga_get_comp($86,$89,$24)|0);
  HEAP32[$23>>2] = $90;
 }
 $91 = HEAP32[$23>>2]|0;
 $92 = ($91|0)!=(0);
 if (!($92)) {
  $93 = (_stbi__err(20605)|0);
  $94 = ($93|0)!=(0);
  $95 = $94 ? 0 : 0;
  $96 = $95;
  $97 = $96;
  HEAP32[$5>>2] = $97;
  $365 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($365|0);
 }
 $98 = HEAP32[$20>>2]|0;
 $99 = HEAP32[$7>>2]|0;
 HEAP32[$99>>2] = $98;
 $100 = HEAP32[$21>>2]|0;
 $101 = HEAP32[$8>>2]|0;
 HEAP32[$101>>2] = $100;
 $102 = HEAP32[$9>>2]|0;
 $103 = ($102|0)!=(0|0);
 if ($103) {
  $104 = HEAP32[$23>>2]|0;
  $105 = HEAP32[$9>>2]|0;
  HEAP32[$105>>2] = $104;
 }
 $106 = HEAP32[$20>>2]|0;
 $107 = HEAP32[$21>>2]|0;
 $108 = Math_imul($106, $107)|0;
 $109 = HEAP32[$23>>2]|0;
 $110 = Math_imul($108, $109)|0;
 $111 = (_stbi__malloc($110)|0);
 HEAP32[$26>>2] = $111;
 $112 = HEAP32[$26>>2]|0;
 $113 = ($112|0)!=(0|0);
 if (!($113)) {
  $114 = (_stbi__err(20616)|0);
  $115 = ($114|0)!=(0);
  $116 = $115 ? 0 : 0;
  $117 = $116;
  $118 = $117;
  HEAP32[$5>>2] = $118;
  $365 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($365|0);
 }
 $119 = HEAP32[$6>>2]|0;
 $120 = HEAP32[$11>>2]|0;
 _stbi__skip($119,$120);
 $121 = HEAP32[$12>>2]|0;
 $122 = ($121|0)!=(0);
 $123 = HEAP32[$14>>2]|0;
 $124 = ($123|0)!=(0);
 $or$cond = $122 | $124;
 $125 = HEAP32[$24>>2]|0;
 $126 = ($125|0)!=(0);
 $or$cond3 = $or$cond | $126;
 L19: do {
  if ($or$cond3) {
   $152 = HEAP32[$12>>2]|0;
   $153 = ($152|0)!=(0);
   L21: do {
    if ($153) {
     $154 = HEAP32[$6>>2]|0;
     $155 = HEAP32[$15>>2]|0;
     _stbi__skip($154,$155);
     $156 = HEAP32[$16>>2]|0;
     $157 = HEAP32[$23>>2]|0;
     $158 = Math_imul($156, $157)|0;
     $159 = (_stbi__malloc($158)|0);
     HEAP32[$27>>2] = $159;
     $160 = HEAP32[$27>>2]|0;
     $161 = ($160|0)!=(0|0);
     if (!($161)) {
      $162 = HEAP32[$26>>2]|0;
      _free($162);
      $163 = (_stbi__err(20616)|0);
      $164 = ($163|0)!=(0);
      $165 = $164 ? 0 : 0;
      $166 = $165;
      $167 = $166;
      HEAP32[$5>>2] = $167;
      $365 = HEAP32[$5>>2]|0;
      STACKTOP = sp;return ($365|0);
     }
     $168 = HEAP32[$24>>2]|0;
     $169 = ($168|0)!=(0);
     if (!($169)) {
      $183 = HEAP32[$6>>2]|0;
      $184 = HEAP32[$27>>2]|0;
      $185 = HEAP32[$16>>2]|0;
      $186 = HEAP32[$23>>2]|0;
      $187 = Math_imul($185, $186)|0;
      $188 = (_stbi__getn($183,$184,$187)|0);
      $189 = ($188|0)!=(0);
      if ($189) {
       break;
      }
      $190 = HEAP32[$26>>2]|0;
      _free($190);
      $191 = HEAP32[$27>>2]|0;
      _free($191);
      $192 = (_stbi__err(20684)|0);
      $193 = ($192|0)!=(0);
      $194 = $193 ? 0 : 0;
      $195 = $194;
      $196 = $195;
      HEAP32[$5>>2] = $196;
      $365 = HEAP32[$5>>2]|0;
      STACKTOP = sp;return ($365|0);
     }
     $170 = HEAP32[$27>>2]|0;
     HEAP32[$36>>2] = $170;
     $171 = HEAP32[$23>>2]|0;
     $172 = ($171|0)==(3);
     if (!($172)) {
      ___assert_fail((20625|0),(20646|0),5180,(20669|0));
      // unreachable;
     }
     HEAP32[$28>>2] = 0;
     while(1) {
      $173 = HEAP32[$28>>2]|0;
      $174 = HEAP32[$16>>2]|0;
      $175 = ($173|0)<($174|0);
      if (!($175)) {
       break L21;
      }
      $176 = HEAP32[$6>>2]|0;
      $177 = HEAP32[$36>>2]|0;
      _stbi__tga_read_rgb16($176,$177);
      $178 = HEAP32[$23>>2]|0;
      $179 = HEAP32[$36>>2]|0;
      $180 = (($179) + ($178)|0);
      HEAP32[$36>>2] = $180;
      $181 = HEAP32[$28>>2]|0;
      $182 = (($181) + 1)|0;
      HEAP32[$28>>2] = $182;
     }
    }
   } while(0);
   HEAP32[$28>>2] = 0;
   L39: while(1) {
    $197 = HEAP32[$28>>2]|0;
    $198 = HEAP32[$20>>2]|0;
    $199 = HEAP32[$21>>2]|0;
    $200 = Math_imul($198, $199)|0;
    $201 = ($197|0)<($200|0);
    if (!($201)) {
     break;
    }
    $202 = HEAP32[$14>>2]|0;
    $203 = ($202|0)!=(0);
    do {
     if ($203) {
      $204 = HEAP32[$31>>2]|0;
      $205 = ($204|0)==(0);
      if ($205) {
       $206 = HEAP32[$6>>2]|0;
       $207 = (_stbi__get8($206)|0);
       $208 = $207&255;
       HEAP32[$37>>2] = $208;
       $209 = HEAP32[$37>>2]|0;
       $210 = $209 & 127;
       $211 = (1 + ($210))|0;
       HEAP32[$31>>2] = $211;
       $212 = HEAP32[$37>>2]|0;
       $213 = $212 >> 7;
       HEAP32[$32>>2] = $213;
       HEAP32[$33>>2] = 1;
       break;
      }
      $214 = HEAP32[$32>>2]|0;
      $215 = ($214|0)!=(0);
      if (!($215)) {
       HEAP32[$33>>2] = 1;
      }
     } else {
      HEAP32[$33>>2] = 1;
     }
    } while(0);
    $216 = HEAP32[$33>>2]|0;
    $217 = ($216|0)!=(0);
    if ($217) {
     $218 = HEAP32[$12>>2]|0;
     $219 = ($218|0)!=(0);
     L52: do {
      if ($219) {
       $220 = HEAP32[$22>>2]|0;
       $221 = ($220|0)==(8);
       $222 = HEAP32[$6>>2]|0;
       if ($221) {
        $223 = (_stbi__get8($222)|0);
        $224 = $223&255;
        $226 = $224;
       } else {
        $225 = (_stbi__get16le($222)|0);
        $226 = $225;
       }
       HEAP32[$38>>2] = $226;
       $227 = HEAP32[$38>>2]|0;
       $228 = HEAP32[$16>>2]|0;
       $229 = ($227|0)>=($228|0);
       $$ = $229 ? 0 : $226;
       HEAP32[$38>>2] = $$;
       $230 = HEAP32[$23>>2]|0;
       $231 = HEAP32[$38>>2]|0;
       $232 = Math_imul($231, $230)|0;
       HEAP32[$38>>2] = $232;
       HEAP32[$29>>2] = 0;
       while(1) {
        $233 = HEAP32[$29>>2]|0;
        $234 = HEAP32[$23>>2]|0;
        $235 = ($233|0)<($234|0);
        if (!($235)) {
         break L52;
        }
        $236 = HEAP32[$38>>2]|0;
        $237 = HEAP32[$29>>2]|0;
        $238 = (($236) + ($237))|0;
        $239 = HEAP32[$27>>2]|0;
        $240 = (($239) + ($238)|0);
        $241 = HEAP8[$240>>0]|0;
        $242 = HEAP32[$29>>2]|0;
        $243 = (($30) + ($242)|0);
        HEAP8[$243>>0] = $241;
        $244 = HEAP32[$29>>2]|0;
        $245 = (($244) + 1)|0;
        HEAP32[$29>>2] = $245;
       }
      } else {
       $246 = HEAP32[$24>>2]|0;
       $247 = ($246|0)!=(0);
       if ($247) {
        $248 = HEAP32[$23>>2]|0;
        $249 = ($248|0)==(3);
        if (!($249)) {
         label = 48;
         break L39;
        }
        $250 = HEAP32[$6>>2]|0;
        _stbi__tga_read_rgb16($250,$30);
        break;
       }
       HEAP32[$29>>2] = 0;
       while(1) {
        $251 = HEAP32[$29>>2]|0;
        $252 = HEAP32[$23>>2]|0;
        $253 = ($251|0)<($252|0);
        if (!($253)) {
         break L52;
        }
        $254 = HEAP32[$6>>2]|0;
        $255 = (_stbi__get8($254)|0);
        $256 = HEAP32[$29>>2]|0;
        $257 = (($30) + ($256)|0);
        HEAP8[$257>>0] = $255;
        $258 = HEAP32[$29>>2]|0;
        $259 = (($258) + 1)|0;
        HEAP32[$29>>2] = $259;
       }
      }
     } while(0);
     HEAP32[$33>>2] = 0;
    }
    HEAP32[$29>>2] = 0;
    while(1) {
     $260 = HEAP32[$29>>2]|0;
     $261 = HEAP32[$23>>2]|0;
     $262 = ($260|0)<($261|0);
     if (!($262)) {
      break;
     }
     $263 = HEAP32[$29>>2]|0;
     $264 = (($30) + ($263)|0);
     $265 = HEAP8[$264>>0]|0;
     $266 = HEAP32[$28>>2]|0;
     $267 = HEAP32[$23>>2]|0;
     $268 = Math_imul($266, $267)|0;
     $269 = HEAP32[$29>>2]|0;
     $270 = (($268) + ($269))|0;
     $271 = HEAP32[$26>>2]|0;
     $272 = (($271) + ($270)|0);
     HEAP8[$272>>0] = $265;
     $273 = HEAP32[$29>>2]|0;
     $274 = (($273) + 1)|0;
     HEAP32[$29>>2] = $274;
    }
    $275 = HEAP32[$31>>2]|0;
    $276 = (($275) + -1)|0;
    HEAP32[$31>>2] = $276;
    $277 = HEAP32[$28>>2]|0;
    $278 = (($277) + 1)|0;
    HEAP32[$28>>2] = $278;
   }
   if ((label|0) == 48) {
    ___assert_fail((20625|0),(20646|0),5229,(20669|0));
    // unreachable;
   }
   $279 = HEAP32[$25>>2]|0;
   $280 = ($279|0)!=(0);
   L78: do {
    if ($280) {
     HEAP32[$29>>2] = 0;
     while(1) {
      $281 = HEAP32[$29>>2]|0;
      $282 = $281<<1;
      $283 = HEAP32[$21>>2]|0;
      $284 = ($282|0)<($283|0);
      if (!($284)) {
       break L78;
      }
      $285 = HEAP32[$29>>2]|0;
      $286 = HEAP32[$20>>2]|0;
      $287 = Math_imul($285, $286)|0;
      $288 = HEAP32[$23>>2]|0;
      $289 = Math_imul($287, $288)|0;
      HEAP32[$39>>2] = $289;
      $290 = HEAP32[$21>>2]|0;
      $291 = (($290) - 1)|0;
      $292 = HEAP32[$29>>2]|0;
      $293 = (($291) - ($292))|0;
      $294 = HEAP32[$20>>2]|0;
      $295 = Math_imul($293, $294)|0;
      $296 = HEAP32[$23>>2]|0;
      $297 = Math_imul($295, $296)|0;
      HEAP32[$40>>2] = $297;
      $298 = HEAP32[$20>>2]|0;
      $299 = HEAP32[$23>>2]|0;
      $300 = Math_imul($298, $299)|0;
      HEAP32[$28>>2] = $300;
      while(1) {
       $301 = HEAP32[$28>>2]|0;
       $302 = ($301|0)>(0);
       if (!($302)) {
        break;
       }
       $303 = HEAP32[$39>>2]|0;
       $304 = HEAP32[$26>>2]|0;
       $305 = (($304) + ($303)|0);
       $306 = HEAP8[$305>>0]|0;
       HEAP8[$41>>0] = $306;
       $307 = HEAP32[$40>>2]|0;
       $308 = HEAP32[$26>>2]|0;
       $309 = (($308) + ($307)|0);
       $310 = HEAP8[$309>>0]|0;
       $311 = HEAP32[$39>>2]|0;
       $312 = HEAP32[$26>>2]|0;
       $313 = (($312) + ($311)|0);
       HEAP8[$313>>0] = $310;
       $314 = HEAP8[$41>>0]|0;
       $315 = HEAP32[$40>>2]|0;
       $316 = HEAP32[$26>>2]|0;
       $317 = (($316) + ($315)|0);
       HEAP8[$317>>0] = $314;
       $318 = HEAP32[$39>>2]|0;
       $319 = (($318) + 1)|0;
       HEAP32[$39>>2] = $319;
       $320 = HEAP32[$40>>2]|0;
       $321 = (($320) + 1)|0;
       HEAP32[$40>>2] = $321;
       $322 = HEAP32[$28>>2]|0;
       $323 = (($322) + -1)|0;
       HEAP32[$28>>2] = $323;
      }
      $324 = HEAP32[$29>>2]|0;
      $325 = (($324) + 1)|0;
      HEAP32[$29>>2] = $325;
     }
    }
   } while(0);
   $326 = HEAP32[$27>>2]|0;
   $327 = ($326|0)!=(0|0);
   if ($327) {
    $328 = HEAP32[$27>>2]|0;
    _free($328);
   }
  } else {
   HEAP32[$28>>2] = 0;
   while(1) {
    $127 = HEAP32[$28>>2]|0;
    $128 = HEAP32[$21>>2]|0;
    $129 = ($127|0)<($128|0);
    if (!($129)) {
     break L19;
    }
    $130 = HEAP32[$25>>2]|0;
    $131 = ($130|0)!=(0);
    if ($131) {
     $132 = HEAP32[$21>>2]|0;
     $133 = HEAP32[$28>>2]|0;
     $134 = (($132) - ($133))|0;
     $135 = (($134) - 1)|0;
     $137 = $135;
    } else {
     $136 = HEAP32[$28>>2]|0;
     $137 = $136;
    }
    HEAP32[$34>>2] = $137;
    $138 = HEAP32[$26>>2]|0;
    $139 = HEAP32[$34>>2]|0;
    $140 = HEAP32[$20>>2]|0;
    $141 = Math_imul($139, $140)|0;
    $142 = HEAP32[$23>>2]|0;
    $143 = Math_imul($141, $142)|0;
    $144 = (($138) + ($143)|0);
    HEAP32[$35>>2] = $144;
    $145 = HEAP32[$6>>2]|0;
    $146 = HEAP32[$35>>2]|0;
    $147 = HEAP32[$20>>2]|0;
    $148 = HEAP32[$23>>2]|0;
    $149 = Math_imul($147, $148)|0;
    (_stbi__getn($145,$146,$149)|0);
    $150 = HEAP32[$28>>2]|0;
    $151 = (($150) + 1)|0;
    HEAP32[$28>>2] = $151;
   }
  }
 } while(0);
 $329 = HEAP32[$23>>2]|0;
 $330 = ($329|0)<(3);
 $331 = HEAP32[$24>>2]|0;
 $332 = ($331|0)!=(0);
 $or$cond5 = $330 | $332;
 L98: do {
  if (!($or$cond5)) {
   $333 = HEAP32[$26>>2]|0;
   HEAP32[$42>>2] = $333;
   HEAP32[$28>>2] = 0;
   while(1) {
    $334 = HEAP32[$28>>2]|0;
    $335 = HEAP32[$20>>2]|0;
    $336 = HEAP32[$21>>2]|0;
    $337 = Math_imul($335, $336)|0;
    $338 = ($334|0)<($337|0);
    if (!($338)) {
     break L98;
    }
    $339 = HEAP32[$42>>2]|0;
    $340 = HEAP8[$339>>0]|0;
    HEAP8[$43>>0] = $340;
    $341 = HEAP32[$42>>2]|0;
    $342 = ((($341)) + 2|0);
    $343 = HEAP8[$342>>0]|0;
    $344 = HEAP32[$42>>2]|0;
    HEAP8[$344>>0] = $343;
    $345 = HEAP8[$43>>0]|0;
    $346 = HEAP32[$42>>2]|0;
    $347 = ((($346)) + 2|0);
    HEAP8[$347>>0] = $345;
    $348 = HEAP32[$23>>2]|0;
    $349 = HEAP32[$42>>2]|0;
    $350 = (($349) + ($348)|0);
    HEAP32[$42>>2] = $350;
    $351 = HEAP32[$28>>2]|0;
    $352 = (($351) + 1)|0;
    HEAP32[$28>>2] = $352;
   }
  }
 } while(0);
 $353 = HEAP32[$10>>2]|0;
 $354 = ($353|0)!=(0);
 if ($354) {
  $355 = HEAP32[$10>>2]|0;
  $356 = HEAP32[$23>>2]|0;
  $357 = ($355|0)!=($356|0);
  if ($357) {
   $358 = HEAP32[$26>>2]|0;
   $359 = HEAP32[$23>>2]|0;
   $360 = HEAP32[$10>>2]|0;
   $361 = HEAP32[$20>>2]|0;
   $362 = HEAP32[$21>>2]|0;
   $363 = (_stbi__convert_format($358,$359,$360,$361,$362)|0);
   HEAP32[$26>>2] = $363;
  }
 }
 HEAP32[$19>>2] = 0;
 HEAP32[$18>>2] = 0;
 HEAP32[$17>>2] = 0;
 HEAP32[$16>>2] = 0;
 HEAP32[$15>>2] = 0;
 $364 = HEAP32[$26>>2]|0;
 HEAP32[$5>>2] = $364;
 $365 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($365|0);
}
function _stbi__get8($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 168|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($6)) + 172|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5>>>0)<($8>>>0);
 $10 = HEAP32[$2>>2]|0;
 if ($9) {
  $11 = ((($10)) + 168|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 1|0);
  HEAP32[$11>>2] = $13;
  $14 = HEAP8[$12>>0]|0;
  HEAP8[$1>>0] = $14;
  $24 = HEAP8[$1>>0]|0;
  STACKTOP = sp;return ($24|0);
 }
 $15 = ((($10)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = HEAP32[$2>>2]|0;
  _stbi__refill_buffer($18);
  $19 = HEAP32[$2>>2]|0;
  $20 = ((($19)) + 168|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 1|0);
  HEAP32[$20>>2] = $22;
  $23 = HEAP8[$21>>0]|0;
  HEAP8[$1>>0] = $23;
  $24 = HEAP8[$1>>0]|0;
  STACKTOP = sp;return ($24|0);
 } else {
  HEAP8[$1>>0] = 0;
  $24 = HEAP8[$1>>0]|0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _stbi__get16le($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_stbi__get8($3)|0);
 $5 = $4&255;
 HEAP32[$2>>2] = $5;
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (_stbi__get8($7)|0);
 $9 = $8&255;
 $10 = $9 << 8;
 $11 = (($6) + ($10))|0;
 STACKTOP = sp;return ($11|0);
}
function _stbi__tga_get_comp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = HEAP32[$6>>2]|0;
  HEAP32[$9>>2] = 0;
 }
 $10 = HEAP32[$4>>2]|0;
 switch ($10|0) {
 case 8:  {
  HEAP32[$3>>2] = 1;
  break;
 }
 case 16:  {
  $11 = HEAP32[$5>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   HEAP32[$3>>2] = 2;
  } else {
   label = 7;
  }
  break;
 }
 case 15:  {
  label = 7;
  break;
 }
 case 32: case 24:  {
  $16 = HEAP32[$4>>2]|0;
  $17 = (($16|0) / 8)&-1;
  HEAP32[$3>>2] = $17;
  break;
 }
 default: {
  HEAP32[$3>>2] = 0;
 }
 }
 if ((label|0) == 7) {
  $13 = HEAP32[$6>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = HEAP32[$6>>2]|0;
   HEAP32[$15>>2] = 1;
  }
  HEAP32[$3>>2] = 3;
 }
 $18 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($18|0);
}
function _stbi__malloc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_malloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _stbi__skip($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)<(0);
 $7 = HEAP32[$2>>2]|0;
 if ($6) {
  $8 = ((($7)) + 172|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$2>>2]|0;
  $11 = ((($10)) + 168|0);
  HEAP32[$11>>2] = $9;
  STACKTOP = sp;return;
 }
 $12 = ((($7)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = HEAP32[$2>>2]|0;
  $16 = ((($15)) + 172|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$2>>2]|0;
  $19 = ((($18)) + 168|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $17;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  HEAP32[$4>>2] = $23;
  $24 = HEAP32[$4>>2]|0;
  $25 = HEAP32[$3>>2]|0;
  $26 = ($24|0)<($25|0);
  if ($26) {
   $27 = HEAP32[$2>>2]|0;
   $28 = ((($27)) + 172|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$2>>2]|0;
   $31 = ((($30)) + 168|0);
   HEAP32[$31>>2] = $29;
   $32 = HEAP32[$2>>2]|0;
   $33 = ((($32)) + 16|0);
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[$2>>2]|0;
   $37 = ((($36)) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = (($39) - ($40))|0;
   FUNCTION_TABLE_vii[$35 & 127]($38,$41);
   STACKTOP = sp;return;
  }
 }
 $42 = HEAP32[$3>>2]|0;
 $43 = HEAP32[$2>>2]|0;
 $44 = ((($43)) + 168|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($42)|0);
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function _stbi__getn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 $10 = HEAP32[$4>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = HEAP32[$4>>2]|0;
  $15 = ((($14)) + 172|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$4>>2]|0;
  $18 = ((($17)) + 168|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $16;
  $21 = $19;
  $22 = (($20) - ($21))|0;
  HEAP32[$7>>2] = $22;
  $23 = HEAP32[$7>>2]|0;
  $24 = HEAP32[$6>>2]|0;
  $25 = ($23|0)<($24|0);
  if ($25) {
   $26 = HEAP32[$5>>2]|0;
   $27 = HEAP32[$4>>2]|0;
   $28 = ((($27)) + 168|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$7>>2]|0;
   _memcpy(($26|0),($29|0),($30|0))|0;
   $31 = HEAP32[$4>>2]|0;
   $32 = ((($31)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$4>>2]|0;
   $35 = ((($34)) + 28|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = HEAP32[$5>>2]|0;
   $38 = HEAP32[$7>>2]|0;
   $39 = (($37) + ($38)|0);
   $40 = HEAP32[$6>>2]|0;
   $41 = HEAP32[$7>>2]|0;
   $42 = (($40) - ($41))|0;
   $43 = (FUNCTION_TABLE_iiii[$33 & 31]($36,$39,$42)|0);
   HEAP32[$9>>2] = $43;
   $44 = HEAP32[$9>>2]|0;
   $45 = HEAP32[$6>>2]|0;
   $46 = HEAP32[$7>>2]|0;
   $47 = (($45) - ($46))|0;
   $48 = ($44|0)==($47|0);
   $49 = $48&1;
   HEAP32[$8>>2] = $49;
   $50 = HEAP32[$4>>2]|0;
   $51 = ((($50)) + 172|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[$4>>2]|0;
   $54 = ((($53)) + 168|0);
   HEAP32[$54>>2] = $52;
   $55 = HEAP32[$8>>2]|0;
   HEAP32[$3>>2] = $55;
   $75 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($75|0);
  }
 }
 $56 = HEAP32[$4>>2]|0;
 $57 = ((($56)) + 168|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$6>>2]|0;
 $60 = (($58) + ($59)|0);
 $61 = HEAP32[$4>>2]|0;
 $62 = ((($61)) + 172|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($60>>>0)<=($63>>>0);
 if ($64) {
  $65 = HEAP32[$5>>2]|0;
  $66 = HEAP32[$4>>2]|0;
  $67 = ((($66)) + 168|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[$6>>2]|0;
  _memcpy(($65|0),($68|0),($69|0))|0;
  $70 = HEAP32[$6>>2]|0;
  $71 = HEAP32[$4>>2]|0;
  $72 = ((($71)) + 168|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($70)|0);
  HEAP32[$72>>2] = $74;
  HEAP32[$3>>2] = 1;
  $75 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($75|0);
 } else {
  HEAP32[$3>>2] = 0;
  $75 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _stbi__tga_read_rgb16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 22|0;
 $5 = sp + 20|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $9 = HEAP32[$2>>2]|0;
 $10 = (_stbi__get16le($9)|0);
 $11 = $10&65535;
 HEAP16[$4>>1] = $11;
 HEAP16[$5>>1] = 31;
 $12 = HEAP16[$4>>1]|0;
 $13 = $12&65535;
 $14 = $13 >> 10;
 $15 = HEAP16[$5>>1]|0;
 $16 = $15&65535;
 $17 = $14 & $16;
 HEAP32[$6>>2] = $17;
 $18 = HEAP16[$4>>1]|0;
 $19 = $18&65535;
 $20 = $19 >> 5;
 $21 = HEAP16[$5>>1]|0;
 $22 = $21&65535;
 $23 = $20 & $22;
 HEAP32[$7>>2] = $23;
 $24 = HEAP16[$4>>1]|0;
 $25 = $24&65535;
 $26 = HEAP16[$5>>1]|0;
 $27 = $26&65535;
 $28 = $25 & $27;
 HEAP32[$8>>2] = $28;
 $29 = HEAP32[$6>>2]|0;
 $30 = ($29*255)|0;
 $31 = (($30|0) / 31)&-1;
 $32 = $31&255;
 $33 = HEAP32[$3>>2]|0;
 HEAP8[$33>>0] = $32;
 $34 = HEAP32[$7>>2]|0;
 $35 = ($34*255)|0;
 $36 = (($35|0) / 31)&-1;
 $37 = $36&255;
 $38 = HEAP32[$3>>2]|0;
 $39 = ((($38)) + 1|0);
 HEAP8[$39>>0] = $37;
 $40 = HEAP32[$8>>2]|0;
 $41 = ($40*255)|0;
 $42 = (($41|0) / 31)&-1;
 $43 = $42&255;
 $44 = HEAP32[$3>>2]|0;
 $45 = ((($44)) + 2|0);
 HEAP8[$45>>0] = $43;
 STACKTOP = sp;return;
}
function _stbi__convert_format($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 40|0;
 $6 = sp + 36|0;
 $7 = sp + 32|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $16 = HEAP32[$8>>2]|0;
 $17 = HEAP32[$7>>2]|0;
 $18 = ($16|0)==($17|0);
 if ($18) {
  $19 = HEAP32[$6>>2]|0;
  HEAP32[$5>>2] = $19;
  $312 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($312|0);
 }
 $20 = HEAP32[$8>>2]|0;
 $21 = ($20|0)>=(1);
 $22 = HEAP32[$8>>2]|0;
 $23 = ($22|0)<=(4);
 $or$cond = $21 & $23;
 if (!($or$cond)) {
  ___assert_fail((20696|0),(20646|0),1355,(20727|0));
  // unreachable;
 }
 $24 = HEAP32[$8>>2]|0;
 $25 = HEAP32[$9>>2]|0;
 $26 = Math_imul($24, $25)|0;
 $27 = HEAP32[$10>>2]|0;
 $28 = Math_imul($26, $27)|0;
 $29 = (_stbi__malloc($28)|0);
 HEAP32[$13>>2] = $29;
 $30 = HEAP32[$13>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $32 = HEAP32[$6>>2]|0;
  _free($32);
  $33 = (_stbi__err(20616)|0);
  $34 = ($33|0)!=(0);
  $35 = $34 ? 0 : 0;
  $36 = $35;
  $37 = $36;
  HEAP32[$5>>2] = $37;
  $312 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($312|0);
 }
 HEAP32[$12>>2] = 0;
 L12: while(1) {
  $38 = HEAP32[$12>>2]|0;
  $39 = HEAP32[$10>>2]|0;
  $40 = ($38|0)<($39|0);
  $41 = HEAP32[$6>>2]|0;
  if (!($40)) {
   break;
  }
  $42 = HEAP32[$12>>2]|0;
  $43 = HEAP32[$9>>2]|0;
  $44 = Math_imul($42, $43)|0;
  $45 = HEAP32[$7>>2]|0;
  $46 = Math_imul($44, $45)|0;
  $47 = (($41) + ($46)|0);
  HEAP32[$14>>2] = $47;
  $48 = HEAP32[$13>>2]|0;
  $49 = HEAP32[$12>>2]|0;
  $50 = HEAP32[$9>>2]|0;
  $51 = Math_imul($49, $50)|0;
  $52 = HEAP32[$8>>2]|0;
  $53 = Math_imul($51, $52)|0;
  $54 = (($48) + ($53)|0);
  HEAP32[$15>>2] = $54;
  $55 = HEAP32[$7>>2]|0;
  $56 = $55<<3;
  $57 = HEAP32[$8>>2]|0;
  $58 = (($56) + ($57))|0;
  L15: do {
   switch ($58|0) {
   case 10:  {
    $59 = HEAP32[$9>>2]|0;
    $60 = (($59) - 1)|0;
    HEAP32[$11>>2] = $60;
    while(1) {
     $61 = HEAP32[$11>>2]|0;
     $62 = ($61|0)>=(0);
     if (!($62)) {
      break L15;
     }
     $63 = HEAP32[$14>>2]|0;
     $64 = HEAP8[$63>>0]|0;
     $65 = HEAP32[$15>>2]|0;
     HEAP8[$65>>0] = $64;
     $66 = HEAP32[$15>>2]|0;
     $67 = ((($66)) + 1|0);
     HEAP8[$67>>0] = -1;
     $68 = HEAP32[$11>>2]|0;
     $69 = (($68) + -1)|0;
     HEAP32[$11>>2] = $69;
     $70 = HEAP32[$14>>2]|0;
     $71 = ((($70)) + 1|0);
     HEAP32[$14>>2] = $71;
     $72 = HEAP32[$15>>2]|0;
     $73 = ((($72)) + 2|0);
     HEAP32[$15>>2] = $73;
    }
    break;
   }
   case 11:  {
    $74 = HEAP32[$9>>2]|0;
    $75 = (($74) - 1)|0;
    HEAP32[$11>>2] = $75;
    while(1) {
     $76 = HEAP32[$11>>2]|0;
     $77 = ($76|0)>=(0);
     if (!($77)) {
      break L15;
     }
     $78 = HEAP32[$14>>2]|0;
     $79 = HEAP8[$78>>0]|0;
     $80 = HEAP32[$15>>2]|0;
     $81 = ((($80)) + 2|0);
     HEAP8[$81>>0] = $79;
     $82 = HEAP32[$15>>2]|0;
     $83 = ((($82)) + 1|0);
     HEAP8[$83>>0] = $79;
     $84 = HEAP32[$15>>2]|0;
     HEAP8[$84>>0] = $79;
     $85 = HEAP32[$11>>2]|0;
     $86 = (($85) + -1)|0;
     HEAP32[$11>>2] = $86;
     $87 = HEAP32[$14>>2]|0;
     $88 = ((($87)) + 1|0);
     HEAP32[$14>>2] = $88;
     $89 = HEAP32[$15>>2]|0;
     $90 = ((($89)) + 3|0);
     HEAP32[$15>>2] = $90;
    }
    break;
   }
   case 12:  {
    $91 = HEAP32[$9>>2]|0;
    $92 = (($91) - 1)|0;
    HEAP32[$11>>2] = $92;
    while(1) {
     $93 = HEAP32[$11>>2]|0;
     $94 = ($93|0)>=(0);
     if (!($94)) {
      break L15;
     }
     $95 = HEAP32[$14>>2]|0;
     $96 = HEAP8[$95>>0]|0;
     $97 = HEAP32[$15>>2]|0;
     $98 = ((($97)) + 2|0);
     HEAP8[$98>>0] = $96;
     $99 = HEAP32[$15>>2]|0;
     $100 = ((($99)) + 1|0);
     HEAP8[$100>>0] = $96;
     $101 = HEAP32[$15>>2]|0;
     HEAP8[$101>>0] = $96;
     $102 = HEAP32[$15>>2]|0;
     $103 = ((($102)) + 3|0);
     HEAP8[$103>>0] = -1;
     $104 = HEAP32[$11>>2]|0;
     $105 = (($104) + -1)|0;
     HEAP32[$11>>2] = $105;
     $106 = HEAP32[$14>>2]|0;
     $107 = ((($106)) + 1|0);
     HEAP32[$14>>2] = $107;
     $108 = HEAP32[$15>>2]|0;
     $109 = ((($108)) + 4|0);
     HEAP32[$15>>2] = $109;
    }
    break;
   }
   case 17:  {
    $110 = HEAP32[$9>>2]|0;
    $111 = (($110) - 1)|0;
    HEAP32[$11>>2] = $111;
    while(1) {
     $112 = HEAP32[$11>>2]|0;
     $113 = ($112|0)>=(0);
     if (!($113)) {
      break L15;
     }
     $114 = HEAP32[$14>>2]|0;
     $115 = HEAP8[$114>>0]|0;
     $116 = HEAP32[$15>>2]|0;
     HEAP8[$116>>0] = $115;
     $117 = HEAP32[$11>>2]|0;
     $118 = (($117) + -1)|0;
     HEAP32[$11>>2] = $118;
     $119 = HEAP32[$14>>2]|0;
     $120 = ((($119)) + 2|0);
     HEAP32[$14>>2] = $120;
     $121 = HEAP32[$15>>2]|0;
     $122 = ((($121)) + 1|0);
     HEAP32[$15>>2] = $122;
    }
    break;
   }
   case 19:  {
    $123 = HEAP32[$9>>2]|0;
    $124 = (($123) - 1)|0;
    HEAP32[$11>>2] = $124;
    while(1) {
     $125 = HEAP32[$11>>2]|0;
     $126 = ($125|0)>=(0);
     if (!($126)) {
      break L15;
     }
     $127 = HEAP32[$14>>2]|0;
     $128 = HEAP8[$127>>0]|0;
     $129 = HEAP32[$15>>2]|0;
     $130 = ((($129)) + 2|0);
     HEAP8[$130>>0] = $128;
     $131 = HEAP32[$15>>2]|0;
     $132 = ((($131)) + 1|0);
     HEAP8[$132>>0] = $128;
     $133 = HEAP32[$15>>2]|0;
     HEAP8[$133>>0] = $128;
     $134 = HEAP32[$11>>2]|0;
     $135 = (($134) + -1)|0;
     HEAP32[$11>>2] = $135;
     $136 = HEAP32[$14>>2]|0;
     $137 = ((($136)) + 2|0);
     HEAP32[$14>>2] = $137;
     $138 = HEAP32[$15>>2]|0;
     $139 = ((($138)) + 3|0);
     HEAP32[$15>>2] = $139;
    }
    break;
   }
   case 20:  {
    $140 = HEAP32[$9>>2]|0;
    $141 = (($140) - 1)|0;
    HEAP32[$11>>2] = $141;
    while(1) {
     $142 = HEAP32[$11>>2]|0;
     $143 = ($142|0)>=(0);
     if (!($143)) {
      break L15;
     }
     $144 = HEAP32[$14>>2]|0;
     $145 = HEAP8[$144>>0]|0;
     $146 = HEAP32[$15>>2]|0;
     $147 = ((($146)) + 2|0);
     HEAP8[$147>>0] = $145;
     $148 = HEAP32[$15>>2]|0;
     $149 = ((($148)) + 1|0);
     HEAP8[$149>>0] = $145;
     $150 = HEAP32[$15>>2]|0;
     HEAP8[$150>>0] = $145;
     $151 = HEAP32[$14>>2]|0;
     $152 = ((($151)) + 1|0);
     $153 = HEAP8[$152>>0]|0;
     $154 = HEAP32[$15>>2]|0;
     $155 = ((($154)) + 3|0);
     HEAP8[$155>>0] = $153;
     $156 = HEAP32[$11>>2]|0;
     $157 = (($156) + -1)|0;
     HEAP32[$11>>2] = $157;
     $158 = HEAP32[$14>>2]|0;
     $159 = ((($158)) + 2|0);
     HEAP32[$14>>2] = $159;
     $160 = HEAP32[$15>>2]|0;
     $161 = ((($160)) + 4|0);
     HEAP32[$15>>2] = $161;
    }
    break;
   }
   case 28:  {
    $162 = HEAP32[$9>>2]|0;
    $163 = (($162) - 1)|0;
    HEAP32[$11>>2] = $163;
    while(1) {
     $164 = HEAP32[$11>>2]|0;
     $165 = ($164|0)>=(0);
     if (!($165)) {
      break L15;
     }
     $166 = HEAP32[$14>>2]|0;
     $167 = HEAP8[$166>>0]|0;
     $168 = HEAP32[$15>>2]|0;
     HEAP8[$168>>0] = $167;
     $169 = HEAP32[$14>>2]|0;
     $170 = ((($169)) + 1|0);
     $171 = HEAP8[$170>>0]|0;
     $172 = HEAP32[$15>>2]|0;
     $173 = ((($172)) + 1|0);
     HEAP8[$173>>0] = $171;
     $174 = HEAP32[$14>>2]|0;
     $175 = ((($174)) + 2|0);
     $176 = HEAP8[$175>>0]|0;
     $177 = HEAP32[$15>>2]|0;
     $178 = ((($177)) + 2|0);
     HEAP8[$178>>0] = $176;
     $179 = HEAP32[$15>>2]|0;
     $180 = ((($179)) + 3|0);
     HEAP8[$180>>0] = -1;
     $181 = HEAP32[$11>>2]|0;
     $182 = (($181) + -1)|0;
     HEAP32[$11>>2] = $182;
     $183 = HEAP32[$14>>2]|0;
     $184 = ((($183)) + 3|0);
     HEAP32[$14>>2] = $184;
     $185 = HEAP32[$15>>2]|0;
     $186 = ((($185)) + 4|0);
     HEAP32[$15>>2] = $186;
    }
    break;
   }
   case 25:  {
    $187 = HEAP32[$9>>2]|0;
    $188 = (($187) - 1)|0;
    HEAP32[$11>>2] = $188;
    while(1) {
     $189 = HEAP32[$11>>2]|0;
     $190 = ($189|0)>=(0);
     if (!($190)) {
      break L15;
     }
     $191 = HEAP32[$14>>2]|0;
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = HEAP32[$14>>2]|0;
     $195 = ((($194)) + 1|0);
     $196 = HEAP8[$195>>0]|0;
     $197 = $196&255;
     $198 = HEAP32[$14>>2]|0;
     $199 = ((($198)) + 2|0);
     $200 = HEAP8[$199>>0]|0;
     $201 = $200&255;
     $202 = (_stbi__compute_y($193,$197,$201)|0);
     $203 = HEAP32[$15>>2]|0;
     HEAP8[$203>>0] = $202;
     $204 = HEAP32[$11>>2]|0;
     $205 = (($204) + -1)|0;
     HEAP32[$11>>2] = $205;
     $206 = HEAP32[$14>>2]|0;
     $207 = ((($206)) + 3|0);
     HEAP32[$14>>2] = $207;
     $208 = HEAP32[$15>>2]|0;
     $209 = ((($208)) + 1|0);
     HEAP32[$15>>2] = $209;
    }
    break;
   }
   case 26:  {
    $210 = HEAP32[$9>>2]|0;
    $211 = (($210) - 1)|0;
    HEAP32[$11>>2] = $211;
    while(1) {
     $212 = HEAP32[$11>>2]|0;
     $213 = ($212|0)>=(0);
     if (!($213)) {
      break L15;
     }
     $214 = HEAP32[$14>>2]|0;
     $215 = HEAP8[$214>>0]|0;
     $216 = $215&255;
     $217 = HEAP32[$14>>2]|0;
     $218 = ((($217)) + 1|0);
     $219 = HEAP8[$218>>0]|0;
     $220 = $219&255;
     $221 = HEAP32[$14>>2]|0;
     $222 = ((($221)) + 2|0);
     $223 = HEAP8[$222>>0]|0;
     $224 = $223&255;
     $225 = (_stbi__compute_y($216,$220,$224)|0);
     $226 = HEAP32[$15>>2]|0;
     HEAP8[$226>>0] = $225;
     $227 = HEAP32[$15>>2]|0;
     $228 = ((($227)) + 1|0);
     HEAP8[$228>>0] = -1;
     $229 = HEAP32[$11>>2]|0;
     $230 = (($229) + -1)|0;
     HEAP32[$11>>2] = $230;
     $231 = HEAP32[$14>>2]|0;
     $232 = ((($231)) + 3|0);
     HEAP32[$14>>2] = $232;
     $233 = HEAP32[$15>>2]|0;
     $234 = ((($233)) + 2|0);
     HEAP32[$15>>2] = $234;
    }
    break;
   }
   case 33:  {
    $235 = HEAP32[$9>>2]|0;
    $236 = (($235) - 1)|0;
    HEAP32[$11>>2] = $236;
    while(1) {
     $237 = HEAP32[$11>>2]|0;
     $238 = ($237|0)>=(0);
     if (!($238)) {
      break L15;
     }
     $239 = HEAP32[$14>>2]|0;
     $240 = HEAP8[$239>>0]|0;
     $241 = $240&255;
     $242 = HEAP32[$14>>2]|0;
     $243 = ((($242)) + 1|0);
     $244 = HEAP8[$243>>0]|0;
     $245 = $244&255;
     $246 = HEAP32[$14>>2]|0;
     $247 = ((($246)) + 2|0);
     $248 = HEAP8[$247>>0]|0;
     $249 = $248&255;
     $250 = (_stbi__compute_y($241,$245,$249)|0);
     $251 = HEAP32[$15>>2]|0;
     HEAP8[$251>>0] = $250;
     $252 = HEAP32[$11>>2]|0;
     $253 = (($252) + -1)|0;
     HEAP32[$11>>2] = $253;
     $254 = HEAP32[$14>>2]|0;
     $255 = ((($254)) + 4|0);
     HEAP32[$14>>2] = $255;
     $256 = HEAP32[$15>>2]|0;
     $257 = ((($256)) + 1|0);
     HEAP32[$15>>2] = $257;
    }
    break;
   }
   case 34:  {
    $258 = HEAP32[$9>>2]|0;
    $259 = (($258) - 1)|0;
    HEAP32[$11>>2] = $259;
    while(1) {
     $260 = HEAP32[$11>>2]|0;
     $261 = ($260|0)>=(0);
     if (!($261)) {
      break L15;
     }
     $262 = HEAP32[$14>>2]|0;
     $263 = HEAP8[$262>>0]|0;
     $264 = $263&255;
     $265 = HEAP32[$14>>2]|0;
     $266 = ((($265)) + 1|0);
     $267 = HEAP8[$266>>0]|0;
     $268 = $267&255;
     $269 = HEAP32[$14>>2]|0;
     $270 = ((($269)) + 2|0);
     $271 = HEAP8[$270>>0]|0;
     $272 = $271&255;
     $273 = (_stbi__compute_y($264,$268,$272)|0);
     $274 = HEAP32[$15>>2]|0;
     HEAP8[$274>>0] = $273;
     $275 = HEAP32[$14>>2]|0;
     $276 = ((($275)) + 3|0);
     $277 = HEAP8[$276>>0]|0;
     $278 = HEAP32[$15>>2]|0;
     $279 = ((($278)) + 1|0);
     HEAP8[$279>>0] = $277;
     $280 = HEAP32[$11>>2]|0;
     $281 = (($280) + -1)|0;
     HEAP32[$11>>2] = $281;
     $282 = HEAP32[$14>>2]|0;
     $283 = ((($282)) + 4|0);
     HEAP32[$14>>2] = $283;
     $284 = HEAP32[$15>>2]|0;
     $285 = ((($284)) + 2|0);
     HEAP32[$15>>2] = $285;
    }
    break;
   }
   case 35:  {
    $286 = HEAP32[$9>>2]|0;
    $287 = (($286) - 1)|0;
    HEAP32[$11>>2] = $287;
    while(1) {
     $288 = HEAP32[$11>>2]|0;
     $289 = ($288|0)>=(0);
     if (!($289)) {
      break L15;
     }
     $290 = HEAP32[$14>>2]|0;
     $291 = HEAP8[$290>>0]|0;
     $292 = HEAP32[$15>>2]|0;
     HEAP8[$292>>0] = $291;
     $293 = HEAP32[$14>>2]|0;
     $294 = ((($293)) + 1|0);
     $295 = HEAP8[$294>>0]|0;
     $296 = HEAP32[$15>>2]|0;
     $297 = ((($296)) + 1|0);
     HEAP8[$297>>0] = $295;
     $298 = HEAP32[$14>>2]|0;
     $299 = ((($298)) + 2|0);
     $300 = HEAP8[$299>>0]|0;
     $301 = HEAP32[$15>>2]|0;
     $302 = ((($301)) + 2|0);
     HEAP8[$302>>0] = $300;
     $303 = HEAP32[$11>>2]|0;
     $304 = (($303) + -1)|0;
     HEAP32[$11>>2] = $304;
     $305 = HEAP32[$14>>2]|0;
     $306 = ((($305)) + 4|0);
     HEAP32[$14>>2] = $306;
     $307 = HEAP32[$15>>2]|0;
     $308 = ((($307)) + 3|0);
     HEAP32[$15>>2] = $308;
    }
    break;
   }
   default: {
    label = 46;
    break L12;
   }
   }
  } while(0);
  $309 = HEAP32[$12>>2]|0;
  $310 = (($309) + 1)|0;
  HEAP32[$12>>2] = $310;
 }
 if ((label|0) == 46) {
  ___assert_fail((20748|0),(20646|0),1384,(20727|0));
  // unreachable;
 }
 _free($41);
 $311 = HEAP32[$13>>2]|0;
 HEAP32[$5>>2] = $311;
 $312 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($312|0);
}
function _stbi__compute_y($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6*77)|0;
 $8 = HEAP32[$4>>2]|0;
 $9 = ($8*150)|0;
 $10 = (($7) + ($9))|0;
 $11 = HEAP32[$5>>2]|0;
 $12 = ($11*29)|0;
 $13 = (($10) + ($12))|0;
 $14 = $13 >> 8;
 $15 = $14&255;
 STACKTOP = sp;return ($15|0);
}
function _stbi__refill_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 40|0);
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$5 & 31]($8,$10,$13)|0);
 HEAP32[$2>>2] = $14;
 $15 = HEAP32[$2>>2]|0;
 $16 = ($15|0)==(0);
 $17 = HEAP32[$1>>2]|0;
 if ($16) {
  $18 = ((($17)) + 32|0);
  HEAP32[$18>>2] = 0;
  $19 = HEAP32[$1>>2]|0;
  $20 = ((($19)) + 40|0);
  $21 = HEAP32[$1>>2]|0;
  $22 = ((($21)) + 168|0);
  HEAP32[$22>>2] = $20;
  $23 = HEAP32[$1>>2]|0;
  $24 = ((($23)) + 40|0);
  $25 = ((($24)) + 1|0);
  $26 = HEAP32[$1>>2]|0;
  $27 = ((($26)) + 172|0);
  HEAP32[$27>>2] = $25;
  $28 = HEAP32[$1>>2]|0;
  $29 = ((($28)) + 168|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP8[$30>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $31 = ((($17)) + 40|0);
  $32 = HEAP32[$1>>2]|0;
  $33 = ((($32)) + 168|0);
  HEAP32[$33>>2] = $31;
  $34 = HEAP32[$1>>2]|0;
  $35 = ((($34)) + 40|0);
  $36 = HEAP32[$2>>2]|0;
  $37 = (($35) + ($36)|0);
  $38 = HEAP32[$1>>2]|0;
  $39 = ((($38)) + 172|0);
  HEAP32[$39>>2] = $37;
  STACKTOP = sp;return;
 }
}
function _stbi__rewind($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 176|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($5)) + 168|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 180|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 172|0);
 HEAP32[$11>>2] = $9;
 STACKTOP = sp;return;
}
function _stbi__bmp_parse_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $8 = HEAP32[$3>>2]|0;
 $9 = (_stbi__get8($8)|0);
 $10 = $9&255;
 $11 = ($10|0)!=(66);
 if (!($11)) {
  $12 = HEAP32[$3>>2]|0;
  $13 = (_stbi__get8($12)|0);
  $14 = $13&255;
  $15 = ($14|0)!=(77);
  if (!($15)) {
   $21 = HEAP32[$3>>2]|0;
   (_stbi__get32le($21)|0);
   $22 = HEAP32[$3>>2]|0;
   (_stbi__get16le($22)|0);
   $23 = HEAP32[$3>>2]|0;
   (_stbi__get16le($23)|0);
   $24 = HEAP32[$3>>2]|0;
   $25 = (_stbi__get32le($24)|0);
   $26 = HEAP32[$4>>2]|0;
   $27 = ((($26)) + 4|0);
   HEAP32[$27>>2] = $25;
   $28 = HEAP32[$3>>2]|0;
   $29 = (_stbi__get32le($28)|0);
   HEAP32[$5>>2] = $29;
   $30 = HEAP32[$4>>2]|0;
   $31 = ((($30)) + 8|0);
   HEAP32[$31>>2] = $29;
   $32 = HEAP32[$4>>2]|0;
   $33 = ((($32)) + 24|0);
   HEAP32[$33>>2] = 0;
   $34 = HEAP32[$4>>2]|0;
   $35 = ((($34)) + 20|0);
   HEAP32[$35>>2] = 0;
   $36 = HEAP32[$4>>2]|0;
   $37 = ((($36)) + 16|0);
   HEAP32[$37>>2] = 0;
   $38 = HEAP32[$4>>2]|0;
   $39 = ((($38)) + 12|0);
   HEAP32[$39>>2] = 0;
   $40 = HEAP32[$5>>2]|0;
   $41 = ($40|0)!=(12);
   $42 = HEAP32[$5>>2]|0;
   $43 = ($42|0)!=(40);
   $or$cond = $41 & $43;
   $44 = HEAP32[$5>>2]|0;
   $45 = ($44|0)!=(56);
   $or$cond3 = $or$cond & $45;
   $46 = HEAP32[$5>>2]|0;
   $47 = ($46|0)!=(108);
   $or$cond5 = $or$cond3 & $47;
   $48 = HEAP32[$5>>2]|0;
   $49 = ($48|0)!=(124);
   $or$cond7 = $or$cond5 & $49;
   if ($or$cond7) {
    $50 = (_stbi__err(20784)|0);
    $51 = ($50|0)!=(0);
    $52 = $51 ? 0 : 0;
    $53 = $52;
    $54 = $53;
    HEAP32[$2>>2] = $54;
    $216 = HEAP32[$2>>2]|0;
    STACKTOP = sp;return ($216|0);
   }
   $55 = HEAP32[$5>>2]|0;
   $56 = ($55|0)==(12);
   $57 = HEAP32[$3>>2]|0;
   if ($56) {
    $58 = (_stbi__get16le($57)|0);
    $59 = HEAP32[$3>>2]|0;
    HEAP32[$59>>2] = $58;
    $60 = HEAP32[$3>>2]|0;
    $61 = (_stbi__get16le($60)|0);
    $62 = HEAP32[$3>>2]|0;
    $63 = ((($62)) + 4|0);
    HEAP32[$63>>2] = $61;
   } else {
    $64 = (_stbi__get32le($57)|0);
    $65 = HEAP32[$3>>2]|0;
    HEAP32[$65>>2] = $64;
    $66 = HEAP32[$3>>2]|0;
    $67 = (_stbi__get32le($66)|0);
    $68 = HEAP32[$3>>2]|0;
    $69 = ((($68)) + 4|0);
    HEAP32[$69>>2] = $67;
   }
   $70 = HEAP32[$3>>2]|0;
   $71 = (_stbi__get16le($70)|0);
   $72 = ($71|0)!=(1);
   if ($72) {
    $73 = (_stbi__err(20796)|0);
    $74 = ($73|0)!=(0);
    $75 = $74 ? 0 : 0;
    $76 = $75;
    $77 = $76;
    HEAP32[$2>>2] = $77;
    $216 = HEAP32[$2>>2]|0;
    STACKTOP = sp;return ($216|0);
   }
   $78 = HEAP32[$3>>2]|0;
   $79 = (_stbi__get16le($78)|0);
   $80 = HEAP32[$4>>2]|0;
   HEAP32[$80>>2] = $79;
   $81 = HEAP32[$4>>2]|0;
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(1);
   if ($83) {
    $84 = (_stbi__err(20804)|0);
    $85 = ($84|0)!=(0);
    $86 = $85 ? 0 : 0;
    $87 = $86;
    $88 = $87;
    HEAP32[$2>>2] = $88;
    $216 = HEAP32[$2>>2]|0;
    STACKTOP = sp;return ($216|0);
   }
   $89 = HEAP32[$5>>2]|0;
   $90 = ($89|0)!=(12);
   do {
    if ($90) {
     $91 = HEAP32[$3>>2]|0;
     $92 = (_stbi__get32le($91)|0);
     HEAP32[$6>>2] = $92;
     $93 = HEAP32[$6>>2]|0;
     $94 = ($93|0)==(1);
     $95 = HEAP32[$6>>2]|0;
     $96 = ($95|0)==(2);
     $or$cond9 = $94 | $96;
     if ($or$cond9) {
      $97 = (_stbi__err(20815)|0);
      $98 = ($97|0)!=(0);
      $99 = $98 ? 0 : 0;
      $100 = $99;
      $101 = $100;
      HEAP32[$2>>2] = $101;
      $216 = HEAP32[$2>>2]|0;
      STACKTOP = sp;return ($216|0);
     }
     $102 = HEAP32[$3>>2]|0;
     (_stbi__get32le($102)|0);
     $103 = HEAP32[$3>>2]|0;
     (_stbi__get32le($103)|0);
     $104 = HEAP32[$3>>2]|0;
     (_stbi__get32le($104)|0);
     $105 = HEAP32[$3>>2]|0;
     (_stbi__get32le($105)|0);
     $106 = HEAP32[$3>>2]|0;
     (_stbi__get32le($106)|0);
     $107 = HEAP32[$5>>2]|0;
     $108 = ($107|0)==(40);
     $109 = HEAP32[$5>>2]|0;
     $110 = ($109|0)==(56);
     $or$cond11 = $108 | $110;
     $111 = HEAP32[$5>>2]|0;
     if (!($or$cond11)) {
      $180 = ($111|0)!=(108);
      $181 = HEAP32[$5>>2]|0;
      $182 = ($181|0)!=(124);
      $or$cond13 = $180 & $182;
      if ($or$cond13) {
       $183 = (_stbi__err(20796)|0);
       $184 = ($183|0)!=(0);
       $185 = $184 ? 0 : 0;
       $186 = $185;
       $187 = $186;
       HEAP32[$2>>2] = $187;
       $216 = HEAP32[$2>>2]|0;
       STACKTOP = sp;return ($216|0);
      }
      $188 = HEAP32[$3>>2]|0;
      $189 = (_stbi__get32le($188)|0);
      $190 = HEAP32[$4>>2]|0;
      $191 = ((($190)) + 12|0);
      HEAP32[$191>>2] = $189;
      $192 = HEAP32[$3>>2]|0;
      $193 = (_stbi__get32le($192)|0);
      $194 = HEAP32[$4>>2]|0;
      $195 = ((($194)) + 16|0);
      HEAP32[$195>>2] = $193;
      $196 = HEAP32[$3>>2]|0;
      $197 = (_stbi__get32le($196)|0);
      $198 = HEAP32[$4>>2]|0;
      $199 = ((($198)) + 20|0);
      HEAP32[$199>>2] = $197;
      $200 = HEAP32[$3>>2]|0;
      $201 = (_stbi__get32le($200)|0);
      $202 = HEAP32[$4>>2]|0;
      $203 = ((($202)) + 24|0);
      HEAP32[$203>>2] = $201;
      $204 = HEAP32[$3>>2]|0;
      (_stbi__get32le($204)|0);
      HEAP32[$7>>2] = 0;
      while(1) {
       $205 = HEAP32[$7>>2]|0;
       $206 = ($205|0)<(12);
       if (!($206)) {
        break;
       }
       $207 = HEAP32[$3>>2]|0;
       (_stbi__get32le($207)|0);
       $208 = HEAP32[$7>>2]|0;
       $209 = (($208) + 1)|0;
       HEAP32[$7>>2] = $209;
      }
      $210 = HEAP32[$5>>2]|0;
      $211 = ($210|0)==(124);
      if (!($211)) {
       break;
      }
      $212 = HEAP32[$3>>2]|0;
      (_stbi__get32le($212)|0);
      $213 = HEAP32[$3>>2]|0;
      (_stbi__get32le($213)|0);
      $214 = HEAP32[$3>>2]|0;
      (_stbi__get32le($214)|0);
      $215 = HEAP32[$3>>2]|0;
      (_stbi__get32le($215)|0);
      break;
     }
     $112 = ($111|0)==(56);
     if ($112) {
      $113 = HEAP32[$3>>2]|0;
      (_stbi__get32le($113)|0);
      $114 = HEAP32[$3>>2]|0;
      (_stbi__get32le($114)|0);
      $115 = HEAP32[$3>>2]|0;
      (_stbi__get32le($115)|0);
      $116 = HEAP32[$3>>2]|0;
      (_stbi__get32le($116)|0);
     }
     $117 = HEAP32[$4>>2]|0;
     $118 = HEAP32[$117>>2]|0;
     $119 = ($118|0)==(16);
     if (!($119)) {
      $120 = HEAP32[$4>>2]|0;
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(32);
      if (!($122)) {
       break;
      }
     }
     $123 = HEAP32[$6>>2]|0;
     $124 = ($123|0)==(0);
     if ($124) {
      $125 = HEAP32[$4>>2]|0;
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)==(32);
      $128 = HEAP32[$4>>2]|0;
      $129 = ((($128)) + 12|0);
      if ($127) {
       HEAP32[$129>>2] = 16711680;
       $130 = HEAP32[$4>>2]|0;
       $131 = ((($130)) + 16|0);
       HEAP32[$131>>2] = 65280;
       $132 = HEAP32[$4>>2]|0;
       $133 = ((($132)) + 20|0);
       HEAP32[$133>>2] = 255;
       $134 = HEAP32[$4>>2]|0;
       $135 = ((($134)) + 24|0);
       HEAP32[$135>>2] = -16777216;
       $136 = HEAP32[$4>>2]|0;
       $137 = ((($136)) + 28|0);
       HEAP32[$137>>2] = 0;
       break;
      } else {
       HEAP32[$129>>2] = 31744;
       $138 = HEAP32[$4>>2]|0;
       $139 = ((($138)) + 16|0);
       HEAP32[$139>>2] = 992;
       $140 = HEAP32[$4>>2]|0;
       $141 = ((($140)) + 20|0);
       HEAP32[$141>>2] = 31;
       break;
      }
     }
     $142 = HEAP32[$6>>2]|0;
     $143 = ($142|0)==(3);
     if (!($143)) {
      $175 = (_stbi__err(20796)|0);
      $176 = ($175|0)!=(0);
      $177 = $176 ? 0 : 0;
      $178 = $177;
      $179 = $178;
      HEAP32[$2>>2] = $179;
      $216 = HEAP32[$2>>2]|0;
      STACKTOP = sp;return ($216|0);
     }
     $144 = HEAP32[$3>>2]|0;
     $145 = (_stbi__get32le($144)|0);
     $146 = HEAP32[$4>>2]|0;
     $147 = ((($146)) + 12|0);
     HEAP32[$147>>2] = $145;
     $148 = HEAP32[$3>>2]|0;
     $149 = (_stbi__get32le($148)|0);
     $150 = HEAP32[$4>>2]|0;
     $151 = ((($150)) + 16|0);
     HEAP32[$151>>2] = $149;
     $152 = HEAP32[$3>>2]|0;
     $153 = (_stbi__get32le($152)|0);
     $154 = HEAP32[$4>>2]|0;
     $155 = ((($154)) + 20|0);
     HEAP32[$155>>2] = $153;
     $156 = HEAP32[$4>>2]|0;
     $157 = ((($156)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = HEAP32[$4>>2]|0;
     $160 = ((($159)) + 16|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($158|0)==($161|0);
     if ($162) {
      $163 = HEAP32[$4>>2]|0;
      $164 = ((($163)) + 16|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = HEAP32[$4>>2]|0;
      $167 = ((($166)) + 20|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($165|0)==($168|0);
      if ($169) {
       $170 = (_stbi__err(20796)|0);
       $171 = ($170|0)!=(0);
       $172 = $171 ? 0 : 0;
       $173 = $172;
       $174 = $173;
       HEAP32[$2>>2] = $174;
       $216 = HEAP32[$2>>2]|0;
       STACKTOP = sp;return ($216|0);
      }
     }
    }
   } while(0);
   HEAP32[$2>>2] = (1);
   $216 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($216|0);
  }
 }
 $16 = (_stbi__err(20776)|0);
 $17 = ($16|0)!=(0);
 $18 = $17 ? 0 : 0;
 $19 = $18;
 $20 = $19;
 HEAP32[$2>>2] = $20;
 $216 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($216|0);
}
function _stbi__high_bit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP32[$1>>2] = -1;
  $37 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6>>>0)>=(65536);
 if ($7) {
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + 16)|0;
  HEAP32[$3>>2] = $9;
  $10 = HEAP32[$2>>2]|0;
  $11 = $10 >>> 16;
  HEAP32[$2>>2] = $11;
 }
 $12 = HEAP32[$2>>2]|0;
 $13 = ($12>>>0)>=(256);
 if ($13) {
  $14 = HEAP32[$3>>2]|0;
  $15 = (($14) + 8)|0;
  HEAP32[$3>>2] = $15;
  $16 = HEAP32[$2>>2]|0;
  $17 = $16 >>> 8;
  HEAP32[$2>>2] = $17;
 }
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18>>>0)>=(16);
 if ($19) {
  $20 = HEAP32[$3>>2]|0;
  $21 = (($20) + 4)|0;
  HEAP32[$3>>2] = $21;
  $22 = HEAP32[$2>>2]|0;
  $23 = $22 >>> 4;
  HEAP32[$2>>2] = $23;
 }
 $24 = HEAP32[$2>>2]|0;
 $25 = ($24>>>0)>=(4);
 if ($25) {
  $26 = HEAP32[$3>>2]|0;
  $27 = (($26) + 2)|0;
  HEAP32[$3>>2] = $27;
  $28 = HEAP32[$2>>2]|0;
  $29 = $28 >>> 2;
  HEAP32[$2>>2] = $29;
 }
 $30 = HEAP32[$2>>2]|0;
 $31 = ($30>>>0)>=(2);
 if ($31) {
  $32 = HEAP32[$3>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$3>>2] = $33;
  $34 = HEAP32[$2>>2]|0;
  $35 = $34 >>> 1;
  HEAP32[$2>>2] = $35;
 }
 $36 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $36;
 $37 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($37|0);
}
function _stbi__bitcount($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1431655765;
 $4 = HEAP32[$1>>2]|0;
 $5 = $4 >>> 1;
 $6 = $5 & 1431655765;
 $7 = (($3) + ($6))|0;
 HEAP32[$1>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = $8 & 858993459;
 $10 = HEAP32[$1>>2]|0;
 $11 = $10 >>> 2;
 $12 = $11 & 858993459;
 $13 = (($9) + ($12))|0;
 HEAP32[$1>>2] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$1>>2]|0;
 $16 = $15 >>> 4;
 $17 = (($14) + ($16))|0;
 $18 = $17 & 252645135;
 HEAP32[$1>>2] = $18;
 $19 = HEAP32[$1>>2]|0;
 $20 = HEAP32[$1>>2]|0;
 $21 = $20 >>> 8;
 $22 = (($19) + ($21))|0;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$1>>2]|0;
 $24 = HEAP32[$1>>2]|0;
 $25 = $24 >>> 16;
 $26 = (($23) + ($25))|0;
 HEAP32[$1>>2] = $26;
 $27 = HEAP32[$1>>2]|0;
 $28 = $27 & 255;
 STACKTOP = sp;return ($28|0);
}
function _stbi__get32le($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_stbi__get16le($3)|0);
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (_stbi__get16le($6)|0);
 $8 = $7 << 16;
 $9 = (($5) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function _stbi__shiftsigned($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$4>>2]|0;
 $9 = ($8|0)<(0);
 $10 = HEAP32[$4>>2]|0;
 if ($9) {
  $11 = (0 - ($10))|0;
  $12 = HEAP32[$3>>2]|0;
  $13 = $12 << $11;
  HEAP32[$3>>2] = $13;
 } else {
  $14 = HEAP32[$3>>2]|0;
  $15 = $14 >> $10;
  HEAP32[$3>>2] = $15;
 }
 $16 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $16;
 $17 = HEAP32[$5>>2]|0;
 HEAP32[$7>>2] = $17;
 while(1) {
  $18 = HEAP32[$7>>2]|0;
  $19 = ($18|0)<(8);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$3>>2]|0;
  $21 = HEAP32[$7>>2]|0;
  $22 = $20 >> $21;
  $23 = HEAP32[$6>>2]|0;
  $24 = (($23) + ($22))|0;
  HEAP32[$6>>2] = $24;
  $25 = HEAP32[$5>>2]|0;
  $26 = HEAP32[$7>>2]|0;
  $27 = (($26) + ($25))|0;
  HEAP32[$7>>2] = $27;
 }
 $28 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($28|0);
}
function _stbi__bmp_test_raw($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (_stbi__get8($5)|0);
 $7 = $6&255;
 $8 = ($7|0)!=(66);
 if ($8) {
  HEAP32[$1>>2] = 0;
  $32 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = (_stbi__get8($9)|0);
 $11 = $10&255;
 $12 = ($11|0)!=(77);
 if ($12) {
  HEAP32[$1>>2] = 0;
  $32 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $13 = HEAP32[$2>>2]|0;
 (_stbi__get32le($13)|0);
 $14 = HEAP32[$2>>2]|0;
 (_stbi__get16le($14)|0);
 $15 = HEAP32[$2>>2]|0;
 (_stbi__get16le($15)|0);
 $16 = HEAP32[$2>>2]|0;
 (_stbi__get32le($16)|0);
 $17 = HEAP32[$2>>2]|0;
 $18 = (_stbi__get32le($17)|0);
 HEAP32[$4>>2] = $18;
 $19 = HEAP32[$4>>2]|0;
 $20 = ($19|0)==(12);
 $21 = HEAP32[$4>>2]|0;
 $22 = ($21|0)==(40);
 $or$cond = $20 | $22;
 $23 = HEAP32[$4>>2]|0;
 $24 = ($23|0)==(56);
 $or$cond3 = $or$cond | $24;
 $25 = HEAP32[$4>>2]|0;
 $26 = ($25|0)==(108);
 $or$cond5 = $or$cond3 | $26;
 if ($or$cond5) {
  $30 = 1;
 } else {
  $27 = HEAP32[$4>>2]|0;
  $28 = ($27|0)==(124);
  $30 = $28;
 }
 $29 = $30&1;
 HEAP32[$3>>2] = $29;
 $31 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $31;
 $32 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _stbi__do_png($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$10>>2]|0;
 $13 = ($12|0)<(0);
 $14 = HEAP32[$10>>2]|0;
 $15 = ($14|0)>(4);
 $or$cond = $13 | $15;
 if ($or$cond) {
  $16 = (_stbi__err(20823)|0);
  $17 = ($16|0)!=(0);
  $18 = $17 ? 0 : 0;
  $19 = $18;
  $20 = $19;
  HEAP32[$5>>2] = $20;
  $99 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($99|0);
 }
 $21 = HEAP32[$6>>2]|0;
 $22 = HEAP32[$10>>2]|0;
 $23 = (_stbi__parse_png_file($21,0,$22)|0);
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = HEAP32[$6>>2]|0;
  $26 = ((($25)) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(16);
  if ($28) {
   $29 = HEAP32[$6>>2]|0;
   $30 = (_stbi__reduce_png($29)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    $32 = HEAP32[$11>>2]|0;
    HEAP32[$5>>2] = $32;
    $99 = HEAP32[$5>>2]|0;
    STACKTOP = sp;return ($99|0);
   }
  }
  $33 = HEAP32[$6>>2]|0;
  $34 = ((($33)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$11>>2] = $35;
  $36 = HEAP32[$6>>2]|0;
  $37 = ((($36)) + 12|0);
  HEAP32[$37>>2] = 0;
  $38 = HEAP32[$10>>2]|0;
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = HEAP32[$10>>2]|0;
   $41 = HEAP32[$6>>2]|0;
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($40|0)!=($44|0);
   if ($45) {
    $46 = HEAP32[$11>>2]|0;
    $47 = HEAP32[$6>>2]|0;
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$10>>2]|0;
    $52 = HEAP32[$6>>2]|0;
    $53 = HEAP32[$52>>2]|0;
    $54 = HEAP32[$53>>2]|0;
    $55 = HEAP32[$6>>2]|0;
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($56)) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (_stbi__convert_format($46,$50,$51,$54,$58)|0);
    HEAP32[$11>>2] = $59;
    $60 = HEAP32[$10>>2]|0;
    $61 = HEAP32[$6>>2]|0;
    $62 = HEAP32[$61>>2]|0;
    $63 = ((($62)) + 12|0);
    HEAP32[$63>>2] = $60;
    $64 = HEAP32[$11>>2]|0;
    $65 = ($64|0)==(0|0);
    if ($65) {
     $66 = HEAP32[$11>>2]|0;
     HEAP32[$5>>2] = $66;
     $99 = HEAP32[$5>>2]|0;
     STACKTOP = sp;return ($99|0);
    }
   }
  }
  $67 = HEAP32[$6>>2]|0;
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[$7>>2]|0;
  HEAP32[$70>>2] = $69;
  $71 = HEAP32[$6>>2]|0;
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = HEAP32[$8>>2]|0;
  HEAP32[$75>>2] = $74;
  $76 = HEAP32[$9>>2]|0;
  $77 = ($76|0)!=(0|0);
  if ($77) {
   $78 = HEAP32[$6>>2]|0;
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($79)) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = HEAP32[$9>>2]|0;
   HEAP32[$82>>2] = $81;
  }
 }
 $83 = HEAP32[$6>>2]|0;
 $84 = ((($83)) + 12|0);
 $85 = HEAP32[$84>>2]|0;
 _free($85);
 $86 = HEAP32[$6>>2]|0;
 $87 = ((($86)) + 12|0);
 HEAP32[$87>>2] = 0;
 $88 = HEAP32[$6>>2]|0;
 $89 = ((($88)) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 _free($90);
 $91 = HEAP32[$6>>2]|0;
 $92 = ((($91)) + 8|0);
 HEAP32[$92>>2] = 0;
 $93 = HEAP32[$6>>2]|0;
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 _free($95);
 $96 = HEAP32[$6>>2]|0;
 $97 = ((($96)) + 4|0);
 HEAP32[$97>>2] = 0;
 $98 = HEAP32[$11>>2]|0;
 HEAP32[$5>>2] = $98;
 $99 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($99|0);
}
function _stbi__parse_png_file($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond3$not = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $switch$split2D = 0, $switch$split332D = 0, $switch$split362D = 0, $switch$split392D = 0, $switch$split422D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $3 = sp + 84|0;
 $4 = sp + 80|0;
 $5 = sp + 76|0;
 $6 = sp + 72|0;
 $7 = sp + 104|0;
 $8 = sp + 98|0;
 $9 = sp + 97|0;
 $10 = sp + 94|0;
 $11 = sp + 88|0;
 $12 = sp + 68|0;
 $13 = sp + 64|0;
 $14 = sp + 60|0;
 $15 = sp + 56|0;
 $16 = sp + 52|0;
 $17 = sp + 48|0;
 $18 = sp + 44|0;
 $19 = sp + 40|0;
 $20 = sp + 36|0;
 $21 = sp + 32|0;
 $22 = sp + 24|0;
 $23 = sp + 20|0;
 $24 = sp + 16|0;
 $25 = sp + 12|0;
 $26 = sp + 8|0;
 $27 = sp + 4|0;
 $28 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP8[$8>>0] = 0;
 HEAP8[$9>>0] = 0;
 HEAP32[$12>>2] = 0;
 HEAP32[$13>>2] = 0;
 HEAP32[$15>>2] = 0;
 HEAP32[$16>>2] = 1;
 HEAP32[$18>>2] = 0;
 HEAP32[$19>>2] = 0;
 HEAP32[$20>>2] = 0;
 $29 = HEAP32[$4>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$21>>2] = $30;
 $31 = HEAP32[$4>>2]|0;
 $32 = ((($31)) + 8|0);
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[$4>>2]|0;
 $34 = ((($33)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$4>>2]|0;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$21>>2]|0;
 $38 = (_stbi__check_png_header($37)|0);
 $39 = ($38|0)!=(0);
 if (!($39)) {
  HEAP32[$3>>2] = 0;
  $539 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($539|0);
 }
 $40 = HEAP32[$5>>2]|0;
 $41 = ($40|0)==(1);
 if ($41) {
  HEAP32[$3>>2] = 1;
  $539 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($539|0);
 }
 L8: while(1) {
  $42 = HEAP32[$21>>2]|0;
  _stbi__get_chunk_header($22,$42);
  $43 = ((($22)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $switch$split2D = ($44|0)<(1229472850);
  L10: do {
   if ($switch$split2D) {
    $switch$split332D = ($44|0)<(1229209940);
    if ($switch$split332D) {
     switch ($44|0) {
     case 1130840649:  {
      break;
     }
     default: {
      label = 126;
      break L10;
     }
     }
     HEAP32[$20>>2] = 1;
     $45 = HEAP32[$21>>2]|0;
     $46 = HEAP32[$22>>2]|0;
     _stbi__skip($45,$46);
     break;
    }
    $switch$split392D = ($44|0)<(1229278788);
    if (!($switch$split392D)) {
     switch ($44|0) {
     case 1229278788:  {
      label = 97;
      break L8;
      break;
     }
     default: {
      label = 126;
      break L10;
     }
     }
    }
    switch ($44|0) {
    case 1229209940:  {
     break;
    }
    default: {
     label = 126;
     break L10;
    }
    }
    $301 = HEAP32[$16>>2]|0;
    $302 = ($301|0)!=(0);
    if ($302) {
     label = 79;
     break L8;
    }
    $304 = HEAP8[$8>>0]|0;
    $305 = $304&255;
    $306 = ($305|0)==(0);
    $307 = HEAP32[$15>>2]|0;
    $308 = ($307|0)!=(0);
    $or$cond = $306 | $308;
    if (!($or$cond)) {
     label = 81;
     break L8;
    }
    $310 = HEAP32[$5>>2]|0;
    $311 = ($310|0)==(2);
    if ($311) {
     label = 83;
     break L8;
    }
    $316 = HEAP32[$12>>2]|0;
    $317 = HEAP32[$22>>2]|0;
    $318 = (($316) + ($317))|0;
    $319 = HEAP32[$12>>2]|0;
    $320 = ($318|0)<($319|0);
    if ($320) {
     label = 85;
     break L8;
    }
    $321 = HEAP32[$12>>2]|0;
    $322 = HEAP32[$22>>2]|0;
    $323 = (($321) + ($322))|0;
    $324 = HEAP32[$13>>2]|0;
    $325 = ($323>>>0)>($324>>>0);
    if ($325) {
     $326 = HEAP32[$13>>2]|0;
     HEAP32[$25>>2] = $326;
     $327 = HEAP32[$13>>2]|0;
     $328 = ($327|0)==(0);
     if ($328) {
      $329 = HEAP32[$22>>2]|0;
      $330 = ($329>>>0)>(4096);
      $331 = HEAP32[$22>>2]|0;
      $332 = $330 ? $331 : 4096;
      HEAP32[$13>>2] = $332;
     }
     while(1) {
      $333 = HEAP32[$12>>2]|0;
      $334 = HEAP32[$22>>2]|0;
      $335 = (($333) + ($334))|0;
      $336 = HEAP32[$13>>2]|0;
      $337 = ($335>>>0)>($336>>>0);
      if (!($337)) {
       break;
      }
      $338 = HEAP32[$13>>2]|0;
      $339 = $338<<1;
      HEAP32[$13>>2] = $339;
     }
     $340 = HEAP32[$4>>2]|0;
     $341 = ((($340)) + 4|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = HEAP32[$13>>2]|0;
     $344 = (_realloc($342,$343)|0);
     HEAP32[$26>>2] = $344;
     $345 = HEAP32[$26>>2]|0;
     $346 = ($345|0)==(0|0);
     if ($346) {
      label = 92;
      break L8;
     }
     $348 = HEAP32[$26>>2]|0;
     $349 = HEAP32[$4>>2]|0;
     $350 = ((($349)) + 4|0);
     HEAP32[$350>>2] = $348;
    }
    $351 = HEAP32[$21>>2]|0;
    $352 = HEAP32[$4>>2]|0;
    $353 = ((($352)) + 4|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = HEAP32[$12>>2]|0;
    $356 = (($354) + ($355)|0);
    $357 = HEAP32[$22>>2]|0;
    $358 = (_stbi__getn($351,$356,$357)|0);
    $359 = ($358|0)!=(0);
    if (!($359)) {
     label = 95;
     break L8;
    }
    $361 = HEAP32[$22>>2]|0;
    $362 = HEAP32[$12>>2]|0;
    $363 = (($362) + ($361))|0;
    HEAP32[$12>>2] = $363;
   } else {
    $switch$split362D = ($44|0)<(1347179589);
    if ($switch$split362D) {
     switch ($44|0) {
     case 1229472850:  {
      break;
     }
     default: {
      label = 126;
      break L10;
     }
     }
     $47 = HEAP32[$16>>2]|0;
     $48 = ($47|0)!=(0);
     if (!($48)) {
      label = 8;
      break L8;
     }
     HEAP32[$16>>2] = 0;
     $50 = HEAP32[$22>>2]|0;
     $51 = ($50|0)!=(13);
     if ($51) {
      label = 10;
      break L8;
     }
     $53 = HEAP32[$21>>2]|0;
     $54 = (_stbi__get32be($53)|0);
     $55 = HEAP32[$21>>2]|0;
     HEAP32[$55>>2] = $54;
     $56 = HEAP32[$21>>2]|0;
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57>>>0)>(16777216);
     if ($58) {
      label = 12;
      break L8;
     }
     $60 = HEAP32[$21>>2]|0;
     $61 = (_stbi__get32be($60)|0);
     $62 = HEAP32[$21>>2]|0;
     $63 = ((($62)) + 4|0);
     HEAP32[$63>>2] = $61;
     $64 = HEAP32[$21>>2]|0;
     $65 = ((($64)) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66>>>0)>(16777216);
     if ($67) {
      label = 14;
      break L8;
     }
     $69 = HEAP32[$21>>2]|0;
     $70 = (_stbi__get8($69)|0);
     $71 = $70&255;
     $72 = HEAP32[$4>>2]|0;
     $73 = ((($72)) + 16|0);
     HEAP32[$73>>2] = $71;
     $74 = HEAP32[$4>>2]|0;
     $75 = ((($74)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)!=(1);
     if ($77) {
      $78 = HEAP32[$4>>2]|0;
      $79 = ((($78)) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)!=(2);
      if ($81) {
       $82 = HEAP32[$4>>2]|0;
       $83 = ((($82)) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($84|0)!=(4);
       if ($85) {
        $86 = HEAP32[$4>>2]|0;
        $87 = ((($86)) + 16|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = ($88|0)!=(8);
        if ($89) {
         $90 = HEAP32[$4>>2]|0;
         $91 = ((($90)) + 16|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = ($92|0)!=(16);
         if ($93) {
          label = 20;
          break L8;
         }
        }
       }
      }
     }
     $95 = HEAP32[$21>>2]|0;
     $96 = (_stbi__get8($95)|0);
     $97 = $96&255;
     HEAP32[$19>>2] = $97;
     $98 = HEAP32[$19>>2]|0;
     $99 = ($98|0)>(6);
     if ($99) {
      label = 22;
      break L8;
     }
     $101 = HEAP32[$19>>2]|0;
     $102 = ($101|0)==(3);
     if ($102) {
      $103 = HEAP32[$4>>2]|0;
      $104 = ((($103)) + 16|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ($105|0)==(16);
      if ($106) {
       label = 25;
       break L8;
      }
     }
     $108 = HEAP32[$19>>2]|0;
     $109 = ($108|0)==(3);
     if ($109) {
      HEAP8[$8>>0] = 3;
     } else {
      $110 = HEAP32[$19>>2]|0;
      $111 = $110 & 1;
      $112 = ($111|0)!=(0);
      if ($112) {
       label = 29;
       break L8;
      }
     }
     $114 = HEAP32[$21>>2]|0;
     $115 = (_stbi__get8($114)|0);
     $116 = $115&255;
     HEAP32[$23>>2] = $116;
     $117 = HEAP32[$23>>2]|0;
     $118 = ($117|0)!=(0);
     if ($118) {
      label = 31;
      break L8;
     }
     $120 = HEAP32[$21>>2]|0;
     $121 = (_stbi__get8($120)|0);
     $122 = $121&255;
     HEAP32[$24>>2] = $122;
     $123 = HEAP32[$24>>2]|0;
     $124 = ($123|0)!=(0);
     if ($124) {
      label = 33;
      break L8;
     }
     $126 = HEAP32[$21>>2]|0;
     $127 = (_stbi__get8($126)|0);
     $128 = $127&255;
     HEAP32[$18>>2] = $128;
     $129 = HEAP32[$18>>2]|0;
     $130 = ($129|0)>(1);
     if ($130) {
      label = 35;
      break L8;
     }
     $132 = HEAP32[$21>>2]|0;
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)!=(0);
     if (!($134)) {
      label = 38;
      break L8;
     }
     $135 = HEAP32[$21>>2]|0;
     $136 = ((($135)) + 4|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)!=(0);
     if (!($138)) {
      label = 38;
      break L8;
     }
     $140 = HEAP8[$8>>0]|0;
     $141 = ($140<<24>>24)!=(0);
     if ($141) {
      $167 = HEAP32[$21>>2]|0;
      $168 = ((($167)) + 8|0);
      HEAP32[$168>>2] = 1;
      $169 = HEAP32[$21>>2]|0;
      $170 = HEAP32[$169>>2]|0;
      $171 = (1073741824 / ($170>>>0))&-1;
      $172 = (($171>>>0) / 4)&-1;
      $173 = HEAP32[$21>>2]|0;
      $174 = ((($173)) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($172>>>0)<($175>>>0);
      if ($176) {
       label = 45;
       break L8;
      } else {
       break;
      }
     }
     $142 = HEAP32[$19>>2]|0;
     $143 = $142 & 2;
     $144 = ($143|0)!=(0);
     $145 = $144 ? 3 : 1;
     $146 = HEAP32[$19>>2]|0;
     $147 = $146 & 4;
     $148 = ($147|0)!=(0);
     $149 = $148 ? 1 : 0;
     $150 = (($145) + ($149))|0;
     $151 = HEAP32[$21>>2]|0;
     $152 = ((($151)) + 8|0);
     HEAP32[$152>>2] = $150;
     $153 = HEAP32[$21>>2]|0;
     $154 = HEAP32[$153>>2]|0;
     $155 = (1073741824 / ($154>>>0))&-1;
     $156 = HEAP32[$21>>2]|0;
     $157 = ((($156)) + 8|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (($155>>>0) / ($158>>>0))&-1;
     $160 = HEAP32[$21>>2]|0;
     $161 = ((($160)) + 4|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($159>>>0)<($162>>>0);
     if ($163) {
      label = 41;
      break L8;
     }
     $165 = HEAP32[$5>>2]|0;
     $166 = ($165|0)==(2);
     if ($166) {
      label = 43;
      break L8;
     } else {
      break;
     }
    } else {
     $switch$split422D = ($44|0)<(1951551059);
     if ($switch$split422D) {
      switch ($44|0) {
      case 1347179589:  {
       break;
      }
      default: {
       label = 126;
       break L10;
      }
      }
      $178 = HEAP32[$16>>2]|0;
      $179 = ($178|0)!=(0);
      if ($179) {
       label = 47;
       break L8;
      }
      $181 = HEAP32[$22>>2]|0;
      $182 = ($181>>>0)>(768);
      if ($182) {
       label = 49;
       break L8;
      }
      $184 = HEAP32[$22>>2]|0;
      $185 = (($184>>>0) / 3)&-1;
      HEAP32[$15>>2] = $185;
      $186 = HEAP32[$15>>2]|0;
      $187 = ($186*3)|0;
      $188 = HEAP32[$22>>2]|0;
      $189 = ($187|0)!=($188|0);
      if ($189) {
       label = 51;
       break L8;
      }
      HEAP32[$14>>2] = 0;
      while(1) {
       $191 = HEAP32[$14>>2]|0;
       $192 = HEAP32[$15>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if (!($193)) {
        break L10;
       }
       $194 = HEAP32[$21>>2]|0;
       $195 = (_stbi__get8($194)|0);
       $196 = HEAP32[$14>>2]|0;
       $197 = $196<<2;
       $198 = (($197) + 0)|0;
       $199 = (($7) + ($198)|0);
       HEAP8[$199>>0] = $195;
       $200 = HEAP32[$21>>2]|0;
       $201 = (_stbi__get8($200)|0);
       $202 = HEAP32[$14>>2]|0;
       $203 = $202<<2;
       $204 = (($203) + 1)|0;
       $205 = (($7) + ($204)|0);
       HEAP8[$205>>0] = $201;
       $206 = HEAP32[$21>>2]|0;
       $207 = (_stbi__get8($206)|0);
       $208 = HEAP32[$14>>2]|0;
       $209 = $208<<2;
       $210 = (($209) + 2)|0;
       $211 = (($7) + ($210)|0);
       HEAP8[$211>>0] = $207;
       $212 = HEAP32[$14>>2]|0;
       $213 = $212<<2;
       $214 = (($213) + 3)|0;
       $215 = (($7) + ($214)|0);
       HEAP8[$215>>0] = -1;
       $216 = HEAP32[$14>>2]|0;
       $217 = (($216) + 1)|0;
       HEAP32[$14>>2] = $217;
      }
     }
     switch ($44|0) {
     case 1951551059:  {
      break;
     }
     default: {
      label = 126;
      break L10;
     }
     }
     $218 = HEAP32[$16>>2]|0;
     $219 = ($218|0)!=(0);
     if ($219) {
      label = 56;
      break L8;
     }
     $221 = HEAP32[$4>>2]|0;
     $222 = ((($221)) + 4|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = ($223|0)!=(0|0);
     if ($224) {
      label = 58;
      break L8;
     }
     $226 = HEAP8[$8>>0]|0;
     $227 = ($226<<24>>24)!=(0);
     if ($227) {
      $228 = HEAP32[$5>>2]|0;
      $229 = ($228|0)==(2);
      if ($229) {
       label = 61;
       break L8;
      }
      $232 = HEAP32[$15>>2]|0;
      $233 = ($232|0)==(0);
      if ($233) {
       label = 63;
       break L8;
      }
      $235 = HEAP32[$22>>2]|0;
      $236 = HEAP32[$15>>2]|0;
      $237 = ($235>>>0)>($236>>>0);
      if ($237) {
       label = 65;
       break L8;
      }
      HEAP8[$8>>0] = 4;
      HEAP32[$14>>2] = 0;
      while(1) {
       $239 = HEAP32[$14>>2]|0;
       $240 = HEAP32[$22>>2]|0;
       $241 = ($239>>>0)<($240>>>0);
       if (!($241)) {
        break L10;
       }
       $242 = HEAP32[$21>>2]|0;
       $243 = (_stbi__get8($242)|0);
       $244 = HEAP32[$14>>2]|0;
       $245 = $244<<2;
       $246 = (($245) + 3)|0;
       $247 = (($7) + ($246)|0);
       HEAP8[$247>>0] = $243;
       $248 = HEAP32[$14>>2]|0;
       $249 = (($248) + 1)|0;
       HEAP32[$14>>2] = $249;
      }
     }
     $250 = HEAP32[$21>>2]|0;
     $251 = ((($250)) + 8|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = $252 & 1;
     $254 = ($253|0)!=(0);
     if (!($254)) {
      label = 70;
      break L8;
     }
     $256 = HEAP32[$22>>2]|0;
     $257 = HEAP32[$21>>2]|0;
     $258 = ((($257)) + 8|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = $259<<1;
     $261 = ($256|0)!=($260|0);
     if ($261) {
      label = 72;
      break L8;
     }
     HEAP8[$9>>0] = 1;
     $263 = HEAP32[$4>>2]|0;
     $264 = ((($263)) + 16|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = ($265|0)==(16);
     HEAP32[$17>>2] = 0;
     if ($266) {
      while(1) {
       $267 = HEAP32[$17>>2]|0;
       $268 = HEAP32[$21>>2]|0;
       $269 = ((($268)) + 8|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($267|0)<($270|0);
       if (!($271)) {
        break L10;
       }
       $272 = HEAP32[$21>>2]|0;
       $273 = (_stbi__get16be($272)|0);
       $274 = $273&65535;
       $275 = HEAP32[$17>>2]|0;
       $276 = (($11) + ($275<<1)|0);
       HEAP16[$276>>1] = $274;
       $277 = HEAP32[$17>>2]|0;
       $278 = (($277) + 1)|0;
       HEAP32[$17>>2] = $278;
      }
     } else {
      while(1) {
       $279 = HEAP32[$17>>2]|0;
       $280 = HEAP32[$21>>2]|0;
       $281 = ((($280)) + 8|0);
       $282 = HEAP32[$281>>2]|0;
       $283 = ($279|0)<($282|0);
       if (!($283)) {
        break L10;
       }
       $284 = HEAP32[$21>>2]|0;
       $285 = (_stbi__get16be($284)|0);
       $286 = $285 & 255;
       $287 = $286&255;
       $288 = $287&255;
       $289 = HEAP32[$4>>2]|0;
       $290 = ((($289)) + 16|0);
       $291 = HEAP32[$290>>2]|0;
       $292 = (14585 + ($291)|0);
       $293 = HEAP8[$292>>0]|0;
       $294 = $293&255;
       $295 = Math_imul($288, $294)|0;
       $296 = $295&255;
       $297 = HEAP32[$17>>2]|0;
       $298 = (($10) + ($297)|0);
       HEAP8[$298>>0] = $296;
       $299 = HEAP32[$17>>2]|0;
       $300 = (($299) + 1)|0;
       HEAP32[$17>>2] = $300;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 126) {
   label = 0;
   $508 = HEAP32[$16>>2]|0;
   $509 = ($508|0)!=(0);
   if ($509) {
    label = 127;
    break;
   }
   $511 = ((($22)) + 4|0);
   $512 = HEAP32[$511>>2]|0;
   $513 = $512 & 536870912;
   $514 = ($513|0)==(0);
   if ($514) {
    label = 129;
    break;
   }
   $536 = HEAP32[$21>>2]|0;
   $537 = HEAP32[$22>>2]|0;
   _stbi__skip($536,$537);
  }
  $538 = HEAP32[$21>>2]|0;
  (_stbi__get32be($538)|0);
 }
 switch (label|0) {
  case 8: {
   $49 = (_stbi__err(20836)|0);
   HEAP32[$3>>2] = $49;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 10: {
   $52 = (_stbi__err(20850)|0);
   HEAP32[$3>>2] = $52;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 12: {
   $59 = (_stbi__err(20863)|0);
   HEAP32[$3>>2] = $59;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 14: {
   $68 = (_stbi__err(20863)|0);
   HEAP32[$3>>2] = $68;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 20: {
   $94 = (_stbi__err(20873)|0);
   HEAP32[$3>>2] = $94;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 22: {
   $100 = (_stbi__err(20893)|0);
   HEAP32[$3>>2] = $100;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 25: {
   $107 = (_stbi__err(20893)|0);
   HEAP32[$3>>2] = $107;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 29: {
   $113 = (_stbi__err(20893)|0);
   HEAP32[$3>>2] = $113;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 31: {
   $119 = (_stbi__err(20903)|0);
   HEAP32[$3>>2] = $119;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 33: {
   $125 = (_stbi__err(20919)|0);
   HEAP32[$3>>2] = $125;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 35: {
   $131 = (_stbi__err(20937)|0);
   HEAP32[$3>>2] = $131;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 38: {
   $139 = (_stbi__err(20958)|0);
   HEAP32[$3>>2] = $139;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 41: {
   $164 = (_stbi__err(20863)|0);
   HEAP32[$3>>2] = $164;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 43: {
   HEAP32[$3>>2] = 1;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 45: {
   $177 = (_stbi__err(20863)|0);
   HEAP32[$3>>2] = $177;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 47: {
   $180 = (_stbi__err(20972)|0);
   HEAP32[$3>>2] = $180;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 49: {
   $183 = (_stbi__err(20987)|0);
   HEAP32[$3>>2] = $183;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 51: {
   $190 = (_stbi__err(20987)|0);
   HEAP32[$3>>2] = $190;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 56: {
   $220 = (_stbi__err(20972)|0);
   HEAP32[$3>>2] = $220;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 58: {
   $225 = (_stbi__err(21000)|0);
   HEAP32[$3>>2] = $225;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 61: {
   $230 = HEAP32[$21>>2]|0;
   $231 = ((($230)) + 8|0);
   HEAP32[$231>>2] = 4;
   HEAP32[$3>>2] = 1;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 63: {
   $234 = (_stbi__err(21016)|0);
   HEAP32[$3>>2] = $234;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 65: {
   $238 = (_stbi__err(21033)|0);
   HEAP32[$3>>2] = $238;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 70: {
   $255 = (_stbi__err(21046)|0);
   HEAP32[$3>>2] = $255;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 72: {
   $262 = (_stbi__err(21033)|0);
   HEAP32[$3>>2] = $262;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 79: {
   $303 = (_stbi__err(20972)|0);
   HEAP32[$3>>2] = $303;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 81: {
   $309 = (_stbi__err(21062)|0);
   HEAP32[$3>>2] = $309;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 83: {
   $312 = HEAP8[$8>>0]|0;
   $313 = $312&255;
   $314 = HEAP32[$21>>2]|0;
   $315 = ((($314)) + 8|0);
   HEAP32[$315>>2] = $313;
   HEAP32[$3>>2] = 1;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 85: {
   HEAP32[$3>>2] = 0;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 92: {
   $347 = (_stbi__err(20616)|0);
   HEAP32[$3>>2] = $347;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 95: {
   $360 = (_stbi__err(21070)|0);
   HEAP32[$3>>2] = $360;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 97: {
   $364 = HEAP32[$16>>2]|0;
   $365 = ($364|0)!=(0);
   if ($365) {
    $366 = (_stbi__err(20972)|0);
    HEAP32[$3>>2] = $366;
    $539 = HEAP32[$3>>2]|0;
    STACKTOP = sp;return ($539|0);
   }
   $367 = HEAP32[$5>>2]|0;
   $368 = ($367|0)!=(0);
   if ($368) {
    HEAP32[$3>>2] = 1;
    $539 = HEAP32[$3>>2]|0;
    STACKTOP = sp;return ($539|0);
   }
   $369 = HEAP32[$4>>2]|0;
   $370 = ((($369)) + 4|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = ($371|0)==(0|0);
   if ($372) {
    $373 = (_stbi__err(21080)|0);
    HEAP32[$3>>2] = $373;
    $539 = HEAP32[$3>>2]|0;
    STACKTOP = sp;return ($539|0);
   }
   $374 = HEAP32[$21>>2]|0;
   $375 = HEAP32[$374>>2]|0;
   $376 = HEAP32[$4>>2]|0;
   $377 = ((($376)) + 16|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = Math_imul($375, $378)|0;
   $380 = (($379) + 7)|0;
   $381 = (($380>>>0) / 8)&-1;
   HEAP32[$28>>2] = $381;
   $382 = HEAP32[$28>>2]|0;
   $383 = HEAP32[$21>>2]|0;
   $384 = ((($383)) + 4|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = Math_imul($382, $385)|0;
   $387 = HEAP32[$21>>2]|0;
   $388 = ((($387)) + 8|0);
   $389 = HEAP32[$388>>2]|0;
   $390 = Math_imul($386, $389)|0;
   $391 = HEAP32[$21>>2]|0;
   $392 = ((($391)) + 4|0);
   $393 = HEAP32[$392>>2]|0;
   $394 = (($390) + ($393))|0;
   HEAP32[$27>>2] = $394;
   $395 = HEAP32[$4>>2]|0;
   $396 = ((($395)) + 4|0);
   $397 = HEAP32[$396>>2]|0;
   $398 = HEAP32[$12>>2]|0;
   $399 = HEAP32[$27>>2]|0;
   $400 = HEAP32[$20>>2]|0;
   $401 = ($400|0)!=(0);
   $402 = $401 ^ 1;
   $403 = $402&1;
   $404 = (_stbi_zlib_decode_malloc_guesssize_headerflag($397,$398,$399,$27,$403)|0);
   $405 = HEAP32[$4>>2]|0;
   $406 = ((($405)) + 8|0);
   HEAP32[$406>>2] = $404;
   $407 = HEAP32[$4>>2]|0;
   $408 = ((($407)) + 8|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = ($409|0)==(0|0);
   if ($410) {
    HEAP32[$3>>2] = 0;
    $539 = HEAP32[$3>>2]|0;
    STACKTOP = sp;return ($539|0);
   }
   $411 = HEAP32[$4>>2]|0;
   $412 = ((($411)) + 4|0);
   $413 = HEAP32[$412>>2]|0;
   _free($413);
   $414 = HEAP32[$4>>2]|0;
   $415 = ((($414)) + 4|0);
   HEAP32[$415>>2] = 0;
   $416 = HEAP32[$6>>2]|0;
   $417 = HEAP32[$21>>2]|0;
   $418 = ((($417)) + 8|0);
   $419 = HEAP32[$418>>2]|0;
   $420 = (($419) + 1)|0;
   $421 = ($416|0)==($420|0);
   $422 = HEAP32[$6>>2]|0;
   $423 = ($422|0)!=(3);
   $or$cond3 = $421 & $423;
   $or$cond3$not = $or$cond3 ^ 1;
   $424 = HEAP8[$8>>0]|0;
   $425 = ($424<<24>>24)!=(0);
   $or$cond5 = $or$cond3$not | $425;
   if ($or$cond5) {
    $426 = HEAP8[$9>>0]|0;
    $427 = $426&255;
    $428 = ($427|0)!=(0);
    if ($428) {
     label = 107;
    } else {
     $435 = HEAP32[$21>>2]|0;
     $436 = ((($435)) + 8|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = HEAP32[$21>>2]|0;
     $439 = ((($438)) + 12|0);
     HEAP32[$439>>2] = $437;
    }
   } else {
    label = 107;
   }
   if ((label|0) == 107) {
    $429 = HEAP32[$21>>2]|0;
    $430 = ((($429)) + 8|0);
    $431 = HEAP32[$430>>2]|0;
    $432 = (($431) + 1)|0;
    $433 = HEAP32[$21>>2]|0;
    $434 = ((($433)) + 12|0);
    HEAP32[$434>>2] = $432;
   }
   $440 = HEAP32[$4>>2]|0;
   $441 = HEAP32[$4>>2]|0;
   $442 = ((($441)) + 8|0);
   $443 = HEAP32[$442>>2]|0;
   $444 = HEAP32[$27>>2]|0;
   $445 = HEAP32[$21>>2]|0;
   $446 = ((($445)) + 12|0);
   $447 = HEAP32[$446>>2]|0;
   $448 = HEAP32[$4>>2]|0;
   $449 = ((($448)) + 16|0);
   $450 = HEAP32[$449>>2]|0;
   $451 = HEAP32[$19>>2]|0;
   $452 = HEAP32[$18>>2]|0;
   $453 = (_stbi__create_png_image($440,$443,$444,$447,$450,$451,$452)|0);
   $454 = ($453|0)!=(0);
   if (!($454)) {
    HEAP32[$3>>2] = 0;
    $539 = HEAP32[$3>>2]|0;
    STACKTOP = sp;return ($539|0);
   }
   $455 = HEAP8[$9>>0]|0;
   $456 = ($455<<24>>24)!=(0);
   do {
    if ($456) {
     $457 = HEAP32[$4>>2]|0;
     $458 = ((($457)) + 16|0);
     $459 = HEAP32[$458>>2]|0;
     $460 = ($459|0)==(16);
     $461 = HEAP32[$4>>2]|0;
     if ($460) {
      $462 = HEAP32[$21>>2]|0;
      $463 = ((($462)) + 12|0);
      $464 = HEAP32[$463>>2]|0;
      $465 = (_stbi__compute_transparency16($461,$11,$464)|0);
      $466 = ($465|0)!=(0);
      if ($466) {
       break;
      }
      HEAP32[$3>>2] = 0;
      $539 = HEAP32[$3>>2]|0;
      STACKTOP = sp;return ($539|0);
     } else {
      $467 = HEAP32[$21>>2]|0;
      $468 = ((($467)) + 12|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = (_stbi__compute_transparency($461,$10,$469)|0);
      $471 = ($470|0)!=(0);
      if ($471) {
       break;
      }
      HEAP32[$3>>2] = 0;
      $539 = HEAP32[$3>>2]|0;
      STACKTOP = sp;return ($539|0);
     }
    }
   } while(0);
   $472 = HEAP32[$20>>2]|0;
   $473 = ($472|0)!=(0);
   $474 = HEAP32[8641]|0;
   $475 = ($474|0)!=(0);
   $or$cond7 = $473 & $475;
   if ($or$cond7) {
    $476 = HEAP32[$21>>2]|0;
    $477 = ((($476)) + 12|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = ($478|0)>(2);
    if ($479) {
     $480 = HEAP32[$4>>2]|0;
     _stbi__de_iphone($480);
    }
   }
   $481 = HEAP8[$8>>0]|0;
   $482 = ($481<<24>>24)!=(0);
   if ($482) {
    $483 = HEAP8[$8>>0]|0;
    $484 = $483&255;
    $485 = HEAP32[$21>>2]|0;
    $486 = ((($485)) + 8|0);
    HEAP32[$486>>2] = $484;
    $487 = HEAP8[$8>>0]|0;
    $488 = $487&255;
    $489 = HEAP32[$21>>2]|0;
    $490 = ((($489)) + 12|0);
    HEAP32[$490>>2] = $488;
    $491 = HEAP32[$6>>2]|0;
    $492 = ($491|0)>=(3);
    if ($492) {
     $493 = HEAP32[$6>>2]|0;
     $494 = HEAP32[$21>>2]|0;
     $495 = ((($494)) + 12|0);
     HEAP32[$495>>2] = $493;
    }
    $496 = HEAP32[$4>>2]|0;
    $497 = HEAP32[$15>>2]|0;
    $498 = HEAP32[$21>>2]|0;
    $499 = ((($498)) + 12|0);
    $500 = HEAP32[$499>>2]|0;
    $501 = (_stbi__expand_png_palette($496,$7,$497,$500)|0);
    $502 = ($501|0)!=(0);
    if (!($502)) {
     HEAP32[$3>>2] = 0;
     $539 = HEAP32[$3>>2]|0;
     STACKTOP = sp;return ($539|0);
    }
   }
   $503 = HEAP32[$4>>2]|0;
   $504 = ((($503)) + 8|0);
   $505 = HEAP32[$504>>2]|0;
   _free($505);
   $506 = HEAP32[$4>>2]|0;
   $507 = ((($506)) + 8|0);
   HEAP32[$507>>2] = 0;
   HEAP32[$3>>2] = 1;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 127: {
   $510 = (_stbi__err(20972)|0);
   HEAP32[$3>>2] = $510;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
  case 129: {
   $515 = ((($22)) + 4|0);
   $516 = HEAP32[$515>>2]|0;
   $517 = $516 >>> 24;
   $518 = $517 & 255;
   $519 = $518&255;
   HEAP8[14594] = $519;
   $520 = ((($22)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 >>> 16;
   $523 = $522 & 255;
   $524 = $523&255;
   HEAP8[(14595)>>0] = $524;
   $525 = ((($22)) + 4|0);
   $526 = HEAP32[$525>>2]|0;
   $527 = $526 >>> 8;
   $528 = $527 & 255;
   $529 = $528&255;
   HEAP8[(14596)>>0] = $529;
   $530 = ((($22)) + 4|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = $531 >>> 0;
   $533 = $532 & 255;
   $534 = $533&255;
   HEAP8[(14597)>>0] = $534;
   $535 = (_stbi__err(14594)|0);
   HEAP32[$3>>2] = $535;
   $539 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($539|0);
   break;
  }
 }
 return (0)|0;
}
function _stbi__reduce_png($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$2>>2] = $0;
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = Math_imul($9, $13)|0;
 $15 = HEAP32[$2>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = Math_imul($14, $18)|0;
 HEAP32[$4>>2] = $19;
 $20 = HEAP32[$2>>2]|0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$6>>2] = $22;
 $23 = HEAP32[$2>>2]|0;
 $24 = ((($23)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(16);
 if ($26) {
  HEAP32[$1>>2] = 1;
  $52 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($52|0);
 }
 $27 = HEAP32[$4>>2]|0;
 $28 = (_stbi__malloc($27)|0);
 HEAP32[$5>>2] = $28;
 $29 = HEAP32[$2>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = (_stbi__err(20616)|0);
  HEAP32[$1>>2] = $31;
  $52 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($52|0);
 }
 HEAP32[$3>>2] = 0;
 while(1) {
  $32 = HEAP32[$3>>2]|0;
  $33 = HEAP32[$4>>2]|0;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = HEAP32[$3>>2]|0;
  $36 = HEAP32[$6>>2]|0;
  $37 = (($36) + ($35<<1)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = $39 >> 8;
  $41 = $40 & 255;
  $42 = $41&255;
  $43 = HEAP32[$3>>2]|0;
  $44 = HEAP32[$5>>2]|0;
  $45 = (($44) + ($43)|0);
  HEAP8[$45>>0] = $42;
  $46 = HEAP32[$3>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$3>>2] = $47;
 }
 $48 = HEAP32[$5>>2]|0;
 $49 = HEAP32[$2>>2]|0;
 $50 = ((($49)) + 12|0);
 HEAP32[$50>>2] = $48;
 $51 = HEAP32[$6>>2]|0;
 _free($51);
 HEAP32[$1>>2] = 1;
 $52 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($52|0);
}
function _stbi__check_png_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<(8);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = (_stbi__get8($6)|0);
  $8 = $7&255;
  $9 = HEAP32[$3>>2]|0;
  $10 = (14619 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($8|0)!=($12|0);
  if ($13) {
   label = 4;
   break;
  }
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$3>>2] = $16;
 }
 if ((label|0) == 4) {
  $14 = (_stbi__err(21715)|0);
  HEAP32[$1>>2] = $14;
  $17 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  HEAP32[$1>>2] = 1;
  $17 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _stbi__get_chunk_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp;
 HEAP32[$2>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = (_stbi__get32be($4)|0);
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$2>>2]|0;
 $7 = (_stbi__get32be($6)|0);
 $8 = ((($3)) + 4|0);
 HEAP32[$8>>2] = $7;
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;
 STACKTOP = sp;return;
}
function _stbi__get32be($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_stbi__get16be($3)|0);
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 $6 = $5 << 16;
 $7 = HEAP32[$1>>2]|0;
 $8 = (_stbi__get16be($7)|0);
 $9 = (($6) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function _stbi__get16be($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_stbi__get8($3)|0);
 $5 = $4&255;
 HEAP32[$2>>2] = $5;
 $6 = HEAP32[$2>>2]|0;
 $7 = $6 << 8;
 $8 = HEAP32[$1>>2]|0;
 $9 = (_stbi__get8($8)|0);
 $10 = $9&255;
 $11 = (($7) + ($10))|0;
 STACKTOP = sp;return ($11|0);
}
function _stbi_zlib_decode_malloc_guesssize_headerflag($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $5 = sp + 4100|0;
 $6 = sp + 4096|0;
 $7 = sp + 4092|0;
 $8 = sp + 4088|0;
 $9 = sp + 4084|0;
 $10 = sp + 4080|0;
 $11 = sp + 8|0;
 $12 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $13 = HEAP32[$8>>2]|0;
 $14 = (_stbi__malloc($13)|0);
 HEAP32[$12>>2] = $14;
 $15 = HEAP32[$12>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$5>>2] = 0;
  $41 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 $17 = HEAP32[$6>>2]|0;
 HEAP32[$11>>2] = $17;
 $18 = HEAP32[$6>>2]|0;
 $19 = HEAP32[$7>>2]|0;
 $20 = (($18) + ($19)|0);
 $21 = ((($11)) + 4|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$12>>2]|0;
 $23 = HEAP32[$8>>2]|0;
 $24 = HEAP32[$10>>2]|0;
 $25 = (_stbi__do_zlib($11,$22,$23,1,$24)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $39 = ((($11)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  _free($40);
  HEAP32[$5>>2] = 0;
  $41 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 $27 = HEAP32[$9>>2]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = ((($11)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($11)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $30;
  $34 = $32;
  $35 = (($33) - ($34))|0;
  $36 = HEAP32[$9>>2]|0;
  HEAP32[$36>>2] = $35;
 }
 $37 = ((($11)) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$5>>2] = $38;
 $41 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function _stbi__create_png_image($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $7 = sp + 176|0;
 $8 = sp + 172|0;
 $9 = sp + 168|0;
 $10 = sp + 164|0;
 $11 = sp + 160|0;
 $12 = sp + 156|0;
 $13 = sp + 152|0;
 $14 = sp + 148|0;
 $15 = sp + 144|0;
 $16 = sp + 140|0;
 $17 = sp + 112|0;
 $18 = sp + 84|0;
 $19 = sp + 56|0;
 $20 = sp + 28|0;
 $21 = sp + 24|0;
 $22 = sp + 20|0;
 $23 = sp + 16|0;
 $24 = sp + 12|0;
 $25 = sp + 8|0;
 $26 = sp + 4|0;
 $27 = sp;
 HEAP32[$8>>2] = $0;
 HEAP32[$9>>2] = $1;
 HEAP32[$10>>2] = $2;
 HEAP32[$11>>2] = $3;
 HEAP32[$12>>2] = $4;
 HEAP32[$13>>2] = $5;
 HEAP32[$14>>2] = $6;
 $28 = HEAP32[$14>>2]|0;
 $29 = ($28|0)!=(0);
 $30 = HEAP32[$8>>2]|0;
 if (!($29)) {
  $31 = HEAP32[$9>>2]|0;
  $32 = HEAP32[$10>>2]|0;
  $33 = HEAP32[$11>>2]|0;
  $34 = HEAP32[$8>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$8>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$12>>2]|0;
  $42 = HEAP32[$13>>2]|0;
  $43 = (_stbi__create_png_image_raw($30,$31,$32,$33,$36,$40,$41,$42)|0);
  HEAP32[$7>>2] = $43;
  $183 = HEAP32[$7>>2]|0;
  STACKTOP = sp;return ($183|0);
 }
 $44 = HEAP32[$30>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$8>>2]|0;
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = Math_imul($45, $49)|0;
 $51 = HEAP32[$11>>2]|0;
 $52 = Math_imul($50, $51)|0;
 $53 = (_stbi__malloc($52)|0);
 HEAP32[$15>>2] = $53;
 HEAP32[$16>>2] = 0;
 while(1) {
  $54 = HEAP32[$16>>2]|0;
  $55 = ($54|0)<(7);
  if (!($55)) {
   label = 16;
   break;
  }
  ;HEAP32[$17>>2]=HEAP32[5548>>2]|0;HEAP32[$17+4>>2]=HEAP32[5548+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[5548+8>>2]|0;HEAP32[$17+12>>2]=HEAP32[5548+12>>2]|0;HEAP32[$17+16>>2]=HEAP32[5548+16>>2]|0;HEAP32[$17+20>>2]=HEAP32[5548+20>>2]|0;HEAP32[$17+24>>2]=HEAP32[5548+24>>2]|0;
  ;HEAP32[$18>>2]=HEAP32[5576>>2]|0;HEAP32[$18+4>>2]=HEAP32[5576+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[5576+8>>2]|0;HEAP32[$18+12>>2]=HEAP32[5576+12>>2]|0;HEAP32[$18+16>>2]=HEAP32[5576+16>>2]|0;HEAP32[$18+20>>2]=HEAP32[5576+20>>2]|0;HEAP32[$18+24>>2]=HEAP32[5576+24>>2]|0;
  ;HEAP32[$19>>2]=HEAP32[5604>>2]|0;HEAP32[$19+4>>2]=HEAP32[5604+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[5604+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[5604+12>>2]|0;HEAP32[$19+16>>2]=HEAP32[5604+16>>2]|0;HEAP32[$19+20>>2]=HEAP32[5604+20>>2]|0;HEAP32[$19+24>>2]=HEAP32[5604+24>>2]|0;
  ;HEAP32[$20>>2]=HEAP32[5632>>2]|0;HEAP32[$20+4>>2]=HEAP32[5632+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[5632+8>>2]|0;HEAP32[$20+12>>2]=HEAP32[5632+12>>2]|0;HEAP32[$20+16>>2]=HEAP32[5632+16>>2]|0;HEAP32[$20+20>>2]=HEAP32[5632+20>>2]|0;HEAP32[$20+24>>2]=HEAP32[5632+24>>2]|0;
  $56 = HEAP32[$8>>2]|0;
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP32[$16>>2]|0;
  $60 = (($17) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($58) - ($61))|0;
  $63 = HEAP32[$16>>2]|0;
  $64 = (($19) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($62) + ($65))|0;
  $67 = (($66) - 1)|0;
  $68 = HEAP32[$16>>2]|0;
  $69 = (($19) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($67>>>0) / ($70>>>0))&-1;
  HEAP32[$23>>2] = $71;
  $72 = HEAP32[$8>>2]|0;
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = HEAP32[$16>>2]|0;
  $77 = (($18) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($75) - ($78))|0;
  $80 = HEAP32[$16>>2]|0;
  $81 = (($20) + ($80<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($79) + ($82))|0;
  $84 = (($83) - 1)|0;
  $85 = HEAP32[$16>>2]|0;
  $86 = (($20) + ($85<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($84>>>0) / ($87>>>0))&-1;
  HEAP32[$24>>2] = $88;
  $89 = HEAP32[$23>>2]|0;
  $90 = ($89|0)!=(0);
  $91 = HEAP32[$24>>2]|0;
  $92 = ($91|0)!=(0);
  $or$cond = $90 & $92;
  if ($or$cond) {
   $93 = HEAP32[$8>>2]|0;
   $94 = HEAP32[$93>>2]|0;
   $95 = ((($94)) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = HEAP32[$23>>2]|0;
   $98 = Math_imul($96, $97)|0;
   $99 = HEAP32[$12>>2]|0;
   $100 = Math_imul($98, $99)|0;
   $101 = (($100) + 7)|0;
   $102 = $101 >> 3;
   $103 = (($102) + 1)|0;
   $104 = HEAP32[$24>>2]|0;
   $105 = Math_imul($103, $104)|0;
   HEAP32[$25>>2] = $105;
   $106 = HEAP32[$8>>2]|0;
   $107 = HEAP32[$9>>2]|0;
   $108 = HEAP32[$10>>2]|0;
   $109 = HEAP32[$11>>2]|0;
   $110 = HEAP32[$23>>2]|0;
   $111 = HEAP32[$24>>2]|0;
   $112 = HEAP32[$12>>2]|0;
   $113 = HEAP32[$13>>2]|0;
   $114 = (_stbi__create_png_image_raw($106,$107,$108,$109,$110,$111,$112,$113)|0);
   $115 = ($114|0)!=(0);
   if (!($115)) {
    label = 7;
    break;
   }
   HEAP32[$22>>2] = 0;
   while(1) {
    $117 = HEAP32[$22>>2]|0;
    $118 = HEAP32[$24>>2]|0;
    $119 = ($117|0)<($118|0);
    if (!($119)) {
     break;
    }
    HEAP32[$21>>2] = 0;
    while(1) {
     $120 = HEAP32[$21>>2]|0;
     $121 = HEAP32[$23>>2]|0;
     $122 = ($120|0)<($121|0);
     $123 = HEAP32[$22>>2]|0;
     if (!($122)) {
      break;
     }
     $124 = HEAP32[$16>>2]|0;
     $125 = (($20) + ($124<<2)|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = Math_imul($123, $126)|0;
     $128 = HEAP32[$16>>2]|0;
     $129 = (($18) + ($128<<2)|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($127) + ($130))|0;
     HEAP32[$26>>2] = $131;
     $132 = HEAP32[$21>>2]|0;
     $133 = HEAP32[$16>>2]|0;
     $134 = (($19) + ($133<<2)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = Math_imul($132, $135)|0;
     $137 = HEAP32[$16>>2]|0;
     $138 = (($17) + ($137<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($136) + ($139))|0;
     HEAP32[$27>>2] = $140;
     $141 = HEAP32[$15>>2]|0;
     $142 = HEAP32[$26>>2]|0;
     $143 = HEAP32[$8>>2]|0;
     $144 = HEAP32[$143>>2]|0;
     $145 = HEAP32[$144>>2]|0;
     $146 = Math_imul($142, $145)|0;
     $147 = HEAP32[$11>>2]|0;
     $148 = Math_imul($146, $147)|0;
     $149 = (($141) + ($148)|0);
     $150 = HEAP32[$27>>2]|0;
     $151 = HEAP32[$11>>2]|0;
     $152 = Math_imul($150, $151)|0;
     $153 = (($149) + ($152)|0);
     $154 = HEAP32[$8>>2]|0;
     $155 = ((($154)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = HEAP32[$22>>2]|0;
     $158 = HEAP32[$23>>2]|0;
     $159 = Math_imul($157, $158)|0;
     $160 = HEAP32[$21>>2]|0;
     $161 = (($159) + ($160))|0;
     $162 = HEAP32[$11>>2]|0;
     $163 = Math_imul($161, $162)|0;
     $164 = (($156) + ($163)|0);
     $165 = HEAP32[$11>>2]|0;
     _memcpy(($153|0),($164|0),($165|0))|0;
     $166 = HEAP32[$21>>2]|0;
     $167 = (($166) + 1)|0;
     HEAP32[$21>>2] = $167;
    }
    $168 = (($123) + 1)|0;
    HEAP32[$22>>2] = $168;
   }
   $169 = HEAP32[$8>>2]|0;
   $170 = ((($169)) + 12|0);
   $171 = HEAP32[$170>>2]|0;
   _free($171);
   $172 = HEAP32[$25>>2]|0;
   $173 = HEAP32[$9>>2]|0;
   $174 = (($173) + ($172)|0);
   HEAP32[$9>>2] = $174;
   $175 = HEAP32[$25>>2]|0;
   $176 = HEAP32[$10>>2]|0;
   $177 = (($176) - ($175))|0;
   HEAP32[$10>>2] = $177;
  }
  $178 = HEAP32[$16>>2]|0;
  $179 = (($178) + 1)|0;
  HEAP32[$16>>2] = $179;
 }
 if ((label|0) == 7) {
  $116 = HEAP32[$15>>2]|0;
  _free($116);
  HEAP32[$7>>2] = 0;
  $183 = HEAP32[$7>>2]|0;
  STACKTOP = sp;return ($183|0);
 }
 else if ((label|0) == 16) {
  $180 = HEAP32[$15>>2]|0;
  $181 = HEAP32[$8>>2]|0;
  $182 = ((($181)) + 12|0);
  HEAP32[$182>>2] = $180;
  HEAP32[$7>>2] = 1;
  $183 = HEAP32[$7>>2]|0;
  STACKTOP = sp;return ($183|0);
 }
 return (0)|0;
}
function _stbi__compute_transparency16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $10 = HEAP32[$3>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = HEAP32[$6>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$6>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($13, $16)|0;
 HEAP32[$8>>2] = $17;
 $18 = HEAP32[$3>>2]|0;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$9>>2] = $20;
 $21 = HEAP32[$5>>2]|0;
 $22 = ($21|0)==(2);
 $23 = HEAP32[$5>>2]|0;
 $24 = ($23|0)==(4);
 $or$cond = $22 | $24;
 if (!($or$cond)) {
  ___assert_fail((21122|0),(20646|0),4298,(21174|0));
  // unreachable;
 }
 $25 = HEAP32[$5>>2]|0;
 $26 = ($25|0)==(2);
 HEAP32[$7>>2] = 0;
 if ($26) {
  while(1) {
   $27 = HEAP32[$7>>2]|0;
   $28 = HEAP32[$8>>2]|0;
   $29 = ($27>>>0)<($28>>>0);
   if (!($29)) {
    break;
   }
   $30 = HEAP32[$9>>2]|0;
   $31 = HEAP16[$30>>1]|0;
   $32 = $31&65535;
   $33 = HEAP32[$4>>2]|0;
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   $36 = ($32|0)==($35|0);
   $37 = $36 ? 0 : 65535;
   $38 = $37&65535;
   $39 = HEAP32[$9>>2]|0;
   $40 = ((($39)) + 2|0);
   HEAP16[$40>>1] = $38;
   $41 = HEAP32[$9>>2]|0;
   $42 = ((($41)) + 4|0);
   HEAP32[$9>>2] = $42;
   $43 = HEAP32[$7>>2]|0;
   $44 = (($43) + 1)|0;
   HEAP32[$7>>2] = $44;
  }
  STACKTOP = sp;return 1;
 }
 while(1) {
  $45 = HEAP32[$7>>2]|0;
  $46 = HEAP32[$8>>2]|0;
  $47 = ($45>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = HEAP32[$9>>2]|0;
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = HEAP32[$4>>2]|0;
  $52 = HEAP16[$51>>1]|0;
  $53 = $52&65535;
  $54 = ($50|0)==($53|0);
  if ($54) {
   $55 = HEAP32[$9>>2]|0;
   $56 = ((($55)) + 2|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $57&65535;
   $59 = HEAP32[$4>>2]|0;
   $60 = ((($59)) + 2|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = ($58|0)==($62|0);
   if ($63) {
    $64 = HEAP32[$9>>2]|0;
    $65 = ((($64)) + 4|0);
    $66 = HEAP16[$65>>1]|0;
    $67 = $66&65535;
    $68 = HEAP32[$4>>2]|0;
    $69 = ((($68)) + 4|0);
    $70 = HEAP16[$69>>1]|0;
    $71 = $70&65535;
    $72 = ($67|0)==($71|0);
    if ($72) {
     $73 = HEAP32[$9>>2]|0;
     $74 = ((($73)) + 6|0);
     HEAP16[$74>>1] = 0;
    }
   }
  }
  $75 = HEAP32[$9>>2]|0;
  $76 = ((($75)) + 8|0);
  HEAP32[$9>>2] = $76;
  $77 = HEAP32[$7>>2]|0;
  $78 = (($77) + 1)|0;
  HEAP32[$7>>2] = $78;
 }
 STACKTOP = sp;return 1;
}
function _stbi__compute_transparency($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $10 = HEAP32[$3>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = HEAP32[$6>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$6>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($13, $16)|0;
 HEAP32[$8>>2] = $17;
 $18 = HEAP32[$3>>2]|0;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$9>>2] = $20;
 $21 = HEAP32[$5>>2]|0;
 $22 = ($21|0)==(2);
 $23 = HEAP32[$5>>2]|0;
 $24 = ($23|0)==(4);
 $or$cond = $22 | $24;
 if (!($or$cond)) {
  ___assert_fail((21122|0),(20646|0),4273,(21147|0));
  // unreachable;
 }
 $25 = HEAP32[$5>>2]|0;
 $26 = ($25|0)==(2);
 HEAP32[$7>>2] = 0;
 if ($26) {
  while(1) {
   $27 = HEAP32[$7>>2]|0;
   $28 = HEAP32[$8>>2]|0;
   $29 = ($27>>>0)<($28>>>0);
   if (!($29)) {
    break;
   }
   $30 = HEAP32[$9>>2]|0;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = HEAP32[$4>>2]|0;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($32|0)==($35|0);
   $37 = $36 ? 0 : 255;
   $38 = $37&255;
   $39 = HEAP32[$9>>2]|0;
   $40 = ((($39)) + 1|0);
   HEAP8[$40>>0] = $38;
   $41 = HEAP32[$9>>2]|0;
   $42 = ((($41)) + 2|0);
   HEAP32[$9>>2] = $42;
   $43 = HEAP32[$7>>2]|0;
   $44 = (($43) + 1)|0;
   HEAP32[$7>>2] = $44;
  }
  STACKTOP = sp;return 1;
 }
 while(1) {
  $45 = HEAP32[$7>>2]|0;
  $46 = HEAP32[$8>>2]|0;
  $47 = ($45>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = HEAP32[$9>>2]|0;
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = HEAP32[$4>>2]|0;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = ($50|0)==($53|0);
  if ($54) {
   $55 = HEAP32[$9>>2]|0;
   $56 = ((($55)) + 1|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = HEAP32[$4>>2]|0;
   $60 = ((($59)) + 1|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = ($58|0)==($62|0);
   if ($63) {
    $64 = HEAP32[$9>>2]|0;
    $65 = ((($64)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = HEAP32[$4>>2]|0;
    $69 = ((($68)) + 2|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70&255;
    $72 = ($67|0)==($71|0);
    if ($72) {
     $73 = HEAP32[$9>>2]|0;
     $74 = ((($73)) + 3|0);
     HEAP8[$74>>0] = 0;
    }
   }
  }
  $75 = HEAP32[$9>>2]|0;
  $76 = ((($75)) + 4|0);
  HEAP32[$9>>2] = $76;
  $77 = HEAP32[$7>>2]|0;
  $78 = (($77) + 1)|0;
  HEAP32[$7>>2] = $78;
 }
 STACKTOP = sp;return 1;
}
function _stbi__de_iphone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = sp + 23|0;
 $7 = sp + 22|0;
 $8 = sp + 21|0;
 $9 = sp + 20|0;
 HEAP32[$1>>2] = $0;
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$2>>2] = $11;
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($13, $16)|0;
 HEAP32[$4>>2] = $17;
 $18 = HEAP32[$1>>2]|0;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$5>>2] = $20;
 $21 = HEAP32[$2>>2]|0;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(3);
 if ($24) {
  HEAP32[$3>>2] = 0;
  while(1) {
   $25 = HEAP32[$3>>2]|0;
   $26 = HEAP32[$4>>2]|0;
   $27 = ($25>>>0)<($26>>>0);
   if (!($27)) {
    break;
   }
   $28 = HEAP32[$5>>2]|0;
   $29 = HEAP8[$28>>0]|0;
   HEAP8[$6>>0] = $29;
   $30 = HEAP32[$5>>2]|0;
   $31 = ((($30)) + 2|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = HEAP32[$5>>2]|0;
   HEAP8[$33>>0] = $32;
   $34 = HEAP8[$6>>0]|0;
   $35 = HEAP32[$5>>2]|0;
   $36 = ((($35)) + 2|0);
   HEAP8[$36>>0] = $34;
   $37 = HEAP32[$5>>2]|0;
   $38 = ((($37)) + 3|0);
   HEAP32[$5>>2] = $38;
   $39 = HEAP32[$3>>2]|0;
   $40 = (($39) + 1)|0;
   HEAP32[$3>>2] = $40;
  }
  STACKTOP = sp;return;
 }
 $41 = HEAP32[$2>>2]|0;
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(4);
 if (!($44)) {
  ___assert_fail((21088|0),(20646|0),4399,(21106|0));
  // unreachable;
 }
 $45 = HEAP32[8642]|0;
 $46 = ($45|0)!=(0);
 HEAP32[$3>>2] = 0;
 if (!($46)) {
  while(1) {
   $95 = HEAP32[$3>>2]|0;
   $96 = HEAP32[$4>>2]|0;
   $97 = ($95>>>0)<($96>>>0);
   if (!($97)) {
    break;
   }
   $98 = HEAP32[$5>>2]|0;
   $99 = HEAP8[$98>>0]|0;
   HEAP8[$9>>0] = $99;
   $100 = HEAP32[$5>>2]|0;
   $101 = ((($100)) + 2|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = HEAP32[$5>>2]|0;
   HEAP8[$103>>0] = $102;
   $104 = HEAP8[$9>>0]|0;
   $105 = HEAP32[$5>>2]|0;
   $106 = ((($105)) + 2|0);
   HEAP8[$106>>0] = $104;
   $107 = HEAP32[$5>>2]|0;
   $108 = ((($107)) + 4|0);
   HEAP32[$5>>2] = $108;
   $109 = HEAP32[$3>>2]|0;
   $110 = (($109) + 1)|0;
   HEAP32[$3>>2] = $110;
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $47 = HEAP32[$3>>2]|0;
  $48 = HEAP32[$4>>2]|0;
  $49 = ($47>>>0)<($48>>>0);
  if (!($49)) {
   break;
  }
  $50 = HEAP32[$5>>2]|0;
  $51 = ((($50)) + 3|0);
  $52 = HEAP8[$51>>0]|0;
  HEAP8[$7>>0] = $52;
  $53 = HEAP32[$5>>2]|0;
  $54 = HEAP8[$53>>0]|0;
  HEAP8[$8>>0] = $54;
  $55 = HEAP8[$7>>0]|0;
  $56 = ($55<<24>>24)!=(0);
  $57 = HEAP32[$5>>2]|0;
  $58 = ((($57)) + 2|0);
  $59 = HEAP8[$58>>0]|0;
  if ($56) {
   $60 = $59&255;
   $61 = ($60*255)|0;
   $62 = HEAP8[$7>>0]|0;
   $63 = $62&255;
   $64 = (($61|0) / ($63|0))&-1;
   $65 = $64&255;
   $66 = HEAP32[$5>>2]|0;
   HEAP8[$66>>0] = $65;
   $67 = HEAP32[$5>>2]|0;
   $68 = ((($67)) + 1|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = ($70*255)|0;
   $72 = HEAP8[$7>>0]|0;
   $73 = $72&255;
   $74 = (($71|0) / ($73|0))&-1;
   $75 = $74&255;
   $76 = HEAP32[$5>>2]|0;
   $77 = ((($76)) + 1|0);
   HEAP8[$77>>0] = $75;
   $78 = HEAP8[$8>>0]|0;
   $79 = $78&255;
   $80 = ($79*255)|0;
   $81 = HEAP8[$7>>0]|0;
   $82 = $81&255;
   $83 = (($80|0) / ($82|0))&-1;
   $84 = $83&255;
   $85 = HEAP32[$5>>2]|0;
   $86 = ((($85)) + 2|0);
   HEAP8[$86>>0] = $84;
  } else {
   $87 = HEAP32[$5>>2]|0;
   HEAP8[$87>>0] = $59;
   $88 = HEAP8[$8>>0]|0;
   $89 = HEAP32[$5>>2]|0;
   $90 = ((($89)) + 2|0);
   HEAP8[$90>>0] = $88;
  }
  $91 = HEAP32[$5>>2]|0;
  $92 = ((($91)) + 4|0);
  HEAP32[$5>>2] = $92;
  $93 = HEAP32[$3>>2]|0;
  $94 = (($93) + 1)|0;
  HEAP32[$3>>2] = $94;
 }
 STACKTOP = sp;return;
}
function _stbi__expand_png_palette($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 44|0;
 $5 = sp + 40|0;
 $6 = sp + 36|0;
 $7 = sp + 32|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 20|0;
 $11 = sp + 16|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $16 = HEAP32[$5>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$5>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = Math_imul($18, $22)|0;
 HEAP32[$10>>2] = $23;
 $24 = HEAP32[$5>>2]|0;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$13>>2] = $26;
 $27 = HEAP32[$10>>2]|0;
 $28 = HEAP32[$8>>2]|0;
 $29 = Math_imul($27, $28)|0;
 $30 = (_stbi__malloc($29)|0);
 HEAP32[$11>>2] = $30;
 $31 = HEAP32[$11>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $33 = (_stbi__err(20616)|0);
  HEAP32[$4>>2] = $33;
  $114 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($114|0);
 }
 $34 = HEAP32[$11>>2]|0;
 HEAP32[$12>>2] = $34;
 $35 = HEAP32[$8>>2]|0;
 $36 = ($35|0)==(3);
 HEAP32[$9>>2] = 0;
 L5: do {
  if ($36) {
   while(1) {
    $37 = HEAP32[$9>>2]|0;
    $38 = HEAP32[$10>>2]|0;
    $39 = ($37>>>0)<($38>>>0);
    if (!($39)) {
     break L5;
    }
    $40 = HEAP32[$9>>2]|0;
    $41 = HEAP32[$13>>2]|0;
    $42 = (($41) + ($40)|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = $44<<2;
    HEAP32[$14>>2] = $45;
    $46 = HEAP32[$14>>2]|0;
    $47 = HEAP32[$6>>2]|0;
    $48 = (($47) + ($46)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = HEAP32[$11>>2]|0;
    HEAP8[$50>>0] = $49;
    $51 = HEAP32[$14>>2]|0;
    $52 = (($51) + 1)|0;
    $53 = HEAP32[$6>>2]|0;
    $54 = (($53) + ($52)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = HEAP32[$11>>2]|0;
    $57 = ((($56)) + 1|0);
    HEAP8[$57>>0] = $55;
    $58 = HEAP32[$14>>2]|0;
    $59 = (($58) + 2)|0;
    $60 = HEAP32[$6>>2]|0;
    $61 = (($60) + ($59)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = HEAP32[$11>>2]|0;
    $64 = ((($63)) + 2|0);
    HEAP8[$64>>0] = $62;
    $65 = HEAP32[$11>>2]|0;
    $66 = ((($65)) + 3|0);
    HEAP32[$11>>2] = $66;
    $67 = HEAP32[$9>>2]|0;
    $68 = (($67) + 1)|0;
    HEAP32[$9>>2] = $68;
   }
  } else {
   while(1) {
    $69 = HEAP32[$9>>2]|0;
    $70 = HEAP32[$10>>2]|0;
    $71 = ($69>>>0)<($70>>>0);
    if (!($71)) {
     break L5;
    }
    $72 = HEAP32[$9>>2]|0;
    $73 = HEAP32[$13>>2]|0;
    $74 = (($73) + ($72)|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $77 = $76<<2;
    HEAP32[$15>>2] = $77;
    $78 = HEAP32[$15>>2]|0;
    $79 = HEAP32[$6>>2]|0;
    $80 = (($79) + ($78)|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = HEAP32[$11>>2]|0;
    HEAP8[$82>>0] = $81;
    $83 = HEAP32[$15>>2]|0;
    $84 = (($83) + 1)|0;
    $85 = HEAP32[$6>>2]|0;
    $86 = (($85) + ($84)|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = HEAP32[$11>>2]|0;
    $89 = ((($88)) + 1|0);
    HEAP8[$89>>0] = $87;
    $90 = HEAP32[$15>>2]|0;
    $91 = (($90) + 2)|0;
    $92 = HEAP32[$6>>2]|0;
    $93 = (($92) + ($91)|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = HEAP32[$11>>2]|0;
    $96 = ((($95)) + 2|0);
    HEAP8[$96>>0] = $94;
    $97 = HEAP32[$15>>2]|0;
    $98 = (($97) + 3)|0;
    $99 = HEAP32[$6>>2]|0;
    $100 = (($99) + ($98)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = HEAP32[$11>>2]|0;
    $103 = ((($102)) + 3|0);
    HEAP8[$103>>0] = $101;
    $104 = HEAP32[$11>>2]|0;
    $105 = ((($104)) + 4|0);
    HEAP32[$11>>2] = $105;
    $106 = HEAP32[$9>>2]|0;
    $107 = (($106) + 1)|0;
    HEAP32[$9>>2] = $107;
   }
  }
 } while(0);
 $108 = HEAP32[$5>>2]|0;
 $109 = ((($108)) + 12|0);
 $110 = HEAP32[$109>>2]|0;
 _free($110);
 $111 = HEAP32[$12>>2]|0;
 $112 = HEAP32[$5>>2]|0;
 $113 = ((($112)) + 12|0);
 HEAP32[$113>>2] = $111;
 HEAP32[$4>>2] = 1;
 $114 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($114|0);
}
function _stbi__create_png_image_raw($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $8 = sp + 116|0;
 $9 = sp + 112|0;
 $10 = sp + 108|0;
 $11 = sp + 104|0;
 $12 = sp + 100|0;
 $13 = sp + 96|0;
 $14 = sp + 92|0;
 $15 = sp + 88|0;
 $16 = sp + 84|0;
 $17 = sp + 80|0;
 $18 = sp + 76|0;
 $19 = sp + 72|0;
 $20 = sp + 68|0;
 $21 = sp + 64|0;
 $22 = sp + 60|0;
 $23 = sp + 56|0;
 $24 = sp + 52|0;
 $25 = sp + 48|0;
 $26 = sp + 44|0;
 $27 = sp + 40|0;
 $28 = sp + 36|0;
 $29 = sp + 32|0;
 $30 = sp + 28|0;
 $31 = sp + 24|0;
 $32 = sp + 20|0;
 $33 = sp + 16|0;
 $34 = sp + 12|0;
 $35 = sp + 120|0;
 $36 = sp + 8|0;
 $37 = sp + 4|0;
 $38 = sp;
 HEAP32[$9>>2] = $0;
 HEAP32[$10>>2] = $1;
 HEAP32[$11>>2] = $2;
 HEAP32[$12>>2] = $3;
 HEAP32[$13>>2] = $4;
 HEAP32[$14>>2] = $5;
 HEAP32[$15>>2] = $6;
 HEAP32[$16>>2] = $7;
 $39 = HEAP32[$15>>2]|0;
 $40 = ($39|0)==(16);
 $41 = $40 ? 2 : 1;
 HEAP32[$17>>2] = $41;
 $42 = HEAP32[$9>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$18>>2] = $43;
 $44 = HEAP32[$13>>2]|0;
 $45 = HEAP32[$12>>2]|0;
 $46 = Math_imul($44, $45)|0;
 $47 = HEAP32[$17>>2]|0;
 $48 = Math_imul($46, $47)|0;
 HEAP32[$21>>2] = $48;
 $49 = HEAP32[$18>>2]|0;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 HEAP32[$25>>2] = $51;
 $52 = HEAP32[$12>>2]|0;
 $53 = HEAP32[$17>>2]|0;
 $54 = Math_imul($52, $53)|0;
 HEAP32[$26>>2] = $54;
 $55 = HEAP32[$25>>2]|0;
 $56 = HEAP32[$17>>2]|0;
 $57 = Math_imul($55, $56)|0;
 HEAP32[$27>>2] = $57;
 $58 = HEAP32[$13>>2]|0;
 HEAP32[$28>>2] = $58;
 $59 = HEAP32[$12>>2]|0;
 $60 = HEAP32[$18>>2]|0;
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($59|0)==($62|0);
 if (!($63)) {
  $64 = HEAP32[$12>>2]|0;
  $65 = HEAP32[$18>>2]|0;
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 1)|0;
  $69 = ($64|0)==($68|0);
  if (!($69)) {
   ___assert_fail((21203|0),(20646|0),4026,(21244|0));
   // unreachable;
  }
 }
 $70 = HEAP32[$13>>2]|0;
 $71 = HEAP32[$14>>2]|0;
 $72 = Math_imul($70, $71)|0;
 $73 = HEAP32[$26>>2]|0;
 $74 = Math_imul($72, $73)|0;
 $75 = (_stbi__malloc($74)|0);
 $76 = HEAP32[$9>>2]|0;
 $77 = ((($76)) + 12|0);
 HEAP32[$77>>2] = $75;
 $78 = HEAP32[$9>>2]|0;
 $79 = ((($78)) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if (!($81)) {
  $82 = (_stbi__err(20616)|0);
  HEAP32[$8>>2] = $82;
  $1242 = HEAP32[$8>>2]|0;
  STACKTOP = sp;return ($1242|0);
 }
 $83 = HEAP32[$25>>2]|0;
 $84 = HEAP32[$13>>2]|0;
 $85 = Math_imul($83, $84)|0;
 $86 = HEAP32[$15>>2]|0;
 $87 = Math_imul($85, $86)|0;
 $88 = (($87) + 7)|0;
 $89 = $88 >>> 3;
 HEAP32[$23>>2] = $89;
 $90 = HEAP32[$23>>2]|0;
 $91 = (($90) + 1)|0;
 $92 = HEAP32[$14>>2]|0;
 $93 = Math_imul($91, $92)|0;
 HEAP32[$22>>2] = $93;
 $94 = HEAP32[$18>>2]|0;
 $95 = HEAP32[$94>>2]|0;
 $96 = HEAP32[$13>>2]|0;
 $97 = ($95|0)==($96|0);
 if ($97) {
  $98 = HEAP32[$18>>2]|0;
  $99 = ((($98)) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = HEAP32[$14>>2]|0;
  $102 = ($100|0)==($101|0);
  if ($102) {
   $103 = HEAP32[$11>>2]|0;
   $104 = HEAP32[$22>>2]|0;
   $105 = ($103|0)!=($104|0);
   if ($105) {
    $106 = (_stbi__err(21271)|0);
    HEAP32[$8>>2] = $106;
    $1242 = HEAP32[$8>>2]|0;
    STACKTOP = sp;return ($1242|0);
   }
  } else {
   label = 10;
  }
 } else {
  label = 10;
 }
 if ((label|0) == 10) {
  $107 = HEAP32[$11>>2]|0;
  $108 = HEAP32[$22>>2]|0;
  $109 = ($107>>>0)<($108>>>0);
  if ($109) {
   $110 = (_stbi__err(21271)|0);
   HEAP32[$8>>2] = $110;
   $1242 = HEAP32[$8>>2]|0;
   STACKTOP = sp;return ($1242|0);
  }
 }
 HEAP32[$20>>2] = 0;
 L19: while(1) {
  $111 = HEAP32[$20>>2]|0;
  $112 = HEAP32[$14>>2]|0;
  $113 = ($111>>>0)<($112>>>0);
  if (!($113)) {
   label = 115;
   break;
  }
  $114 = HEAP32[$9>>2]|0;
  $115 = ((($114)) + 12|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = HEAP32[$21>>2]|0;
  $118 = HEAP32[$20>>2]|0;
  $119 = Math_imul($117, $118)|0;
  $120 = (($116) + ($119)|0);
  HEAP32[$29>>2] = $120;
  $121 = HEAP32[$29>>2]|0;
  $122 = HEAP32[$21>>2]|0;
  $123 = (0 - ($122))|0;
  $124 = (($121) + ($123)|0);
  HEAP32[$30>>2] = $124;
  $125 = HEAP32[$10>>2]|0;
  $126 = ((($125)) + 1|0);
  HEAP32[$10>>2] = $126;
  $127 = HEAP8[$125>>0]|0;
  $128 = $127&255;
  HEAP32[$31>>2] = $128;
  $129 = HEAP32[$31>>2]|0;
  $130 = ($129|0)>(4);
  if ($130) {
   label = 15;
   break;
  }
  $132 = HEAP32[$15>>2]|0;
  $133 = ($132|0)<(8);
  if ($133) {
   $134 = HEAP32[$23>>2]|0;
   $135 = HEAP32[$13>>2]|0;
   $136 = ($134>>>0)<=($135>>>0);
   if (!($136)) {
    label = 18;
    break;
   }
   $137 = HEAP32[$13>>2]|0;
   $138 = HEAP32[$12>>2]|0;
   $139 = Math_imul($137, $138)|0;
   $140 = HEAP32[$23>>2]|0;
   $141 = (($139) - ($140))|0;
   $142 = HEAP32[$29>>2]|0;
   $143 = (($142) + ($141)|0);
   HEAP32[$29>>2] = $143;
   HEAP32[$27>>2] = 1;
   $144 = HEAP32[$23>>2]|0;
   HEAP32[$28>>2] = $144;
  }
  $145 = HEAP32[$20>>2]|0;
  $146 = ($145|0)==(0);
  if ($146) {
   $147 = HEAP32[$31>>2]|0;
   $148 = (14580 + ($147)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   HEAP32[$31>>2] = $150;
  }
  HEAP32[$24>>2] = 0;
  while(1) {
   $151 = HEAP32[$24>>2]|0;
   $152 = HEAP32[$27>>2]|0;
   $153 = ($151|0)<($152|0);
   if (!($153)) {
    break;
   }
   $154 = HEAP32[$31>>2]|0;
   switch ($154|0) {
   case 0:  {
    $155 = HEAP32[$24>>2]|0;
    $156 = HEAP32[$10>>2]|0;
    $157 = (($156) + ($155)|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = HEAP32[$24>>2]|0;
    $160 = HEAP32[$29>>2]|0;
    $161 = (($160) + ($159)|0);
    HEAP8[$161>>0] = $158;
    break;
   }
   case 1:  {
    $162 = HEAP32[$24>>2]|0;
    $163 = HEAP32[$10>>2]|0;
    $164 = (($163) + ($162)|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = HEAP32[$24>>2]|0;
    $167 = HEAP32[$29>>2]|0;
    $168 = (($167) + ($166)|0);
    HEAP8[$168>>0] = $165;
    break;
   }
   case 2:  {
    $169 = HEAP32[$24>>2]|0;
    $170 = HEAP32[$10>>2]|0;
    $171 = (($170) + ($169)|0);
    $172 = HEAP8[$171>>0]|0;
    $173 = $172&255;
    $174 = HEAP32[$24>>2]|0;
    $175 = HEAP32[$30>>2]|0;
    $176 = (($175) + ($174)|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = $177&255;
    $179 = (($173) + ($178))|0;
    $180 = $179 & 255;
    $181 = $180&255;
    $182 = HEAP32[$24>>2]|0;
    $183 = HEAP32[$29>>2]|0;
    $184 = (($183) + ($182)|0);
    HEAP8[$184>>0] = $181;
    break;
   }
   case 3:  {
    $185 = HEAP32[$24>>2]|0;
    $186 = HEAP32[$10>>2]|0;
    $187 = (($186) + ($185)|0);
    $188 = HEAP8[$187>>0]|0;
    $189 = $188&255;
    $190 = HEAP32[$24>>2]|0;
    $191 = HEAP32[$30>>2]|0;
    $192 = (($191) + ($190)|0);
    $193 = HEAP8[$192>>0]|0;
    $194 = $193&255;
    $195 = $194 >> 1;
    $196 = (($189) + ($195))|0;
    $197 = $196 & 255;
    $198 = $197&255;
    $199 = HEAP32[$24>>2]|0;
    $200 = HEAP32[$29>>2]|0;
    $201 = (($200) + ($199)|0);
    HEAP8[$201>>0] = $198;
    break;
   }
   case 4:  {
    $202 = HEAP32[$24>>2]|0;
    $203 = HEAP32[$10>>2]|0;
    $204 = (($203) + ($202)|0);
    $205 = HEAP8[$204>>0]|0;
    $206 = $205&255;
    $207 = HEAP32[$24>>2]|0;
    $208 = HEAP32[$30>>2]|0;
    $209 = (($208) + ($207)|0);
    $210 = HEAP8[$209>>0]|0;
    $211 = $210&255;
    $212 = (_stbi__paeth(0,$211,0)|0);
    $213 = (($206) + ($212))|0;
    $214 = $213 & 255;
    $215 = $214&255;
    $216 = HEAP32[$24>>2]|0;
    $217 = HEAP32[$29>>2]|0;
    $218 = (($217) + ($216)|0);
    HEAP8[$218>>0] = $215;
    break;
   }
   case 5:  {
    $219 = HEAP32[$24>>2]|0;
    $220 = HEAP32[$10>>2]|0;
    $221 = (($220) + ($219)|0);
    $222 = HEAP8[$221>>0]|0;
    $223 = HEAP32[$24>>2]|0;
    $224 = HEAP32[$29>>2]|0;
    $225 = (($224) + ($223)|0);
    HEAP8[$225>>0] = $222;
    break;
   }
   case 6:  {
    $226 = HEAP32[$24>>2]|0;
    $227 = HEAP32[$10>>2]|0;
    $228 = (($227) + ($226)|0);
    $229 = HEAP8[$228>>0]|0;
    $230 = HEAP32[$24>>2]|0;
    $231 = HEAP32[$29>>2]|0;
    $232 = (($231) + ($230)|0);
    HEAP8[$232>>0] = $229;
    break;
   }
   default: {
   }
   }
   $233 = HEAP32[$24>>2]|0;
   $234 = (($233) + 1)|0;
   HEAP32[$24>>2] = $234;
  }
  $235 = HEAP32[$15>>2]|0;
  $236 = ($235|0)==(8);
  do {
   if ($236) {
    $237 = HEAP32[$25>>2]|0;
    $238 = HEAP32[$12>>2]|0;
    $239 = ($237|0)!=($238|0);
    if ($239) {
     $240 = HEAP32[$25>>2]|0;
     $241 = HEAP32[$29>>2]|0;
     $242 = (($241) + ($240)|0);
     HEAP8[$242>>0] = -1;
    }
    $243 = HEAP32[$25>>2]|0;
    $244 = HEAP32[$10>>2]|0;
    $245 = (($244) + ($243)|0);
    HEAP32[$10>>2] = $245;
    $246 = HEAP32[$12>>2]|0;
    $247 = HEAP32[$29>>2]|0;
    $248 = (($247) + ($246)|0);
    HEAP32[$29>>2] = $248;
    $249 = HEAP32[$12>>2]|0;
    $250 = HEAP32[$30>>2]|0;
    $251 = (($250) + ($249)|0);
    HEAP32[$30>>2] = $251;
   } else {
    $252 = HEAP32[$15>>2]|0;
    $253 = ($252|0)==(16);
    if (!($253)) {
     $273 = HEAP32[$10>>2]|0;
     $274 = ((($273)) + 1|0);
     HEAP32[$10>>2] = $274;
     $275 = HEAP32[$29>>2]|0;
     $276 = ((($275)) + 1|0);
     HEAP32[$29>>2] = $276;
     $277 = HEAP32[$30>>2]|0;
     $278 = ((($277)) + 1|0);
     HEAP32[$30>>2] = $278;
     break;
    }
    $254 = HEAP32[$25>>2]|0;
    $255 = HEAP32[$12>>2]|0;
    $256 = ($254|0)!=($255|0);
    if ($256) {
     $257 = HEAP32[$27>>2]|0;
     $258 = HEAP32[$29>>2]|0;
     $259 = (($258) + ($257)|0);
     HEAP8[$259>>0] = -1;
     $260 = HEAP32[$27>>2]|0;
     $261 = (($260) + 1)|0;
     $262 = HEAP32[$29>>2]|0;
     $263 = (($262) + ($261)|0);
     HEAP8[$263>>0] = -1;
    }
    $264 = HEAP32[$27>>2]|0;
    $265 = HEAP32[$10>>2]|0;
    $266 = (($265) + ($264)|0);
    HEAP32[$10>>2] = $266;
    $267 = HEAP32[$26>>2]|0;
    $268 = HEAP32[$29>>2]|0;
    $269 = (($268) + ($267)|0);
    HEAP32[$29>>2] = $269;
    $270 = HEAP32[$26>>2]|0;
    $271 = HEAP32[$30>>2]|0;
    $272 = (($271) + ($270)|0);
    HEAP32[$30>>2] = $272;
   }
  } while(0);
  $279 = HEAP32[$15>>2]|0;
  $280 = ($279|0)<(8);
  L56: do {
   if ($280) {
    label = 44;
   } else {
    $281 = HEAP32[$25>>2]|0;
    $282 = HEAP32[$12>>2]|0;
    $283 = ($281|0)==($282|0);
    if ($283) {
     label = 44;
    } else {
     $453 = HEAP32[$25>>2]|0;
     $454 = (($453) + 1)|0;
     $455 = HEAP32[$12>>2]|0;
     $456 = ($454|0)==($455|0);
     if (!($456)) {
      label = 66;
      break L19;
     }
     $457 = HEAP32[$31>>2]|0;
     L60: do {
      switch ($457|0) {
      case 0:  {
       $458 = HEAP32[$13>>2]|0;
       $459 = (($458) - 1)|0;
       HEAP32[$19>>2] = $459;
       while(1) {
        $460 = HEAP32[$19>>2]|0;
        $461 = ($460>>>0)>=(1);
        if (!($461)) {
         break L60;
        }
        HEAP32[$24>>2] = 0;
        while(1) {
         $462 = HEAP32[$24>>2]|0;
         $463 = HEAP32[$27>>2]|0;
         $464 = ($462|0)<($463|0);
         if (!($464)) {
          break;
         }
         $465 = HEAP32[$24>>2]|0;
         $466 = HEAP32[$10>>2]|0;
         $467 = (($466) + ($465)|0);
         $468 = HEAP8[$467>>0]|0;
         $469 = HEAP32[$24>>2]|0;
         $470 = HEAP32[$29>>2]|0;
         $471 = (($470) + ($469)|0);
         HEAP8[$471>>0] = $468;
         $472 = HEAP32[$24>>2]|0;
         $473 = (($472) + 1)|0;
         HEAP32[$24>>2] = $473;
        }
        $474 = HEAP32[$19>>2]|0;
        $475 = (($474) + -1)|0;
        HEAP32[$19>>2] = $475;
        $476 = HEAP32[$27>>2]|0;
        $477 = HEAP32[$29>>2]|0;
        $478 = (($477) + ($476)|0);
        HEAP8[$478>>0] = -1;
        $479 = HEAP32[$27>>2]|0;
        $480 = HEAP32[$10>>2]|0;
        $481 = (($480) + ($479)|0);
        HEAP32[$10>>2] = $481;
        $482 = HEAP32[$26>>2]|0;
        $483 = HEAP32[$29>>2]|0;
        $484 = (($483) + ($482)|0);
        HEAP32[$29>>2] = $484;
        $485 = HEAP32[$26>>2]|0;
        $486 = HEAP32[$30>>2]|0;
        $487 = (($486) + ($485)|0);
        HEAP32[$30>>2] = $487;
       }
       break;
      }
      case 1:  {
       $488 = HEAP32[$13>>2]|0;
       $489 = (($488) - 1)|0;
       HEAP32[$19>>2] = $489;
       while(1) {
        $490 = HEAP32[$19>>2]|0;
        $491 = ($490>>>0)>=(1);
        if (!($491)) {
         break L60;
        }
        HEAP32[$24>>2] = 0;
        while(1) {
         $492 = HEAP32[$24>>2]|0;
         $493 = HEAP32[$27>>2]|0;
         $494 = ($492|0)<($493|0);
         if (!($494)) {
          break;
         }
         $495 = HEAP32[$24>>2]|0;
         $496 = HEAP32[$10>>2]|0;
         $497 = (($496) + ($495)|0);
         $498 = HEAP8[$497>>0]|0;
         $499 = $498&255;
         $500 = HEAP32[$24>>2]|0;
         $501 = HEAP32[$26>>2]|0;
         $502 = (($500) - ($501))|0;
         $503 = HEAP32[$29>>2]|0;
         $504 = (($503) + ($502)|0);
         $505 = HEAP8[$504>>0]|0;
         $506 = $505&255;
         $507 = (($499) + ($506))|0;
         $508 = $507 & 255;
         $509 = $508&255;
         $510 = HEAP32[$24>>2]|0;
         $511 = HEAP32[$29>>2]|0;
         $512 = (($511) + ($510)|0);
         HEAP8[$512>>0] = $509;
         $513 = HEAP32[$24>>2]|0;
         $514 = (($513) + 1)|0;
         HEAP32[$24>>2] = $514;
        }
        $515 = HEAP32[$19>>2]|0;
        $516 = (($515) + -1)|0;
        HEAP32[$19>>2] = $516;
        $517 = HEAP32[$27>>2]|0;
        $518 = HEAP32[$29>>2]|0;
        $519 = (($518) + ($517)|0);
        HEAP8[$519>>0] = -1;
        $520 = HEAP32[$27>>2]|0;
        $521 = HEAP32[$10>>2]|0;
        $522 = (($521) + ($520)|0);
        HEAP32[$10>>2] = $522;
        $523 = HEAP32[$26>>2]|0;
        $524 = HEAP32[$29>>2]|0;
        $525 = (($524) + ($523)|0);
        HEAP32[$29>>2] = $525;
        $526 = HEAP32[$26>>2]|0;
        $527 = HEAP32[$30>>2]|0;
        $528 = (($527) + ($526)|0);
        HEAP32[$30>>2] = $528;
       }
       break;
      }
      case 2:  {
       $529 = HEAP32[$13>>2]|0;
       $530 = (($529) - 1)|0;
       HEAP32[$19>>2] = $530;
       while(1) {
        $531 = HEAP32[$19>>2]|0;
        $532 = ($531>>>0)>=(1);
        if (!($532)) {
         break L60;
        }
        HEAP32[$24>>2] = 0;
        while(1) {
         $533 = HEAP32[$24>>2]|0;
         $534 = HEAP32[$27>>2]|0;
         $535 = ($533|0)<($534|0);
         if (!($535)) {
          break;
         }
         $536 = HEAP32[$24>>2]|0;
         $537 = HEAP32[$10>>2]|0;
         $538 = (($537) + ($536)|0);
         $539 = HEAP8[$538>>0]|0;
         $540 = $539&255;
         $541 = HEAP32[$24>>2]|0;
         $542 = HEAP32[$30>>2]|0;
         $543 = (($542) + ($541)|0);
         $544 = HEAP8[$543>>0]|0;
         $545 = $544&255;
         $546 = (($540) + ($545))|0;
         $547 = $546 & 255;
         $548 = $547&255;
         $549 = HEAP32[$24>>2]|0;
         $550 = HEAP32[$29>>2]|0;
         $551 = (($550) + ($549)|0);
         HEAP8[$551>>0] = $548;
         $552 = HEAP32[$24>>2]|0;
         $553 = (($552) + 1)|0;
         HEAP32[$24>>2] = $553;
        }
        $554 = HEAP32[$19>>2]|0;
        $555 = (($554) + -1)|0;
        HEAP32[$19>>2] = $555;
        $556 = HEAP32[$27>>2]|0;
        $557 = HEAP32[$29>>2]|0;
        $558 = (($557) + ($556)|0);
        HEAP8[$558>>0] = -1;
        $559 = HEAP32[$27>>2]|0;
        $560 = HEAP32[$10>>2]|0;
        $561 = (($560) + ($559)|0);
        HEAP32[$10>>2] = $561;
        $562 = HEAP32[$26>>2]|0;
        $563 = HEAP32[$29>>2]|0;
        $564 = (($563) + ($562)|0);
        HEAP32[$29>>2] = $564;
        $565 = HEAP32[$26>>2]|0;
        $566 = HEAP32[$30>>2]|0;
        $567 = (($566) + ($565)|0);
        HEAP32[$30>>2] = $567;
       }
       break;
      }
      case 3:  {
       $568 = HEAP32[$13>>2]|0;
       $569 = (($568) - 1)|0;
       HEAP32[$19>>2] = $569;
       while(1) {
        $570 = HEAP32[$19>>2]|0;
        $571 = ($570>>>0)>=(1);
        if (!($571)) {
         break L60;
        }
        HEAP32[$24>>2] = 0;
        while(1) {
         $572 = HEAP32[$24>>2]|0;
         $573 = HEAP32[$27>>2]|0;
         $574 = ($572|0)<($573|0);
         if (!($574)) {
          break;
         }
         $575 = HEAP32[$24>>2]|0;
         $576 = HEAP32[$10>>2]|0;
         $577 = (($576) + ($575)|0);
         $578 = HEAP8[$577>>0]|0;
         $579 = $578&255;
         $580 = HEAP32[$24>>2]|0;
         $581 = HEAP32[$30>>2]|0;
         $582 = (($581) + ($580)|0);
         $583 = HEAP8[$582>>0]|0;
         $584 = $583&255;
         $585 = HEAP32[$24>>2]|0;
         $586 = HEAP32[$26>>2]|0;
         $587 = (($585) - ($586))|0;
         $588 = HEAP32[$29>>2]|0;
         $589 = (($588) + ($587)|0);
         $590 = HEAP8[$589>>0]|0;
         $591 = $590&255;
         $592 = (($584) + ($591))|0;
         $593 = $592 >> 1;
         $594 = (($579) + ($593))|0;
         $595 = $594 & 255;
         $596 = $595&255;
         $597 = HEAP32[$24>>2]|0;
         $598 = HEAP32[$29>>2]|0;
         $599 = (($598) + ($597)|0);
         HEAP8[$599>>0] = $596;
         $600 = HEAP32[$24>>2]|0;
         $601 = (($600) + 1)|0;
         HEAP32[$24>>2] = $601;
        }
        $602 = HEAP32[$19>>2]|0;
        $603 = (($602) + -1)|0;
        HEAP32[$19>>2] = $603;
        $604 = HEAP32[$27>>2]|0;
        $605 = HEAP32[$29>>2]|0;
        $606 = (($605) + ($604)|0);
        HEAP8[$606>>0] = -1;
        $607 = HEAP32[$27>>2]|0;
        $608 = HEAP32[$10>>2]|0;
        $609 = (($608) + ($607)|0);
        HEAP32[$10>>2] = $609;
        $610 = HEAP32[$26>>2]|0;
        $611 = HEAP32[$29>>2]|0;
        $612 = (($611) + ($610)|0);
        HEAP32[$29>>2] = $612;
        $613 = HEAP32[$26>>2]|0;
        $614 = HEAP32[$30>>2]|0;
        $615 = (($614) + ($613)|0);
        HEAP32[$30>>2] = $615;
       }
       break;
      }
      case 4:  {
       $616 = HEAP32[$13>>2]|0;
       $617 = (($616) - 1)|0;
       HEAP32[$19>>2] = $617;
       while(1) {
        $618 = HEAP32[$19>>2]|0;
        $619 = ($618>>>0)>=(1);
        if (!($619)) {
         break L60;
        }
        HEAP32[$24>>2] = 0;
        while(1) {
         $620 = HEAP32[$24>>2]|0;
         $621 = HEAP32[$27>>2]|0;
         $622 = ($620|0)<($621|0);
         if (!($622)) {
          break;
         }
         $623 = HEAP32[$24>>2]|0;
         $624 = HEAP32[$10>>2]|0;
         $625 = (($624) + ($623)|0);
         $626 = HEAP8[$625>>0]|0;
         $627 = $626&255;
         $628 = HEAP32[$24>>2]|0;
         $629 = HEAP32[$26>>2]|0;
         $630 = (($628) - ($629))|0;
         $631 = HEAP32[$29>>2]|0;
         $632 = (($631) + ($630)|0);
         $633 = HEAP8[$632>>0]|0;
         $634 = $633&255;
         $635 = HEAP32[$24>>2]|0;
         $636 = HEAP32[$30>>2]|0;
         $637 = (($636) + ($635)|0);
         $638 = HEAP8[$637>>0]|0;
         $639 = $638&255;
         $640 = HEAP32[$24>>2]|0;
         $641 = HEAP32[$26>>2]|0;
         $642 = (($640) - ($641))|0;
         $643 = HEAP32[$30>>2]|0;
         $644 = (($643) + ($642)|0);
         $645 = HEAP8[$644>>0]|0;
         $646 = $645&255;
         $647 = (_stbi__paeth($634,$639,$646)|0);
         $648 = (($627) + ($647))|0;
         $649 = $648 & 255;
         $650 = $649&255;
         $651 = HEAP32[$24>>2]|0;
         $652 = HEAP32[$29>>2]|0;
         $653 = (($652) + ($651)|0);
         HEAP8[$653>>0] = $650;
         $654 = HEAP32[$24>>2]|0;
         $655 = (($654) + 1)|0;
         HEAP32[$24>>2] = $655;
        }
        $656 = HEAP32[$19>>2]|0;
        $657 = (($656) + -1)|0;
        HEAP32[$19>>2] = $657;
        $658 = HEAP32[$27>>2]|0;
        $659 = HEAP32[$29>>2]|0;
        $660 = (($659) + ($658)|0);
        HEAP8[$660>>0] = -1;
        $661 = HEAP32[$27>>2]|0;
        $662 = HEAP32[$10>>2]|0;
        $663 = (($662) + ($661)|0);
        HEAP32[$10>>2] = $663;
        $664 = HEAP32[$26>>2]|0;
        $665 = HEAP32[$29>>2]|0;
        $666 = (($665) + ($664)|0);
        HEAP32[$29>>2] = $666;
        $667 = HEAP32[$26>>2]|0;
        $668 = HEAP32[$30>>2]|0;
        $669 = (($668) + ($667)|0);
        HEAP32[$30>>2] = $669;
       }
       break;
      }
      case 5:  {
       $670 = HEAP32[$13>>2]|0;
       $671 = (($670) - 1)|0;
       HEAP32[$19>>2] = $671;
       while(1) {
        $672 = HEAP32[$19>>2]|0;
        $673 = ($672>>>0)>=(1);
        if (!($673)) {
         break L60;
        }
        HEAP32[$24>>2] = 0;
        while(1) {
         $674 = HEAP32[$24>>2]|0;
         $675 = HEAP32[$27>>2]|0;
         $676 = ($674|0)<($675|0);
         if (!($676)) {
          break;
         }
         $677 = HEAP32[$24>>2]|0;
         $678 = HEAP32[$10>>2]|0;
         $679 = (($678) + ($677)|0);
         $680 = HEAP8[$679>>0]|0;
         $681 = $680&255;
         $682 = HEAP32[$24>>2]|0;
         $683 = HEAP32[$26>>2]|0;
         $684 = (($682) - ($683))|0;
         $685 = HEAP32[$29>>2]|0;
         $686 = (($685) + ($684)|0);
         $687 = HEAP8[$686>>0]|0;
         $688 = $687&255;
         $689 = $688 >> 1;
         $690 = (($681) + ($689))|0;
         $691 = $690 & 255;
         $692 = $691&255;
         $693 = HEAP32[$24>>2]|0;
         $694 = HEAP32[$29>>2]|0;
         $695 = (($694) + ($693)|0);
         HEAP8[$695>>0] = $692;
         $696 = HEAP32[$24>>2]|0;
         $697 = (($696) + 1)|0;
         HEAP32[$24>>2] = $697;
        }
        $698 = HEAP32[$19>>2]|0;
        $699 = (($698) + -1)|0;
        HEAP32[$19>>2] = $699;
        $700 = HEAP32[$27>>2]|0;
        $701 = HEAP32[$29>>2]|0;
        $702 = (($701) + ($700)|0);
        HEAP8[$702>>0] = -1;
        $703 = HEAP32[$27>>2]|0;
        $704 = HEAP32[$10>>2]|0;
        $705 = (($704) + ($703)|0);
        HEAP32[$10>>2] = $705;
        $706 = HEAP32[$26>>2]|0;
        $707 = HEAP32[$29>>2]|0;
        $708 = (($707) + ($706)|0);
        HEAP32[$29>>2] = $708;
        $709 = HEAP32[$26>>2]|0;
        $710 = HEAP32[$30>>2]|0;
        $711 = (($710) + ($709)|0);
        HEAP32[$30>>2] = $711;
       }
       break;
      }
      case 6:  {
       $712 = HEAP32[$13>>2]|0;
       $713 = (($712) - 1)|0;
       HEAP32[$19>>2] = $713;
       while(1) {
        $714 = HEAP32[$19>>2]|0;
        $715 = ($714>>>0)>=(1);
        if (!($715)) {
         break L60;
        }
        HEAP32[$24>>2] = 0;
        while(1) {
         $716 = HEAP32[$24>>2]|0;
         $717 = HEAP32[$27>>2]|0;
         $718 = ($716|0)<($717|0);
         if (!($718)) {
          break;
         }
         $719 = HEAP32[$24>>2]|0;
         $720 = HEAP32[$10>>2]|0;
         $721 = (($720) + ($719)|0);
         $722 = HEAP8[$721>>0]|0;
         $723 = $722&255;
         $724 = HEAP32[$24>>2]|0;
         $725 = HEAP32[$26>>2]|0;
         $726 = (($724) - ($725))|0;
         $727 = HEAP32[$29>>2]|0;
         $728 = (($727) + ($726)|0);
         $729 = HEAP8[$728>>0]|0;
         $730 = $729&255;
         $731 = (_stbi__paeth($730,0,0)|0);
         $732 = (($723) + ($731))|0;
         $733 = $732 & 255;
         $734 = $733&255;
         $735 = HEAP32[$24>>2]|0;
         $736 = HEAP32[$29>>2]|0;
         $737 = (($736) + ($735)|0);
         HEAP8[$737>>0] = $734;
         $738 = HEAP32[$24>>2]|0;
         $739 = (($738) + 1)|0;
         HEAP32[$24>>2] = $739;
        }
        $740 = HEAP32[$19>>2]|0;
        $741 = (($740) + -1)|0;
        HEAP32[$19>>2] = $741;
        $742 = HEAP32[$27>>2]|0;
        $743 = HEAP32[$29>>2]|0;
        $744 = (($743) + ($742)|0);
        HEAP8[$744>>0] = -1;
        $745 = HEAP32[$27>>2]|0;
        $746 = HEAP32[$10>>2]|0;
        $747 = (($746) + ($745)|0);
        HEAP32[$10>>2] = $747;
        $748 = HEAP32[$26>>2]|0;
        $749 = HEAP32[$29>>2]|0;
        $750 = (($749) + ($748)|0);
        HEAP32[$29>>2] = $750;
        $751 = HEAP32[$26>>2]|0;
        $752 = HEAP32[$30>>2]|0;
        $753 = (($752) + ($751)|0);
        HEAP32[$30>>2] = $753;
       }
       break;
      }
      default: {
      }
      }
     } while(0);
     $754 = HEAP32[$15>>2]|0;
     $755 = ($754|0)==(16);
     if ($755) {
      $756 = HEAP32[$9>>2]|0;
      $757 = ((($756)) + 12|0);
      $758 = HEAP32[$757>>2]|0;
      $759 = HEAP32[$21>>2]|0;
      $760 = HEAP32[$20>>2]|0;
      $761 = Math_imul($759, $760)|0;
      $762 = (($758) + ($761)|0);
      HEAP32[$29>>2] = $762;
      HEAP32[$19>>2] = 0;
      while(1) {
       $763 = HEAP32[$19>>2]|0;
       $764 = HEAP32[$13>>2]|0;
       $765 = ($763>>>0)<($764>>>0);
       if (!($765)) {
        break L56;
       }
       $766 = HEAP32[$27>>2]|0;
       $767 = (($766) + 1)|0;
       $768 = HEAP32[$29>>2]|0;
       $769 = (($768) + ($767)|0);
       HEAP8[$769>>0] = -1;
       $770 = HEAP32[$19>>2]|0;
       $771 = (($770) + 1)|0;
       HEAP32[$19>>2] = $771;
       $772 = HEAP32[$26>>2]|0;
       $773 = HEAP32[$29>>2]|0;
       $774 = (($773) + ($772)|0);
       HEAP32[$29>>2] = $774;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 44) {
   label = 0;
   $284 = HEAP32[$28>>2]|0;
   $285 = (($284) - 1)|0;
   $286 = HEAP32[$27>>2]|0;
   $287 = Math_imul($285, $286)|0;
   HEAP32[$32>>2] = $287;
   $288 = HEAP32[$31>>2]|0;
   L124: do {
    switch ($288|0) {
    case 0:  {
     $289 = HEAP32[$29>>2]|0;
     $290 = HEAP32[$10>>2]|0;
     $291 = HEAP32[$32>>2]|0;
     _memcpy(($289|0),($290|0),($291|0))|0;
     break;
    }
    case 1:  {
     HEAP32[$24>>2] = 0;
     while(1) {
      $292 = HEAP32[$24>>2]|0;
      $293 = HEAP32[$32>>2]|0;
      $294 = ($292|0)<($293|0);
      if (!($294)) {
       break L124;
      }
      $295 = HEAP32[$24>>2]|0;
      $296 = HEAP32[$10>>2]|0;
      $297 = (($296) + ($295)|0);
      $298 = HEAP8[$297>>0]|0;
      $299 = $298&255;
      $300 = HEAP32[$24>>2]|0;
      $301 = HEAP32[$27>>2]|0;
      $302 = (($300) - ($301))|0;
      $303 = HEAP32[$29>>2]|0;
      $304 = (($303) + ($302)|0);
      $305 = HEAP8[$304>>0]|0;
      $306 = $305&255;
      $307 = (($299) + ($306))|0;
      $308 = $307 & 255;
      $309 = $308&255;
      $310 = HEAP32[$24>>2]|0;
      $311 = HEAP32[$29>>2]|0;
      $312 = (($311) + ($310)|0);
      HEAP8[$312>>0] = $309;
      $313 = HEAP32[$24>>2]|0;
      $314 = (($313) + 1)|0;
      HEAP32[$24>>2] = $314;
     }
     break;
    }
    case 2:  {
     HEAP32[$24>>2] = 0;
     while(1) {
      $315 = HEAP32[$24>>2]|0;
      $316 = HEAP32[$32>>2]|0;
      $317 = ($315|0)<($316|0);
      if (!($317)) {
       break L124;
      }
      $318 = HEAP32[$24>>2]|0;
      $319 = HEAP32[$10>>2]|0;
      $320 = (($319) + ($318)|0);
      $321 = HEAP8[$320>>0]|0;
      $322 = $321&255;
      $323 = HEAP32[$24>>2]|0;
      $324 = HEAP32[$30>>2]|0;
      $325 = (($324) + ($323)|0);
      $326 = HEAP8[$325>>0]|0;
      $327 = $326&255;
      $328 = (($322) + ($327))|0;
      $329 = $328 & 255;
      $330 = $329&255;
      $331 = HEAP32[$24>>2]|0;
      $332 = HEAP32[$29>>2]|0;
      $333 = (($332) + ($331)|0);
      HEAP8[$333>>0] = $330;
      $334 = HEAP32[$24>>2]|0;
      $335 = (($334) + 1)|0;
      HEAP32[$24>>2] = $335;
     }
     break;
    }
    case 3:  {
     HEAP32[$24>>2] = 0;
     while(1) {
      $336 = HEAP32[$24>>2]|0;
      $337 = HEAP32[$32>>2]|0;
      $338 = ($336|0)<($337|0);
      if (!($338)) {
       break L124;
      }
      $339 = HEAP32[$24>>2]|0;
      $340 = HEAP32[$10>>2]|0;
      $341 = (($340) + ($339)|0);
      $342 = HEAP8[$341>>0]|0;
      $343 = $342&255;
      $344 = HEAP32[$24>>2]|0;
      $345 = HEAP32[$30>>2]|0;
      $346 = (($345) + ($344)|0);
      $347 = HEAP8[$346>>0]|0;
      $348 = $347&255;
      $349 = HEAP32[$24>>2]|0;
      $350 = HEAP32[$27>>2]|0;
      $351 = (($349) - ($350))|0;
      $352 = HEAP32[$29>>2]|0;
      $353 = (($352) + ($351)|0);
      $354 = HEAP8[$353>>0]|0;
      $355 = $354&255;
      $356 = (($348) + ($355))|0;
      $357 = $356 >> 1;
      $358 = (($343) + ($357))|0;
      $359 = $358 & 255;
      $360 = $359&255;
      $361 = HEAP32[$24>>2]|0;
      $362 = HEAP32[$29>>2]|0;
      $363 = (($362) + ($361)|0);
      HEAP8[$363>>0] = $360;
      $364 = HEAP32[$24>>2]|0;
      $365 = (($364) + 1)|0;
      HEAP32[$24>>2] = $365;
     }
     break;
    }
    case 4:  {
     HEAP32[$24>>2] = 0;
     while(1) {
      $366 = HEAP32[$24>>2]|0;
      $367 = HEAP32[$32>>2]|0;
      $368 = ($366|0)<($367|0);
      if (!($368)) {
       break L124;
      }
      $369 = HEAP32[$24>>2]|0;
      $370 = HEAP32[$10>>2]|0;
      $371 = (($370) + ($369)|0);
      $372 = HEAP8[$371>>0]|0;
      $373 = $372&255;
      $374 = HEAP32[$24>>2]|0;
      $375 = HEAP32[$27>>2]|0;
      $376 = (($374) - ($375))|0;
      $377 = HEAP32[$29>>2]|0;
      $378 = (($377) + ($376)|0);
      $379 = HEAP8[$378>>0]|0;
      $380 = $379&255;
      $381 = HEAP32[$24>>2]|0;
      $382 = HEAP32[$30>>2]|0;
      $383 = (($382) + ($381)|0);
      $384 = HEAP8[$383>>0]|0;
      $385 = $384&255;
      $386 = HEAP32[$24>>2]|0;
      $387 = HEAP32[$27>>2]|0;
      $388 = (($386) - ($387))|0;
      $389 = HEAP32[$30>>2]|0;
      $390 = (($389) + ($388)|0);
      $391 = HEAP8[$390>>0]|0;
      $392 = $391&255;
      $393 = (_stbi__paeth($380,$385,$392)|0);
      $394 = (($373) + ($393))|0;
      $395 = $394 & 255;
      $396 = $395&255;
      $397 = HEAP32[$24>>2]|0;
      $398 = HEAP32[$29>>2]|0;
      $399 = (($398) + ($397)|0);
      HEAP8[$399>>0] = $396;
      $400 = HEAP32[$24>>2]|0;
      $401 = (($400) + 1)|0;
      HEAP32[$24>>2] = $401;
     }
     break;
    }
    case 5:  {
     HEAP32[$24>>2] = 0;
     while(1) {
      $402 = HEAP32[$24>>2]|0;
      $403 = HEAP32[$32>>2]|0;
      $404 = ($402|0)<($403|0);
      if (!($404)) {
       break L124;
      }
      $405 = HEAP32[$24>>2]|0;
      $406 = HEAP32[$10>>2]|0;
      $407 = (($406) + ($405)|0);
      $408 = HEAP8[$407>>0]|0;
      $409 = $408&255;
      $410 = HEAP32[$24>>2]|0;
      $411 = HEAP32[$27>>2]|0;
      $412 = (($410) - ($411))|0;
      $413 = HEAP32[$29>>2]|0;
      $414 = (($413) + ($412)|0);
      $415 = HEAP8[$414>>0]|0;
      $416 = $415&255;
      $417 = $416 >> 1;
      $418 = (($409) + ($417))|0;
      $419 = $418 & 255;
      $420 = $419&255;
      $421 = HEAP32[$24>>2]|0;
      $422 = HEAP32[$29>>2]|0;
      $423 = (($422) + ($421)|0);
      HEAP8[$423>>0] = $420;
      $424 = HEAP32[$24>>2]|0;
      $425 = (($424) + 1)|0;
      HEAP32[$24>>2] = $425;
     }
     break;
    }
    case 6:  {
     HEAP32[$24>>2] = 0;
     while(1) {
      $426 = HEAP32[$24>>2]|0;
      $427 = HEAP32[$32>>2]|0;
      $428 = ($426|0)<($427|0);
      if (!($428)) {
       break L124;
      }
      $429 = HEAP32[$24>>2]|0;
      $430 = HEAP32[$10>>2]|0;
      $431 = (($430) + ($429)|0);
      $432 = HEAP8[$431>>0]|0;
      $433 = $432&255;
      $434 = HEAP32[$24>>2]|0;
      $435 = HEAP32[$27>>2]|0;
      $436 = (($434) - ($435))|0;
      $437 = HEAP32[$29>>2]|0;
      $438 = (($437) + ($436)|0);
      $439 = HEAP8[$438>>0]|0;
      $440 = $439&255;
      $441 = (_stbi__paeth($440,0,0)|0);
      $442 = (($433) + ($441))|0;
      $443 = $442 & 255;
      $444 = $443&255;
      $445 = HEAP32[$24>>2]|0;
      $446 = HEAP32[$29>>2]|0;
      $447 = (($446) + ($445)|0);
      HEAP8[$447>>0] = $444;
      $448 = HEAP32[$24>>2]|0;
      $449 = (($448) + 1)|0;
      HEAP32[$24>>2] = $449;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $450 = HEAP32[$32>>2]|0;
   $451 = HEAP32[$10>>2]|0;
   $452 = (($451) + ($450)|0);
   HEAP32[$10>>2] = $452;
  }
  $775 = HEAP32[$20>>2]|0;
  $776 = (($775) + 1)|0;
  HEAP32[$20>>2] = $776;
 }
 if ((label|0) == 15) {
  $131 = (_stbi__err(21289)|0);
  HEAP32[$8>>2] = $131;
  $1242 = HEAP32[$8>>2]|0;
  STACKTOP = sp;return ($1242|0);
 }
 else if ((label|0) == 18) {
  ___assert_fail((21304|0),(20646|0),4047,(21244|0));
  // unreachable;
 }
 else if ((label|0) == 66) {
  ___assert_fail((21325|0),(20646|0),4108,(21244|0));
  // unreachable;
 }
 else if ((label|0) == 115) {
  $777 = HEAP32[$15>>2]|0;
  $778 = ($777|0)<(8);
  L154: do {
   if ($778) {
    HEAP32[$20>>2] = 0;
    L156: while(1) {
     $779 = HEAP32[$20>>2]|0;
     $780 = HEAP32[$14>>2]|0;
     $781 = ($779>>>0)<($780>>>0);
     if (!($781)) {
      break L154;
     }
     $782 = HEAP32[$9>>2]|0;
     $783 = ((($782)) + 12|0);
     $784 = HEAP32[$783>>2]|0;
     $785 = HEAP32[$21>>2]|0;
     $786 = HEAP32[$20>>2]|0;
     $787 = Math_imul($785, $786)|0;
     $788 = (($784) + ($787)|0);
     HEAP32[$33>>2] = $788;
     $789 = HEAP32[$9>>2]|0;
     $790 = ((($789)) + 12|0);
     $791 = HEAP32[$790>>2]|0;
     $792 = HEAP32[$21>>2]|0;
     $793 = HEAP32[$20>>2]|0;
     $794 = Math_imul($792, $793)|0;
     $795 = (($791) + ($794)|0);
     $796 = HEAP32[$13>>2]|0;
     $797 = HEAP32[$12>>2]|0;
     $798 = Math_imul($796, $797)|0;
     $799 = (($795) + ($798)|0);
     $800 = HEAP32[$23>>2]|0;
     $801 = (0 - ($800))|0;
     $802 = (($799) + ($801)|0);
     HEAP32[$34>>2] = $802;
     $803 = HEAP32[$16>>2]|0;
     $804 = ($803|0)==(0);
     if ($804) {
      $805 = HEAP32[$15>>2]|0;
      $806 = (14585 + ($805)|0);
      $807 = HEAP8[$806>>0]|0;
      $808 = $807&255;
      $810 = $808;
     } else {
      $810 = 1;
     }
     $809 = $810&255;
     HEAP8[$35>>0] = $809;
     $811 = HEAP32[$15>>2]|0;
     $812 = ($811|0)==(4);
     do {
      if ($812) {
       $813 = HEAP32[$13>>2]|0;
       $814 = HEAP32[$25>>2]|0;
       $815 = Math_imul($813, $814)|0;
       HEAP32[$24>>2] = $815;
       while(1) {
        $816 = HEAP32[$24>>2]|0;
        $817 = ($816|0)>=(2);
        if (!($817)) {
         break;
        }
        $818 = HEAP8[$35>>0]|0;
        $819 = $818&255;
        $820 = HEAP32[$34>>2]|0;
        $821 = HEAP8[$820>>0]|0;
        $822 = $821&255;
        $823 = $822 >> 4;
        $824 = Math_imul($819, $823)|0;
        $825 = $824&255;
        $826 = HEAP32[$33>>2]|0;
        $827 = ((($826)) + 1|0);
        HEAP32[$33>>2] = $827;
        HEAP8[$826>>0] = $825;
        $828 = HEAP8[$35>>0]|0;
        $829 = $828&255;
        $830 = HEAP32[$34>>2]|0;
        $831 = HEAP8[$830>>0]|0;
        $832 = $831&255;
        $833 = $832 & 15;
        $834 = Math_imul($829, $833)|0;
        $835 = $834&255;
        $836 = HEAP32[$33>>2]|0;
        $837 = ((($836)) + 1|0);
        HEAP32[$33>>2] = $837;
        HEAP8[$836>>0] = $835;
        $838 = HEAP32[$24>>2]|0;
        $839 = (($838) - 2)|0;
        HEAP32[$24>>2] = $839;
        $840 = HEAP32[$34>>2]|0;
        $841 = ((($840)) + 1|0);
        HEAP32[$34>>2] = $841;
       }
       $842 = HEAP32[$24>>2]|0;
       $843 = ($842|0)>(0);
       if ($843) {
        $844 = HEAP8[$35>>0]|0;
        $845 = $844&255;
        $846 = HEAP32[$34>>2]|0;
        $847 = HEAP8[$846>>0]|0;
        $848 = $847&255;
        $849 = $848 >> 4;
        $850 = Math_imul($845, $849)|0;
        $851 = $850&255;
        $852 = HEAP32[$33>>2]|0;
        $853 = ((($852)) + 1|0);
        HEAP32[$33>>2] = $853;
        HEAP8[$852>>0] = $851;
       }
      } else {
       $854 = HEAP32[$15>>2]|0;
       $855 = ($854|0)==(2);
       if ($855) {
        $856 = HEAP32[$13>>2]|0;
        $857 = HEAP32[$25>>2]|0;
        $858 = Math_imul($856, $857)|0;
        HEAP32[$24>>2] = $858;
        while(1) {
         $859 = HEAP32[$24>>2]|0;
         $860 = ($859|0)>=(4);
         if (!($860)) {
          break;
         }
         $861 = HEAP8[$35>>0]|0;
         $862 = $861&255;
         $863 = HEAP32[$34>>2]|0;
         $864 = HEAP8[$863>>0]|0;
         $865 = $864&255;
         $866 = $865 >> 6;
         $867 = Math_imul($862, $866)|0;
         $868 = $867&255;
         $869 = HEAP32[$33>>2]|0;
         $870 = ((($869)) + 1|0);
         HEAP32[$33>>2] = $870;
         HEAP8[$869>>0] = $868;
         $871 = HEAP8[$35>>0]|0;
         $872 = $871&255;
         $873 = HEAP32[$34>>2]|0;
         $874 = HEAP8[$873>>0]|0;
         $875 = $874&255;
         $876 = $875 >> 4;
         $877 = $876 & 3;
         $878 = Math_imul($872, $877)|0;
         $879 = $878&255;
         $880 = HEAP32[$33>>2]|0;
         $881 = ((($880)) + 1|0);
         HEAP32[$33>>2] = $881;
         HEAP8[$880>>0] = $879;
         $882 = HEAP8[$35>>0]|0;
         $883 = $882&255;
         $884 = HEAP32[$34>>2]|0;
         $885 = HEAP8[$884>>0]|0;
         $886 = $885&255;
         $887 = $886 >> 2;
         $888 = $887 & 3;
         $889 = Math_imul($883, $888)|0;
         $890 = $889&255;
         $891 = HEAP32[$33>>2]|0;
         $892 = ((($891)) + 1|0);
         HEAP32[$33>>2] = $892;
         HEAP8[$891>>0] = $890;
         $893 = HEAP8[$35>>0]|0;
         $894 = $893&255;
         $895 = HEAP32[$34>>2]|0;
         $896 = HEAP8[$895>>0]|0;
         $897 = $896&255;
         $898 = $897 & 3;
         $899 = Math_imul($894, $898)|0;
         $900 = $899&255;
         $901 = HEAP32[$33>>2]|0;
         $902 = ((($901)) + 1|0);
         HEAP32[$33>>2] = $902;
         HEAP8[$901>>0] = $900;
         $903 = HEAP32[$24>>2]|0;
         $904 = (($903) - 4)|0;
         HEAP32[$24>>2] = $904;
         $905 = HEAP32[$34>>2]|0;
         $906 = ((($905)) + 1|0);
         HEAP32[$34>>2] = $906;
        }
        $907 = HEAP32[$24>>2]|0;
        $908 = ($907|0)>(0);
        if ($908) {
         $909 = HEAP8[$35>>0]|0;
         $910 = $909&255;
         $911 = HEAP32[$34>>2]|0;
         $912 = HEAP8[$911>>0]|0;
         $913 = $912&255;
         $914 = $913 >> 6;
         $915 = Math_imul($910, $914)|0;
         $916 = $915&255;
         $917 = HEAP32[$33>>2]|0;
         $918 = ((($917)) + 1|0);
         HEAP32[$33>>2] = $918;
         HEAP8[$917>>0] = $916;
        }
        $919 = HEAP32[$24>>2]|0;
        $920 = ($919|0)>(1);
        if ($920) {
         $921 = HEAP8[$35>>0]|0;
         $922 = $921&255;
         $923 = HEAP32[$34>>2]|0;
         $924 = HEAP8[$923>>0]|0;
         $925 = $924&255;
         $926 = $925 >> 4;
         $927 = $926 & 3;
         $928 = Math_imul($922, $927)|0;
         $929 = $928&255;
         $930 = HEAP32[$33>>2]|0;
         $931 = ((($930)) + 1|0);
         HEAP32[$33>>2] = $931;
         HEAP8[$930>>0] = $929;
        }
        $932 = HEAP32[$24>>2]|0;
        $933 = ($932|0)>(2);
        if (!($933)) {
         break;
        }
        $934 = HEAP8[$35>>0]|0;
        $935 = $934&255;
        $936 = HEAP32[$34>>2]|0;
        $937 = HEAP8[$936>>0]|0;
        $938 = $937&255;
        $939 = $938 >> 2;
        $940 = $939 & 3;
        $941 = Math_imul($935, $940)|0;
        $942 = $941&255;
        $943 = HEAP32[$33>>2]|0;
        $944 = ((($943)) + 1|0);
        HEAP32[$33>>2] = $944;
        HEAP8[$943>>0] = $942;
        break;
       }
       $945 = HEAP32[$15>>2]|0;
       $946 = ($945|0)==(1);
       if ($946) {
        $947 = HEAP32[$13>>2]|0;
        $948 = HEAP32[$25>>2]|0;
        $949 = Math_imul($947, $948)|0;
        HEAP32[$24>>2] = $949;
        while(1) {
         $950 = HEAP32[$24>>2]|0;
         $951 = ($950|0)>=(8);
         if (!($951)) {
          break;
         }
         $952 = HEAP8[$35>>0]|0;
         $953 = $952&255;
         $954 = HEAP32[$34>>2]|0;
         $955 = HEAP8[$954>>0]|0;
         $956 = $955&255;
         $957 = $956 >> 7;
         $958 = Math_imul($953, $957)|0;
         $959 = $958&255;
         $960 = HEAP32[$33>>2]|0;
         $961 = ((($960)) + 1|0);
         HEAP32[$33>>2] = $961;
         HEAP8[$960>>0] = $959;
         $962 = HEAP8[$35>>0]|0;
         $963 = $962&255;
         $964 = HEAP32[$34>>2]|0;
         $965 = HEAP8[$964>>0]|0;
         $966 = $965&255;
         $967 = $966 >> 6;
         $968 = $967 & 1;
         $969 = Math_imul($963, $968)|0;
         $970 = $969&255;
         $971 = HEAP32[$33>>2]|0;
         $972 = ((($971)) + 1|0);
         HEAP32[$33>>2] = $972;
         HEAP8[$971>>0] = $970;
         $973 = HEAP8[$35>>0]|0;
         $974 = $973&255;
         $975 = HEAP32[$34>>2]|0;
         $976 = HEAP8[$975>>0]|0;
         $977 = $976&255;
         $978 = $977 >> 5;
         $979 = $978 & 1;
         $980 = Math_imul($974, $979)|0;
         $981 = $980&255;
         $982 = HEAP32[$33>>2]|0;
         $983 = ((($982)) + 1|0);
         HEAP32[$33>>2] = $983;
         HEAP8[$982>>0] = $981;
         $984 = HEAP8[$35>>0]|0;
         $985 = $984&255;
         $986 = HEAP32[$34>>2]|0;
         $987 = HEAP8[$986>>0]|0;
         $988 = $987&255;
         $989 = $988 >> 4;
         $990 = $989 & 1;
         $991 = Math_imul($985, $990)|0;
         $992 = $991&255;
         $993 = HEAP32[$33>>2]|0;
         $994 = ((($993)) + 1|0);
         HEAP32[$33>>2] = $994;
         HEAP8[$993>>0] = $992;
         $995 = HEAP8[$35>>0]|0;
         $996 = $995&255;
         $997 = HEAP32[$34>>2]|0;
         $998 = HEAP8[$997>>0]|0;
         $999 = $998&255;
         $1000 = $999 >> 3;
         $1001 = $1000 & 1;
         $1002 = Math_imul($996, $1001)|0;
         $1003 = $1002&255;
         $1004 = HEAP32[$33>>2]|0;
         $1005 = ((($1004)) + 1|0);
         HEAP32[$33>>2] = $1005;
         HEAP8[$1004>>0] = $1003;
         $1006 = HEAP8[$35>>0]|0;
         $1007 = $1006&255;
         $1008 = HEAP32[$34>>2]|0;
         $1009 = HEAP8[$1008>>0]|0;
         $1010 = $1009&255;
         $1011 = $1010 >> 2;
         $1012 = $1011 & 1;
         $1013 = Math_imul($1007, $1012)|0;
         $1014 = $1013&255;
         $1015 = HEAP32[$33>>2]|0;
         $1016 = ((($1015)) + 1|0);
         HEAP32[$33>>2] = $1016;
         HEAP8[$1015>>0] = $1014;
         $1017 = HEAP8[$35>>0]|0;
         $1018 = $1017&255;
         $1019 = HEAP32[$34>>2]|0;
         $1020 = HEAP8[$1019>>0]|0;
         $1021 = $1020&255;
         $1022 = $1021 >> 1;
         $1023 = $1022 & 1;
         $1024 = Math_imul($1018, $1023)|0;
         $1025 = $1024&255;
         $1026 = HEAP32[$33>>2]|0;
         $1027 = ((($1026)) + 1|0);
         HEAP32[$33>>2] = $1027;
         HEAP8[$1026>>0] = $1025;
         $1028 = HEAP8[$35>>0]|0;
         $1029 = $1028&255;
         $1030 = HEAP32[$34>>2]|0;
         $1031 = HEAP8[$1030>>0]|0;
         $1032 = $1031&255;
         $1033 = $1032 & 1;
         $1034 = Math_imul($1029, $1033)|0;
         $1035 = $1034&255;
         $1036 = HEAP32[$33>>2]|0;
         $1037 = ((($1036)) + 1|0);
         HEAP32[$33>>2] = $1037;
         HEAP8[$1036>>0] = $1035;
         $1038 = HEAP32[$24>>2]|0;
         $1039 = (($1038) - 8)|0;
         HEAP32[$24>>2] = $1039;
         $1040 = HEAP32[$34>>2]|0;
         $1041 = ((($1040)) + 1|0);
         HEAP32[$34>>2] = $1041;
        }
        $1042 = HEAP32[$24>>2]|0;
        $1043 = ($1042|0)>(0);
        if ($1043) {
         $1044 = HEAP8[$35>>0]|0;
         $1045 = $1044&255;
         $1046 = HEAP32[$34>>2]|0;
         $1047 = HEAP8[$1046>>0]|0;
         $1048 = $1047&255;
         $1049 = $1048 >> 7;
         $1050 = Math_imul($1045, $1049)|0;
         $1051 = $1050&255;
         $1052 = HEAP32[$33>>2]|0;
         $1053 = ((($1052)) + 1|0);
         HEAP32[$33>>2] = $1053;
         HEAP8[$1052>>0] = $1051;
        }
        $1054 = HEAP32[$24>>2]|0;
        $1055 = ($1054|0)>(1);
        if ($1055) {
         $1056 = HEAP8[$35>>0]|0;
         $1057 = $1056&255;
         $1058 = HEAP32[$34>>2]|0;
         $1059 = HEAP8[$1058>>0]|0;
         $1060 = $1059&255;
         $1061 = $1060 >> 6;
         $1062 = $1061 & 1;
         $1063 = Math_imul($1057, $1062)|0;
         $1064 = $1063&255;
         $1065 = HEAP32[$33>>2]|0;
         $1066 = ((($1065)) + 1|0);
         HEAP32[$33>>2] = $1066;
         HEAP8[$1065>>0] = $1064;
        }
        $1067 = HEAP32[$24>>2]|0;
        $1068 = ($1067|0)>(2);
        if ($1068) {
         $1069 = HEAP8[$35>>0]|0;
         $1070 = $1069&255;
         $1071 = HEAP32[$34>>2]|0;
         $1072 = HEAP8[$1071>>0]|0;
         $1073 = $1072&255;
         $1074 = $1073 >> 5;
         $1075 = $1074 & 1;
         $1076 = Math_imul($1070, $1075)|0;
         $1077 = $1076&255;
         $1078 = HEAP32[$33>>2]|0;
         $1079 = ((($1078)) + 1|0);
         HEAP32[$33>>2] = $1079;
         HEAP8[$1078>>0] = $1077;
        }
        $1080 = HEAP32[$24>>2]|0;
        $1081 = ($1080|0)>(3);
        if ($1081) {
         $1082 = HEAP8[$35>>0]|0;
         $1083 = $1082&255;
         $1084 = HEAP32[$34>>2]|0;
         $1085 = HEAP8[$1084>>0]|0;
         $1086 = $1085&255;
         $1087 = $1086 >> 4;
         $1088 = $1087 & 1;
         $1089 = Math_imul($1083, $1088)|0;
         $1090 = $1089&255;
         $1091 = HEAP32[$33>>2]|0;
         $1092 = ((($1091)) + 1|0);
         HEAP32[$33>>2] = $1092;
         HEAP8[$1091>>0] = $1090;
        }
        $1093 = HEAP32[$24>>2]|0;
        $1094 = ($1093|0)>(4);
        if ($1094) {
         $1095 = HEAP8[$35>>0]|0;
         $1096 = $1095&255;
         $1097 = HEAP32[$34>>2]|0;
         $1098 = HEAP8[$1097>>0]|0;
         $1099 = $1098&255;
         $1100 = $1099 >> 3;
         $1101 = $1100 & 1;
         $1102 = Math_imul($1096, $1101)|0;
         $1103 = $1102&255;
         $1104 = HEAP32[$33>>2]|0;
         $1105 = ((($1104)) + 1|0);
         HEAP32[$33>>2] = $1105;
         HEAP8[$1104>>0] = $1103;
        }
        $1106 = HEAP32[$24>>2]|0;
        $1107 = ($1106|0)>(5);
        if ($1107) {
         $1108 = HEAP8[$35>>0]|0;
         $1109 = $1108&255;
         $1110 = HEAP32[$34>>2]|0;
         $1111 = HEAP8[$1110>>0]|0;
         $1112 = $1111&255;
         $1113 = $1112 >> 2;
         $1114 = $1113 & 1;
         $1115 = Math_imul($1109, $1114)|0;
         $1116 = $1115&255;
         $1117 = HEAP32[$33>>2]|0;
         $1118 = ((($1117)) + 1|0);
         HEAP32[$33>>2] = $1118;
         HEAP8[$1117>>0] = $1116;
        }
        $1119 = HEAP32[$24>>2]|0;
        $1120 = ($1119|0)>(6);
        if ($1120) {
         $1121 = HEAP8[$35>>0]|0;
         $1122 = $1121&255;
         $1123 = HEAP32[$34>>2]|0;
         $1124 = HEAP8[$1123>>0]|0;
         $1125 = $1124&255;
         $1126 = $1125 >> 1;
         $1127 = $1126 & 1;
         $1128 = Math_imul($1122, $1127)|0;
         $1129 = $1128&255;
         $1130 = HEAP32[$33>>2]|0;
         $1131 = ((($1130)) + 1|0);
         HEAP32[$33>>2] = $1131;
         HEAP8[$1130>>0] = $1129;
        }
       }
      }
     } while(0);
     $1132 = HEAP32[$25>>2]|0;
     $1133 = HEAP32[$12>>2]|0;
     $1134 = ($1132|0)!=($1133|0);
     L209: do {
      if ($1134) {
       $1135 = HEAP32[$9>>2]|0;
       $1136 = ((($1135)) + 12|0);
       $1137 = HEAP32[$1136>>2]|0;
       $1138 = HEAP32[$21>>2]|0;
       $1139 = HEAP32[$20>>2]|0;
       $1140 = Math_imul($1138, $1139)|0;
       $1141 = (($1137) + ($1140)|0);
       HEAP32[$33>>2] = $1141;
       $1142 = HEAP32[$25>>2]|0;
       $1143 = ($1142|0)==(1);
       if ($1143) {
        $1144 = HEAP32[$13>>2]|0;
        $1145 = (($1144) - 1)|0;
        HEAP32[$36>>2] = $1145;
        while(1) {
         $1146 = HEAP32[$36>>2]|0;
         $1147 = ($1146|0)>=(0);
         if (!($1147)) {
          break L209;
         }
         $1148 = HEAP32[$36>>2]|0;
         $1149 = $1148<<1;
         $1150 = (($1149) + 1)|0;
         $1151 = HEAP32[$33>>2]|0;
         $1152 = (($1151) + ($1150)|0);
         HEAP8[$1152>>0] = -1;
         $1153 = HEAP32[$36>>2]|0;
         $1154 = HEAP32[$33>>2]|0;
         $1155 = (($1154) + ($1153)|0);
         $1156 = HEAP8[$1155>>0]|0;
         $1157 = HEAP32[$36>>2]|0;
         $1158 = $1157<<1;
         $1159 = (($1158) + 0)|0;
         $1160 = HEAP32[$33>>2]|0;
         $1161 = (($1160) + ($1159)|0);
         HEAP8[$1161>>0] = $1156;
         $1162 = HEAP32[$36>>2]|0;
         $1163 = (($1162) + -1)|0;
         HEAP32[$36>>2] = $1163;
        }
       }
       $1164 = HEAP32[$25>>2]|0;
       $1165 = ($1164|0)==(3);
       if (!($1165)) {
        break L156;
       }
       $1166 = HEAP32[$13>>2]|0;
       $1167 = (($1166) - 1)|0;
       HEAP32[$36>>2] = $1167;
       while(1) {
        $1168 = HEAP32[$36>>2]|0;
        $1169 = ($1168|0)>=(0);
        if (!($1169)) {
         break L209;
        }
        $1170 = HEAP32[$36>>2]|0;
        $1171 = $1170<<2;
        $1172 = (($1171) + 3)|0;
        $1173 = HEAP32[$33>>2]|0;
        $1174 = (($1173) + ($1172)|0);
        HEAP8[$1174>>0] = -1;
        $1175 = HEAP32[$36>>2]|0;
        $1176 = ($1175*3)|0;
        $1177 = (($1176) + 2)|0;
        $1178 = HEAP32[$33>>2]|0;
        $1179 = (($1178) + ($1177)|0);
        $1180 = HEAP8[$1179>>0]|0;
        $1181 = HEAP32[$36>>2]|0;
        $1182 = $1181<<2;
        $1183 = (($1182) + 2)|0;
        $1184 = HEAP32[$33>>2]|0;
        $1185 = (($1184) + ($1183)|0);
        HEAP8[$1185>>0] = $1180;
        $1186 = HEAP32[$36>>2]|0;
        $1187 = ($1186*3)|0;
        $1188 = (($1187) + 1)|0;
        $1189 = HEAP32[$33>>2]|0;
        $1190 = (($1189) + ($1188)|0);
        $1191 = HEAP8[$1190>>0]|0;
        $1192 = HEAP32[$36>>2]|0;
        $1193 = $1192<<2;
        $1194 = (($1193) + 1)|0;
        $1195 = HEAP32[$33>>2]|0;
        $1196 = (($1195) + ($1194)|0);
        HEAP8[$1196>>0] = $1191;
        $1197 = HEAP32[$36>>2]|0;
        $1198 = ($1197*3)|0;
        $1199 = (($1198) + 0)|0;
        $1200 = HEAP32[$33>>2]|0;
        $1201 = (($1200) + ($1199)|0);
        $1202 = HEAP8[$1201>>0]|0;
        $1203 = HEAP32[$36>>2]|0;
        $1204 = $1203<<2;
        $1205 = (($1204) + 0)|0;
        $1206 = HEAP32[$33>>2]|0;
        $1207 = (($1206) + ($1205)|0);
        HEAP8[$1207>>0] = $1202;
        $1208 = HEAP32[$36>>2]|0;
        $1209 = (($1208) + -1)|0;
        HEAP32[$36>>2] = $1209;
       }
      }
     } while(0);
     $1210 = HEAP32[$20>>2]|0;
     $1211 = (($1210) + 1)|0;
     HEAP32[$20>>2] = $1211;
    }
    ___assert_fail((21342|0),(20646|0),4197,(21244|0));
    // unreachable;
   } else {
    $1212 = HEAP32[$15>>2]|0;
    $1213 = ($1212|0)==(16);
    if ($1213) {
     $1214 = HEAP32[$9>>2]|0;
     $1215 = ((($1214)) + 12|0);
     $1216 = HEAP32[$1215>>2]|0;
     HEAP32[$37>>2] = $1216;
     $1217 = HEAP32[$37>>2]|0;
     HEAP32[$38>>2] = $1217;
     HEAP32[$19>>2] = 0;
     while(1) {
      $1218 = HEAP32[$19>>2]|0;
      $1219 = HEAP32[$13>>2]|0;
      $1220 = HEAP32[$14>>2]|0;
      $1221 = Math_imul($1219, $1220)|0;
      $1222 = HEAP32[$12>>2]|0;
      $1223 = Math_imul($1221, $1222)|0;
      $1224 = ($1218>>>0)<($1223>>>0);
      if (!($1224)) {
       break L154;
      }
      $1225 = HEAP32[$37>>2]|0;
      $1226 = HEAP8[$1225>>0]|0;
      $1227 = $1226&255;
      $1228 = $1227 << 8;
      $1229 = HEAP32[$37>>2]|0;
      $1230 = ((($1229)) + 1|0);
      $1231 = HEAP8[$1230>>0]|0;
      $1232 = $1231&255;
      $1233 = $1228 | $1232;
      $1234 = $1233&65535;
      $1235 = HEAP32[$38>>2]|0;
      HEAP16[$1235>>1] = $1234;
      $1236 = HEAP32[$19>>2]|0;
      $1237 = (($1236) + 1)|0;
      HEAP32[$19>>2] = $1237;
      $1238 = HEAP32[$38>>2]|0;
      $1239 = ((($1238)) + 2|0);
      HEAP32[$38>>2] = $1239;
      $1240 = HEAP32[$37>>2]|0;
      $1241 = ((($1240)) + 2|0);
      HEAP32[$37>>2] = $1241;
     }
    }
   }
  } while(0);
  HEAP32[$8>>2] = 1;
  $1242 = HEAP32[$8>>2]|0;
  STACKTOP = sp;return ($1242|0);
 }
 return (0)|0;
}
function _stbi__paeth($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) + ($12))|0;
 $14 = HEAP32[$6>>2]|0;
 $15 = (($13) - ($14))|0;
 HEAP32[$7>>2] = $15;
 $16 = HEAP32[$7>>2]|0;
 $17 = HEAP32[$4>>2]|0;
 $18 = (($16) - ($17))|0;
 $19 = (Math_abs(($18|0))|0);
 HEAP32[$8>>2] = $19;
 $20 = HEAP32[$7>>2]|0;
 $21 = HEAP32[$5>>2]|0;
 $22 = (($20) - ($21))|0;
 $23 = (Math_abs(($22|0))|0);
 HEAP32[$9>>2] = $23;
 $24 = HEAP32[$7>>2]|0;
 $25 = HEAP32[$6>>2]|0;
 $26 = (($24) - ($25))|0;
 $27 = (Math_abs(($26|0))|0);
 HEAP32[$10>>2] = $27;
 $28 = HEAP32[$8>>2]|0;
 $29 = HEAP32[$9>>2]|0;
 $30 = ($28|0)<=($29|0);
 if ($30) {
  $31 = HEAP32[$8>>2]|0;
  $32 = HEAP32[$10>>2]|0;
  $33 = ($31|0)<=($32|0);
  if ($33) {
   $34 = HEAP32[$4>>2]|0;
   HEAP32[$3>>2] = $34;
   $40 = HEAP32[$3>>2]|0;
   STACKTOP = sp;return ($40|0);
  }
 }
 $35 = HEAP32[$9>>2]|0;
 $36 = HEAP32[$10>>2]|0;
 $37 = ($35|0)<=($36|0);
 if ($37) {
  $38 = HEAP32[$5>>2]|0;
  HEAP32[$3>>2] = $38;
  $40 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($40|0);
 } else {
  $39 = HEAP32[$6>>2]|0;
  HEAP32[$3>>2] = $39;
  $40 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _stbi__do_zlib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $10 = HEAP32[$6>>2]|0;
 $11 = HEAP32[$5>>2]|0;
 $12 = ((($11)) + 20|0);
 HEAP32[$12>>2] = $10;
 $13 = HEAP32[$6>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 $15 = ((($14)) + 16|0);
 HEAP32[$15>>2] = $13;
 $16 = HEAP32[$6>>2]|0;
 $17 = HEAP32[$7>>2]|0;
 $18 = (($16) + ($17)|0);
 $19 = HEAP32[$5>>2]|0;
 $20 = ((($19)) + 24|0);
 HEAP32[$20>>2] = $18;
 $21 = HEAP32[$8>>2]|0;
 $22 = HEAP32[$5>>2]|0;
 $23 = ((($22)) + 28|0);
 HEAP32[$23>>2] = $21;
 $24 = HEAP32[$5>>2]|0;
 $25 = HEAP32[$9>>2]|0;
 $26 = (_stbi__parse_zlib($24,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function _stbi__parse_zlib($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $7 = HEAP32[$4>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[$3>>2]|0;
  $10 = (_stbi__parse_zlib_header($9)|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   label = 4;
  } else {
   HEAP32[$2>>2] = 0;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $12 = HEAP32[$3>>2]|0;
   $13 = ((($12)) + 8|0);
   HEAP32[$13>>2] = 0;
   $14 = HEAP32[$3>>2]|0;
   $15 = ((($14)) + 12|0);
   HEAP32[$15>>2] = 0;
   while(1) {
    $16 = HEAP32[$3>>2]|0;
    $17 = (_stbi__zreceive($16,1)|0);
    HEAP32[$5>>2] = $17;
    $18 = HEAP32[$3>>2]|0;
    $19 = (_stbi__zreceive($18,2)|0);
    HEAP32[$6>>2] = $19;
    $20 = HEAP32[$6>>2]|0;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = HEAP32[$3>>2]|0;
     $23 = (_stbi__parse_uncompressed_block($22)|0);
     $24 = ($23|0)!=(0);
     if (!($24)) {
      label = 7;
      break;
     }
    } else {
     $25 = HEAP32[$6>>2]|0;
     $26 = ($25|0)==(3);
     if ($26) {
      label = 9;
      break;
     }
     $27 = HEAP32[$6>>2]|0;
     $28 = ($27|0)==(1);
     if ($28) {
      $29 = HEAP8[(41686)>>0]|0;
      $30 = ($29<<24>>24)!=(0);
      if (!($30)) {
       _stbi__init_zdefaults();
      }
      $31 = HEAP32[$3>>2]|0;
      $32 = ((($31)) + 32|0);
      $33 = (_stbi__zbuild_huffman($32,41367,288)|0);
      $34 = ($33|0)!=(0);
      if (!($34)) {
       label = 14;
       break;
      }
      $35 = HEAP32[$3>>2]|0;
      $36 = ((($35)) + 2052|0);
      $37 = (_stbi__zbuild_huffman($36,41655,32)|0);
      $38 = ($37|0)!=(0);
      if (!($38)) {
       label = 16;
       break;
      }
     } else {
      $39 = HEAP32[$3>>2]|0;
      $40 = (_stbi__compute_huffman_codes($39)|0);
      $41 = ($40|0)!=(0);
      if (!($41)) {
       label = 18;
       break;
      }
     }
     $42 = HEAP32[$3>>2]|0;
     $43 = (_stbi__parse_huffman_block($42)|0);
     $44 = ($43|0)!=(0);
     if (!($44)) {
      label = 20;
      break;
     }
    }
    $45 = HEAP32[$5>>2]|0;
    $46 = ($45|0)!=(0);
    $47 = $46 ^ 1;
    if (!($47)) {
     label = 22;
     break;
    }
   }
   if ((label|0) == 7) {
    HEAP32[$2>>2] = 0;
    break;
   }
   else if ((label|0) == 9) {
    HEAP32[$2>>2] = 0;
    break;
   }
   else if ((label|0) == 14) {
    HEAP32[$2>>2] = 0;
    break;
   }
   else if ((label|0) == 16) {
    HEAP32[$2>>2] = 0;
    break;
   }
   else if ((label|0) == 18) {
    HEAP32[$2>>2] = 0;
    break;
   }
   else if ((label|0) == 20) {
    HEAP32[$2>>2] = 0;
    break;
   }
   else if ((label|0) == 22) {
    HEAP32[$2>>2] = 1;
    break;
   }
  }
 } while(0);
 $48 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($48|0);
}
function _stbi__parse_zlib_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$2>>2] = $0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (_stbi__zget8($6)|0);
 $8 = $7&255;
 HEAP32[$3>>2] = $8;
 $9 = HEAP32[$3>>2]|0;
 $10 = $9 & 15;
 HEAP32[$4>>2] = $10;
 $11 = HEAP32[$2>>2]|0;
 $12 = (_stbi__zget8($11)|0);
 $13 = $12&255;
 HEAP32[$5>>2] = $13;
 $14 = HEAP32[$3>>2]|0;
 $15 = $14<<8;
 $16 = HEAP32[$5>>2]|0;
 $17 = (($15) + ($16))|0;
 $18 = (($17|0) % 31)&-1;
 $19 = ($18|0)!=(0);
 do {
  if ($19) {
   $20 = (_stbi__err(21668)|0);
   HEAP32[$1>>2] = $20;
  } else {
   $21 = HEAP32[$5>>2]|0;
   $22 = $21 & 32;
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = (_stbi__err(21684)|0);
    HEAP32[$1>>2] = $24;
    break;
   }
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)!=(8);
   if ($26) {
    $27 = (_stbi__err(21699)|0);
    HEAP32[$1>>2] = $27;
    break;
   } else {
    HEAP32[$1>>2] = 1;
    break;
   }
  }
 } while(0);
 $28 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($28|0);
}
function _stbi__zreceive($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($7|0)<($8|0);
 if ($9) {
  $10 = HEAP32[$2>>2]|0;
  _stbi__fill_bits($10);
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$3>>2]|0;
 $15 = 1 << $14;
 $16 = (($15) - 1)|0;
 $17 = $13 & $16;
 HEAP32[$4>>2] = $17;
 $18 = HEAP32[$3>>2]|0;
 $19 = HEAP32[$2>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >>> $18;
 HEAP32[$20>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$2>>2]|0;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - ($23))|0;
 HEAP32[$25>>2] = $27;
 $28 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($28|0);
}
function _stbi__parse_uncompressed_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 20|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$2>>2] = $0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 7;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 7;
  (_stbi__zreceive($12,$16)|0);
 }
 HEAP32[$6>>2] = 0;
 while(1) {
  $17 = HEAP32[$2>>2]|0;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)>(0);
  $21 = HEAP32[$2>>2]|0;
  if (!($20)) {
   break;
  }
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 255;
  $25 = $24&255;
  $26 = HEAP32[$6>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$6>>2] = $27;
  $28 = (($3) + ($26)|0);
  HEAP8[$28>>0] = $25;
  $29 = HEAP32[$2>>2]|0;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 >>> 8;
  HEAP32[$30>>2] = $32;
  $33 = HEAP32[$2>>2]|0;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) - 8)|0;
  HEAP32[$34>>2] = $36;
 }
 $37 = ((($21)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 if (!($39)) {
  ___assert_fail((21590|0),(20646|0),3780,(21607|0));
  // unreachable;
 }
 while(1) {
  $40 = HEAP32[$6>>2]|0;
  $41 = ($40|0)<(4);
  if (!($41)) {
   break;
  }
  $42 = HEAP32[$2>>2]|0;
  $43 = (_stbi__zget8($42)|0);
  $44 = HEAP32[$6>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$6>>2] = $45;
  $46 = (($3) + ($44)|0);
  HEAP8[$46>>0] = $43;
 }
 $47 = ((($3)) + 1|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = $49<<8;
 $51 = HEAP8[$3>>0]|0;
 $52 = $51&255;
 $53 = (($50) + ($52))|0;
 HEAP32[$4>>2] = $53;
 $54 = ((($3)) + 3|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56<<8;
 $58 = ((($3)) + 2|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = (($57) + ($60))|0;
 HEAP32[$5>>2] = $61;
 $62 = HEAP32[$5>>2]|0;
 $63 = HEAP32[$4>>2]|0;
 $64 = $63 ^ 65535;
 $65 = ($62|0)!=($64|0);
 if ($65) {
  $66 = (_stbi__err(21638)|0);
  HEAP32[$1>>2] = $66;
  $107 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($107|0);
 }
 $67 = HEAP32[$2>>2]|0;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$4>>2]|0;
 $70 = (($68) + ($69)|0);
 $71 = HEAP32[$2>>2]|0;
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($70>>>0)>($73>>>0);
 if ($74) {
  $75 = (_stbi__err(21651)|0);
  HEAP32[$1>>2] = $75;
  $107 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($107|0);
 }
 $76 = HEAP32[$2>>2]|0;
 $77 = ((($76)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = HEAP32[$4>>2]|0;
 $80 = (($78) + ($79)|0);
 $81 = HEAP32[$2>>2]|0;
 $82 = ((($81)) + 24|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($80>>>0)>($83>>>0);
 if ($84) {
  $85 = HEAP32[$2>>2]|0;
  $86 = HEAP32[$2>>2]|0;
  $87 = ((($86)) + 16|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = HEAP32[$4>>2]|0;
  $90 = (_stbi__zexpand($85,$88,$89)|0);
  $91 = ($90|0)!=(0);
  if (!($91)) {
   HEAP32[$1>>2] = 0;
   $107 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($107|0);
  }
 }
 $92 = HEAP32[$2>>2]|0;
 $93 = ((($92)) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[$2>>2]|0;
 $96 = HEAP32[$95>>2]|0;
 $97 = HEAP32[$4>>2]|0;
 _memcpy(($94|0),($96|0),($97|0))|0;
 $98 = HEAP32[$4>>2]|0;
 $99 = HEAP32[$2>>2]|0;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + ($98)|0);
 HEAP32[$99>>2] = $101;
 $102 = HEAP32[$4>>2]|0;
 $103 = HEAP32[$2>>2]|0;
 $104 = ((($103)) + 16|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($105) + ($102)|0);
 HEAP32[$104>>2] = $106;
 HEAP32[$1>>2] = 1;
 $107 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($107|0);
}
function _stbi__init_zdefaults() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 HEAP32[$0>>2] = 0;
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)<=(143);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = (41367 + ($3)|0);
  HEAP8[$4>>0] = 8;
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + 1)|0;
  HEAP32[$0>>2] = $6;
 }
 while(1) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)<=(255);
  if (!($8)) {
   break;
  }
  $9 = HEAP32[$0>>2]|0;
  $10 = (41367 + ($9)|0);
  HEAP8[$10>>0] = 9;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$0>>2] = $12;
 }
 while(1) {
  $13 = HEAP32[$0>>2]|0;
  $14 = ($13|0)<=(279);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$0>>2]|0;
  $16 = (41367 + ($15)|0);
  HEAP8[$16>>0] = 7;
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$0>>2] = $18;
 }
 while(1) {
  $19 = HEAP32[$0>>2]|0;
  $20 = ($19|0)<=(287);
  if (!($20)) {
   break;
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = (41367 + ($21)|0);
  HEAP8[$22>>0] = 8;
  $23 = HEAP32[$0>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$0>>2] = $24;
 }
 HEAP32[$0>>2] = 0;
 while(1) {
  $25 = HEAP32[$0>>2]|0;
  $26 = ($25|0)<=(31);
  if (!($26)) {
   break;
  }
  $27 = HEAP32[$0>>2]|0;
  $28 = (41655 + ($27)|0);
  HEAP8[$28>>0] = 5;
  $29 = HEAP32[$0>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$0>>2] = $30;
 }
 STACKTOP = sp;return;
}
function _stbi__zbuild_huffman($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $3 = sp + 168|0;
 $4 = sp + 164|0;
 $5 = sp + 160|0;
 $6 = sp + 156|0;
 $7 = sp + 152|0;
 $8 = sp + 148|0;
 $9 = sp + 144|0;
 $10 = sp + 80|0;
 $11 = sp + 12|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp + 172|0;
 $15 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 HEAP32[$8>>2] = 0;
 dest=$11; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $16 = HEAP32[$4>>2]|0;
 _memset(($16|0),0,1024)|0;
 HEAP32[$7>>2] = 0;
 while(1) {
  $17 = HEAP32[$7>>2]|0;
  $18 = HEAP32[$6>>2]|0;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$7>>2]|0;
  $21 = HEAP32[$5>>2]|0;
  $22 = (($21) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($11) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$7>>2] = $29;
 }
 HEAP32[$11>>2] = 0;
 HEAP32[$7>>2] = 1;
 while(1) {
  $30 = HEAP32[$7>>2]|0;
  $31 = ($30|0)<(16);
  if (!($31)) {
   break;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = (($11) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$7>>2]|0;
  $36 = 1 << $35;
  $37 = ($34|0)>($36|0);
  if ($37) {
   label = 7;
   break;
  }
  $39 = HEAP32[$7>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$7>>2] = $40;
 }
 if ((label|0) == 7) {
  $38 = (_stbi__err(21580)|0);
  HEAP32[$3>>2] = $38;
  $160 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 1;
 while(1) {
  $41 = HEAP32[$7>>2]|0;
  $42 = ($41|0)<(16);
  if (!($42)) {
   break;
  }
  $43 = HEAP32[$9>>2]|0;
  $44 = HEAP32[$7>>2]|0;
  $45 = (($10) + ($44<<2)|0);
  HEAP32[$45>>2] = $43;
  $46 = HEAP32[$9>>2]|0;
  $47 = $46&65535;
  $48 = HEAP32[$7>>2]|0;
  $49 = HEAP32[$4>>2]|0;
  $50 = ((($49)) + 1024|0);
  $51 = (($50) + ($48<<1)|0);
  HEAP16[$51>>1] = $47;
  $52 = HEAP32[$8>>2]|0;
  $53 = $52&65535;
  $54 = HEAP32[$7>>2]|0;
  $55 = HEAP32[$4>>2]|0;
  $56 = ((($55)) + 1124|0);
  $57 = (($56) + ($54<<1)|0);
  HEAP16[$57>>1] = $53;
  $58 = HEAP32[$9>>2]|0;
  $59 = HEAP32[$7>>2]|0;
  $60 = (($11) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($58) + ($61))|0;
  HEAP32[$9>>2] = $62;
  $63 = HEAP32[$7>>2]|0;
  $64 = (($11) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = HEAP32[$9>>2]|0;
   $68 = (($67) - 1)|0;
   $69 = HEAP32[$7>>2]|0;
   $70 = 1 << $69;
   $71 = ($68|0)>=($70|0);
   if ($71) {
    label = 13;
    break;
   }
  }
  $73 = HEAP32[$9>>2]|0;
  $74 = HEAP32[$7>>2]|0;
  $75 = (16 - ($74))|0;
  $76 = $73 << $75;
  $77 = HEAP32[$7>>2]|0;
  $78 = HEAP32[$4>>2]|0;
  $79 = ((($78)) + 1056|0);
  $80 = (($79) + ($77<<2)|0);
  HEAP32[$80>>2] = $76;
  $81 = HEAP32[$9>>2]|0;
  $82 = $81 << 1;
  HEAP32[$9>>2] = $82;
  $83 = HEAP32[$7>>2]|0;
  $84 = (($11) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = HEAP32[$8>>2]|0;
  $87 = (($86) + ($85))|0;
  HEAP32[$8>>2] = $87;
  $88 = HEAP32[$7>>2]|0;
  $89 = (($88) + 1)|0;
  HEAP32[$7>>2] = $89;
 }
 if ((label|0) == 13) {
  $72 = (_stbi__err(21528)|0);
  HEAP32[$3>>2] = $72;
  $160 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 $90 = HEAP32[$4>>2]|0;
 $91 = ((($90)) + 1056|0);
 $92 = ((($91)) + 64|0);
 HEAP32[$92>>2] = 65536;
 HEAP32[$7>>2] = 0;
 while(1) {
  $93 = HEAP32[$7>>2]|0;
  $94 = HEAP32[$6>>2]|0;
  $95 = ($93|0)<($94|0);
  if (!($95)) {
   break;
  }
  $96 = HEAP32[$7>>2]|0;
  $97 = HEAP32[$5>>2]|0;
  $98 = (($97) + ($96)|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  HEAP32[$12>>2] = $100;
  $101 = HEAP32[$12>>2]|0;
  $102 = ($101|0)!=(0);
  if ($102) {
   $103 = HEAP32[$12>>2]|0;
   $104 = (($10) + ($103<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$12>>2]|0;
   $107 = HEAP32[$4>>2]|0;
   $108 = ((($107)) + 1024|0);
   $109 = (($108) + ($106<<1)|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110&65535;
   $112 = (($105) - ($111))|0;
   $113 = HEAP32[$12>>2]|0;
   $114 = HEAP32[$4>>2]|0;
   $115 = ((($114)) + 1124|0);
   $116 = (($115) + ($113<<1)|0);
   $117 = HEAP16[$116>>1]|0;
   $118 = $117&65535;
   $119 = (($112) + ($118))|0;
   HEAP32[$13>>2] = $119;
   $120 = HEAP32[$12>>2]|0;
   $121 = $120 << 9;
   $122 = HEAP32[$7>>2]|0;
   $123 = $121 | $122;
   $124 = $123&65535;
   HEAP16[$14>>1] = $124;
   $125 = HEAP32[$12>>2]|0;
   $126 = $125&255;
   $127 = HEAP32[$13>>2]|0;
   $128 = HEAP32[$4>>2]|0;
   $129 = ((($128)) + 1156|0);
   $130 = (($129) + ($127)|0);
   HEAP8[$130>>0] = $126;
   $131 = HEAP32[$7>>2]|0;
   $132 = $131&65535;
   $133 = HEAP32[$13>>2]|0;
   $134 = HEAP32[$4>>2]|0;
   $135 = ((($134)) + 1444|0);
   $136 = (($135) + ($133<<1)|0);
   HEAP16[$136>>1] = $132;
   $137 = HEAP32[$12>>2]|0;
   $138 = ($137|0)<=(9);
   L28: do {
    if ($138) {
     $139 = HEAP32[$12>>2]|0;
     $140 = (($10) + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = HEAP32[$12>>2]|0;
     $143 = (_stbi__bit_reverse($141,$142)|0);
     HEAP32[$15>>2] = $143;
     while(1) {
      $144 = HEAP32[$15>>2]|0;
      $145 = ($144|0)<(512);
      if (!($145)) {
       break L28;
      }
      $146 = HEAP16[$14>>1]|0;
      $147 = HEAP32[$15>>2]|0;
      $148 = HEAP32[$4>>2]|0;
      $149 = (($148) + ($147<<1)|0);
      HEAP16[$149>>1] = $146;
      $150 = HEAP32[$12>>2]|0;
      $151 = 1 << $150;
      $152 = HEAP32[$15>>2]|0;
      $153 = (($152) + ($151))|0;
      HEAP32[$15>>2] = $153;
     }
    }
   } while(0);
   $154 = HEAP32[$12>>2]|0;
   $155 = (($10) + ($154<<2)|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + 1)|0;
   HEAP32[$155>>2] = $157;
  }
  $158 = HEAP32[$7>>2]|0;
  $159 = (($158) + 1)|0;
  HEAP32[$7>>2] = $159;
 }
 HEAP32[$3>>2] = 1;
 $160 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($160|0);
}
function _stbi__compute_huffman_codes($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2544|0);
 $1 = sp + 2052|0;
 $2 = sp + 2048|0;
 $3 = sp + 28|0;
 $4 = sp + 2075|0;
 $5 = sp + 2056|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 $12 = sp;
 HEAP32[$2>>2] = $0;
 $13 = HEAP32[$2>>2]|0;
 $14 = (_stbi__zreceive($13,5)|0);
 $15 = (($14) + 257)|0;
 HEAP32[$8>>2] = $15;
 $16 = HEAP32[$2>>2]|0;
 $17 = (_stbi__zreceive($16,5)|0);
 $18 = (($17) + 1)|0;
 HEAP32[$9>>2] = $18;
 $19 = HEAP32[$2>>2]|0;
 $20 = (_stbi__zreceive($19,4)|0);
 $21 = (($20) + 4)|0;
 HEAP32[$10>>2] = $21;
 dest=$5; stop=dest+19|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$6>>2] = 0;
 while(1) {
  $22 = HEAP32[$6>>2]|0;
  $23 = HEAP32[$10>>2]|0;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = HEAP32[$2>>2]|0;
  $26 = (_stbi__zreceive($25,3)|0);
  HEAP32[$11>>2] = $26;
  $27 = HEAP32[$11>>2]|0;
  $28 = $27&255;
  $29 = HEAP32[$6>>2]|0;
  $30 = (14561 + ($29)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = (($5) + ($32)|0);
  HEAP8[$33>>0] = $28;
  $34 = HEAP32[$6>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$6>>2] = $35;
 }
 $36 = (_stbi__zbuild_huffman($3,$5,19)|0);
 $37 = ($36|0)!=(0);
 if (!($37)) {
  HEAP32[$1>>2] = 0;
  $113 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($113|0);
 }
 HEAP32[$7>>2] = 0;
 while(1) {
  $38 = HEAP32[$7>>2]|0;
  $39 = HEAP32[$8>>2]|0;
  $40 = HEAP32[$9>>2]|0;
  $41 = (($39) + ($40))|0;
  $42 = ($38|0)<($41|0);
  if (!($42)) {
   label = 19;
   break;
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = (_stbi__zhuffman_decode($43,$3)|0);
  HEAP32[$12>>2] = $44;
  $45 = HEAP32[$12>>2]|0;
  $46 = ($45|0)<(0);
  $47 = HEAP32[$12>>2]|0;
  $48 = ($47|0)>=(19);
  $or$cond = $46 | $48;
  if ($or$cond) {
   label = 9;
   break;
  }
  $50 = HEAP32[$12>>2]|0;
  $51 = ($50|0)<(16);
  $52 = HEAP32[$12>>2]|0;
  if ($51) {
   $53 = $52&255;
   $54 = HEAP32[$7>>2]|0;
   $55 = (($54) + 1)|0;
   HEAP32[$7>>2] = $55;
   $56 = (($4) + ($54)|0);
   HEAP8[$56>>0] = $53;
   continue;
  }
  $57 = ($52|0)==(16);
  if ($57) {
   $58 = HEAP32[$2>>2]|0;
   $59 = (_stbi__zreceive($58,2)|0);
   $60 = (($59) + 3)|0;
   HEAP32[$12>>2] = $60;
   $61 = HEAP32[$7>>2]|0;
   $62 = (($4) + ($61)|0);
   $63 = HEAP32[$7>>2]|0;
   $64 = (($63) - 1)|0;
   $65 = (($4) + ($64)|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = $67&255;
   $69 = HEAP32[$12>>2]|0;
   _memset(($62|0),($68|0),($69|0))|0;
   $70 = HEAP32[$12>>2]|0;
   $71 = HEAP32[$7>>2]|0;
   $72 = (($71) + ($70))|0;
   HEAP32[$7>>2] = $72;
   continue;
  }
  $73 = HEAP32[$12>>2]|0;
  $74 = ($73|0)==(17);
  if ($74) {
   $75 = HEAP32[$2>>2]|0;
   $76 = (_stbi__zreceive($75,3)|0);
   $77 = (($76) + 3)|0;
   HEAP32[$12>>2] = $77;
   $78 = HEAP32[$7>>2]|0;
   $79 = (($4) + ($78)|0);
   $80 = HEAP32[$12>>2]|0;
   _memset(($79|0),0,($80|0))|0;
   $81 = HEAP32[$12>>2]|0;
   $82 = HEAP32[$7>>2]|0;
   $83 = (($82) + ($81))|0;
   HEAP32[$7>>2] = $83;
   continue;
  }
  $84 = HEAP32[$12>>2]|0;
  $85 = ($84|0)==(18);
  if (!($85)) {
   label = 17;
   break;
  }
  $86 = HEAP32[$2>>2]|0;
  $87 = (_stbi__zreceive($86,7)|0);
  $88 = (($87) + 11)|0;
  HEAP32[$12>>2] = $88;
  $89 = HEAP32[$7>>2]|0;
  $90 = (($4) + ($89)|0);
  $91 = HEAP32[$12>>2]|0;
  _memset(($90|0),0,($91|0))|0;
  $92 = HEAP32[$12>>2]|0;
  $93 = HEAP32[$7>>2]|0;
  $94 = (($93) + ($92))|0;
  HEAP32[$7>>2] = $94;
 }
 if ((label|0) == 9) {
  $49 = (_stbi__err(21528)|0);
  HEAP32[$1>>2] = $49;
  $113 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 17) {
  ___assert_fail((21544|0),(20646|0),3755,(21552|0));
  // unreachable;
 }
 else if ((label|0) == 19) {
  $95 = HEAP32[$7>>2]|0;
  $96 = HEAP32[$8>>2]|0;
  $97 = HEAP32[$9>>2]|0;
  $98 = (($96) + ($97))|0;
  $99 = ($95|0)!=($98|0);
  if ($99) {
   $100 = (_stbi__err(21528)|0);
   HEAP32[$1>>2] = $100;
   $113 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($113|0);
  }
  $101 = HEAP32[$2>>2]|0;
  $102 = ((($101)) + 32|0);
  $103 = HEAP32[$8>>2]|0;
  $104 = (_stbi__zbuild_huffman($102,$4,$103)|0);
  $105 = ($104|0)!=(0);
  if (!($105)) {
   HEAP32[$1>>2] = 0;
   $113 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($113|0);
  }
  $106 = HEAP32[$2>>2]|0;
  $107 = ((($106)) + 2052|0);
  $108 = HEAP32[$8>>2]|0;
  $109 = (($4) + ($108)|0);
  $110 = HEAP32[$9>>2]|0;
  $111 = (_stbi__zbuild_huffman($107,$109,$110)|0);
  $112 = ($111|0)!=(0);
  if ($112) {
   HEAP32[$1>>2] = 1;
   $113 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($113|0);
  } else {
   HEAP32[$1>>2] = 0;
   $113 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($113|0);
  }
 }
 return (0)|0;
}
function _stbi__parse_huffman_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = sp + 28|0;
 HEAP32[$2>>2] = $0;
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$3>>2] = $11;
 L1: while(1) {
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ((($13)) + 32|0);
  $15 = (_stbi__zhuffman_decode($12,$14)|0);
  HEAP32[$4>>2] = $15;
  $16 = HEAP32[$4>>2]|0;
  $17 = ($16|0)<(256);
  $18 = HEAP32[$4>>2]|0;
  if ($17) {
   $19 = ($18|0)<(0);
   if ($19) {
    label = 4;
    break;
   }
   $21 = HEAP32[$3>>2]|0;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 24|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($21>>>0)>=($24>>>0);
   if ($25) {
    $26 = HEAP32[$2>>2]|0;
    $27 = HEAP32[$3>>2]|0;
    $28 = (_stbi__zexpand($26,$27,1)|0);
    $29 = ($28|0)!=(0);
    if (!($29)) {
     label = 7;
     break;
    }
    $30 = HEAP32[$2>>2]|0;
    $31 = ((($30)) + 16|0);
    $32 = HEAP32[$31>>2]|0;
    HEAP32[$3>>2] = $32;
   }
   $33 = HEAP32[$4>>2]|0;
   $34 = $33&255;
   $35 = HEAP32[$3>>2]|0;
   $36 = ((($35)) + 1|0);
   HEAP32[$3>>2] = $36;
   HEAP8[$35>>0] = $34;
   continue;
  }
  $37 = ($18|0)==(256);
  if ($37) {
   label = 11;
   break;
  }
  $41 = HEAP32[$4>>2]|0;
  $42 = (($41) - 257)|0;
  HEAP32[$4>>2] = $42;
  $43 = HEAP32[$4>>2]|0;
  $44 = (5272 + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  HEAP32[$6>>2] = $45;
  $46 = HEAP32[$4>>2]|0;
  $47 = (5148 + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0);
  if ($49) {
   $50 = HEAP32[$2>>2]|0;
   $51 = HEAP32[$4>>2]|0;
   $52 = (5148 + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (_stbi__zreceive($50,$53)|0);
   $55 = HEAP32[$6>>2]|0;
   $56 = (($55) + ($54))|0;
   HEAP32[$6>>2] = $56;
  }
  $57 = HEAP32[$2>>2]|0;
  $58 = HEAP32[$2>>2]|0;
  $59 = ((($58)) + 2052|0);
  $60 = (_stbi__zhuffman_decode($57,$59)|0);
  HEAP32[$4>>2] = $60;
  $61 = HEAP32[$4>>2]|0;
  $62 = ($61|0)<(0);
  if ($62) {
   label = 15;
   break;
  }
  $64 = HEAP32[$4>>2]|0;
  $65 = (5020 + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  HEAP32[$7>>2] = $66;
  $67 = HEAP32[$4>>2]|0;
  $68 = (4892 + ($67<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0);
  if ($70) {
   $71 = HEAP32[$2>>2]|0;
   $72 = HEAP32[$4>>2]|0;
   $73 = (4892 + ($72<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (_stbi__zreceive($71,$74)|0);
   $76 = HEAP32[$7>>2]|0;
   $77 = (($76) + ($75))|0;
   HEAP32[$7>>2] = $77;
  }
  $78 = HEAP32[$3>>2]|0;
  $79 = HEAP32[$2>>2]|0;
  $80 = ((($79)) + 20|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $78;
  $83 = $81;
  $84 = (($82) - ($83))|0;
  $85 = HEAP32[$7>>2]|0;
  $86 = ($84|0)<($85|0);
  if ($86) {
   label = 19;
   break;
  }
  $88 = HEAP32[$3>>2]|0;
  $89 = HEAP32[$6>>2]|0;
  $90 = (($88) + ($89)|0);
  $91 = HEAP32[$2>>2]|0;
  $92 = ((($91)) + 24|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($90>>>0)>($93>>>0);
  if ($94) {
   $95 = HEAP32[$2>>2]|0;
   $96 = HEAP32[$3>>2]|0;
   $97 = HEAP32[$6>>2]|0;
   $98 = (_stbi__zexpand($95,$96,$97)|0);
   $99 = ($98|0)!=(0);
   if (!($99)) {
    label = 22;
    break;
   }
   $100 = HEAP32[$2>>2]|0;
   $101 = ((($100)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   HEAP32[$3>>2] = $102;
  }
  $103 = HEAP32[$3>>2]|0;
  $104 = HEAP32[$7>>2]|0;
  $105 = (0 - ($104))|0;
  $106 = (($103) + ($105)|0);
  HEAP32[$5>>2] = $106;
  $107 = HEAP32[$7>>2]|0;
  $108 = ($107|0)==(1);
  if ($108) {
   $109 = HEAP32[$5>>2]|0;
   $110 = HEAP8[$109>>0]|0;
   HEAP8[$8>>0] = $110;
   $111 = HEAP32[$6>>2]|0;
   $112 = ($111|0)!=(0);
   if (!($112)) {
    continue;
   }
   while(1) {
    $113 = HEAP8[$8>>0]|0;
    $114 = HEAP32[$3>>2]|0;
    $115 = ((($114)) + 1|0);
    HEAP32[$3>>2] = $115;
    HEAP8[$114>>0] = $113;
    $116 = HEAP32[$6>>2]|0;
    $117 = (($116) + -1)|0;
    HEAP32[$6>>2] = $117;
    $118 = ($117|0)!=(0);
    if (!($118)) {
     continue L1;
    }
   }
  } else {
   $119 = HEAP32[$6>>2]|0;
   $120 = ($119|0)!=(0);
   if (!($120)) {
    continue;
   }
   while(1) {
    $121 = HEAP32[$5>>2]|0;
    $122 = ((($121)) + 1|0);
    HEAP32[$5>>2] = $122;
    $123 = HEAP8[$121>>0]|0;
    $124 = HEAP32[$3>>2]|0;
    $125 = ((($124)) + 1|0);
    HEAP32[$3>>2] = $125;
    HEAP8[$124>>0] = $123;
    $126 = HEAP32[$6>>2]|0;
    $127 = (($126) + -1)|0;
    HEAP32[$6>>2] = $127;
    $128 = ($127|0)!=(0);
    if (!($128)) {
     continue L1;
    }
   }
  }
 }
 if ((label|0) == 4) {
  $20 = (_stbi__err(21353)|0);
  HEAP32[$1>>2] = $20;
  $129 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 7) {
  HEAP32[$1>>2] = 0;
  $129 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 11) {
  $38 = HEAP32[$3>>2]|0;
  $39 = HEAP32[$2>>2]|0;
  $40 = ((($39)) + 16|0);
  HEAP32[$40>>2] = $38;
  HEAP32[$1>>2] = 1;
  $129 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 15) {
  $63 = (_stbi__err(21353)|0);
  HEAP32[$1>>2] = $63;
  $129 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 19) {
  $87 = (_stbi__err(21370)|0);
  HEAP32[$1>>2] = $87;
  $129 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($129|0);
 }
 else if ((label|0) == 22) {
  HEAP32[$1>>2] = 0;
  $129 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($129|0);
 }
 return (0)|0;
}
function _stbi__zhuffman_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $7 = HEAP32[$3>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<(16);
 if ($10) {
  $11 = HEAP32[$3>>2]|0;
  _stbi__fill_bits($11);
 }
 $12 = HEAP32[$3>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 511;
 $16 = HEAP32[$4>>2]|0;
 $17 = (($16) + ($15<<1)|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 HEAP32[$5>>2] = $19;
 $20 = HEAP32[$5>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = HEAP32[$5>>2]|0;
  $23 = $22 >> 9;
  HEAP32[$6>>2] = $23;
  $24 = HEAP32[$6>>2]|0;
  $25 = HEAP32[$3>>2]|0;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 >>> $24;
  HEAP32[$26>>2] = $28;
  $29 = HEAP32[$6>>2]|0;
  $30 = HEAP32[$3>>2]|0;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) - ($29))|0;
  HEAP32[$31>>2] = $33;
  $34 = HEAP32[$5>>2]|0;
  $35 = $34 & 511;
  HEAP32[$2>>2] = $35;
  $39 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($39|0);
 } else {
  $36 = HEAP32[$3>>2]|0;
  $37 = HEAP32[$4>>2]|0;
  $38 = (_stbi__zhuffman_decode_slowpath($36,$37)|0);
  HEAP32[$2>>2] = $38;
  $39 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _stbi__zexpand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$4>>2] = $0;
 HEAP32[$5>>2] = $1;
 HEAP32[$6>>2] = $2;
 $11 = HEAP32[$5>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = ((($12)) + 16|0);
 HEAP32[$13>>2] = $11;
 $14 = HEAP32[$4>>2]|0;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $18 = (_stbi__err(21379)|0);
  HEAP32[$3>>2] = $18;
  $65 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($65|0);
 }
 $19 = HEAP32[$4>>2]|0;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$4>>2]|0;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $21;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 HEAP32[$8>>2] = $27;
 $28 = HEAP32[$4>>2]|0;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$4>>2]|0;
 $32 = ((($31)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $30;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 HEAP32[$10>>2] = $36;
 HEAP32[$9>>2] = $36;
 while(1) {
  $37 = HEAP32[$8>>2]|0;
  $38 = HEAP32[$6>>2]|0;
  $39 = (($37) + ($38))|0;
  $40 = HEAP32[$9>>2]|0;
  $41 = ($39|0)>($40|0);
  if (!($41)) {
   break;
  }
  $42 = HEAP32[$9>>2]|0;
  $43 = $42<<1;
  HEAP32[$9>>2] = $43;
 }
 $44 = HEAP32[$4>>2]|0;
 $45 = ((($44)) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$9>>2]|0;
 $48 = (_realloc($46,$47)|0);
 HEAP32[$7>>2] = $48;
 $49 = HEAP32[$7>>2]|0;
 $50 = ($49|0)==(0|0);
 if ($50) {
  $51 = (_stbi__err(20616)|0);
  HEAP32[$3>>2] = $51;
  $65 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($65|0);
 } else {
  $52 = HEAP32[$7>>2]|0;
  $53 = HEAP32[$4>>2]|0;
  $54 = ((($53)) + 20|0);
  HEAP32[$54>>2] = $52;
  $55 = HEAP32[$7>>2]|0;
  $56 = HEAP32[$8>>2]|0;
  $57 = (($55) + ($56)|0);
  $58 = HEAP32[$4>>2]|0;
  $59 = ((($58)) + 16|0);
  HEAP32[$59>>2] = $57;
  $60 = HEAP32[$7>>2]|0;
  $61 = HEAP32[$9>>2]|0;
  $62 = (($60) + ($61)|0);
  $63 = HEAP32[$4>>2]|0;
  $64 = ((($63)) + 24|0);
  HEAP32[$64>>2] = $62;
  HEAP32[$3>>2] = 1;
  $65 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _stbi__fill_bits($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($2)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = 1 << $7;
  $9 = ($4>>>0)<($8>>>0);
  if (!($9)) {
   label = 3;
   break;
  }
  $10 = HEAP32[$1>>2]|0;
  $11 = (_stbi__zget8($10)|0);
  $12 = $11&255;
  $13 = HEAP32[$1>>2]|0;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $12 << $15;
  $17 = HEAP32[$1>>2]|0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = HEAP32[$1>>2]|0;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 8)|0;
  HEAP32[$22>>2] = $24;
  $25 = HEAP32[$1>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)<=(24);
  if (!($28)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  ___assert_fail((21475|0),(20646|0),3598,(21512|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function _stbi__zhuffman_decode_slowpath($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_stbi__bit_reverse($10,16)|0);
 HEAP32[$7>>2] = $11;
 HEAP32[$6>>2] = 10;
 while(1) {
  $12 = HEAP32[$7>>2]|0;
  $13 = HEAP32[$6>>2]|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = ((($14)) + 1056|0);
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($12|0)<($17|0);
  $19 = HEAP32[$6>>2]|0;
  if ($18) {
   break;
  }
  $20 = (($19) + 1)|0;
  HEAP32[$6>>2] = $20;
 }
 $21 = ($19|0)==(16);
 if ($21) {
  HEAP32[$2>>2] = -1;
  $64 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($64|0);
 }
 $22 = HEAP32[$7>>2]|0;
 $23 = HEAP32[$6>>2]|0;
 $24 = (16 - ($23))|0;
 $25 = $22 >> $24;
 $26 = HEAP32[$6>>2]|0;
 $27 = HEAP32[$4>>2]|0;
 $28 = ((($27)) + 1024|0);
 $29 = (($28) + ($26<<1)|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = (($25) - ($31))|0;
 $33 = HEAP32[$6>>2]|0;
 $34 = HEAP32[$4>>2]|0;
 $35 = ((($34)) + 1124|0);
 $36 = (($35) + ($33<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = (($32) + ($38))|0;
 HEAP32[$5>>2] = $39;
 $40 = HEAP32[$5>>2]|0;
 $41 = HEAP32[$4>>2]|0;
 $42 = ((($41)) + 1156|0);
 $43 = (($42) + ($40)|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = HEAP32[$6>>2]|0;
 $47 = ($45|0)==($46|0);
 if (!($47)) {
  ___assert_fail((21399|0),(20646|0),3626,(21415|0));
  // unreachable;
 }
 $48 = HEAP32[$6>>2]|0;
 $49 = HEAP32[$3>>2]|0;
 $50 = ((($49)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 >>> $48;
 HEAP32[$50>>2] = $52;
 $53 = HEAP32[$6>>2]|0;
 $54 = HEAP32[$3>>2]|0;
 $55 = ((($54)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) - ($53))|0;
 HEAP32[$55>>2] = $57;
 $58 = HEAP32[$5>>2]|0;
 $59 = HEAP32[$4>>2]|0;
 $60 = ((($59)) + 1444|0);
 $61 = (($60) + ($58<<1)|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62&65535;
 HEAP32[$2>>2] = $63;
 $64 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($64|0);
}
function _stbi__bit_reverse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<=(16);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = (_stbi__bitreverse16($6)|0);
  $8 = HEAP32[$3>>2]|0;
  $9 = (16 - ($8))|0;
  $10 = $7 >> $9;
  STACKTOP = sp;return ($10|0);
 } else {
  ___assert_fail((21446|0),(20646|0),3516,(21457|0));
  // unreachable;
 }
 return (0)|0;
}
function _stbi__bitreverse16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 43690;
 $4 = $3 >> 1;
 $5 = HEAP32[$1>>2]|0;
 $6 = $5 & 21845;
 $7 = $6 << 1;
 $8 = $4 | $7;
 HEAP32[$1>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = $9 & 52428;
 $11 = $10 >> 2;
 $12 = HEAP32[$1>>2]|0;
 $13 = $12 & 13107;
 $14 = $13 << 2;
 $15 = $11 | $14;
 HEAP32[$1>>2] = $15;
 $16 = HEAP32[$1>>2]|0;
 $17 = $16 & 61680;
 $18 = $17 >> 4;
 $19 = HEAP32[$1>>2]|0;
 $20 = $19 & 3855;
 $21 = $20 << 4;
 $22 = $18 | $21;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$1>>2]|0;
 $24 = $23 & 65280;
 $25 = $24 >> 8;
 $26 = HEAP32[$1>>2]|0;
 $27 = $26 & 255;
 $28 = $27 << 8;
 $29 = $25 | $28;
 HEAP32[$1>>2] = $29;
 $30 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($30|0);
}
function _stbi__zget8($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)>=($7>>>0);
 if ($8) {
  HEAP8[$1>>0] = 0;
  $13 = HEAP8[$1>>0]|0;
  STACKTOP = sp;return ($13|0);
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 1|0);
  HEAP32[$9>>2] = $11;
  $12 = HEAP8[$10>>0]|0;
  HEAP8[$1>>0] = $12;
  $13 = HEAP8[$1>>0]|0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _stbi__setup_jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 18180|0);
 HEAP32[$3>>2] = 2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 18184|0);
 HEAP32[$5>>2] = 9;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 18188|0);
 HEAP32[$7>>2] = 21;
 STACKTOP = sp;return;
}
function _load_jpeg_image($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $5 = sp + 212|0;
 $6 = sp + 208|0;
 $7 = sp + 204|0;
 $8 = sp + 200|0;
 $9 = sp + 196|0;
 $10 = sp + 192|0;
 $11 = sp + 188|0;
 $12 = sp + 184|0;
 $13 = sp + 180|0;
 $14 = sp + 176|0;
 $15 = sp + 172|0;
 $16 = sp + 168|0;
 $17 = sp + 152|0;
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $20 = sp + 16|0;
 $21 = sp + 12|0;
 $22 = sp + 8|0;
 $23 = sp + 4|0;
 $24 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $25 = HEAP32[$6>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 8|0);
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[$10>>2]|0;
 $29 = ($28|0)<(0);
 $30 = HEAP32[$10>>2]|0;
 $31 = ($30|0)>(4);
 $or$cond = $29 | $31;
 if ($or$cond) {
  $32 = (_stbi__err(20823)|0);
  $33 = ($32|0)!=(0);
  $34 = $33 ? 0 : 0;
  $35 = $34;
  $36 = $35;
  HEAP32[$5>>2] = $36;
  $433 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($433|0);
 }
 $37 = HEAP32[$6>>2]|0;
 $38 = (_stbi__decode_jpeg_image($37)|0);
 $39 = ($38|0)!=(0);
 if (!($39)) {
  $40 = HEAP32[$6>>2]|0;
  _stbi__cleanup_jpeg($40);
  HEAP32[$5>>2] = 0;
  $433 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($433|0);
 }
 $41 = HEAP32[$10>>2]|0;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = HEAP32[$10>>2]|0;
  $48 = $43;
 } else {
  $44 = HEAP32[$6>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47;
 }
 HEAP32[$11>>2] = $48;
 $49 = HEAP32[$6>>2]|0;
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(3);
 $54 = HEAP32[$11>>2]|0;
 $55 = ($54|0)<(3);
 $or$cond3 = $53 & $55;
 if ($or$cond3) {
  HEAP32[$12>>2] = 1;
 } else {
  $56 = HEAP32[$6>>2]|0;
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  HEAP32[$12>>2] = $59;
 }
 HEAP32[$13>>2] = 0;
 while(1) {
  $60 = HEAP32[$13>>2]|0;
  $61 = HEAP32[$12>>2]|0;
  $62 = ($60|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = HEAP32[$13>>2]|0;
  $64 = (($18) + ($63<<5)|0);
  HEAP32[$19>>2] = $64;
  $65 = HEAP32[$6>>2]|0;
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 3)|0;
  $69 = (_stbi__malloc($68)|0);
  $70 = HEAP32[$13>>2]|0;
  $71 = HEAP32[$6>>2]|0;
  $72 = ((($71)) + 17820|0);
  $73 = (($72) + (($70*72)|0)|0);
  $74 = ((($73)) + 56|0);
  HEAP32[$74>>2] = $69;
  $75 = HEAP32[$13>>2]|0;
  $76 = HEAP32[$6>>2]|0;
  $77 = ((($76)) + 17820|0);
  $78 = (($77) + (($75*72)|0)|0);
  $79 = ((($78)) + 56|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)!=(0|0);
  $82 = HEAP32[$6>>2]|0;
  if (!($81)) {
   label = 14;
   break;
  }
  $88 = ((($82)) + 17796|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = HEAP32[$13>>2]|0;
  $91 = HEAP32[$6>>2]|0;
  $92 = ((($91)) + 17820|0);
  $93 = (($92) + (($90*72)|0)|0);
  $94 = ((($93)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($89|0) / ($95|0))&-1;
  $97 = HEAP32[$19>>2]|0;
  $98 = ((($97)) + 12|0);
  HEAP32[$98>>2] = $96;
  $99 = HEAP32[$6>>2]|0;
  $100 = ((($99)) + 17800|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = HEAP32[$13>>2]|0;
  $103 = HEAP32[$6>>2]|0;
  $104 = ((($103)) + 17820|0);
  $105 = (($104) + (($102*72)|0)|0);
  $106 = ((($105)) + 8|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($101|0) / ($107|0))&-1;
  $109 = HEAP32[$19>>2]|0;
  $110 = ((($109)) + 16|0);
  HEAP32[$110>>2] = $108;
  $111 = HEAP32[$19>>2]|0;
  $112 = ((($111)) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $113 >> 1;
  $115 = HEAP32[$19>>2]|0;
  $116 = ((($115)) + 24|0);
  HEAP32[$116>>2] = $114;
  $117 = HEAP32[$6>>2]|0;
  $118 = HEAP32[$117>>2]|0;
  $119 = HEAP32[$118>>2]|0;
  $120 = HEAP32[$19>>2]|0;
  $121 = ((($120)) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($119) + ($122))|0;
  $124 = (($123) - 1)|0;
  $125 = HEAP32[$19>>2]|0;
  $126 = ((($125)) + 12|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($124>>>0) / ($127>>>0))&-1;
  $129 = HEAP32[$19>>2]|0;
  $130 = ((($129)) + 20|0);
  HEAP32[$130>>2] = $128;
  $131 = HEAP32[$19>>2]|0;
  $132 = ((($131)) + 28|0);
  HEAP32[$132>>2] = 0;
  $133 = HEAP32[$13>>2]|0;
  $134 = HEAP32[$6>>2]|0;
  $135 = ((($134)) + 17820|0);
  $136 = (($135) + (($133*72)|0)|0);
  $137 = ((($136)) + 44|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = HEAP32[$19>>2]|0;
  $140 = ((($139)) + 8|0);
  HEAP32[$140>>2] = $138;
  $141 = HEAP32[$19>>2]|0;
  $142 = ((($141)) + 4|0);
  HEAP32[$142>>2] = $138;
  $143 = HEAP32[$19>>2]|0;
  $144 = ((($143)) + 12|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = ($145|0)==(1);
  if ($146) {
   $147 = HEAP32[$19>>2]|0;
   $148 = ((($147)) + 16|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ($149|0)==(1);
   if ($150) {
    $151 = HEAP32[$19>>2]|0;
    HEAP32[$151>>2] = 22;
   } else {
    label = 18;
   }
  } else {
   label = 18;
  }
  do {
   if ((label|0) == 18) {
    label = 0;
    $152 = HEAP32[$19>>2]|0;
    $153 = ((($152)) + 12|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(1);
    if ($155) {
     $156 = HEAP32[$19>>2]|0;
     $157 = ((($156)) + 16|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==(2);
     if ($159) {
      $160 = HEAP32[$19>>2]|0;
      HEAP32[$160>>2] = 23;
      break;
     }
    }
    $161 = HEAP32[$19>>2]|0;
    $162 = ((($161)) + 12|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==(2);
    if ($164) {
     $165 = HEAP32[$19>>2]|0;
     $166 = ((($165)) + 16|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = ($167|0)==(1);
     if ($168) {
      $169 = HEAP32[$19>>2]|0;
      HEAP32[$169>>2] = 24;
      break;
     }
    }
    $170 = HEAP32[$19>>2]|0;
    $171 = ((($170)) + 12|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = ($172|0)==(2);
    if ($173) {
     $174 = HEAP32[$19>>2]|0;
     $175 = ((($174)) + 16|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ($176|0)==(2);
     if ($177) {
      $178 = HEAP32[$6>>2]|0;
      $179 = ((($178)) + 18188|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = HEAP32[$19>>2]|0;
      HEAP32[$181>>2] = $180;
      break;
     }
    }
    $182 = HEAP32[$19>>2]|0;
    HEAP32[$182>>2] = 25;
   }
  } while(0);
  $183 = HEAP32[$13>>2]|0;
  $184 = (($183) + 1)|0;
  HEAP32[$13>>2] = $184;
 }
 if ((label|0) == 14) {
  _stbi__cleanup_jpeg($82);
  $83 = (_stbi__err(20616)|0);
  $84 = ($83|0)!=(0);
  $85 = $84 ? 0 : 0;
  $86 = $85;
  $87 = $86;
  HEAP32[$5>>2] = $87;
  $433 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($433|0);
 }
 $185 = HEAP32[$11>>2]|0;
 $186 = HEAP32[$6>>2]|0;
 $187 = HEAP32[$186>>2]|0;
 $188 = HEAP32[$187>>2]|0;
 $189 = Math_imul($185, $188)|0;
 $190 = HEAP32[$6>>2]|0;
 $191 = HEAP32[$190>>2]|0;
 $192 = ((($191)) + 4|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = Math_imul($189, $193)|0;
 $195 = (($194) + 1)|0;
 $196 = (_stbi__malloc($195)|0);
 HEAP32[$16>>2] = $196;
 $197 = HEAP32[$16>>2]|0;
 $198 = ($197|0)!=(0|0);
 if (!($198)) {
  $199 = HEAP32[$6>>2]|0;
  _stbi__cleanup_jpeg($199);
  $200 = (_stbi__err(20616)|0);
  $201 = ($200|0)!=(0);
  $202 = $201 ? 0 : 0;
  $203 = $202;
  $204 = $203;
  HEAP32[$5>>2] = $204;
  $433 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($433|0);
 }
 HEAP32[$15>>2] = 0;
 while(1) {
  $205 = HEAP32[$15>>2]|0;
  $206 = HEAP32[$6>>2]|0;
  $207 = HEAP32[$206>>2]|0;
  $208 = ((($207)) + 4|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($205>>>0)<($209>>>0);
  if (!($210)) {
   break;
  }
  $211 = HEAP32[$16>>2]|0;
  $212 = HEAP32[$11>>2]|0;
  $213 = HEAP32[$6>>2]|0;
  $214 = HEAP32[$213>>2]|0;
  $215 = HEAP32[$214>>2]|0;
  $216 = Math_imul($212, $215)|0;
  $217 = HEAP32[$15>>2]|0;
  $218 = Math_imul($216, $217)|0;
  $219 = (($211) + ($218)|0);
  HEAP32[$20>>2] = $219;
  HEAP32[$13>>2] = 0;
  while(1) {
   $220 = HEAP32[$13>>2]|0;
   $221 = HEAP32[$12>>2]|0;
   $222 = ($220|0)<($221|0);
   if (!($222)) {
    break;
   }
   $223 = HEAP32[$13>>2]|0;
   $224 = (($18) + ($223<<5)|0);
   HEAP32[$21>>2] = $224;
   $225 = HEAP32[$21>>2]|0;
   $226 = ((($225)) + 24|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = HEAP32[$21>>2]|0;
   $229 = ((($228)) + 16|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $230 >> 1;
   $232 = ($227|0)>=($231|0);
   $233 = $232&1;
   HEAP32[$22>>2] = $233;
   $234 = HEAP32[$21>>2]|0;
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[$13>>2]|0;
   $237 = HEAP32[$6>>2]|0;
   $238 = ((($237)) + 17820|0);
   $239 = (($238) + (($236*72)|0)|0);
   $240 = ((($239)) + 56|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[$22>>2]|0;
   $243 = ($242|0)!=(0);
   $244 = HEAP32[$21>>2]|0;
   if ($243) {
    $245 = ((($244)) + 8|0);
    $246 = HEAP32[$245>>2]|0;
    $262 = $246;
   } else {
    $247 = ((($244)) + 4|0);
    $248 = HEAP32[$247>>2]|0;
    $262 = $248;
   }
   $249 = HEAP32[$22>>2]|0;
   $250 = ($249|0)!=(0);
   $251 = HEAP32[$21>>2]|0;
   if ($250) {
    $252 = ((($251)) + 4|0);
    $253 = HEAP32[$252>>2]|0;
    $263 = $253;
   } else {
    $254 = ((($251)) + 8|0);
    $255 = HEAP32[$254>>2]|0;
    $263 = $255;
   }
   $256 = HEAP32[$21>>2]|0;
   $257 = ((($256)) + 20|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = HEAP32[$21>>2]|0;
   $260 = ((($259)) + 12|0);
   $261 = HEAP32[$260>>2]|0;
   $264 = (FUNCTION_TABLE_iiiiii[$235 & 31]($241,$262,$263,$258,$261)|0);
   $265 = HEAP32[$13>>2]|0;
   $266 = (($17) + ($265<<2)|0);
   HEAP32[$266>>2] = $264;
   $267 = HEAP32[$21>>2]|0;
   $268 = ((($267)) + 24|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = (($269) + 1)|0;
   HEAP32[$268>>2] = $270;
   $271 = HEAP32[$21>>2]|0;
   $272 = ((($271)) + 16|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = ($270|0)>=($273|0);
   if ($274) {
    $275 = HEAP32[$21>>2]|0;
    $276 = ((($275)) + 24|0);
    HEAP32[$276>>2] = 0;
    $277 = HEAP32[$21>>2]|0;
    $278 = ((($277)) + 8|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = HEAP32[$21>>2]|0;
    $281 = ((($280)) + 4|0);
    HEAP32[$281>>2] = $279;
    $282 = HEAP32[$21>>2]|0;
    $283 = ((($282)) + 28|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = (($284) + 1)|0;
    HEAP32[$283>>2] = $285;
    $286 = HEAP32[$13>>2]|0;
    $287 = HEAP32[$6>>2]|0;
    $288 = ((($287)) + 17820|0);
    $289 = (($288) + (($286*72)|0)|0);
    $290 = ((($289)) + 32|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = ($285|0)<($291|0);
    if ($292) {
     $293 = HEAP32[$13>>2]|0;
     $294 = HEAP32[$6>>2]|0;
     $295 = ((($294)) + 17820|0);
     $296 = (($295) + (($293*72)|0)|0);
     $297 = ((($296)) + 36|0);
     $298 = HEAP32[$297>>2]|0;
     $299 = HEAP32[$21>>2]|0;
     $300 = ((($299)) + 8|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = (($301) + ($298)|0);
     HEAP32[$300>>2] = $302;
    }
   }
   $303 = HEAP32[$13>>2]|0;
   $304 = (($303) + 1)|0;
   HEAP32[$13>>2] = $304;
  }
  $305 = HEAP32[$11>>2]|0;
  $306 = ($305|0)>=(3);
  $307 = HEAP32[$17>>2]|0;
  L66: do {
   if ($306) {
    HEAP32[$23>>2] = $307;
    $308 = HEAP32[$6>>2]|0;
    $309 = HEAP32[$308>>2]|0;
    $310 = ((($309)) + 8|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = ($311|0)==(3);
    if (!($312)) {
     HEAP32[$14>>2] = 0;
     while(1) {
      $361 = HEAP32[$14>>2]|0;
      $362 = HEAP32[$6>>2]|0;
      $363 = HEAP32[$362>>2]|0;
      $364 = HEAP32[$363>>2]|0;
      $365 = ($361>>>0)<($364>>>0);
      if (!($365)) {
       break L66;
      }
      $366 = HEAP32[$14>>2]|0;
      $367 = HEAP32[$23>>2]|0;
      $368 = (($367) + ($366)|0);
      $369 = HEAP8[$368>>0]|0;
      $370 = HEAP32[$20>>2]|0;
      $371 = ((($370)) + 2|0);
      HEAP8[$371>>0] = $369;
      $372 = HEAP32[$20>>2]|0;
      $373 = ((($372)) + 1|0);
      HEAP8[$373>>0] = $369;
      $374 = HEAP32[$20>>2]|0;
      HEAP8[$374>>0] = $369;
      $375 = HEAP32[$20>>2]|0;
      $376 = ((($375)) + 3|0);
      HEAP8[$376>>0] = -1;
      $377 = HEAP32[$11>>2]|0;
      $378 = HEAP32[$20>>2]|0;
      $379 = (($378) + ($377)|0);
      HEAP32[$20>>2] = $379;
      $380 = HEAP32[$14>>2]|0;
      $381 = (($380) + 1)|0;
      HEAP32[$14>>2] = $381;
     }
    }
    $313 = HEAP32[$6>>2]|0;
    $314 = ((($313)) + 18148|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = ($315|0)==(3);
    if (!($316)) {
     $348 = HEAP32[$6>>2]|0;
     $349 = ((($348)) + 18184|0);
     $350 = HEAP32[$349>>2]|0;
     $351 = HEAP32[$20>>2]|0;
     $352 = HEAP32[$23>>2]|0;
     $353 = ((($17)) + 4|0);
     $354 = HEAP32[$353>>2]|0;
     $355 = ((($17)) + 8|0);
     $356 = HEAP32[$355>>2]|0;
     $357 = HEAP32[$6>>2]|0;
     $358 = HEAP32[$357>>2]|0;
     $359 = HEAP32[$358>>2]|0;
     $360 = HEAP32[$11>>2]|0;
     FUNCTION_TABLE_viiiiii[$350 & 15]($351,$352,$354,$356,$359,$360);
     break;
    }
    HEAP32[$14>>2] = 0;
    while(1) {
     $317 = HEAP32[$14>>2]|0;
     $318 = HEAP32[$6>>2]|0;
     $319 = HEAP32[$318>>2]|0;
     $320 = HEAP32[$319>>2]|0;
     $321 = ($317>>>0)<($320>>>0);
     if (!($321)) {
      break L66;
     }
     $322 = HEAP32[$14>>2]|0;
     $323 = HEAP32[$23>>2]|0;
     $324 = (($323) + ($322)|0);
     $325 = HEAP8[$324>>0]|0;
     $326 = HEAP32[$20>>2]|0;
     HEAP8[$326>>0] = $325;
     $327 = HEAP32[$14>>2]|0;
     $328 = ((($17)) + 4|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = (($329) + ($327)|0);
     $331 = HEAP8[$330>>0]|0;
     $332 = HEAP32[$20>>2]|0;
     $333 = ((($332)) + 1|0);
     HEAP8[$333>>0] = $331;
     $334 = HEAP32[$14>>2]|0;
     $335 = ((($17)) + 8|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = (($336) + ($334)|0);
     $338 = HEAP8[$337>>0]|0;
     $339 = HEAP32[$20>>2]|0;
     $340 = ((($339)) + 2|0);
     HEAP8[$340>>0] = $338;
     $341 = HEAP32[$20>>2]|0;
     $342 = ((($341)) + 3|0);
     HEAP8[$342>>0] = -1;
     $343 = HEAP32[$11>>2]|0;
     $344 = HEAP32[$20>>2]|0;
     $345 = (($344) + ($343)|0);
     HEAP32[$20>>2] = $345;
     $346 = HEAP32[$14>>2]|0;
     $347 = (($346) + 1)|0;
     HEAP32[$14>>2] = $347;
    }
   } else {
    HEAP32[$24>>2] = $307;
    $382 = HEAP32[$11>>2]|0;
    $383 = ($382|0)==(1);
    HEAP32[$14>>2] = 0;
    if ($383) {
     while(1) {
      $384 = HEAP32[$14>>2]|0;
      $385 = HEAP32[$6>>2]|0;
      $386 = HEAP32[$385>>2]|0;
      $387 = HEAP32[$386>>2]|0;
      $388 = ($384>>>0)<($387>>>0);
      if (!($388)) {
       break L66;
      }
      $389 = HEAP32[$14>>2]|0;
      $390 = HEAP32[$24>>2]|0;
      $391 = (($390) + ($389)|0);
      $392 = HEAP8[$391>>0]|0;
      $393 = HEAP32[$14>>2]|0;
      $394 = HEAP32[$20>>2]|0;
      $395 = (($394) + ($393)|0);
      HEAP8[$395>>0] = $392;
      $396 = HEAP32[$14>>2]|0;
      $397 = (($396) + 1)|0;
      HEAP32[$14>>2] = $397;
     }
    } else {
     while(1) {
      $398 = HEAP32[$14>>2]|0;
      $399 = HEAP32[$6>>2]|0;
      $400 = HEAP32[$399>>2]|0;
      $401 = HEAP32[$400>>2]|0;
      $402 = ($398>>>0)<($401>>>0);
      if (!($402)) {
       break L66;
      }
      $403 = HEAP32[$14>>2]|0;
      $404 = HEAP32[$24>>2]|0;
      $405 = (($404) + ($403)|0);
      $406 = HEAP8[$405>>0]|0;
      $407 = HEAP32[$20>>2]|0;
      $408 = ((($407)) + 1|0);
      HEAP32[$20>>2] = $408;
      HEAP8[$407>>0] = $406;
      $409 = HEAP32[$20>>2]|0;
      $410 = ((($409)) + 1|0);
      HEAP32[$20>>2] = $410;
      HEAP8[$409>>0] = -1;
      $411 = HEAP32[$14>>2]|0;
      $412 = (($411) + 1)|0;
      HEAP32[$14>>2] = $412;
     }
    }
   }
  } while(0);
  $413 = HEAP32[$15>>2]|0;
  $414 = (($413) + 1)|0;
  HEAP32[$15>>2] = $414;
 }
 $415 = HEAP32[$6>>2]|0;
 _stbi__cleanup_jpeg($415);
 $416 = HEAP32[$6>>2]|0;
 $417 = HEAP32[$416>>2]|0;
 $418 = HEAP32[$417>>2]|0;
 $419 = HEAP32[$7>>2]|0;
 HEAP32[$419>>2] = $418;
 $420 = HEAP32[$6>>2]|0;
 $421 = HEAP32[$420>>2]|0;
 $422 = ((($421)) + 4|0);
 $423 = HEAP32[$422>>2]|0;
 $424 = HEAP32[$8>>2]|0;
 HEAP32[$424>>2] = $423;
 $425 = HEAP32[$9>>2]|0;
 $426 = ($425|0)!=(0|0);
 if ($426) {
  $427 = HEAP32[$6>>2]|0;
  $428 = HEAP32[$427>>2]|0;
  $429 = ((($428)) + 8|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = HEAP32[$9>>2]|0;
  HEAP32[$431>>2] = $430;
 }
 $432 = HEAP32[$16>>2]|0;
 HEAP32[$5>>2] = $432;
 $433 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($433|0);
}
function _stbi__decode_jpeg_image($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = 0;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = ($5|0)<(4);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$3>>2]|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = ((($8)) + 17820|0);
  $10 = (($9) + (($7*72)|0)|0);
  $11 = ((($10)) + 48|0);
  HEAP32[$11>>2] = 0;
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ((($13)) + 17820|0);
  $15 = (($14) + (($12*72)|0)|0);
  $16 = ((($15)) + 52|0);
  HEAP32[$16>>2] = 0;
  $17 = HEAP32[$3>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$3>>2] = $18;
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = ((($19)) + 18172|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$2>>2]|0;
 $22 = (_stbi__decode_jpeg_header($21,0)|0);
 $23 = ($22|0)!=(0);
 if (!($23)) {
  HEAP32[$1>>2] = 0;
  $73 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($73|0);
 }
 $24 = HEAP32[$2>>2]|0;
 $25 = (_stbi__get_marker($24)|0);
 $26 = $25&255;
 HEAP32[$3>>2] = $26;
 L9: while(1) {
  $27 = HEAP32[$3>>2]|0;
  $28 = ($27|0)==(217);
  $29 = $28 ^ 1;
  if (!($29)) {
   label = 22;
   break;
  }
  $30 = HEAP32[$3>>2]|0;
  $31 = ($30|0)==(218);
  $32 = HEAP32[$2>>2]|0;
  L12: do {
   if ($31) {
    $33 = (_stbi__process_scan_header($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 10;
     break L9;
    }
    $35 = HEAP32[$2>>2]|0;
    $36 = (_stbi__parse_entropy_coded_data($35)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     label = 12;
     break L9;
    }
    $38 = HEAP32[$2>>2]|0;
    $39 = ((($38)) + 18116|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = ($41|0)==(255);
    if ($42) {
     while(1) {
      $43 = HEAP32[$2>>2]|0;
      $44 = HEAP32[$43>>2]|0;
      $45 = (_stbi__at_eof($44)|0);
      $46 = ($45|0)!=(0);
      $47 = $46 ^ 1;
      if (!($47)) {
       break L12;
      }
      $48 = HEAP32[$2>>2]|0;
      $49 = HEAP32[$48>>2]|0;
      $50 = (_stbi__get8($49)|0);
      $51 = $50&255;
      HEAP32[$4>>2] = $51;
      $52 = HEAP32[$4>>2]|0;
      $53 = ($52|0)==(255);
      if ($53) {
       break;
      }
      $59 = HEAP32[$4>>2]|0;
      $60 = ($59|0)!=(0);
      if ($60) {
       label = 18;
       break L9;
      }
     }
     $54 = HEAP32[$2>>2]|0;
     $55 = HEAP32[$54>>2]|0;
     $56 = (_stbi__get8($55)|0);
     $57 = HEAP32[$2>>2]|0;
     $58 = ((($57)) + 18116|0);
     HEAP8[$58>>0] = $56;
    }
   } else {
    $62 = HEAP32[$3>>2]|0;
    $63 = (_stbi__process_marker($32,$62)|0);
    $64 = ($63|0)!=(0);
    if (!($64)) {
     label = 20;
     break L9;
    }
   }
  } while(0);
  $65 = HEAP32[$2>>2]|0;
  $66 = (_stbi__get_marker($65)|0);
  $67 = $66&255;
  HEAP32[$3>>2] = $67;
 }
 if ((label|0) == 10) {
  HEAP32[$1>>2] = 0;
  $73 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($73|0);
 }
 else if ((label|0) == 12) {
  HEAP32[$1>>2] = 0;
  $73 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($73|0);
 }
 else if ((label|0) == 18) {
  $61 = (_stbi__err(21727)|0);
  HEAP32[$1>>2] = $61;
  $73 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($73|0);
 }
 else if ((label|0) == 20) {
  HEAP32[$1>>2] = 0;
  $73 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($73|0);
 }
 else if ((label|0) == 22) {
  $68 = HEAP32[$2>>2]|0;
  $69 = ((($68)) + 18124|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)!=(0);
  if ($71) {
   $72 = HEAP32[$2>>2]|0;
   _stbi__jpeg_finish($72);
  }
  HEAP32[$1>>2] = 1;
  $73 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function _stbi__cleanup_jpeg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($3|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = HEAP32[$2>>2]|0;
  $10 = HEAP32[$1>>2]|0;
  $11 = ((($10)) + 17820|0);
  $12 = (($11) + (($9*72)|0)|0);
  $13 = ((($12)) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = HEAP32[$2>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 17820|0);
   $19 = (($18) + (($16*72)|0)|0);
   $20 = ((($19)) + 48|0);
   $21 = HEAP32[$20>>2]|0;
   _free($21);
   $22 = HEAP32[$2>>2]|0;
   $23 = HEAP32[$1>>2]|0;
   $24 = ((($23)) + 17820|0);
   $25 = (($24) + (($22*72)|0)|0);
   $26 = ((($25)) + 48|0);
   HEAP32[$26>>2] = 0;
   $27 = HEAP32[$2>>2]|0;
   $28 = HEAP32[$1>>2]|0;
   $29 = ((($28)) + 17820|0);
   $30 = (($29) + (($27*72)|0)|0);
   $31 = ((($30)) + 44|0);
   HEAP32[$31>>2] = 0;
  }
  $32 = HEAP32[$2>>2]|0;
  $33 = HEAP32[$1>>2]|0;
  $34 = ((($33)) + 17820|0);
  $35 = (($34) + (($32*72)|0)|0);
  $36 = ((($35)) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0|0);
  if ($38) {
   $39 = HEAP32[$2>>2]|0;
   $40 = HEAP32[$1>>2]|0;
   $41 = ((($40)) + 17820|0);
   $42 = (($41) + (($39*72)|0)|0);
   $43 = ((($42)) + 52|0);
   $44 = HEAP32[$43>>2]|0;
   _free($44);
   $45 = HEAP32[$2>>2]|0;
   $46 = HEAP32[$1>>2]|0;
   $47 = ((($46)) + 17820|0);
   $48 = (($47) + (($45*72)|0)|0);
   $49 = ((($48)) + 52|0);
   HEAP32[$49>>2] = 0;
   $50 = HEAP32[$2>>2]|0;
   $51 = HEAP32[$1>>2]|0;
   $52 = ((($51)) + 17820|0);
   $53 = (($52) + (($50*72)|0)|0);
   $54 = ((($53)) + 60|0);
   HEAP32[$54>>2] = 0;
  }
  $55 = HEAP32[$2>>2]|0;
  $56 = HEAP32[$1>>2]|0;
  $57 = ((($56)) + 17820|0);
  $58 = (($57) + (($55*72)|0)|0);
  $59 = ((($58)) + 56|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0|0);
  if ($61) {
   $62 = HEAP32[$2>>2]|0;
   $63 = HEAP32[$1>>2]|0;
   $64 = ((($63)) + 17820|0);
   $65 = (($64) + (($62*72)|0)|0);
   $66 = ((($65)) + 56|0);
   $67 = HEAP32[$66>>2]|0;
   _free($67);
   $68 = HEAP32[$2>>2]|0;
   $69 = HEAP32[$1>>2]|0;
   $70 = ((($69)) + 17820|0);
   $71 = (($70) + (($68*72)|0)|0);
   $72 = ((($71)) + 56|0);
   HEAP32[$72>>2] = 0;
  }
  $73 = HEAP32[$2>>2]|0;
  $74 = (($73) + 1)|0;
  HEAP32[$2>>2] = $74;
 }
 STACKTOP = sp;return;
}
function _resample_row_1($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 $10 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function _stbi__resample_row_v_2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 HEAP32[$10>>2] = 0;
 while(1) {
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$8>>2]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[$10>>2]|0;
  $15 = HEAP32[$6>>2]|0;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18*3)|0;
  $20 = HEAP32[$10>>2]|0;
  $21 = HEAP32[$7>>2]|0;
  $22 = (($21) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($19) + ($24))|0;
  $26 = (($25) + 2)|0;
  $27 = $26 >> 2;
  $28 = $27&255;
  $29 = HEAP32[$10>>2]|0;
  $30 = HEAP32[$5>>2]|0;
  $31 = (($30) + ($29)|0);
  HEAP8[$31>>0] = $28;
  $32 = HEAP32[$10>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$10>>2] = $33;
 }
 $34 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _stbi__resample_row_h_2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 20|0;
 $9 = sp + 16|0;
 $10 = sp + 12|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $14 = HEAP32[$7>>2]|0;
 HEAP32[$12>>2] = $14;
 $15 = HEAP32[$9>>2]|0;
 $16 = ($15|0)==(1);
 $17 = HEAP32[$12>>2]|0;
 $18 = HEAP8[$17>>0]|0;
 $19 = HEAP32[$6>>2]|0;
 if ($16) {
  $20 = ((($19)) + 1|0);
  HEAP8[$20>>0] = $18;
  $21 = HEAP32[$6>>2]|0;
  HEAP8[$21>>0] = $18;
  $22 = HEAP32[$6>>2]|0;
  HEAP32[$5>>2] = $22;
  $113 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($113|0);
 }
 HEAP8[$19>>0] = $18;
 $23 = HEAP32[$12>>2]|0;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ($25*3)|0;
 $27 = HEAP32[$12>>2]|0;
 $28 = ((($27)) + 1|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = (($26) + ($30))|0;
 $32 = (($31) + 2)|0;
 $33 = $32 >> 2;
 $34 = $33&255;
 $35 = HEAP32[$6>>2]|0;
 $36 = ((($35)) + 1|0);
 HEAP8[$36>>0] = $34;
 HEAP32[$11>>2] = 1;
 while(1) {
  $37 = HEAP32[$11>>2]|0;
  $38 = HEAP32[$9>>2]|0;
  $39 = (($38) - 1)|0;
  $40 = ($37|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = HEAP32[$11>>2]|0;
  $42 = HEAP32[$12>>2]|0;
  $43 = (($42) + ($41)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($45*3)|0;
  $47 = (($46) + 2)|0;
  HEAP32[$13>>2] = $47;
  $48 = HEAP32[$13>>2]|0;
  $49 = HEAP32[$11>>2]|0;
  $50 = (($49) - 1)|0;
  $51 = HEAP32[$12>>2]|0;
  $52 = (($51) + ($50)|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (($48) + ($54))|0;
  $56 = $55 >> 2;
  $57 = $56&255;
  $58 = HEAP32[$11>>2]|0;
  $59 = $58<<1;
  $60 = (($59) + 0)|0;
  $61 = HEAP32[$6>>2]|0;
  $62 = (($61) + ($60)|0);
  HEAP8[$62>>0] = $57;
  $63 = HEAP32[$13>>2]|0;
  $64 = HEAP32[$11>>2]|0;
  $65 = (($64) + 1)|0;
  $66 = HEAP32[$12>>2]|0;
  $67 = (($66) + ($65)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (($63) + ($69))|0;
  $71 = $70 >> 2;
  $72 = $71&255;
  $73 = HEAP32[$11>>2]|0;
  $74 = $73<<1;
  $75 = (($74) + 1)|0;
  $76 = HEAP32[$6>>2]|0;
  $77 = (($76) + ($75)|0);
  HEAP8[$77>>0] = $72;
  $78 = HEAP32[$11>>2]|0;
  $79 = (($78) + 1)|0;
  HEAP32[$11>>2] = $79;
 }
 $80 = HEAP32[$9>>2]|0;
 $81 = (($80) - 2)|0;
 $82 = HEAP32[$12>>2]|0;
 $83 = (($82) + ($81)|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = ($85*3)|0;
 $87 = HEAP32[$9>>2]|0;
 $88 = (($87) - 1)|0;
 $89 = HEAP32[$12>>2]|0;
 $90 = (($89) + ($88)|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&255;
 $93 = (($86) + ($92))|0;
 $94 = (($93) + 2)|0;
 $95 = $94 >> 2;
 $96 = $95&255;
 $97 = HEAP32[$11>>2]|0;
 $98 = $97<<1;
 $99 = (($98) + 0)|0;
 $100 = HEAP32[$6>>2]|0;
 $101 = (($100) + ($99)|0);
 HEAP8[$101>>0] = $96;
 $102 = HEAP32[$9>>2]|0;
 $103 = (($102) - 1)|0;
 $104 = HEAP32[$12>>2]|0;
 $105 = (($104) + ($103)|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = HEAP32[$11>>2]|0;
 $108 = $107<<1;
 $109 = (($108) + 1)|0;
 $110 = HEAP32[$6>>2]|0;
 $111 = (($110) + ($109)|0);
 HEAP8[$111>>0] = $106;
 $112 = HEAP32[$6>>2]|0;
 HEAP32[$5>>2] = $112;
 $113 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($113|0);
}
function _stbi__resample_row_generic($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 HEAP32[$9>>2] = $4;
 HEAP32[$10>>2] = 0;
 while(1) {
  $12 = HEAP32[$10>>2]|0;
  $13 = HEAP32[$8>>2]|0;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  HEAP32[$11>>2] = 0;
  while(1) {
   $15 = HEAP32[$11>>2]|0;
   $16 = HEAP32[$9>>2]|0;
   $17 = ($15|0)<($16|0);
   $18 = HEAP32[$10>>2]|0;
   if (!($17)) {
    break;
   }
   $19 = HEAP32[$6>>2]|0;
   $20 = (($19) + ($18)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = HEAP32[$10>>2]|0;
   $23 = HEAP32[$9>>2]|0;
   $24 = Math_imul($22, $23)|0;
   $25 = HEAP32[$11>>2]|0;
   $26 = (($24) + ($25))|0;
   $27 = HEAP32[$5>>2]|0;
   $28 = (($27) + ($26)|0);
   HEAP8[$28>>0] = $21;
   $29 = HEAP32[$11>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[$11>>2] = $30;
  }
  $31 = (($18) + 1)|0;
  HEAP32[$10>>2] = $31;
 }
 $32 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _stbi__decode_jpeg_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $6 = HEAP32[$3>>2]|0;
 $7 = ((($6)) + 18116|0);
 HEAP8[$7>>0] = -1;
 $8 = HEAP32[$3>>2]|0;
 $9 = (_stbi__get_marker($8)|0);
 $10 = $9&255;
 HEAP32[$5>>2] = $10;
 $11 = HEAP32[$5>>2]|0;
 $12 = ($11|0)==(216);
 if (!($12)) {
  $13 = (_stbi__err(22112)|0);
  HEAP32[$2>>2] = $13;
  $53 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($53|0);
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = ($14|0)==(1);
 if ($15) {
  HEAP32[$2>>2] = 1;
  $53 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($53|0);
 }
 $16 = HEAP32[$3>>2]|0;
 $17 = (_stbi__get_marker($16)|0);
 $18 = $17&255;
 HEAP32[$5>>2] = $18;
 L9: while(1) {
  $19 = HEAP32[$5>>2]|0;
  $20 = ($19|0)==(192);
  $21 = HEAP32[$5>>2]|0;
  $22 = ($21|0)==(193);
  $or$cond = $20 | $22;
  if ($or$cond) {
   $26 = 1;
  } else {
   $23 = HEAP32[$5>>2]|0;
   $24 = ($23|0)==(194);
   $26 = $24;
  }
  $25 = $26 ^ 1;
  if (!($25)) {
   label = 16;
   break;
  }
  $27 = HEAP32[$3>>2]|0;
  $28 = HEAP32[$5>>2]|0;
  $29 = (_stbi__process_marker($27,$28)|0);
  $30 = ($29|0)!=(0);
  if (!($30)) {
   label = 10;
   break;
  }
  $31 = HEAP32[$3>>2]|0;
  $32 = (_stbi__get_marker($31)|0);
  $33 = $32&255;
  HEAP32[$5>>2] = $33;
  while(1) {
   $34 = HEAP32[$5>>2]|0;
   $35 = ($34|0)==(255);
   if (!($35)) {
    continue L9;
   }
   $36 = HEAP32[$3>>2]|0;
   $37 = HEAP32[$36>>2]|0;
   $38 = (_stbi__at_eof($37)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    label = 14;
    break L9;
   }
   $41 = HEAP32[$3>>2]|0;
   $42 = (_stbi__get_marker($41)|0);
   $43 = $42&255;
   HEAP32[$5>>2] = $43;
  }
 }
 if ((label|0) == 10) {
  HEAP32[$2>>2] = 0;
  $53 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($53|0);
 }
 else if ((label|0) == 14) {
  $40 = (_stbi__err(22119)|0);
  HEAP32[$2>>2] = $40;
  $53 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($53|0);
 }
 else if ((label|0) == 16) {
  $44 = HEAP32[$5>>2]|0;
  $45 = ($44|0)==(194);
  $46 = $45&1;
  $47 = HEAP32[$3>>2]|0;
  $48 = ((($47)) + 18124|0);
  HEAP32[$48>>2] = $46;
  $49 = HEAP32[$3>>2]|0;
  $50 = HEAP32[$4>>2]|0;
  $51 = (_stbi__process_frame_header($49,$50)|0);
  $52 = ($51|0)!=(0);
  if ($52) {
   HEAP32[$2>>2] = 1;
   $53 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($53|0);
  } else {
   HEAP32[$2>>2] = 0;
   $53 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($53|0);
  }
 }
 return (0)|0;
}
function _stbi__get_marker($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 5|0;
 $2 = sp;
 $3 = sp + 4|0;
 HEAP32[$2>>2] = $0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 18116|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)!=(255);
 $9 = HEAP32[$2>>2]|0;
 if ($8) {
  $10 = ((($9)) + 18116|0);
  $11 = HEAP8[$10>>0]|0;
  HEAP8[$3>>0] = $11;
  $12 = HEAP32[$2>>2]|0;
  $13 = ((($12)) + 18116|0);
  HEAP8[$13>>0] = -1;
  $14 = HEAP8[$3>>0]|0;
  HEAP8[$1>>0] = $14;
  $27 = HEAP8[$1>>0]|0;
  STACKTOP = sp;return ($27|0);
 }
 $15 = HEAP32[$9>>2]|0;
 $16 = (_stbi__get8($15)|0);
 HEAP8[$3>>0] = $16;
 $17 = HEAP8[$3>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)!=(255);
 if ($19) {
  HEAP8[$1>>0] = -1;
  $27 = HEAP8[$1>>0]|0;
  STACKTOP = sp;return ($27|0);
 }
 while(1) {
  $20 = HEAP8[$3>>0]|0;
  $21 = $20&255;
  $22 = ($21|0)==(255);
  if (!($22)) {
   break;
  }
  $23 = HEAP32[$2>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_stbi__get8($24)|0);
  HEAP8[$3>>0] = $25;
 }
 $26 = HEAP8[$3>>0]|0;
 HEAP8[$1>>0] = $26;
 $27 = HEAP8[$1>>0]|0;
 STACKTOP = sp;return ($27|0);
}
function _stbi__process_scan_header($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$2>>2] = $0;
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_stbi__get16be($10)|0);
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_stbi__get8($13)|0);
 $15 = $14&255;
 $16 = HEAP32[$2>>2]|0;
 $17 = ((($16)) + 18152|0);
 HEAP32[$17>>2] = $15;
 $18 = HEAP32[$2>>2]|0;
 $19 = ((($18)) + 18152|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)<(1);
 if (!($21)) {
  $22 = HEAP32[$2>>2]|0;
  $23 = ((($22)) + 18152|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>(4);
  if (!($25)) {
   $26 = HEAP32[$2>>2]|0;
   $27 = ((($26)) + 18152|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$2>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($28|0)>($32|0);
   if (!($33)) {
    $35 = HEAP32[$4>>2]|0;
    $36 = HEAP32[$2>>2]|0;
    $37 = ((($36)) + 18152|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38<<1;
    $40 = (6 + ($39))|0;
    $41 = ($35|0)!=($40|0);
    if ($41) {
     $42 = (_stbi__err(22068)|0);
     HEAP32[$1>>2] = $42;
     $175 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($175|0);
    }
    HEAP32[$3>>2] = 0;
    while(1) {
     $43 = HEAP32[$3>>2]|0;
     $44 = HEAP32[$2>>2]|0;
     $45 = ((($44)) + 18152|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($43|0)<($46|0);
     $48 = HEAP32[$2>>2]|0;
     $49 = HEAP32[$48>>2]|0;
     $50 = (_stbi__get8($49)|0);
     $51 = $50&255;
     if (!($47)) {
      label = 20;
      break;
     }
     HEAP32[$5>>2] = $51;
     $52 = HEAP32[$2>>2]|0;
     $53 = HEAP32[$52>>2]|0;
     $54 = (_stbi__get8($53)|0);
     $55 = $54&255;
     HEAP32[$7>>2] = $55;
     HEAP32[$6>>2] = 0;
     while(1) {
      $56 = HEAP32[$6>>2]|0;
      $57 = HEAP32[$2>>2]|0;
      $58 = HEAP32[$57>>2]|0;
      $59 = ((($58)) + 8|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($56|0)<($60|0);
      if (!($61)) {
       break;
      }
      $62 = HEAP32[$6>>2]|0;
      $63 = HEAP32[$2>>2]|0;
      $64 = ((($63)) + 17820|0);
      $65 = (($64) + (($62*72)|0)|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = HEAP32[$5>>2]|0;
      $68 = ($66|0)==($67|0);
      if ($68) {
       break;
      }
      $69 = HEAP32[$6>>2]|0;
      $70 = (($69) + 1)|0;
      HEAP32[$6>>2] = $70;
     }
     $71 = HEAP32[$6>>2]|0;
     $72 = HEAP32[$2>>2]|0;
     $73 = HEAP32[$72>>2]|0;
     $74 = ((($73)) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($71|0)==($75|0);
     if ($76) {
      label = 14;
      break;
     }
     $77 = HEAP32[$7>>2]|0;
     $78 = $77 >> 4;
     $79 = HEAP32[$6>>2]|0;
     $80 = HEAP32[$2>>2]|0;
     $81 = ((($80)) + 17820|0);
     $82 = (($81) + (($79*72)|0)|0);
     $83 = ((($82)) + 16|0);
     HEAP32[$83>>2] = $78;
     $84 = HEAP32[$6>>2]|0;
     $85 = HEAP32[$2>>2]|0;
     $86 = ((($85)) + 17820|0);
     $87 = (($86) + (($84*72)|0)|0);
     $88 = ((($87)) + 16|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($89|0)>(3);
     if ($90) {
      label = 16;
      break;
     }
     $92 = HEAP32[$7>>2]|0;
     $93 = $92 & 15;
     $94 = HEAP32[$6>>2]|0;
     $95 = HEAP32[$2>>2]|0;
     $96 = ((($95)) + 17820|0);
     $97 = (($96) + (($94*72)|0)|0);
     $98 = ((($97)) + 20|0);
     HEAP32[$98>>2] = $93;
     $99 = HEAP32[$6>>2]|0;
     $100 = HEAP32[$2>>2]|0;
     $101 = ((($100)) + 17820|0);
     $102 = (($101) + (($99*72)|0)|0);
     $103 = ((($102)) + 20|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)>(3);
     if ($105) {
      label = 18;
      break;
     }
     $107 = HEAP32[$6>>2]|0;
     $108 = HEAP32[$3>>2]|0;
     $109 = HEAP32[$2>>2]|0;
     $110 = ((($109)) + 18156|0);
     $111 = (($110) + ($108<<2)|0);
     HEAP32[$111>>2] = $107;
     $112 = HEAP32[$3>>2]|0;
     $113 = (($112) + 1)|0;
     HEAP32[$3>>2] = $113;
    }
    if ((label|0) == 14) {
     HEAP32[$1>>2] = 0;
     $175 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($175|0);
    }
    else if ((label|0) == 16) {
     $91 = (_stbi__err(22080)|0);
     HEAP32[$1>>2] = $91;
     $175 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($175|0);
    }
    else if ((label|0) == 18) {
     $106 = (_stbi__err(22092)|0);
     HEAP32[$1>>2] = $106;
     $175 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($175|0);
    }
    else if ((label|0) == 20) {
     $114 = HEAP32[$2>>2]|0;
     $115 = ((($114)) + 18128|0);
     HEAP32[$115>>2] = $51;
     $116 = HEAP32[$2>>2]|0;
     $117 = HEAP32[$116>>2]|0;
     $118 = (_stbi__get8($117)|0);
     $119 = $118&255;
     $120 = HEAP32[$2>>2]|0;
     $121 = ((($120)) + 18132|0);
     HEAP32[$121>>2] = $119;
     $122 = HEAP32[$2>>2]|0;
     $123 = HEAP32[$122>>2]|0;
     $124 = (_stbi__get8($123)|0);
     $125 = $124&255;
     HEAP32[$8>>2] = $125;
     $126 = HEAP32[$8>>2]|0;
     $127 = $126 >> 4;
     $128 = HEAP32[$2>>2]|0;
     $129 = ((($128)) + 18136|0);
     HEAP32[$129>>2] = $127;
     $130 = HEAP32[$8>>2]|0;
     $131 = $130 & 15;
     $132 = HEAP32[$2>>2]|0;
     $133 = ((($132)) + 18140|0);
     HEAP32[$133>>2] = $131;
     $134 = HEAP32[$2>>2]|0;
     $135 = ((($134)) + 18124|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)!=(0);
     $138 = HEAP32[$2>>2]|0;
     $139 = ((($138)) + 18128|0);
     $140 = HEAP32[$139>>2]|0;
     do {
      if ($137) {
       $141 = ($140|0)>(63);
       if (!($141)) {
        $142 = HEAP32[$2>>2]|0;
        $143 = ((($142)) + 18132|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)>(63);
        if (!($145)) {
         $146 = HEAP32[$2>>2]|0;
         $147 = ((($146)) + 18128|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = HEAP32[$2>>2]|0;
         $150 = ((($149)) + 18132|0);
         $151 = HEAP32[$150>>2]|0;
         $152 = ($148|0)>($151|0);
         if (!($152)) {
          $153 = HEAP32[$2>>2]|0;
          $154 = ((($153)) + 18136|0);
          $155 = HEAP32[$154>>2]|0;
          $156 = ($155|0)>(13);
          if (!($156)) {
           $157 = HEAP32[$2>>2]|0;
           $158 = ((($157)) + 18140|0);
           $159 = HEAP32[$158>>2]|0;
           $160 = ($159|0)>(13);
           if (!($160)) {
            break;
           }
          }
         }
        }
       }
       $161 = (_stbi__err(22104)|0);
       HEAP32[$1>>2] = $161;
       $175 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($175|0);
      } else {
       $162 = ($140|0)!=(0);
       if ($162) {
        $163 = (_stbi__err(22104)|0);
        HEAP32[$1>>2] = $163;
        $175 = HEAP32[$1>>2]|0;
        STACKTOP = sp;return ($175|0);
       }
       $164 = HEAP32[$2>>2]|0;
       $165 = ((($164)) + 18136|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)!=(0);
       if (!($167)) {
        $168 = HEAP32[$2>>2]|0;
        $169 = ((($168)) + 18140|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = ($170|0)!=(0);
        if (!($171)) {
         $173 = HEAP32[$2>>2]|0;
         $174 = ((($173)) + 18132|0);
         HEAP32[$174>>2] = 63;
         break;
        }
       }
       $172 = (_stbi__err(22104)|0);
       HEAP32[$1>>2] = $172;
       $175 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($175|0);
      }
     } while(0);
     HEAP32[$1>>2] = 1;
     $175 = HEAP32[$1>>2]|0;
     STACKTOP = sp;return ($175|0);
    }
   }
  }
 }
 $34 = (_stbi__err(22044)|0);
 HEAP32[$1>>2] = $34;
 $175 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($175|0);
}
function _stbi__parse_entropy_coded_data($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $1 = sp + 128|0;
 $2 = sp + 124|0;
 $3 = sp + 120|0;
 $4 = sp + 116|0;
 $5 = sp + 264|0;
 $6 = sp + 112|0;
 $7 = sp + 108|0;
 $8 = sp + 104|0;
 $9 = sp + 100|0;
 $10 = sp + 96|0;
 $11 = sp + 92|0;
 $12 = sp + 88|0;
 $13 = sp + 84|0;
 $14 = sp + 80|0;
 $15 = sp + 136|0;
 $16 = sp + 76|0;
 $17 = sp + 72|0;
 $18 = sp + 68|0;
 $19 = sp + 64|0;
 $20 = sp + 60|0;
 $21 = sp + 56|0;
 $22 = sp + 52|0;
 $23 = sp + 48|0;
 $24 = sp + 44|0;
 $25 = sp + 40|0;
 $26 = sp + 36|0;
 $27 = sp + 32|0;
 $28 = sp + 28|0;
 $29 = sp + 24|0;
 $30 = sp + 20|0;
 $31 = sp + 16|0;
 $32 = sp + 12|0;
 $33 = sp + 8|0;
 $34 = sp + 4|0;
 $35 = sp;
 HEAP32[$2>>2] = $0;
 $36 = HEAP32[$2>>2]|0;
 _stbi__jpeg_reset($36);
 $37 = HEAP32[$2>>2]|0;
 $38 = ((($37)) + 18124|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0);
 $41 = HEAP32[$2>>2]|0;
 $42 = ((($41)) + 18152|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(1);
 if (!($40)) {
  if ($44) {
   $45 = HEAP32[$2>>2]|0;
   $46 = ((($45)) + 18156|0);
   $47 = HEAP32[$46>>2]|0;
   HEAP32[$6>>2] = $47;
   $48 = HEAP32[$6>>2]|0;
   $49 = HEAP32[$2>>2]|0;
   $50 = ((($49)) + 17820|0);
   $51 = (($50) + (($48*72)|0)|0);
   $52 = ((($51)) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 7)|0;
   $55 = $54 >> 3;
   HEAP32[$7>>2] = $55;
   $56 = HEAP32[$6>>2]|0;
   $57 = HEAP32[$2>>2]|0;
   $58 = ((($57)) + 17820|0);
   $59 = (($58) + (($56*72)|0)|0);
   $60 = ((($59)) + 32|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 7)|0;
   $63 = $62 >> 3;
   HEAP32[$8>>2] = $63;
   HEAP32[$4>>2] = 0;
   L5: while(1) {
    $64 = HEAP32[$4>>2]|0;
    $65 = HEAP32[$8>>2]|0;
    $66 = ($64|0)<($65|0);
    if (!($66)) {
     label = 18;
     break;
    }
    HEAP32[$3>>2] = 0;
    while(1) {
     $67 = HEAP32[$3>>2]|0;
     $68 = HEAP32[$7>>2]|0;
     $69 = ($67|0)<($68|0);
     if (!($69)) {
      break;
     }
     $70 = HEAP32[$6>>2]|0;
     $71 = HEAP32[$2>>2]|0;
     $72 = ((($71)) + 17820|0);
     $73 = (($72) + (($70*72)|0)|0);
     $74 = ((($73)) + 20|0);
     $75 = HEAP32[$74>>2]|0;
     HEAP32[$9>>2] = $75;
     $76 = HEAP32[$2>>2]|0;
     $77 = HEAP32[$2>>2]|0;
     $78 = ((($77)) + 4|0);
     $79 = HEAP32[$6>>2]|0;
     $80 = HEAP32[$2>>2]|0;
     $81 = ((($80)) + 17820|0);
     $82 = (($81) + (($79*72)|0)|0);
     $83 = ((($82)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($78) + (($84*1680)|0)|0);
     $86 = HEAP32[$2>>2]|0;
     $87 = ((($86)) + 6724|0);
     $88 = HEAP32[$9>>2]|0;
     $89 = (($87) + (($88*1680)|0)|0);
     $90 = HEAP32[$9>>2]|0;
     $91 = HEAP32[$2>>2]|0;
     $92 = ((($91)) + 13700|0);
     $93 = (($92) + ($90<<10)|0);
     $94 = HEAP32[$6>>2]|0;
     $95 = HEAP32[$6>>2]|0;
     $96 = HEAP32[$2>>2]|0;
     $97 = ((($96)) + 17820|0);
     $98 = (($97) + (($95*72)|0)|0);
     $99 = ((($98)) + 12|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = HEAP32[$2>>2]|0;
     $102 = ((($101)) + 13444|0);
     $103 = (($102) + ($100<<6)|0);
     $104 = (_stbi__jpeg_decode_block($76,$5,$85,$89,$93,$94,$103)|0);
     $105 = ($104|0)!=(0);
     if (!($105)) {
      label = 8;
      break L5;
     }
     $106 = HEAP32[$2>>2]|0;
     $107 = ((($106)) + 18180|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = HEAP32[$6>>2]|0;
     $110 = HEAP32[$2>>2]|0;
     $111 = ((($110)) + 17820|0);
     $112 = (($111) + (($109*72)|0)|0);
     $113 = ((($112)) + 44|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = HEAP32[$6>>2]|0;
     $116 = HEAP32[$2>>2]|0;
     $117 = ((($116)) + 17820|0);
     $118 = (($117) + (($115*72)|0)|0);
     $119 = ((($118)) + 36|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = HEAP32[$4>>2]|0;
     $122 = Math_imul($120, $121)|0;
     $123 = $122<<3;
     $124 = (($114) + ($123)|0);
     $125 = HEAP32[$3>>2]|0;
     $126 = $125<<3;
     $127 = (($124) + ($126)|0);
     $128 = HEAP32[$6>>2]|0;
     $129 = HEAP32[$2>>2]|0;
     $130 = ((($129)) + 17820|0);
     $131 = (($130) + (($128*72)|0)|0);
     $132 = ((($131)) + 36|0);
     $133 = HEAP32[$132>>2]|0;
     FUNCTION_TABLE_viii[$108 & 31]($127,$133,$5);
     $134 = HEAP32[$2>>2]|0;
     $135 = ((($134)) + 18176|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($136) + -1)|0;
     HEAP32[$135>>2] = $137;
     $138 = ($137|0)<=(0);
     if ($138) {
      $139 = HEAP32[$2>>2]|0;
      $140 = ((($139)) + 18112|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)<(24);
      if ($142) {
       $143 = HEAP32[$2>>2]|0;
       _stbi__grow_buffer_unsafe($143);
      }
      $144 = HEAP32[$2>>2]|0;
      $145 = ((($144)) + 18116|0);
      $146 = HEAP8[$145>>0]|0;
      $147 = $146&255;
      $148 = ($147|0)>=(208);
      if (!($148)) {
       label = 14;
       break L5;
      }
      $149 = HEAP32[$2>>2]|0;
      $150 = ((($149)) + 18116|0);
      $151 = HEAP8[$150>>0]|0;
      $152 = $151&255;
      $153 = ($152|0)<=(215);
      if (!($153)) {
       label = 14;
       break L5;
      }
      $154 = HEAP32[$2>>2]|0;
      _stbi__jpeg_reset($154);
     }
     $155 = HEAP32[$3>>2]|0;
     $156 = (($155) + 1)|0;
     HEAP32[$3>>2] = $156;
    }
    $157 = HEAP32[$4>>2]|0;
    $158 = (($157) + 1)|0;
    HEAP32[$4>>2] = $158;
   }
   if ((label|0) == 8) {
    HEAP32[$1>>2] = 0;
    $533 = HEAP32[$1>>2]|0;
    STACKTOP = sp;return ($533|0);
   }
   else if ((label|0) == 14) {
    HEAP32[$1>>2] = 1;
    $533 = HEAP32[$1>>2]|0;
    STACKTOP = sp;return ($533|0);
   }
   else if ((label|0) == 18) {
    HEAP32[$1>>2] = 1;
    $533 = HEAP32[$1>>2]|0;
    STACKTOP = sp;return ($533|0);
   }
  }
  HEAP32[$11>>2] = 0;
  L29: while(1) {
   $159 = HEAP32[$11>>2]|0;
   $160 = HEAP32[$2>>2]|0;
   $161 = ((($160)) + 17808|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($159|0)<($162|0);
   if (!($163)) {
    label = 43;
    break;
   }
   HEAP32[$10>>2] = 0;
   while(1) {
    $164 = HEAP32[$10>>2]|0;
    $165 = HEAP32[$2>>2]|0;
    $166 = ((($165)) + 17804|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($164|0)<($167|0);
    if (!($168)) {
     break;
    }
    HEAP32[$12>>2] = 0;
    while(1) {
     $169 = HEAP32[$12>>2]|0;
     $170 = HEAP32[$2>>2]|0;
     $171 = ((($170)) + 18152|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($169|0)<($172|0);
     if (!($173)) {
      break;
     }
     $174 = HEAP32[$12>>2]|0;
     $175 = HEAP32[$2>>2]|0;
     $176 = ((($175)) + 18156|0);
     $177 = (($176) + ($174<<2)|0);
     $178 = HEAP32[$177>>2]|0;
     HEAP32[$16>>2] = $178;
     HEAP32[$14>>2] = 0;
     while(1) {
      $179 = HEAP32[$14>>2]|0;
      $180 = HEAP32[$16>>2]|0;
      $181 = HEAP32[$2>>2]|0;
      $182 = ((($181)) + 17820|0);
      $183 = (($182) + (($180*72)|0)|0);
      $184 = ((($183)) + 8|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ($179|0)<($185|0);
      if (!($186)) {
       break;
      }
      HEAP32[$13>>2] = 0;
      while(1) {
       $187 = HEAP32[$13>>2]|0;
       $188 = HEAP32[$16>>2]|0;
       $189 = HEAP32[$2>>2]|0;
       $190 = ((($189)) + 17820|0);
       $191 = (($190) + (($188*72)|0)|0);
       $192 = ((($191)) + 4|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = ($187|0)<($193|0);
       if (!($194)) {
        break;
       }
       $195 = HEAP32[$10>>2]|0;
       $196 = HEAP32[$16>>2]|0;
       $197 = HEAP32[$2>>2]|0;
       $198 = ((($197)) + 17820|0);
       $199 = (($198) + (($196*72)|0)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = Math_imul($195, $201)|0;
       $203 = HEAP32[$13>>2]|0;
       $204 = (($202) + ($203))|0;
       $205 = $204<<3;
       HEAP32[$17>>2] = $205;
       $206 = HEAP32[$11>>2]|0;
       $207 = HEAP32[$16>>2]|0;
       $208 = HEAP32[$2>>2]|0;
       $209 = ((($208)) + 17820|0);
       $210 = (($209) + (($207*72)|0)|0);
       $211 = ((($210)) + 8|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = Math_imul($206, $212)|0;
       $214 = HEAP32[$14>>2]|0;
       $215 = (($213) + ($214))|0;
       $216 = $215<<3;
       HEAP32[$18>>2] = $216;
       $217 = HEAP32[$16>>2]|0;
       $218 = HEAP32[$2>>2]|0;
       $219 = ((($218)) + 17820|0);
       $220 = (($219) + (($217*72)|0)|0);
       $221 = ((($220)) + 20|0);
       $222 = HEAP32[$221>>2]|0;
       HEAP32[$19>>2] = $222;
       $223 = HEAP32[$2>>2]|0;
       $224 = HEAP32[$2>>2]|0;
       $225 = ((($224)) + 4|0);
       $226 = HEAP32[$16>>2]|0;
       $227 = HEAP32[$2>>2]|0;
       $228 = ((($227)) + 17820|0);
       $229 = (($228) + (($226*72)|0)|0);
       $230 = ((($229)) + 16|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = (($225) + (($231*1680)|0)|0);
       $233 = HEAP32[$2>>2]|0;
       $234 = ((($233)) + 6724|0);
       $235 = HEAP32[$19>>2]|0;
       $236 = (($234) + (($235*1680)|0)|0);
       $237 = HEAP32[$19>>2]|0;
       $238 = HEAP32[$2>>2]|0;
       $239 = ((($238)) + 13700|0);
       $240 = (($239) + ($237<<10)|0);
       $241 = HEAP32[$16>>2]|0;
       $242 = HEAP32[$16>>2]|0;
       $243 = HEAP32[$2>>2]|0;
       $244 = ((($243)) + 17820|0);
       $245 = (($244) + (($242*72)|0)|0);
       $246 = ((($245)) + 12|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = HEAP32[$2>>2]|0;
       $249 = ((($248)) + 13444|0);
       $250 = (($249) + ($247<<6)|0);
       $251 = (_stbi__jpeg_decode_block($223,$15,$232,$236,$240,$241,$250)|0);
       $252 = ($251|0)!=(0);
       if (!($252)) {
        label = 30;
        break L29;
       }
       $253 = HEAP32[$2>>2]|0;
       $254 = ((($253)) + 18180|0);
       $255 = HEAP32[$254>>2]|0;
       $256 = HEAP32[$16>>2]|0;
       $257 = HEAP32[$2>>2]|0;
       $258 = ((($257)) + 17820|0);
       $259 = (($258) + (($256*72)|0)|0);
       $260 = ((($259)) + 44|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = HEAP32[$16>>2]|0;
       $263 = HEAP32[$2>>2]|0;
       $264 = ((($263)) + 17820|0);
       $265 = (($264) + (($262*72)|0)|0);
       $266 = ((($265)) + 36|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = HEAP32[$18>>2]|0;
       $269 = Math_imul($267, $268)|0;
       $270 = (($261) + ($269)|0);
       $271 = HEAP32[$17>>2]|0;
       $272 = (($270) + ($271)|0);
       $273 = HEAP32[$16>>2]|0;
       $274 = HEAP32[$2>>2]|0;
       $275 = ((($274)) + 17820|0);
       $276 = (($275) + (($273*72)|0)|0);
       $277 = ((($276)) + 36|0);
       $278 = HEAP32[$277>>2]|0;
       FUNCTION_TABLE_viii[$255 & 31]($272,$278,$15);
       $279 = HEAP32[$13>>2]|0;
       $280 = (($279) + 1)|0;
       HEAP32[$13>>2] = $280;
      }
      $281 = HEAP32[$14>>2]|0;
      $282 = (($281) + 1)|0;
      HEAP32[$14>>2] = $282;
     }
     $283 = HEAP32[$12>>2]|0;
     $284 = (($283) + 1)|0;
     HEAP32[$12>>2] = $284;
    }
    $285 = HEAP32[$2>>2]|0;
    $286 = ((($285)) + 18176|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = (($287) + -1)|0;
    HEAP32[$286>>2] = $288;
    $289 = ($288|0)<=(0);
    if ($289) {
     $290 = HEAP32[$2>>2]|0;
     $291 = ((($290)) + 18112|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = ($292|0)<(24);
     if ($293) {
      $294 = HEAP32[$2>>2]|0;
      _stbi__grow_buffer_unsafe($294);
     }
     $295 = HEAP32[$2>>2]|0;
     $296 = ((($295)) + 18116|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $297&255;
     $299 = ($298|0)>=(208);
     if (!($299)) {
      label = 39;
      break L29;
     }
     $300 = HEAP32[$2>>2]|0;
     $301 = ((($300)) + 18116|0);
     $302 = HEAP8[$301>>0]|0;
     $303 = $302&255;
     $304 = ($303|0)<=(215);
     if (!($304)) {
      label = 39;
      break L29;
     }
     $305 = HEAP32[$2>>2]|0;
     _stbi__jpeg_reset($305);
    }
    $306 = HEAP32[$10>>2]|0;
    $307 = (($306) + 1)|0;
    HEAP32[$10>>2] = $307;
   }
   $308 = HEAP32[$11>>2]|0;
   $309 = (($308) + 1)|0;
   HEAP32[$11>>2] = $309;
  }
  if ((label|0) == 30) {
   HEAP32[$1>>2] = 0;
   $533 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($533|0);
  }
  else if ((label|0) == 39) {
   HEAP32[$1>>2] = 1;
   $533 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($533|0);
  }
  else if ((label|0) == 43) {
   HEAP32[$1>>2] = 1;
   $533 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($533|0);
  }
 }
 if ($44) {
  $310 = HEAP32[$2>>2]|0;
  $311 = ((($310)) + 18156|0);
  $312 = HEAP32[$311>>2]|0;
  HEAP32[$22>>2] = $312;
  $313 = HEAP32[$22>>2]|0;
  $314 = HEAP32[$2>>2]|0;
  $315 = ((($314)) + 17820|0);
  $316 = (($315) + (($313*72)|0)|0);
  $317 = ((($316)) + 28|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = (($318) + 7)|0;
  $320 = $319 >> 3;
  HEAP32[$23>>2] = $320;
  $321 = HEAP32[$22>>2]|0;
  $322 = HEAP32[$2>>2]|0;
  $323 = ((($322)) + 17820|0);
  $324 = (($323) + (($321*72)|0)|0);
  $325 = ((($324)) + 32|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = (($326) + 7)|0;
  $328 = $327 >> 3;
  HEAP32[$24>>2] = $328;
  HEAP32[$21>>2] = 0;
  L67: while(1) {
   $329 = HEAP32[$21>>2]|0;
   $330 = HEAP32[$24>>2]|0;
   $331 = ($329|0)<($330|0);
   if (!($331)) {
    label = 63;
    break;
   }
   HEAP32[$20>>2] = 0;
   while(1) {
    $332 = HEAP32[$20>>2]|0;
    $333 = HEAP32[$23>>2]|0;
    $334 = ($332|0)<($333|0);
    if (!($334)) {
     break;
    }
    $335 = HEAP32[$22>>2]|0;
    $336 = HEAP32[$2>>2]|0;
    $337 = ((($336)) + 17820|0);
    $338 = (($337) + (($335*72)|0)|0);
    $339 = ((($338)) + 60|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = HEAP32[$20>>2]|0;
    $342 = HEAP32[$21>>2]|0;
    $343 = HEAP32[$22>>2]|0;
    $344 = HEAP32[$2>>2]|0;
    $345 = ((($344)) + 17820|0);
    $346 = (($345) + (($343*72)|0)|0);
    $347 = ((($346)) + 64|0);
    $348 = HEAP32[$347>>2]|0;
    $349 = Math_imul($342, $348)|0;
    $350 = (($341) + ($349))|0;
    $351 = $350<<6;
    $352 = (($340) + ($351<<1)|0);
    HEAP32[$25>>2] = $352;
    $353 = HEAP32[$2>>2]|0;
    $354 = ((($353)) + 18128|0);
    $355 = HEAP32[$354>>2]|0;
    $356 = ($355|0)==(0);
    if ($356) {
     $357 = HEAP32[$2>>2]|0;
     $358 = HEAP32[$25>>2]|0;
     $359 = HEAP32[$22>>2]|0;
     $360 = HEAP32[$2>>2]|0;
     $361 = ((($360)) + 17820|0);
     $362 = (($361) + (($359*72)|0)|0);
     $363 = ((($362)) + 16|0);
     $364 = HEAP32[$363>>2]|0;
     $365 = HEAP32[$2>>2]|0;
     $366 = ((($365)) + 4|0);
     $367 = (($366) + (($364*1680)|0)|0);
     $368 = HEAP32[$22>>2]|0;
     $369 = (_stbi__jpeg_decode_block_prog_dc($357,$358,$367,$368)|0);
     $370 = ($369|0)!=(0);
     if (!($370)) {
      label = 51;
      break L67;
     }
    } else {
     $371 = HEAP32[$22>>2]|0;
     $372 = HEAP32[$2>>2]|0;
     $373 = ((($372)) + 17820|0);
     $374 = (($373) + (($371*72)|0)|0);
     $375 = ((($374)) + 20|0);
     $376 = HEAP32[$375>>2]|0;
     HEAP32[$26>>2] = $376;
     $377 = HEAP32[$2>>2]|0;
     $378 = HEAP32[$25>>2]|0;
     $379 = HEAP32[$26>>2]|0;
     $380 = HEAP32[$2>>2]|0;
     $381 = ((($380)) + 6724|0);
     $382 = (($381) + (($379*1680)|0)|0);
     $383 = HEAP32[$26>>2]|0;
     $384 = HEAP32[$2>>2]|0;
     $385 = ((($384)) + 13700|0);
     $386 = (($385) + ($383<<10)|0);
     $387 = (_stbi__jpeg_decode_block_prog_ac($377,$378,$382,$386)|0);
     $388 = ($387|0)!=(0);
     if (!($388)) {
      label = 53;
      break L67;
     }
    }
    $389 = HEAP32[$2>>2]|0;
    $390 = ((($389)) + 18176|0);
    $391 = HEAP32[$390>>2]|0;
    $392 = (($391) + -1)|0;
    HEAP32[$390>>2] = $392;
    $393 = ($392|0)<=(0);
    if ($393) {
     $394 = HEAP32[$2>>2]|0;
     $395 = ((($394)) + 18112|0);
     $396 = HEAP32[$395>>2]|0;
     $397 = ($396|0)<(24);
     if ($397) {
      $398 = HEAP32[$2>>2]|0;
      _stbi__grow_buffer_unsafe($398);
     }
     $399 = HEAP32[$2>>2]|0;
     $400 = ((($399)) + 18116|0);
     $401 = HEAP8[$400>>0]|0;
     $402 = $401&255;
     $403 = ($402|0)>=(208);
     if (!($403)) {
      label = 59;
      break L67;
     }
     $404 = HEAP32[$2>>2]|0;
     $405 = ((($404)) + 18116|0);
     $406 = HEAP8[$405>>0]|0;
     $407 = $406&255;
     $408 = ($407|0)<=(215);
     if (!($408)) {
      label = 59;
      break L67;
     }
     $409 = HEAP32[$2>>2]|0;
     _stbi__jpeg_reset($409);
    }
    $410 = HEAP32[$20>>2]|0;
    $411 = (($410) + 1)|0;
    HEAP32[$20>>2] = $411;
   }
   $412 = HEAP32[$21>>2]|0;
   $413 = (($412) + 1)|0;
   HEAP32[$21>>2] = $413;
  }
  if ((label|0) == 51) {
   HEAP32[$1>>2] = 0;
   $533 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($533|0);
  }
  else if ((label|0) == 53) {
   HEAP32[$1>>2] = 0;
   $533 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($533|0);
  }
  else if ((label|0) == 59) {
   HEAP32[$1>>2] = 1;
   $533 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($533|0);
  }
  else if ((label|0) == 63) {
   HEAP32[$1>>2] = 1;
   $533 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($533|0);
  }
 }
 HEAP32[$28>>2] = 0;
 L96: while(1) {
  $414 = HEAP32[$28>>2]|0;
  $415 = HEAP32[$2>>2]|0;
  $416 = ((($415)) + 17808|0);
  $417 = HEAP32[$416>>2]|0;
  $418 = ($414|0)<($417|0);
  if (!($418)) {
   label = 88;
   break;
  }
  HEAP32[$27>>2] = 0;
  while(1) {
   $419 = HEAP32[$27>>2]|0;
   $420 = HEAP32[$2>>2]|0;
   $421 = ((($420)) + 17804|0);
   $422 = HEAP32[$421>>2]|0;
   $423 = ($419|0)<($422|0);
   if (!($423)) {
    break;
   }
   HEAP32[$29>>2] = 0;
   while(1) {
    $424 = HEAP32[$29>>2]|0;
    $425 = HEAP32[$2>>2]|0;
    $426 = ((($425)) + 18152|0);
    $427 = HEAP32[$426>>2]|0;
    $428 = ($424|0)<($427|0);
    if (!($428)) {
     break;
    }
    $429 = HEAP32[$29>>2]|0;
    $430 = HEAP32[$2>>2]|0;
    $431 = ((($430)) + 18156|0);
    $432 = (($431) + ($429<<2)|0);
    $433 = HEAP32[$432>>2]|0;
    HEAP32[$32>>2] = $433;
    HEAP32[$31>>2] = 0;
    while(1) {
     $434 = HEAP32[$31>>2]|0;
     $435 = HEAP32[$32>>2]|0;
     $436 = HEAP32[$2>>2]|0;
     $437 = ((($436)) + 17820|0);
     $438 = (($437) + (($435*72)|0)|0);
     $439 = ((($438)) + 8|0);
     $440 = HEAP32[$439>>2]|0;
     $441 = ($434|0)<($440|0);
     if (!($441)) {
      break;
     }
     HEAP32[$30>>2] = 0;
     while(1) {
      $442 = HEAP32[$30>>2]|0;
      $443 = HEAP32[$32>>2]|0;
      $444 = HEAP32[$2>>2]|0;
      $445 = ((($444)) + 17820|0);
      $446 = (($445) + (($443*72)|0)|0);
      $447 = ((($446)) + 4|0);
      $448 = HEAP32[$447>>2]|0;
      $449 = ($442|0)<($448|0);
      if (!($449)) {
       break;
      }
      $450 = HEAP32[$27>>2]|0;
      $451 = HEAP32[$32>>2]|0;
      $452 = HEAP32[$2>>2]|0;
      $453 = ((($452)) + 17820|0);
      $454 = (($453) + (($451*72)|0)|0);
      $455 = ((($454)) + 4|0);
      $456 = HEAP32[$455>>2]|0;
      $457 = Math_imul($450, $456)|0;
      $458 = HEAP32[$30>>2]|0;
      $459 = (($457) + ($458))|0;
      HEAP32[$33>>2] = $459;
      $460 = HEAP32[$28>>2]|0;
      $461 = HEAP32[$32>>2]|0;
      $462 = HEAP32[$2>>2]|0;
      $463 = ((($462)) + 17820|0);
      $464 = (($463) + (($461*72)|0)|0);
      $465 = ((($464)) + 8|0);
      $466 = HEAP32[$465>>2]|0;
      $467 = Math_imul($460, $466)|0;
      $468 = HEAP32[$31>>2]|0;
      $469 = (($467) + ($468))|0;
      HEAP32[$34>>2] = $469;
      $470 = HEAP32[$32>>2]|0;
      $471 = HEAP32[$2>>2]|0;
      $472 = ((($471)) + 17820|0);
      $473 = (($472) + (($470*72)|0)|0);
      $474 = ((($473)) + 60|0);
      $475 = HEAP32[$474>>2]|0;
      $476 = HEAP32[$33>>2]|0;
      $477 = HEAP32[$34>>2]|0;
      $478 = HEAP32[$32>>2]|0;
      $479 = HEAP32[$2>>2]|0;
      $480 = ((($479)) + 17820|0);
      $481 = (($480) + (($478*72)|0)|0);
      $482 = ((($481)) + 64|0);
      $483 = HEAP32[$482>>2]|0;
      $484 = Math_imul($477, $483)|0;
      $485 = (($476) + ($484))|0;
      $486 = $485<<6;
      $487 = (($475) + ($486<<1)|0);
      HEAP32[$35>>2] = $487;
      $488 = HEAP32[$2>>2]|0;
      $489 = HEAP32[$35>>2]|0;
      $490 = HEAP32[$32>>2]|0;
      $491 = HEAP32[$2>>2]|0;
      $492 = ((($491)) + 17820|0);
      $493 = (($492) + (($490*72)|0)|0);
      $494 = ((($493)) + 16|0);
      $495 = HEAP32[$494>>2]|0;
      $496 = HEAP32[$2>>2]|0;
      $497 = ((($496)) + 4|0);
      $498 = (($497) + (($495*1680)|0)|0);
      $499 = HEAP32[$32>>2]|0;
      $500 = (_stbi__jpeg_decode_block_prog_dc($488,$489,$498,$499)|0);
      $501 = ($500|0)!=(0);
      if (!($501)) {
       label = 75;
       break L96;
      }
      $502 = HEAP32[$30>>2]|0;
      $503 = (($502) + 1)|0;
      HEAP32[$30>>2] = $503;
     }
     $504 = HEAP32[$31>>2]|0;
     $505 = (($504) + 1)|0;
     HEAP32[$31>>2] = $505;
    }
    $506 = HEAP32[$29>>2]|0;
    $507 = (($506) + 1)|0;
    HEAP32[$29>>2] = $507;
   }
   $508 = HEAP32[$2>>2]|0;
   $509 = ((($508)) + 18176|0);
   $510 = HEAP32[$509>>2]|0;
   $511 = (($510) + -1)|0;
   HEAP32[$509>>2] = $511;
   $512 = ($511|0)<=(0);
   if ($512) {
    $513 = HEAP32[$2>>2]|0;
    $514 = ((($513)) + 18112|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = ($515|0)<(24);
    if ($516) {
     $517 = HEAP32[$2>>2]|0;
     _stbi__grow_buffer_unsafe($517);
    }
    $518 = HEAP32[$2>>2]|0;
    $519 = ((($518)) + 18116|0);
    $520 = HEAP8[$519>>0]|0;
    $521 = $520&255;
    $522 = ($521|0)>=(208);
    if (!($522)) {
     label = 84;
     break L96;
    }
    $523 = HEAP32[$2>>2]|0;
    $524 = ((($523)) + 18116|0);
    $525 = HEAP8[$524>>0]|0;
    $526 = $525&255;
    $527 = ($526|0)<=(215);
    if (!($527)) {
     label = 84;
     break L96;
    }
    $528 = HEAP32[$2>>2]|0;
    _stbi__jpeg_reset($528);
   }
   $529 = HEAP32[$27>>2]|0;
   $530 = (($529) + 1)|0;
   HEAP32[$27>>2] = $530;
  }
  $531 = HEAP32[$28>>2]|0;
  $532 = (($531) + 1)|0;
  HEAP32[$28>>2] = $532;
 }
 if ((label|0) == 75) {
  HEAP32[$1>>2] = 0;
  $533 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($533|0);
 }
 else if ((label|0) == 84) {
  HEAP32[$1>>2] = 1;
  $533 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($533|0);
 }
 else if ((label|0) == 88) {
  HEAP32[$1>>2] = 1;
  $533 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($533|0);
 }
 return (0)|0;
}
function _stbi__at_eof($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_ii[$10 & 127]($13)|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   HEAP32[$1>>2] = 0;
   $28 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($28|0);
  }
  $16 = HEAP32[$2>>2]|0;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   HEAP32[$1>>2] = 1;
   $28 = HEAP32[$1>>2]|0;
   STACKTOP = sp;return ($28|0);
  }
 }
 $20 = HEAP32[$2>>2]|0;
 $21 = ((($20)) + 168|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$2>>2]|0;
 $24 = ((($23)) + 172|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)>=($25>>>0);
 $27 = $26&1;
 HEAP32[$1>>2] = $27;
 $28 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($28|0);
}
function _stbi__process_marker($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 24|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = sp + 8|0;
 $15 = sp + 4|0;
 $16 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $17 = HEAP32[$4>>2]|0;
 switch ($17|0) {
 case 255:  {
  $18 = (_stbi__err(21746)|0);
  HEAP32[$2>>2] = $18;
  $168 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($168|0);
  break;
 }
 case 221:  {
  $19 = HEAP32[$3>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = (_stbi__get16be($20)|0);
  $22 = ($21|0)!=(4);
  if ($22) {
   $23 = (_stbi__err(21762)|0);
   HEAP32[$2>>2] = $23;
   $168 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($168|0);
  } else {
   $24 = HEAP32[$3>>2]|0;
   $25 = HEAP32[$24>>2]|0;
   $26 = (_stbi__get16be($25)|0);
   $27 = HEAP32[$3>>2]|0;
   $28 = ((($27)) + 18172|0);
   HEAP32[$28>>2] = $26;
   HEAP32[$2>>2] = 1;
   $168 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($168|0);
  }
  break;
 }
 case 219:  {
  $29 = HEAP32[$3>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (_stbi__get16be($30)|0);
  $32 = (($31) - 2)|0;
  HEAP32[$5>>2] = $32;
  while(1) {
   $33 = HEAP32[$5>>2]|0;
   $34 = ($33|0)>(0);
   if (!($34)) {
    label = 16;
    break;
   }
   $35 = HEAP32[$3>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $37 = (_stbi__get8($36)|0);
   $38 = $37&255;
   HEAP32[$6>>2] = $38;
   $39 = HEAP32[$6>>2]|0;
   $40 = $39 >> 4;
   HEAP32[$7>>2] = $40;
   $41 = HEAP32[$6>>2]|0;
   $42 = $41 & 15;
   HEAP32[$8>>2] = $42;
   $43 = HEAP32[$7>>2]|0;
   $44 = ($43|0)!=(0);
   if ($44) {
    label = 9;
    break;
   }
   $46 = HEAP32[$8>>2]|0;
   $47 = ($46|0)>(3);
   if ($47) {
    label = 11;
    break;
   }
   HEAP32[$9>>2] = 0;
   while(1) {
    $49 = HEAP32[$9>>2]|0;
    $50 = ($49|0)<(64);
    if (!($50)) {
     break;
    }
    $51 = HEAP32[$3>>2]|0;
    $52 = HEAP32[$51>>2]|0;
    $53 = (_stbi__get8($52)|0);
    $54 = HEAP32[$9>>2]|0;
    $55 = (14630 + ($54)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = HEAP32[$8>>2]|0;
    $59 = HEAP32[$3>>2]|0;
    $60 = ((($59)) + 13444|0);
    $61 = (($60) + ($58<<6)|0);
    $62 = (($61) + ($57)|0);
    HEAP8[$62>>0] = $53;
    $63 = HEAP32[$9>>2]|0;
    $64 = (($63) + 1)|0;
    HEAP32[$9>>2] = $64;
   }
   $65 = HEAP32[$5>>2]|0;
   $66 = (($65) - 65)|0;
   HEAP32[$5>>2] = $66;
  }
  if ((label|0) == 9) {
   $45 = (_stbi__err(21774)|0);
   HEAP32[$2>>2] = $45;
   $168 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($168|0);
  }
  else if ((label|0) == 11) {
   $48 = (_stbi__err(21787)|0);
   HEAP32[$2>>2] = $48;
   $168 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($168|0);
  }
  else if ((label|0) == 16) {
   $67 = HEAP32[$5>>2]|0;
   $68 = ($67|0)==(0);
   $69 = $68&1;
   HEAP32[$2>>2] = $69;
   $168 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($168|0);
  }
  break;
 }
 case 196:  {
  $70 = HEAP32[$3>>2]|0;
  $71 = HEAP32[$70>>2]|0;
  $72 = (_stbi__get16be($71)|0);
  $73 = (($72) - 2)|0;
  HEAP32[$5>>2] = $73;
  while(1) {
   $74 = HEAP32[$5>>2]|0;
   $75 = ($74|0)>(0);
   if (!($75)) {
    label = 37;
    break;
   }
   HEAP32[$13>>2] = 0;
   $76 = HEAP32[$3>>2]|0;
   $77 = HEAP32[$76>>2]|0;
   $78 = (_stbi__get8($77)|0);
   $79 = $78&255;
   HEAP32[$14>>2] = $79;
   $80 = HEAP32[$14>>2]|0;
   $81 = $80 >> 4;
   HEAP32[$15>>2] = $81;
   $82 = HEAP32[$14>>2]|0;
   $83 = $82 & 15;
   HEAP32[$16>>2] = $83;
   $84 = HEAP32[$15>>2]|0;
   $85 = ($84|0)>(1);
   $86 = HEAP32[$16>>2]|0;
   $87 = ($86|0)>(3);
   $or$cond = $85 | $87;
   if ($or$cond) {
    label = 20;
    break;
   }
   HEAP32[$12>>2] = 0;
   while(1) {
    $89 = HEAP32[$12>>2]|0;
    $90 = ($89|0)<(16);
    if (!($90)) {
     break;
    }
    $91 = HEAP32[$3>>2]|0;
    $92 = HEAP32[$91>>2]|0;
    $93 = (_stbi__get8($92)|0);
    $94 = $93&255;
    $95 = HEAP32[$12>>2]|0;
    $96 = (($11) + ($95<<2)|0);
    HEAP32[$96>>2] = $94;
    $97 = HEAP32[$12>>2]|0;
    $98 = (($11) + ($97<<2)|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = HEAP32[$13>>2]|0;
    $101 = (($100) + ($99))|0;
    HEAP32[$13>>2] = $101;
    $102 = HEAP32[$12>>2]|0;
    $103 = (($102) + 1)|0;
    HEAP32[$12>>2] = $103;
   }
   $104 = HEAP32[$5>>2]|0;
   $105 = (($104) - 17)|0;
   HEAP32[$5>>2] = $105;
   $106 = HEAP32[$15>>2]|0;
   $107 = ($106|0)==(0);
   $108 = HEAP32[$3>>2]|0;
   if ($107) {
    $109 = ((($108)) + 4|0);
    $110 = HEAP32[$16>>2]|0;
    $111 = (($109) + (($110*1680)|0)|0);
    $112 = (_stbi__build_huffman($111,$11)|0);
    $113 = ($112|0)!=(0);
    if (!($113)) {
     label = 26;
     break;
    }
    $114 = HEAP32[$16>>2]|0;
    $115 = HEAP32[$3>>2]|0;
    $116 = ((($115)) + 4|0);
    $117 = (($116) + (($114*1680)|0)|0);
    $118 = ((($117)) + 1024|0);
    HEAP32[$10>>2] = $118;
   } else {
    $119 = ((($108)) + 6724|0);
    $120 = HEAP32[$16>>2]|0;
    $121 = (($119) + (($120*1680)|0)|0);
    $122 = (_stbi__build_huffman($121,$11)|0);
    $123 = ($122|0)!=(0);
    if (!($123)) {
     label = 29;
     break;
    }
    $124 = HEAP32[$16>>2]|0;
    $125 = HEAP32[$3>>2]|0;
    $126 = ((($125)) + 6724|0);
    $127 = (($126) + (($124*1680)|0)|0);
    $128 = ((($127)) + 1024|0);
    HEAP32[$10>>2] = $128;
   }
   HEAP32[$12>>2] = 0;
   while(1) {
    $129 = HEAP32[$12>>2]|0;
    $130 = HEAP32[$13>>2]|0;
    $131 = ($129|0)<($130|0);
    if (!($131)) {
     break;
    }
    $132 = HEAP32[$3>>2]|0;
    $133 = HEAP32[$132>>2]|0;
    $134 = (_stbi__get8($133)|0);
    $135 = HEAP32[$12>>2]|0;
    $136 = HEAP32[$10>>2]|0;
    $137 = (($136) + ($135)|0);
    HEAP8[$137>>0] = $134;
    $138 = HEAP32[$12>>2]|0;
    $139 = (($138) + 1)|0;
    HEAP32[$12>>2] = $139;
   }
   $140 = HEAP32[$15>>2]|0;
   $141 = ($140|0)!=(0);
   if ($141) {
    $142 = HEAP32[$16>>2]|0;
    $143 = HEAP32[$3>>2]|0;
    $144 = ((($143)) + 13700|0);
    $145 = (($144) + ($142<<10)|0);
    $146 = HEAP32[$3>>2]|0;
    $147 = ((($146)) + 6724|0);
    $148 = HEAP32[$16>>2]|0;
    $149 = (($147) + (($148*1680)|0)|0);
    _stbi__build_fast_ac($145,$149);
   }
   $150 = HEAP32[$13>>2]|0;
   $151 = HEAP32[$5>>2]|0;
   $152 = (($151) - ($150))|0;
   HEAP32[$5>>2] = $152;
  }
  if ((label|0) == 20) {
   $88 = (_stbi__err(21801)|0);
   HEAP32[$2>>2] = $88;
   $168 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($168|0);
  }
  else if ((label|0) == 26) {
   HEAP32[$2>>2] = 0;
   $168 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($168|0);
  }
  else if ((label|0) == 29) {
   HEAP32[$2>>2] = 0;
   $168 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($168|0);
  }
  else if ((label|0) == 37) {
   $153 = HEAP32[$5>>2]|0;
   $154 = ($153|0)==(0);
   $155 = $154&1;
   HEAP32[$2>>2] = $155;
   $168 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($168|0);
  }
  break;
 }
 default: {
  $156 = HEAP32[$4>>2]|0;
  $157 = ($156|0)>=(224);
  $158 = HEAP32[$4>>2]|0;
  $159 = ($158|0)<=(239);
  $or$cond3 = $157 & $159;
  $160 = HEAP32[$4>>2]|0;
  $161 = ($160|0)==(254);
  $or$cond5 = $or$cond3 | $161;
  if ($or$cond5) {
   $162 = HEAP32[$3>>2]|0;
   $163 = HEAP32[$162>>2]|0;
   $164 = HEAP32[$3>>2]|0;
   $165 = HEAP32[$164>>2]|0;
   $166 = (_stbi__get16be($165)|0);
   $167 = (($166) - 2)|0;
   _stbi__skip($163,$167);
   HEAP32[$2>>2] = 1;
   $168 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($168|0);
  } else {
   HEAP32[$2>>2] = 0;
   $168 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($168|0);
  }
 }
 }
 return (0)|0;
}
function _stbi__jpeg_finish($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 HEAP32[$1>>2] = $0;
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 18124|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$4>>2] = 0;
 while(1) {
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($12|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[$4>>2]|0;
  $19 = HEAP32[$1>>2]|0;
  $20 = ((($19)) + 17820|0);
  $21 = (($20) + (($18*72)|0)|0);
  $22 = ((($21)) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 7)|0;
  $25 = $24 >> 3;
  HEAP32[$5>>2] = $25;
  $26 = HEAP32[$4>>2]|0;
  $27 = HEAP32[$1>>2]|0;
  $28 = ((($27)) + 17820|0);
  $29 = (($28) + (($26*72)|0)|0);
  $30 = ((($29)) + 32|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 7)|0;
  $33 = $32 >> 3;
  HEAP32[$6>>2] = $33;
  HEAP32[$3>>2] = 0;
  while(1) {
   $34 = HEAP32[$3>>2]|0;
   $35 = HEAP32[$6>>2]|0;
   $36 = ($34|0)<($35|0);
   if (!($36)) {
    break;
   }
   HEAP32[$2>>2] = 0;
   while(1) {
    $37 = HEAP32[$2>>2]|0;
    $38 = HEAP32[$5>>2]|0;
    $39 = ($37|0)<($38|0);
    if (!($39)) {
     break;
    }
    $40 = HEAP32[$4>>2]|0;
    $41 = HEAP32[$1>>2]|0;
    $42 = ((($41)) + 17820|0);
    $43 = (($42) + (($40*72)|0)|0);
    $44 = ((($43)) + 60|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$2>>2]|0;
    $47 = HEAP32[$3>>2]|0;
    $48 = HEAP32[$4>>2]|0;
    $49 = HEAP32[$1>>2]|0;
    $50 = ((($49)) + 17820|0);
    $51 = (($50) + (($48*72)|0)|0);
    $52 = ((($51)) + 64|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = Math_imul($47, $53)|0;
    $55 = (($46) + ($54))|0;
    $56 = $55<<6;
    $57 = (($45) + ($56<<1)|0);
    HEAP32[$7>>2] = $57;
    $58 = HEAP32[$7>>2]|0;
    $59 = HEAP32[$4>>2]|0;
    $60 = HEAP32[$1>>2]|0;
    $61 = ((($60)) + 17820|0);
    $62 = (($61) + (($59*72)|0)|0);
    $63 = ((($62)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = HEAP32[$1>>2]|0;
    $66 = ((($65)) + 13444|0);
    $67 = (($66) + ($64<<6)|0);
    _stbi__jpeg_dequantize($58,$67);
    $68 = HEAP32[$1>>2]|0;
    $69 = ((($68)) + 18180|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = HEAP32[$4>>2]|0;
    $72 = HEAP32[$1>>2]|0;
    $73 = ((($72)) + 17820|0);
    $74 = (($73) + (($71*72)|0)|0);
    $75 = ((($74)) + 44|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = HEAP32[$4>>2]|0;
    $78 = HEAP32[$1>>2]|0;
    $79 = ((($78)) + 17820|0);
    $80 = (($79) + (($77*72)|0)|0);
    $81 = ((($80)) + 36|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = HEAP32[$3>>2]|0;
    $84 = Math_imul($82, $83)|0;
    $85 = $84<<3;
    $86 = (($76) + ($85)|0);
    $87 = HEAP32[$2>>2]|0;
    $88 = $87<<3;
    $89 = (($86) + ($88)|0);
    $90 = HEAP32[$4>>2]|0;
    $91 = HEAP32[$1>>2]|0;
    $92 = ((($91)) + 17820|0);
    $93 = (($92) + (($90*72)|0)|0);
    $94 = ((($93)) + 36|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = HEAP32[$7>>2]|0;
    FUNCTION_TABLE_viii[$70 & 31]($89,$95,$96);
    $97 = HEAP32[$2>>2]|0;
    $98 = (($97) + 1)|0;
    HEAP32[$2>>2] = $98;
   }
   $99 = HEAP32[$3>>2]|0;
   $100 = (($99) + 1)|0;
   HEAP32[$3>>2] = $100;
  }
  $101 = HEAP32[$4>>2]|0;
  $102 = (($101) + 1)|0;
  HEAP32[$4>>2] = $102;
 }
 STACKTOP = sp;return;
}
function _stbi__jpeg_dequantize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 HEAP32[$4>>2] = 0;
 while(1) {
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<(64);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$4>>2]|0;
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = (($13) + ($12<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = Math_imul($16, $11)|0;
  $18 = $17&65535;
  HEAP16[$14>>1] = $18;
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$4>>2] = $20;
 }
 STACKTOP = sp;return;
}
function _stbi__build_huffman($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$7>>2] = 0;
 HEAP32[$5>>2] = 0;
 while(1) {
  $12 = HEAP32[$5>>2]|0;
  $13 = ($12|0)<(16);
  if (!($13)) {
   break;
  }
  HEAP32[$6>>2] = 0;
  while(1) {
   $14 = HEAP32[$6>>2]|0;
   $15 = HEAP32[$5>>2]|0;
   $16 = HEAP32[$4>>2]|0;
   $17 = (($16) + ($15<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($14|0)<($18|0);
   $20 = HEAP32[$5>>2]|0;
   $21 = (($20) + 1)|0;
   if (!($19)) {
    break;
   }
   $22 = $21&255;
   $23 = HEAP32[$7>>2]|0;
   $24 = (($23) + 1)|0;
   HEAP32[$7>>2] = $24;
   $25 = HEAP32[$3>>2]|0;
   $26 = ((($25)) + 1280|0);
   $27 = (($26) + ($23)|0);
   HEAP8[$27>>0] = $22;
   $28 = HEAP32[$6>>2]|0;
   $29 = (($28) + 1)|0;
   HEAP32[$6>>2] = $29;
  }
  HEAP32[$5>>2] = $21;
 }
 $30 = HEAP32[$7>>2]|0;
 $31 = HEAP32[$3>>2]|0;
 $32 = ((($31)) + 1280|0);
 $33 = (($32) + ($30)|0);
 HEAP8[$33>>0] = 0;
 HEAP32[$8>>2] = 0;
 HEAP32[$7>>2] = 0;
 HEAP32[$6>>2] = 1;
 while(1) {
  $34 = HEAP32[$6>>2]|0;
  $35 = ($34|0)<=(16);
  if (!($35)) {
   break;
  }
  $36 = HEAP32[$7>>2]|0;
  $37 = HEAP32[$8>>2]|0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP32[$6>>2]|0;
  $40 = HEAP32[$3>>2]|0;
  $41 = ((($40)) + 1612|0);
  $42 = (($41) + ($39<<2)|0);
  HEAP32[$42>>2] = $38;
  $43 = HEAP32[$7>>2]|0;
  $44 = HEAP32[$3>>2]|0;
  $45 = ((($44)) + 1280|0);
  $46 = (($45) + ($43)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = HEAP32[$6>>2]|0;
  $50 = ($48|0)==($49|0);
  if ($50) {
   while(1) {
    $51 = HEAP32[$7>>2]|0;
    $52 = HEAP32[$3>>2]|0;
    $53 = ((($52)) + 1280|0);
    $54 = (($53) + ($51)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = HEAP32[$6>>2]|0;
    $58 = ($56|0)==($57|0);
    $59 = HEAP32[$8>>2]|0;
    if (!($58)) {
     break;
    }
    $60 = (($59) + 1)|0;
    HEAP32[$8>>2] = $60;
    $61 = $59&65535;
    $62 = HEAP32[$7>>2]|0;
    $63 = (($62) + 1)|0;
    HEAP32[$7>>2] = $63;
    $64 = HEAP32[$3>>2]|0;
    $65 = ((($64)) + 512|0);
    $66 = (($65) + ($62<<1)|0);
    HEAP16[$66>>1] = $61;
   }
   $67 = (($59) - 1)|0;
   $68 = HEAP32[$6>>2]|0;
   $69 = 1 << $68;
   $70 = ($67|0)>=($69|0);
   if ($70) {
    label = 13;
    break;
   }
  }
  $72 = HEAP32[$8>>2]|0;
  $73 = HEAP32[$6>>2]|0;
  $74 = (16 - ($73))|0;
  $75 = $72 << $74;
  $76 = HEAP32[$6>>2]|0;
  $77 = HEAP32[$3>>2]|0;
  $78 = ((($77)) + 1540|0);
  $79 = (($78) + ($76<<2)|0);
  HEAP32[$79>>2] = $75;
  $80 = HEAP32[$8>>2]|0;
  $81 = $80 << 1;
  HEAP32[$8>>2] = $81;
  $82 = HEAP32[$6>>2]|0;
  $83 = (($82) + 1)|0;
  HEAP32[$6>>2] = $83;
 }
 if ((label|0) == 13) {
  $71 = (_stbi__err(21816)|0);
  HEAP32[$2>>2] = $71;
  $126 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($126|0);
 }
 $84 = HEAP32[$6>>2]|0;
 $85 = HEAP32[$3>>2]|0;
 $86 = ((($85)) + 1540|0);
 $87 = (($86) + ($84<<2)|0);
 HEAP32[$87>>2] = -1;
 $88 = HEAP32[$3>>2]|0;
 _memset(($88|0),-1,512)|0;
 HEAP32[$5>>2] = 0;
 while(1) {
  $89 = HEAP32[$5>>2]|0;
  $90 = HEAP32[$7>>2]|0;
  $91 = ($89|0)<($90|0);
  if (!($91)) {
   break;
  }
  $92 = HEAP32[$5>>2]|0;
  $93 = HEAP32[$3>>2]|0;
  $94 = ((($93)) + 1280|0);
  $95 = (($94) + ($92)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  HEAP32[$9>>2] = $97;
  $98 = HEAP32[$9>>2]|0;
  $99 = ($98|0)<=(9);
  L25: do {
   if ($99) {
    $100 = HEAP32[$5>>2]|0;
    $101 = HEAP32[$3>>2]|0;
    $102 = ((($101)) + 512|0);
    $103 = (($102) + ($100<<1)|0);
    $104 = HEAP16[$103>>1]|0;
    $105 = $104&65535;
    $106 = HEAP32[$9>>2]|0;
    $107 = (9 - ($106))|0;
    $108 = $105 << $107;
    HEAP32[$10>>2] = $108;
    $109 = HEAP32[$9>>2]|0;
    $110 = (9 - ($109))|0;
    $111 = 1 << $110;
    HEAP32[$11>>2] = $111;
    HEAP32[$6>>2] = 0;
    while(1) {
     $112 = HEAP32[$6>>2]|0;
     $113 = HEAP32[$11>>2]|0;
     $114 = ($112|0)<($113|0);
     if (!($114)) {
      break L25;
     }
     $115 = HEAP32[$5>>2]|0;
     $116 = $115&255;
     $117 = HEAP32[$10>>2]|0;
     $118 = HEAP32[$6>>2]|0;
     $119 = (($117) + ($118))|0;
     $120 = HEAP32[$3>>2]|0;
     $121 = (($120) + ($119)|0);
     HEAP8[$121>>0] = $116;
     $122 = HEAP32[$6>>2]|0;
     $123 = (($122) + 1)|0;
     HEAP32[$6>>2] = $123;
    }
   }
  } while(0);
  $124 = HEAP32[$5>>2]|0;
  $125 = (($124) + 1)|0;
  HEAP32[$5>>2] = $125;
 }
 HEAP32[$2>>2] = 1;
 $126 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($126|0);
}
function _stbi__build_fast_ac($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 36|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 HEAP32[$4>>2] = 0;
 while(1) {
  $12 = HEAP32[$4>>2]|0;
  $13 = ($12|0)<(512);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[$4>>2]|0;
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  HEAP8[$5>>0] = $17;
  $18 = HEAP32[$4>>2]|0;
  $19 = HEAP32[$2>>2]|0;
  $20 = (($19) + ($18<<1)|0);
  HEAP16[$20>>1] = 0;
  $21 = HEAP8[$5>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)<(255);
  if ($23) {
   $24 = HEAP8[$5>>0]|0;
   $25 = $24&255;
   $26 = HEAP32[$3>>2]|0;
   $27 = ((($26)) + 1024|0);
   $28 = (($27) + ($25)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   HEAP32[$6>>2] = $30;
   $31 = HEAP32[$6>>2]|0;
   $32 = $31 >> 4;
   $33 = $32 & 15;
   HEAP32[$7>>2] = $33;
   $34 = HEAP32[$6>>2]|0;
   $35 = $34 & 15;
   HEAP32[$8>>2] = $35;
   $36 = HEAP8[$5>>0]|0;
   $37 = $36&255;
   $38 = HEAP32[$3>>2]|0;
   $39 = ((($38)) + 1280|0);
   $40 = (($39) + ($37)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   HEAP32[$9>>2] = $42;
   $43 = HEAP32[$8>>2]|0;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = HEAP32[$9>>2]|0;
    $46 = HEAP32[$8>>2]|0;
    $47 = (($45) + ($46))|0;
    $48 = ($47|0)<=(9);
    if ($48) {
     $49 = HEAP32[$4>>2]|0;
     $50 = HEAP32[$9>>2]|0;
     $51 = $49 << $50;
     $52 = $51 & 511;
     $53 = HEAP32[$8>>2]|0;
     $54 = (9 - ($53))|0;
     $55 = $52 >> $54;
     HEAP32[$10>>2] = $55;
     $56 = HEAP32[$8>>2]|0;
     $57 = (($56) - 1)|0;
     $58 = 1 << $57;
     HEAP32[$11>>2] = $58;
     $59 = HEAP32[$10>>2]|0;
     $60 = HEAP32[$11>>2]|0;
     $61 = ($59|0)<($60|0);
     if ($61) {
      $62 = HEAP32[$8>>2]|0;
      $63 = -1 << $62;
      $64 = (($63) + 1)|0;
      $65 = HEAP32[$10>>2]|0;
      $66 = (($65) + ($64))|0;
      HEAP32[$10>>2] = $66;
     }
     $67 = HEAP32[$10>>2]|0;
     $68 = ($67|0)>=(-128);
     $69 = HEAP32[$10>>2]|0;
     $70 = ($69|0)<=(127);
     $or$cond = $68 & $70;
     if ($or$cond) {
      $71 = HEAP32[$10>>2]|0;
      $72 = $71 << 8;
      $73 = HEAP32[$7>>2]|0;
      $74 = $73 << 4;
      $75 = (($72) + ($74))|0;
      $76 = HEAP32[$9>>2]|0;
      $77 = HEAP32[$8>>2]|0;
      $78 = (($76) + ($77))|0;
      $79 = (($75) + ($78))|0;
      $80 = $79&65535;
      $81 = HEAP32[$4>>2]|0;
      $82 = HEAP32[$2>>2]|0;
      $83 = (($82) + ($81<<1)|0);
      HEAP16[$83>>1] = $80;
     }
    }
   }
  }
  $84 = HEAP32[$4>>2]|0;
  $85 = (($84) + 1)|0;
  HEAP32[$4>>2] = $85;
 }
 STACKTOP = sp;return;
}
function _stbi__jpeg_reset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 18112|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 18108|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 18120|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 17820|0);
 $10 = ((($9)) + 144|0);
 $11 = ((($10)) + 24|0);
 HEAP32[$11>>2] = 0;
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($12)) + 17820|0);
 $14 = ((($13)) + 72|0);
 $15 = ((($14)) + 24|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP32[$1>>2]|0;
 $17 = ((($16)) + 17820|0);
 $18 = ((($17)) + 24|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$1>>2]|0;
 $20 = ((($19)) + 18116|0);
 HEAP8[$20>>0] = -1;
 $21 = HEAP32[$1>>2]|0;
 $22 = ((($21)) + 18172|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $30 = 2147483647;
  $28 = HEAP32[$1>>2]|0;
  $29 = ((($28)) + 18176|0);
  HEAP32[$29>>2] = $30;
  $31 = HEAP32[$1>>2]|0;
  $32 = ((($31)) + 18144|0);
  HEAP32[$32>>2] = 0;
  STACKTOP = sp;return;
 }
 $25 = HEAP32[$1>>2]|0;
 $26 = ((($25)) + 18172|0);
 $27 = HEAP32[$26>>2]|0;
 $30 = $27;
 $28 = HEAP32[$1>>2]|0;
 $29 = ((($28)) + 18176|0);
 HEAP32[$29>>2] = $30;
 $31 = HEAP32[$1>>2]|0;
 $32 = ((($31)) + 18144|0);
 HEAP32[$32>>2] = 0;
 STACKTOP = sp;return;
}
function _stbi__jpeg_decode_block($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 64|0;
 $8 = sp + 60|0;
 $9 = sp + 56|0;
 $10 = sp + 52|0;
 $11 = sp + 48|0;
 $12 = sp + 44|0;
 $13 = sp + 40|0;
 $14 = sp + 36|0;
 $15 = sp + 32|0;
 $16 = sp + 28|0;
 $17 = sp + 24|0;
 $18 = sp + 20|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $21 = sp + 8|0;
 $22 = sp + 4|0;
 $23 = sp;
 HEAP32[$8>>2] = $0;
 HEAP32[$9>>2] = $1;
 HEAP32[$10>>2] = $2;
 HEAP32[$11>>2] = $3;
 HEAP32[$12>>2] = $4;
 HEAP32[$13>>2] = $5;
 HEAP32[$14>>2] = $6;
 $24 = HEAP32[$8>>2]|0;
 $25 = ((($24)) + 18112|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(16);
 if ($27) {
  $28 = HEAP32[$8>>2]|0;
  _stbi__grow_buffer_unsafe($28);
 }
 $29 = HEAP32[$8>>2]|0;
 $30 = HEAP32[$10>>2]|0;
 $31 = (_stbi__jpeg_huff_decode($29,$30)|0);
 HEAP32[$18>>2] = $31;
 $32 = HEAP32[$18>>2]|0;
 $33 = ($32|0)<(0);
 if ($33) {
  $34 = (_stbi__err(21353)|0);
  HEAP32[$7>>2] = $34;
  $153 = HEAP32[$7>>2]|0;
  STACKTOP = sp;return ($153|0);
 }
 $35 = HEAP32[$9>>2]|0;
 dest=$35; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $36 = HEAP32[$18>>2]|0;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = HEAP32[$8>>2]|0;
  $39 = HEAP32[$18>>2]|0;
  $40 = (_stbi__extend_receive($38,$39)|0);
  $41 = $40;
 } else {
  $41 = 0;
 }
 HEAP32[$15>>2] = $41;
 $42 = HEAP32[$13>>2]|0;
 $43 = HEAP32[$8>>2]|0;
 $44 = ((($43)) + 17820|0);
 $45 = (($44) + (($42*72)|0)|0);
 $46 = ((($45)) + 24|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$15>>2]|0;
 $49 = (($47) + ($48))|0;
 HEAP32[$16>>2] = $49;
 $50 = HEAP32[$16>>2]|0;
 $51 = HEAP32[$13>>2]|0;
 $52 = HEAP32[$8>>2]|0;
 $53 = ((($52)) + 17820|0);
 $54 = (($53) + (($51*72)|0)|0);
 $55 = ((($54)) + 24|0);
 HEAP32[$55>>2] = $50;
 $56 = HEAP32[$16>>2]|0;
 $57 = HEAP32[$14>>2]|0;
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = Math_imul($56, $59)|0;
 $61 = $60&65535;
 $62 = HEAP32[$9>>2]|0;
 HEAP16[$62>>1] = $61;
 HEAP32[$17>>2] = 1;
 L11: while(1) {
  $63 = HEAP32[$8>>2]|0;
  $64 = ((($63)) + 18112|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)<(16);
  if ($66) {
   $67 = HEAP32[$8>>2]|0;
   _stbi__grow_buffer_unsafe($67);
  }
  $68 = HEAP32[$8>>2]|0;
  $69 = ((($68)) + 18108|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $70 >>> 23;
  $72 = $71 & 511;
  HEAP32[$20>>2] = $72;
  $73 = HEAP32[$20>>2]|0;
  $74 = HEAP32[$12>>2]|0;
  $75 = (($74) + ($73<<1)|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  HEAP32[$21>>2] = $77;
  $78 = HEAP32[$21>>2]|0;
  $79 = ($78|0)!=(0);
  do {
   if ($79) {
    $80 = HEAP32[$21>>2]|0;
    $81 = $80 >> 4;
    $82 = $81 & 15;
    $83 = HEAP32[$17>>2]|0;
    $84 = (($83) + ($82))|0;
    HEAP32[$17>>2] = $84;
    $85 = HEAP32[$21>>2]|0;
    $86 = $85 & 15;
    HEAP32[$22>>2] = $86;
    $87 = HEAP32[$22>>2]|0;
    $88 = HEAP32[$8>>2]|0;
    $89 = ((($88)) + 18108|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $90 << $87;
    HEAP32[$89>>2] = $91;
    $92 = HEAP32[$22>>2]|0;
    $93 = HEAP32[$8>>2]|0;
    $94 = ((($93)) + 18112|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) - ($92))|0;
    HEAP32[$94>>2] = $96;
    $97 = HEAP32[$17>>2]|0;
    $98 = (($97) + 1)|0;
    HEAP32[$17>>2] = $98;
    $99 = (14630 + ($97)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    HEAP32[$19>>2] = $101;
    $102 = HEAP32[$21>>2]|0;
    $103 = $102 >> 8;
    $104 = HEAP32[$19>>2]|0;
    $105 = HEAP32[$14>>2]|0;
    $106 = (($105) + ($104)|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107&255;
    $109 = Math_imul($103, $108)|0;
    $110 = $109&65535;
    $111 = HEAP32[$19>>2]|0;
    $112 = HEAP32[$9>>2]|0;
    $113 = (($112) + ($111<<1)|0);
    HEAP16[$113>>1] = $110;
   } else {
    $114 = HEAP32[$8>>2]|0;
    $115 = HEAP32[$11>>2]|0;
    $116 = (_stbi__jpeg_huff_decode($114,$115)|0);
    HEAP32[$23>>2] = $116;
    $117 = HEAP32[$23>>2]|0;
    $118 = ($117|0)<(0);
    if ($118) {
     label = 13;
     break L11;
    }
    $120 = HEAP32[$23>>2]|0;
    $121 = $120 & 15;
    HEAP32[$22>>2] = $121;
    $122 = HEAP32[$23>>2]|0;
    $123 = $122 >> 4;
    HEAP32[$21>>2] = $123;
    $124 = HEAP32[$22>>2]|0;
    $125 = ($124|0)==(0);
    if (!($125)) {
     $130 = HEAP32[$21>>2]|0;
     $131 = HEAP32[$17>>2]|0;
     $132 = (($131) + ($130))|0;
     HEAP32[$17>>2] = $132;
     $133 = HEAP32[$17>>2]|0;
     $134 = (($133) + 1)|0;
     HEAP32[$17>>2] = $134;
     $135 = (14630 + ($133)|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     HEAP32[$19>>2] = $137;
     $138 = HEAP32[$8>>2]|0;
     $139 = HEAP32[$22>>2]|0;
     $140 = (_stbi__extend_receive($138,$139)|0);
     $141 = HEAP32[$19>>2]|0;
     $142 = HEAP32[$14>>2]|0;
     $143 = (($142) + ($141)|0);
     $144 = HEAP8[$143>>0]|0;
     $145 = $144&255;
     $146 = Math_imul($140, $145)|0;
     $147 = $146&65535;
     $148 = HEAP32[$19>>2]|0;
     $149 = HEAP32[$9>>2]|0;
     $150 = (($149) + ($148<<1)|0);
     HEAP16[$150>>1] = $147;
     break;
    }
    $126 = HEAP32[$23>>2]|0;
    $127 = ($126|0)!=(240);
    if ($127) {
     label = 19;
     break L11;
    }
    $128 = HEAP32[$17>>2]|0;
    $129 = (($128) + 16)|0;
    HEAP32[$17>>2] = $129;
   }
  } while(0);
  $151 = HEAP32[$17>>2]|0;
  $152 = ($151|0)<(64);
  if (!($152)) {
   label = 19;
   break;
  }
 }
 if ((label|0) == 13) {
  $119 = (_stbi__err(21353)|0);
  HEAP32[$7>>2] = $119;
  $153 = HEAP32[$7>>2]|0;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 19) {
  HEAP32[$7>>2] = 1;
  $153 = HEAP32[$7>>2]|0;
  STACKTOP = sp;return ($153|0);
 }
 return (0)|0;
}
function _stbi__grow_buffer_unsafe($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$1>>2] = $0;
 while(1) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ((($4)) + 18120|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0);
  if ($7) {
   $12 = 0;
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = (_stbi__get8($9)|0);
   $11 = $10&255;
   $12 = $11;
  }
  HEAP32[$2>>2] = $12;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($13|0)==(255);
  if ($14) {
   $15 = HEAP32[$1>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = (_stbi__get8($16)|0);
   $18 = $17&255;
   HEAP32[$3>>2] = $18;
   $19 = HEAP32[$3>>2]|0;
   $20 = ($19|0)!=(0);
   if ($20) {
    break;
   }
  }
  $27 = HEAP32[$2>>2]|0;
  $28 = HEAP32[$1>>2]|0;
  $29 = ((($28)) + 18112|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (24 - ($30))|0;
  $32 = $27 << $31;
  $33 = HEAP32[$1>>2]|0;
  $34 = ((($33)) + 18108|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | $32;
  HEAP32[$34>>2] = $36;
  $37 = HEAP32[$1>>2]|0;
  $38 = ((($37)) + 18112|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 8)|0;
  HEAP32[$38>>2] = $40;
  $41 = HEAP32[$1>>2]|0;
  $42 = ((($41)) + 18112|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)<=(24);
  if (!($44)) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[$3>>2]|0;
 $22 = $21&255;
 $23 = HEAP32[$1>>2]|0;
 $24 = ((($23)) + 18116|0);
 HEAP8[$24>>0] = $22;
 $25 = HEAP32[$1>>2]|0;
 $26 = ((($25)) + 18120|0);
 HEAP32[$26>>2] = 1;
 STACKTOP = sp;return;
}
function _stbi__jpeg_decode_block_prog_dc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $12 = HEAP32[$5>>2]|0;
 $13 = ((($12)) + 18132|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = (_stbi__err(21833)|0);
  HEAP32[$4>>2] = $16;
  $71 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($71|0);
 }
 $17 = HEAP32[$5>>2]|0;
 $18 = ((($17)) + 18112|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<(16);
 if ($20) {
  $21 = HEAP32[$5>>2]|0;
  _stbi__grow_buffer_unsafe($21);
 }
 $22 = HEAP32[$5>>2]|0;
 $23 = ((($22)) + 18136|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = HEAP32[$6>>2]|0;
  dest=$26; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
  $27 = HEAP32[$5>>2]|0;
  $28 = HEAP32[$7>>2]|0;
  $29 = (_stbi__jpeg_huff_decode($27,$28)|0);
  HEAP32[$11>>2] = $29;
  $30 = HEAP32[$11>>2]|0;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = HEAP32[$5>>2]|0;
   $33 = HEAP32[$11>>2]|0;
   $34 = (_stbi__extend_receive($32,$33)|0);
   $35 = $34;
  } else {
   $35 = 0;
  }
  HEAP32[$9>>2] = $35;
  $36 = HEAP32[$8>>2]|0;
  $37 = HEAP32[$5>>2]|0;
  $38 = ((($37)) + 17820|0);
  $39 = (($38) + (($36*72)|0)|0);
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$9>>2]|0;
  $43 = (($41) + ($42))|0;
  HEAP32[$10>>2] = $43;
  $44 = HEAP32[$10>>2]|0;
  $45 = HEAP32[$8>>2]|0;
  $46 = HEAP32[$5>>2]|0;
  $47 = ((($46)) + 17820|0);
  $48 = (($47) + (($45*72)|0)|0);
  $49 = ((($48)) + 24|0);
  HEAP32[$49>>2] = $44;
  $50 = HEAP32[$10>>2]|0;
  $51 = HEAP32[$5>>2]|0;
  $52 = ((($51)) + 18140|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $50 << $53;
  $55 = $54&65535;
  $56 = HEAP32[$6>>2]|0;
  HEAP16[$56>>1] = $55;
 } else {
  $57 = HEAP32[$5>>2]|0;
  $58 = (_stbi__jpeg_get_bit($57)|0);
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = HEAP32[$5>>2]|0;
   $61 = ((($60)) + 18140|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = 1 << $62;
   $64 = $63&65535;
   $65 = $64 << 16 >> 16;
   $66 = HEAP32[$6>>2]|0;
   $67 = HEAP16[$66>>1]|0;
   $68 = $67 << 16 >> 16;
   $69 = (($68) + ($65))|0;
   $70 = $69&65535;
   HEAP16[$66>>1] = $70;
  }
 }
 HEAP32[$4>>2] = 1;
 $71 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($71|0);
}
function _stbi__jpeg_decode_block_prog_ac($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 64|0;
 $5 = sp + 60|0;
 $6 = sp + 56|0;
 $7 = sp + 52|0;
 $8 = sp + 48|0;
 $9 = sp + 44|0;
 $10 = sp + 40|0;
 $11 = sp + 36|0;
 $12 = sp + 32|0;
 $13 = sp + 28|0;
 $14 = sp + 24|0;
 $15 = sp + 20|0;
 $16 = sp + 68|0;
 $17 = sp + 16|0;
 $18 = sp + 12|0;
 $19 = sp + 8|0;
 $20 = sp + 4|0;
 $21 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $22 = HEAP32[$5>>2]|0;
 $23 = ((($22)) + 18128|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = (_stbi__err(21833)|0);
  HEAP32[$4>>2] = $26;
  $288 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($288|0);
 }
 $27 = HEAP32[$5>>2]|0;
 $28 = ((($27)) + 18136|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 $31 = HEAP32[$5>>2]|0;
 $32 = ((($31)) + 18140|0);
 $33 = HEAP32[$32>>2]|0;
 L5: do {
  if ($30) {
   HEAP32[$10>>2] = $33;
   $34 = HEAP32[$5>>2]|0;
   $35 = ((($34)) + 18144|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0);
   $38 = HEAP32[$5>>2]|0;
   if ($37) {
    $39 = ((($38)) + 18144|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$39>>2] = $41;
    HEAP32[$4>>2] = 1;
    $288 = HEAP32[$4>>2]|0;
    STACKTOP = sp;return ($288|0);
   }
   $42 = ((($38)) + 18128|0);
   $43 = HEAP32[$42>>2]|0;
   HEAP32[$9>>2] = $43;
   L11: while(1) {
    $44 = HEAP32[$5>>2]|0;
    $45 = ((($44)) + 18112|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)<(16);
    if ($47) {
     $48 = HEAP32[$5>>2]|0;
     _stbi__grow_buffer_unsafe($48);
    }
    $49 = HEAP32[$5>>2]|0;
    $50 = ((($49)) + 18108|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $51 >>> 23;
    $53 = $52 & 511;
    HEAP32[$12>>2] = $53;
    $54 = HEAP32[$12>>2]|0;
    $55 = HEAP32[$8>>2]|0;
    $56 = (($55) + ($54<<1)|0);
    $57 = HEAP16[$56>>1]|0;
    $58 = $57 << 16 >> 16;
    HEAP32[$13>>2] = $58;
    $59 = HEAP32[$13>>2]|0;
    $60 = ($59|0)!=(0);
    do {
     if ($60) {
      $61 = HEAP32[$13>>2]|0;
      $62 = $61 >> 4;
      $63 = $62 & 15;
      $64 = HEAP32[$9>>2]|0;
      $65 = (($64) + ($63))|0;
      HEAP32[$9>>2] = $65;
      $66 = HEAP32[$13>>2]|0;
      $67 = $66 & 15;
      HEAP32[$14>>2] = $67;
      $68 = HEAP32[$14>>2]|0;
      $69 = HEAP32[$5>>2]|0;
      $70 = ((($69)) + 18108|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = $71 << $68;
      HEAP32[$70>>2] = $72;
      $73 = HEAP32[$14>>2]|0;
      $74 = HEAP32[$5>>2]|0;
      $75 = ((($74)) + 18112|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($76) - ($73))|0;
      HEAP32[$75>>2] = $77;
      $78 = HEAP32[$9>>2]|0;
      $79 = (($78) + 1)|0;
      HEAP32[$9>>2] = $79;
      $80 = (14630 + ($78)|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = $81&255;
      HEAP32[$11>>2] = $82;
      $83 = HEAP32[$13>>2]|0;
      $84 = $83 >> 8;
      $85 = HEAP32[$10>>2]|0;
      $86 = $84 << $85;
      $87 = $86&65535;
      $88 = HEAP32[$11>>2]|0;
      $89 = HEAP32[$6>>2]|0;
      $90 = (($89) + ($88<<1)|0);
      HEAP16[$90>>1] = $87;
     } else {
      $91 = HEAP32[$5>>2]|0;
      $92 = HEAP32[$7>>2]|0;
      $93 = (_stbi__jpeg_huff_decode($91,$92)|0);
      HEAP32[$15>>2] = $93;
      $94 = HEAP32[$15>>2]|0;
      $95 = ($94|0)<(0);
      if ($95) {
       label = 12;
       break L11;
      }
      $97 = HEAP32[$15>>2]|0;
      $98 = $97 & 15;
      HEAP32[$14>>2] = $98;
      $99 = HEAP32[$15>>2]|0;
      $100 = $99 >> 4;
      HEAP32[$13>>2] = $100;
      $101 = HEAP32[$14>>2]|0;
      $102 = ($101|0)==(0);
      $103 = HEAP32[$13>>2]|0;
      if (!($102)) {
       $124 = HEAP32[$9>>2]|0;
       $125 = (($124) + ($103))|0;
       HEAP32[$9>>2] = $125;
       $126 = HEAP32[$9>>2]|0;
       $127 = (($126) + 1)|0;
       HEAP32[$9>>2] = $127;
       $128 = (14630 + ($126)|0);
       $129 = HEAP8[$128>>0]|0;
       $130 = $129&255;
       HEAP32[$11>>2] = $130;
       $131 = HEAP32[$5>>2]|0;
       $132 = HEAP32[$14>>2]|0;
       $133 = (_stbi__extend_receive($131,$132)|0);
       $134 = HEAP32[$10>>2]|0;
       $135 = $133 << $134;
       $136 = $135&65535;
       $137 = HEAP32[$11>>2]|0;
       $138 = HEAP32[$6>>2]|0;
       $139 = (($138) + ($137<<1)|0);
       HEAP16[$139>>1] = $136;
       break;
      }
      $104 = ($103|0)<(15);
      if ($104) {
       break L11;
      }
      $122 = HEAP32[$9>>2]|0;
      $123 = (($122) + 16)|0;
      HEAP32[$9>>2] = $123;
     }
    } while(0);
    $140 = HEAP32[$9>>2]|0;
    $141 = HEAP32[$5>>2]|0;
    $142 = ((($141)) + 18132|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($140|0)<=($143|0);
    if (!($144)) {
     break L5;
    }
   }
   if ((label|0) == 12) {
    $96 = (_stbi__err(21353)|0);
    HEAP32[$4>>2] = $96;
    $288 = HEAP32[$4>>2]|0;
    STACKTOP = sp;return ($288|0);
   }
   $105 = HEAP32[$13>>2]|0;
   $106 = 1 << $105;
   $107 = HEAP32[$5>>2]|0;
   $108 = ((($107)) + 18144|0);
   HEAP32[$108>>2] = $106;
   $109 = HEAP32[$13>>2]|0;
   $110 = ($109|0)!=(0);
   if ($110) {
    $111 = HEAP32[$5>>2]|0;
    $112 = HEAP32[$13>>2]|0;
    $113 = (_stbi__jpeg_get_bits($111,$112)|0);
    $114 = HEAP32[$5>>2]|0;
    $115 = ((($114)) + 18144|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($116) + ($113))|0;
    HEAP32[$115>>2] = $117;
   }
   $118 = HEAP32[$5>>2]|0;
   $119 = ((($118)) + 18144|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($120) + -1)|0;
   HEAP32[$119>>2] = $121;
  } else {
   $145 = 1 << $33;
   $146 = $145&65535;
   HEAP16[$16>>1] = $146;
   $147 = HEAP32[$5>>2]|0;
   $148 = ((($147)) + 18144|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ($149|0)!=(0);
   $151 = HEAP32[$5>>2]|0;
   if ($150) {
    $152 = ((($151)) + 18144|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($153) + -1)|0;
    HEAP32[$152>>2] = $154;
    $155 = HEAP32[$5>>2]|0;
    $156 = ((($155)) + 18128|0);
    $157 = HEAP32[$156>>2]|0;
    HEAP32[$9>>2] = $157;
    while(1) {
     $158 = HEAP32[$9>>2]|0;
     $159 = HEAP32[$5>>2]|0;
     $160 = ((($159)) + 18132|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($158|0)<=($161|0);
     if (!($162)) {
      break L5;
     }
     $163 = HEAP32[$9>>2]|0;
     $164 = (14630 + ($163)|0);
     $165 = HEAP8[$164>>0]|0;
     $166 = $165&255;
     $167 = HEAP32[$6>>2]|0;
     $168 = (($167) + ($166<<1)|0);
     HEAP32[$17>>2] = $168;
     $169 = HEAP32[$17>>2]|0;
     $170 = HEAP16[$169>>1]|0;
     $171 = $170 << 16 >> 16;
     $172 = ($171|0)!=(0);
     do {
      if ($172) {
       $173 = HEAP32[$5>>2]|0;
       $174 = (_stbi__jpeg_get_bit($173)|0);
       $175 = ($174|0)!=(0);
       if ($175) {
        $176 = HEAP32[$17>>2]|0;
        $177 = HEAP16[$176>>1]|0;
        $178 = $177 << 16 >> 16;
        $179 = HEAP16[$16>>1]|0;
        $180 = $179 << 16 >> 16;
        $181 = $178 & $180;
        $182 = ($181|0)==(0);
        if ($182) {
         $183 = HEAP32[$17>>2]|0;
         $184 = HEAP16[$183>>1]|0;
         $185 = $184 << 16 >> 16;
         $186 = ($185|0)>(0);
         $187 = HEAP16[$16>>1]|0;
         $188 = $187 << 16 >> 16;
         $189 = HEAP32[$17>>2]|0;
         $190 = HEAP16[$189>>1]|0;
         $191 = $190 << 16 >> 16;
         if ($186) {
          $192 = (($191) + ($188))|0;
          $193 = $192&65535;
          HEAP16[$189>>1] = $193;
          break;
         } else {
          $194 = (($191) - ($188))|0;
          $195 = $194&65535;
          HEAP16[$189>>1] = $195;
          break;
         }
        }
       }
      }
     } while(0);
     $196 = HEAP32[$9>>2]|0;
     $197 = (($196) + 1)|0;
     HEAP32[$9>>2] = $197;
    }
   }
   $198 = ((($151)) + 18128|0);
   $199 = HEAP32[$198>>2]|0;
   HEAP32[$9>>2] = $199;
   L47: while(1) {
    $200 = HEAP32[$5>>2]|0;
    $201 = HEAP32[$7>>2]|0;
    $202 = (_stbi__jpeg_huff_decode($200,$201)|0);
    HEAP32[$20>>2] = $202;
    $203 = HEAP32[$20>>2]|0;
    $204 = ($203|0)<(0);
    if ($204) {
     label = 33;
     break;
    }
    $206 = HEAP32[$20>>2]|0;
    $207 = $206 & 15;
    HEAP32[$19>>2] = $207;
    $208 = HEAP32[$20>>2]|0;
    $209 = $208 >> 4;
    HEAP32[$18>>2] = $209;
    $210 = HEAP32[$19>>2]|0;
    $211 = ($210|0)==(0);
    do {
     if ($211) {
      $212 = HEAP32[$18>>2]|0;
      $213 = ($212|0)<(15);
      if ($213) {
       $214 = HEAP32[$18>>2]|0;
       $215 = 1 << $214;
       $216 = (($215) - 1)|0;
       $217 = HEAP32[$5>>2]|0;
       $218 = ((($217)) + 18144|0);
       HEAP32[$218>>2] = $216;
       $219 = HEAP32[$18>>2]|0;
       $220 = ($219|0)!=(0);
       if ($220) {
        $221 = HEAP32[$5>>2]|0;
        $222 = HEAP32[$18>>2]|0;
        $223 = (_stbi__jpeg_get_bits($221,$222)|0);
        $224 = HEAP32[$5>>2]|0;
        $225 = ((($224)) + 18144|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = (($226) + ($223))|0;
        HEAP32[$225>>2] = $227;
       }
       HEAP32[$18>>2] = 64;
      }
     } else {
      $228 = HEAP32[$19>>2]|0;
      $229 = ($228|0)!=(1);
      if ($229) {
       label = 40;
       break L47;
      }
      $231 = HEAP32[$5>>2]|0;
      $232 = (_stbi__jpeg_get_bit($231)|0);
      $233 = ($232|0)!=(0);
      $234 = HEAP16[$16>>1]|0;
      $235 = $234 << 16 >> 16;
      if ($233) {
       HEAP32[$19>>2] = $235;
       break;
      } else {
       $236 = (0 - ($235))|0;
       HEAP32[$19>>2] = $236;
       break;
      }
     }
    } while(0);
    while(1) {
     $237 = HEAP32[$9>>2]|0;
     $238 = HEAP32[$5>>2]|0;
     $239 = ((($238)) + 18132|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = ($237|0)<=($240|0);
     if (!($241)) {
      break;
     }
     $242 = HEAP32[$9>>2]|0;
     $243 = (($242) + 1)|0;
     HEAP32[$9>>2] = $243;
     $244 = (14630 + ($242)|0);
     $245 = HEAP8[$244>>0]|0;
     $246 = $245&255;
     $247 = HEAP32[$6>>2]|0;
     $248 = (($247) + ($246<<1)|0);
     HEAP32[$21>>2] = $248;
     $249 = HEAP32[$21>>2]|0;
     $250 = HEAP16[$249>>1]|0;
     $251 = $250 << 16 >> 16;
     $252 = ($251|0)!=(0);
     if (!($252)) {
      $276 = HEAP32[$18>>2]|0;
      $277 = ($276|0)==(0);
      if ($277) {
       label = 52;
       break;
      }
      $281 = HEAP32[$18>>2]|0;
      $282 = (($281) + -1)|0;
      HEAP32[$18>>2] = $282;
      continue;
     }
     $253 = HEAP32[$5>>2]|0;
     $254 = (_stbi__jpeg_get_bit($253)|0);
     $255 = ($254|0)!=(0);
     if (!($255)) {
      continue;
     }
     $256 = HEAP32[$21>>2]|0;
     $257 = HEAP16[$256>>1]|0;
     $258 = $257 << 16 >> 16;
     $259 = HEAP16[$16>>1]|0;
     $260 = $259 << 16 >> 16;
     $261 = $258 & $260;
     $262 = ($261|0)==(0);
     if (!($262)) {
      continue;
     }
     $263 = HEAP32[$21>>2]|0;
     $264 = HEAP16[$263>>1]|0;
     $265 = $264 << 16 >> 16;
     $266 = ($265|0)>(0);
     $267 = HEAP16[$16>>1]|0;
     $268 = $267 << 16 >> 16;
     $269 = HEAP32[$21>>2]|0;
     $270 = HEAP16[$269>>1]|0;
     $271 = $270 << 16 >> 16;
     if ($266) {
      $272 = (($271) + ($268))|0;
      $273 = $272&65535;
      HEAP16[$269>>1] = $273;
      continue;
     } else {
      $274 = (($271) - ($268))|0;
      $275 = $274&65535;
      HEAP16[$269>>1] = $275;
      continue;
     }
    }
    if ((label|0) == 52) {
     label = 0;
     $278 = HEAP32[$19>>2]|0;
     $279 = $278&65535;
     $280 = HEAP32[$21>>2]|0;
     HEAP16[$280>>1] = $279;
    }
    $283 = HEAP32[$9>>2]|0;
    $284 = HEAP32[$5>>2]|0;
    $285 = ((($284)) + 18132|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = ($283|0)<=($286|0);
    if (!($287)) {
     break L5;
    }
   }
   if ((label|0) == 33) {
    $205 = (_stbi__err(21353)|0);
    HEAP32[$4>>2] = $205;
    $288 = HEAP32[$4>>2]|0;
    STACKTOP = sp;return ($288|0);
   }
   else if ((label|0) == 40) {
    $230 = (_stbi__err(21353)|0);
    HEAP32[$4>>2] = $230;
    $288 = HEAP32[$4>>2]|0;
    STACKTOP = sp;return ($288|0);
   }
  }
 } while(0);
 HEAP32[$4>>2] = 1;
 $288 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($288|0);
}
function _stbi__jpeg_huff_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $9 = HEAP32[$3>>2]|0;
 $10 = ((($9)) + 18112|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<(16);
 if ($12) {
  $13 = HEAP32[$3>>2]|0;
  _stbi__grow_buffer_unsafe($13);
 }
 $14 = HEAP32[$3>>2]|0;
 $15 = ((($14)) + 18108|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 23;
 $18 = $17 & 511;
 HEAP32[$6>>2] = $18;
 $19 = HEAP32[$6>>2]|0;
 $20 = HEAP32[$4>>2]|0;
 $21 = (($20) + ($19)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 HEAP32[$7>>2] = $23;
 $24 = HEAP32[$7>>2]|0;
 $25 = ($24|0)<(255);
 if ($25) {
  $26 = HEAP32[$7>>2]|0;
  $27 = HEAP32[$4>>2]|0;
  $28 = ((($27)) + 1280|0);
  $29 = (($28) + ($26)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  HEAP32[$8>>2] = $31;
  $32 = HEAP32[$8>>2]|0;
  $33 = HEAP32[$3>>2]|0;
  $34 = ((($33)) + 18112|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32|0)>($35|0);
  if ($36) {
   HEAP32[$2>>2] = -1;
   $135 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($135|0);
  } else {
   $37 = HEAP32[$8>>2]|0;
   $38 = HEAP32[$3>>2]|0;
   $39 = ((($38)) + 18108|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 << $37;
   HEAP32[$39>>2] = $41;
   $42 = HEAP32[$8>>2]|0;
   $43 = HEAP32[$3>>2]|0;
   $44 = ((($43)) + 18112|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) - ($42))|0;
   HEAP32[$44>>2] = $46;
   $47 = HEAP32[$7>>2]|0;
   $48 = HEAP32[$4>>2]|0;
   $49 = ((($48)) + 1024|0);
   $50 = (($49) + ($47)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   HEAP32[$2>>2] = $52;
   $135 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($135|0);
  }
 }
 $53 = HEAP32[$3>>2]|0;
 $54 = ((($53)) + 18108|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 >>> 16;
 HEAP32[$5>>2] = $56;
 HEAP32[$7>>2] = 10;
 while(1) {
  $57 = HEAP32[$5>>2]|0;
  $58 = HEAP32[$7>>2]|0;
  $59 = HEAP32[$4>>2]|0;
  $60 = ((($59)) + 1540|0);
  $61 = (($60) + ($58<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($57>>>0)<($62>>>0);
  $64 = HEAP32[$7>>2]|0;
  if ($63) {
   break;
  }
  $65 = (($64) + 1)|0;
  HEAP32[$7>>2] = $65;
 }
 $66 = ($64|0)==(17);
 if ($66) {
  $67 = HEAP32[$3>>2]|0;
  $68 = ((($67)) + 18112|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) - 16)|0;
  HEAP32[$68>>2] = $70;
  HEAP32[$2>>2] = -1;
  $135 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($135|0);
 }
 $71 = HEAP32[$7>>2]|0;
 $72 = HEAP32[$3>>2]|0;
 $73 = ((($72)) + 18112|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($71|0)>($74|0);
 if ($75) {
  HEAP32[$2>>2] = -1;
  $135 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($135|0);
 }
 $76 = HEAP32[$3>>2]|0;
 $77 = ((($76)) + 18108|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = HEAP32[$7>>2]|0;
 $80 = (32 - ($79))|0;
 $81 = $78 >>> $80;
 $82 = HEAP32[$7>>2]|0;
 $83 = (5460 + ($82<<2)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $81 & $84;
 $86 = HEAP32[$7>>2]|0;
 $87 = HEAP32[$4>>2]|0;
 $88 = ((($87)) + 1612|0);
 $89 = (($88) + ($86<<2)|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($85) + ($90))|0;
 HEAP32[$6>>2] = $91;
 $92 = HEAP32[$3>>2]|0;
 $93 = ((($92)) + 18108|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[$6>>2]|0;
 $96 = HEAP32[$4>>2]|0;
 $97 = ((($96)) + 1280|0);
 $98 = (($97) + ($95)|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&255;
 $101 = (32 - ($100))|0;
 $102 = $94 >>> $101;
 $103 = HEAP32[$6>>2]|0;
 $104 = HEAP32[$4>>2]|0;
 $105 = ((($104)) + 1280|0);
 $106 = (($105) + ($103)|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 $109 = (5460 + ($108<<2)|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $102 & $110;
 $112 = HEAP32[$6>>2]|0;
 $113 = HEAP32[$4>>2]|0;
 $114 = ((($113)) + 512|0);
 $115 = (($114) + ($112<<1)|0);
 $116 = HEAP16[$115>>1]|0;
 $117 = $116&65535;
 $118 = ($111|0)==($117|0);
 if (!($118)) {
  ___assert_fail((21939|0),(20646|0),1659,(22021|0));
  // unreachable;
 }
 $119 = HEAP32[$7>>2]|0;
 $120 = HEAP32[$3>>2]|0;
 $121 = ((($120)) + 18112|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($122) - ($119))|0;
 HEAP32[$121>>2] = $123;
 $124 = HEAP32[$7>>2]|0;
 $125 = HEAP32[$3>>2]|0;
 $126 = ((($125)) + 18108|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = $127 << $124;
 HEAP32[$126>>2] = $128;
 $129 = HEAP32[$6>>2]|0;
 $130 = HEAP32[$4>>2]|0;
 $131 = ((($130)) + 1024|0);
 $132 = (($131) + ($129)|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133&255;
 HEAP32[$2>>2] = $134;
 $135 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($135|0);
}
function _stbi__jpeg_get_bits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($5)) + 18112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($7|0)<($8|0);
 if ($9) {
  $10 = HEAP32[$2>>2]|0;
  _stbi__grow_buffer_unsafe($10);
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($11)) + 18108|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$3>>2]|0;
 $15 = $13 << $14;
 $16 = HEAP32[$2>>2]|0;
 $17 = ((($16)) + 18108|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$3>>2]|0;
 $20 = (32 - ($19))|0;
 $21 = $18 >>> $20;
 $22 = $15 | $21;
 HEAP32[$4>>2] = $22;
 $23 = HEAP32[$4>>2]|0;
 $24 = HEAP32[$3>>2]|0;
 $25 = (5460 + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 ^ -1;
 $28 = $23 & $27;
 $29 = HEAP32[$2>>2]|0;
 $30 = ((($29)) + 18108|0);
 HEAP32[$30>>2] = $28;
 $31 = HEAP32[$3>>2]|0;
 $32 = (5460 + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$4>>2]|0;
 $35 = $34 & $33;
 HEAP32[$4>>2] = $35;
 $36 = HEAP32[$3>>2]|0;
 $37 = HEAP32[$2>>2]|0;
 $38 = ((($37)) + 18112|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) - ($36))|0;
 HEAP32[$38>>2] = $40;
 $41 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function _stbi__extend_receive($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($6)) + 18112|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$3>>2]|0;
 $10 = ($8|0)<($9|0);
 if ($10) {
  $11 = HEAP32[$2>>2]|0;
  _stbi__grow_buffer_unsafe($11);
 }
 $12 = HEAP32[$2>>2]|0;
 $13 = ((($12)) + 18108|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 >> 31;
 HEAP32[$5>>2] = $15;
 $16 = HEAP32[$2>>2]|0;
 $17 = ((($16)) + 18108|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$3>>2]|0;
 $20 = $18 << $19;
 $21 = HEAP32[$2>>2]|0;
 $22 = ((($21)) + 18108|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$3>>2]|0;
 $25 = (32 - ($24))|0;
 $26 = $23 >>> $25;
 $27 = $20 | $26;
 HEAP32[$4>>2] = $27;
 $28 = HEAP32[$3>>2]|0;
 $29 = ($28|0)>=(0);
 $30 = HEAP32[$3>>2]|0;
 $31 = ($30|0)<(17);
 $or$cond = $29 & $31;
 if ($or$cond) {
  $32 = HEAP32[$4>>2]|0;
  $33 = HEAP32[$3>>2]|0;
  $34 = (5460 + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 ^ -1;
  $37 = $32 & $36;
  $38 = HEAP32[$2>>2]|0;
  $39 = ((($38)) + 18108|0);
  HEAP32[$39>>2] = $37;
  $40 = HEAP32[$3>>2]|0;
  $41 = (5460 + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$4>>2]|0;
  $44 = $43 & $42;
  HEAP32[$4>>2] = $44;
  $45 = HEAP32[$3>>2]|0;
  $46 = HEAP32[$2>>2]|0;
  $47 = ((($46)) + 18112|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) - ($45))|0;
  HEAP32[$47>>2] = $49;
  $50 = HEAP32[$4>>2]|0;
  $51 = HEAP32[$3>>2]|0;
  $52 = (5396 + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$5>>2]|0;
  $55 = $54 ^ -1;
  $56 = $53 & $55;
  $57 = (($50) + ($56))|0;
  STACKTOP = sp;return ($57|0);
 } else {
  ___assert_fail((21855|0),(20646|0),1680,(21918|0));
  // unreachable;
 }
 return (0)|0;
}
function _stbi__jpeg_get_bit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 18112|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(1);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  _stbi__grow_buffer_unsafe($7);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 18108|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$2>>2] = $10;
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 18108|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 1;
 HEAP32[$12>>2] = $14;
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 18112|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -1)|0;
 HEAP32[$16>>2] = $18;
 $19 = HEAP32[$2>>2]|0;
 $20 = $19 & -2147483648;
 STACKTOP = sp;return ($20|0);
}
function _stbi__process_frame_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 $12 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 $13 = HEAP32[$3>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$5>>2] = $14;
 HEAP32[$10>>2] = 1;
 HEAP32[$11>>2] = 1;
 $15 = HEAP32[$5>>2]|0;
 $16 = (_stbi__get16be($15)|0);
 HEAP32[$6>>2] = $16;
 $17 = HEAP32[$6>>2]|0;
 $18 = ($17|0)<(11);
 if ($18) {
  $19 = (_stbi__err(22126)|0);
  HEAP32[$2>>2] = $19;
  $490 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($490|0);
 }
 $20 = HEAP32[$5>>2]|0;
 $21 = (_stbi__get8($20)|0);
 $22 = $21&255;
 HEAP32[$7>>2] = $22;
 $23 = HEAP32[$7>>2]|0;
 $24 = ($23|0)!=(8);
 if ($24) {
  $25 = (_stbi__err(22138)|0);
  HEAP32[$2>>2] = $25;
  $490 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($490|0);
 }
 $26 = HEAP32[$5>>2]|0;
 $27 = (_stbi__get16be($26)|0);
 $28 = HEAP32[$5>>2]|0;
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = $27;
 $30 = HEAP32[$5>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = (_stbi__err(22149)|0);
  HEAP32[$2>>2] = $34;
  $490 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($490|0);
 }
 $35 = HEAP32[$5>>2]|0;
 $36 = (_stbi__get16be($35)|0);
 $37 = HEAP32[$5>>2]|0;
 HEAP32[$37>>2] = $36;
 $38 = HEAP32[$5>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = (_stbi__err(22166)|0);
  HEAP32[$2>>2] = $41;
  $490 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($490|0);
 }
 $42 = HEAP32[$5>>2]|0;
 $43 = (_stbi__get8($42)|0);
 $44 = $43&255;
 HEAP32[$12>>2] = $44;
 $45 = HEAP32[$12>>2]|0;
 $46 = ($45|0)!=(3);
 $47 = HEAP32[$12>>2]|0;
 $48 = ($47|0)!=(1);
 $or$cond = $46 & $48;
 if ($or$cond) {
  $49 = (_stbi__err(22174)|0);
  HEAP32[$2>>2] = $49;
  $490 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($490|0);
 }
 $50 = HEAP32[$12>>2]|0;
 $51 = HEAP32[$5>>2]|0;
 $52 = ((($51)) + 8|0);
 HEAP32[$52>>2] = $50;
 HEAP32[$8>>2] = 0;
 while(1) {
  $53 = HEAP32[$8>>2]|0;
  $54 = HEAP32[$12>>2]|0;
  $55 = ($53|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = HEAP32[$8>>2]|0;
  $57 = HEAP32[$3>>2]|0;
  $58 = ((($57)) + 17820|0);
  $59 = (($58) + (($56*72)|0)|0);
  $60 = ((($59)) + 44|0);
  HEAP32[$60>>2] = 0;
  $61 = HEAP32[$8>>2]|0;
  $62 = HEAP32[$3>>2]|0;
  $63 = ((($62)) + 17820|0);
  $64 = (($63) + (($61*72)|0)|0);
  $65 = ((($64)) + 56|0);
  HEAP32[$65>>2] = 0;
  $66 = HEAP32[$8>>2]|0;
  $67 = (($66) + 1)|0;
  HEAP32[$8>>2] = $67;
 }
 $68 = HEAP32[$6>>2]|0;
 $69 = HEAP32[$5>>2]|0;
 $70 = ((($69)) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71*3)|0;
 $73 = (8 + ($72))|0;
 $74 = ($68|0)!=($73|0);
 if ($74) {
  $75 = (_stbi__err(22126)|0);
  HEAP32[$2>>2] = $75;
  $490 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($490|0);
 }
 $76 = HEAP32[$3>>2]|0;
 $77 = ((($76)) + 18148|0);
 HEAP32[$77>>2] = 0;
 HEAP32[$8>>2] = 0;
 while(1) {
  $78 = HEAP32[$8>>2]|0;
  $79 = HEAP32[$5>>2]|0;
  $80 = ((($79)) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($78|0)<($81|0);
  if (!($82)) {
   label = 32;
   break;
  }
  $83 = HEAP32[$5>>2]|0;
  $84 = (_stbi__get8($83)|0);
  $85 = $84&255;
  $86 = HEAP32[$8>>2]|0;
  $87 = HEAP32[$3>>2]|0;
  $88 = ((($87)) + 17820|0);
  $89 = (($88) + (($86*72)|0)|0);
  HEAP32[$89>>2] = $85;
  $90 = HEAP32[$8>>2]|0;
  $91 = HEAP32[$3>>2]|0;
  $92 = ((($91)) + 17820|0);
  $93 = (($92) + (($90*72)|0)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP32[$8>>2]|0;
  $96 = (($95) + 1)|0;
  $97 = ($94|0)!=($96|0);
  if ($97) {
   $98 = HEAP32[$8>>2]|0;
   $99 = HEAP32[$3>>2]|0;
   $100 = ((($99)) + 17820|0);
   $101 = (($100) + (($98*72)|0)|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = HEAP32[$8>>2]|0;
   $104 = ($102|0)!=($103|0);
   if ($104) {
    $105 = HEAP32[$8>>2]|0;
    $106 = HEAP32[$3>>2]|0;
    $107 = ((($106)) + 17820|0);
    $108 = (($107) + (($105*72)|0)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = HEAP32[$8>>2]|0;
    $111 = (14627 + ($110)|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = $112&255;
    $114 = ($109|0)!=($113|0);
    if ($114) {
     label = 21;
     break;
    }
    $116 = HEAP32[$3>>2]|0;
    $117 = ((($116)) + 18148|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + 1)|0;
    HEAP32[$117>>2] = $119;
   }
  }
  $120 = HEAP32[$5>>2]|0;
  $121 = (_stbi__get8($120)|0);
  $122 = $121&255;
  HEAP32[$9>>2] = $122;
  $123 = HEAP32[$9>>2]|0;
  $124 = $123 >> 4;
  $125 = HEAP32[$8>>2]|0;
  $126 = HEAP32[$3>>2]|0;
  $127 = ((($126)) + 17820|0);
  $128 = (($127) + (($125*72)|0)|0);
  $129 = ((($128)) + 4|0);
  HEAP32[$129>>2] = $124;
  $130 = HEAP32[$8>>2]|0;
  $131 = HEAP32[$3>>2]|0;
  $132 = ((($131)) + 17820|0);
  $133 = (($132) + (($130*72)|0)|0);
  $134 = ((($133)) + 4|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($135|0)!=(0);
  if (!($136)) {
   label = 25;
   break;
  }
  $137 = HEAP32[$8>>2]|0;
  $138 = HEAP32[$3>>2]|0;
  $139 = ((($138)) + 17820|0);
  $140 = (($139) + (($137*72)|0)|0);
  $141 = ((($140)) + 4|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = ($142|0)>(4);
  if ($143) {
   label = 25;
   break;
  }
  $145 = HEAP32[$9>>2]|0;
  $146 = $145 & 15;
  $147 = HEAP32[$8>>2]|0;
  $148 = HEAP32[$3>>2]|0;
  $149 = ((($148)) + 17820|0);
  $150 = (($149) + (($147*72)|0)|0);
  $151 = ((($150)) + 8|0);
  HEAP32[$151>>2] = $146;
  $152 = HEAP32[$8>>2]|0;
  $153 = HEAP32[$3>>2]|0;
  $154 = ((($153)) + 17820|0);
  $155 = (($154) + (($152*72)|0)|0);
  $156 = ((($155)) + 8|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($157|0)!=(0);
  if (!($158)) {
   label = 28;
   break;
  }
  $159 = HEAP32[$8>>2]|0;
  $160 = HEAP32[$3>>2]|0;
  $161 = ((($160)) + 17820|0);
  $162 = (($161) + (($159*72)|0)|0);
  $163 = ((($162)) + 8|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ($164|0)>(4);
  if ($165) {
   label = 28;
   break;
  }
  $167 = HEAP32[$5>>2]|0;
  $168 = (_stbi__get8($167)|0);
  $169 = $168&255;
  $170 = HEAP32[$8>>2]|0;
  $171 = HEAP32[$3>>2]|0;
  $172 = ((($171)) + 17820|0);
  $173 = (($172) + (($170*72)|0)|0);
  $174 = ((($173)) + 12|0);
  HEAP32[$174>>2] = $169;
  $175 = HEAP32[$8>>2]|0;
  $176 = HEAP32[$3>>2]|0;
  $177 = ((($176)) + 17820|0);
  $178 = (($177) + (($175*72)|0)|0);
  $179 = ((($178)) + 12|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ($180|0)>(3);
  if ($181) {
   label = 30;
   break;
  }
  $183 = HEAP32[$8>>2]|0;
  $184 = (($183) + 1)|0;
  HEAP32[$8>>2] = $184;
 }
 if ((label|0) == 21) {
  $115 = (_stbi__err(22194)|0);
  HEAP32[$2>>2] = $115;
  $490 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($490|0);
 }
 else if ((label|0) == 25) {
  $144 = (_stbi__err(22211)|0);
  HEAP32[$2>>2] = $144;
  $490 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($490|0);
 }
 else if ((label|0) == 28) {
  $166 = (_stbi__err(22217)|0);
  HEAP32[$2>>2] = $166;
  $490 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($490|0);
 }
 else if ((label|0) == 30) {
  $182 = (_stbi__err(22223)|0);
  HEAP32[$2>>2] = $182;
  $490 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($490|0);
 }
 else if ((label|0) == 32) {
  $185 = HEAP32[$4>>2]|0;
  $186 = ($185|0)!=(0);
  if ($186) {
   HEAP32[$2>>2] = 1;
   $490 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($490|0);
  }
  $187 = HEAP32[$5>>2]|0;
  $188 = HEAP32[$187>>2]|0;
  $189 = (1073741824 / ($188>>>0))&-1;
  $190 = HEAP32[$5>>2]|0;
  $191 = ((($190)) + 8|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (($189>>>0) / ($192>>>0))&-1;
  $194 = HEAP32[$5>>2]|0;
  $195 = ((($194)) + 4|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ($193>>>0)<($196>>>0);
  if ($197) {
   $198 = (_stbi__err(20863)|0);
   HEAP32[$2>>2] = $198;
   $490 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($490|0);
  }
  HEAP32[$8>>2] = 0;
  while(1) {
   $199 = HEAP32[$8>>2]|0;
   $200 = HEAP32[$5>>2]|0;
   $201 = ((($200)) + 8|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ($199|0)<($202|0);
   if (!($203)) {
    break;
   }
   $204 = HEAP32[$8>>2]|0;
   $205 = HEAP32[$3>>2]|0;
   $206 = ((($205)) + 17820|0);
   $207 = (($206) + (($204*72)|0)|0);
   $208 = ((($207)) + 4|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = HEAP32[$10>>2]|0;
   $211 = ($209|0)>($210|0);
   if ($211) {
    $212 = HEAP32[$8>>2]|0;
    $213 = HEAP32[$3>>2]|0;
    $214 = ((($213)) + 17820|0);
    $215 = (($214) + (($212*72)|0)|0);
    $216 = ((($215)) + 4|0);
    $217 = HEAP32[$216>>2]|0;
    HEAP32[$10>>2] = $217;
   }
   $218 = HEAP32[$8>>2]|0;
   $219 = HEAP32[$3>>2]|0;
   $220 = ((($219)) + 17820|0);
   $221 = (($220) + (($218*72)|0)|0);
   $222 = ((($221)) + 8|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = HEAP32[$11>>2]|0;
   $225 = ($223|0)>($224|0);
   if ($225) {
    $226 = HEAP32[$8>>2]|0;
    $227 = HEAP32[$3>>2]|0;
    $228 = ((($227)) + 17820|0);
    $229 = (($228) + (($226*72)|0)|0);
    $230 = ((($229)) + 8|0);
    $231 = HEAP32[$230>>2]|0;
    HEAP32[$11>>2] = $231;
   }
   $232 = HEAP32[$8>>2]|0;
   $233 = (($232) + 1)|0;
   HEAP32[$8>>2] = $233;
  }
  $234 = HEAP32[$10>>2]|0;
  $235 = HEAP32[$3>>2]|0;
  $236 = ((($235)) + 17796|0);
  HEAP32[$236>>2] = $234;
  $237 = HEAP32[$11>>2]|0;
  $238 = HEAP32[$3>>2]|0;
  $239 = ((($238)) + 17800|0);
  HEAP32[$239>>2] = $237;
  $240 = HEAP32[$10>>2]|0;
  $241 = $240<<3;
  $242 = HEAP32[$3>>2]|0;
  $243 = ((($242)) + 17812|0);
  HEAP32[$243>>2] = $241;
  $244 = HEAP32[$11>>2]|0;
  $245 = $244<<3;
  $246 = HEAP32[$3>>2]|0;
  $247 = ((($246)) + 17816|0);
  HEAP32[$247>>2] = $245;
  $248 = HEAP32[$5>>2]|0;
  $249 = HEAP32[$248>>2]|0;
  $250 = HEAP32[$3>>2]|0;
  $251 = ((($250)) + 17812|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = (($249) + ($252))|0;
  $254 = (($253) - 1)|0;
  $255 = HEAP32[$3>>2]|0;
  $256 = ((($255)) + 17812|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (($254>>>0) / ($257>>>0))&-1;
  $259 = HEAP32[$3>>2]|0;
  $260 = ((($259)) + 17804|0);
  HEAP32[$260>>2] = $258;
  $261 = HEAP32[$5>>2]|0;
  $262 = ((($261)) + 4|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = HEAP32[$3>>2]|0;
  $265 = ((($264)) + 17816|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = (($263) + ($266))|0;
  $268 = (($267) - 1)|0;
  $269 = HEAP32[$3>>2]|0;
  $270 = ((($269)) + 17816|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = (($268>>>0) / ($271>>>0))&-1;
  $273 = HEAP32[$3>>2]|0;
  $274 = ((($273)) + 17808|0);
  HEAP32[$274>>2] = $272;
  HEAP32[$8>>2] = 0;
  while(1) {
   $275 = HEAP32[$8>>2]|0;
   $276 = HEAP32[$5>>2]|0;
   $277 = ((($276)) + 8|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = ($275|0)<($278|0);
   if (!($279)) {
    label = 54;
    break;
   }
   $280 = HEAP32[$5>>2]|0;
   $281 = HEAP32[$280>>2]|0;
   $282 = HEAP32[$8>>2]|0;
   $283 = HEAP32[$3>>2]|0;
   $284 = ((($283)) + 17820|0);
   $285 = (($284) + (($282*72)|0)|0);
   $286 = ((($285)) + 4|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = Math_imul($281, $287)|0;
   $289 = HEAP32[$10>>2]|0;
   $290 = (($288) + ($289))|0;
   $291 = (($290) - 1)|0;
   $292 = HEAP32[$10>>2]|0;
   $293 = (($291>>>0) / ($292>>>0))&-1;
   $294 = HEAP32[$8>>2]|0;
   $295 = HEAP32[$3>>2]|0;
   $296 = ((($295)) + 17820|0);
   $297 = (($296) + (($294*72)|0)|0);
   $298 = ((($297)) + 28|0);
   HEAP32[$298>>2] = $293;
   $299 = HEAP32[$5>>2]|0;
   $300 = ((($299)) + 4|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = HEAP32[$8>>2]|0;
   $303 = HEAP32[$3>>2]|0;
   $304 = ((($303)) + 17820|0);
   $305 = (($304) + (($302*72)|0)|0);
   $306 = ((($305)) + 8|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = Math_imul($301, $307)|0;
   $309 = HEAP32[$11>>2]|0;
   $310 = (($308) + ($309))|0;
   $311 = (($310) - 1)|0;
   $312 = HEAP32[$11>>2]|0;
   $313 = (($311>>>0) / ($312>>>0))&-1;
   $314 = HEAP32[$8>>2]|0;
   $315 = HEAP32[$3>>2]|0;
   $316 = ((($315)) + 17820|0);
   $317 = (($316) + (($314*72)|0)|0);
   $318 = ((($317)) + 32|0);
   HEAP32[$318>>2] = $313;
   $319 = HEAP32[$3>>2]|0;
   $320 = ((($319)) + 17804|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = HEAP32[$8>>2]|0;
   $323 = HEAP32[$3>>2]|0;
   $324 = ((($323)) + 17820|0);
   $325 = (($324) + (($322*72)|0)|0);
   $326 = ((($325)) + 4|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = Math_imul($321, $327)|0;
   $329 = $328<<3;
   $330 = HEAP32[$8>>2]|0;
   $331 = HEAP32[$3>>2]|0;
   $332 = ((($331)) + 17820|0);
   $333 = (($332) + (($330*72)|0)|0);
   $334 = ((($333)) + 36|0);
   HEAP32[$334>>2] = $329;
   $335 = HEAP32[$3>>2]|0;
   $336 = ((($335)) + 17808|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = HEAP32[$8>>2]|0;
   $339 = HEAP32[$3>>2]|0;
   $340 = ((($339)) + 17820|0);
   $341 = (($340) + (($338*72)|0)|0);
   $342 = ((($341)) + 8|0);
   $343 = HEAP32[$342>>2]|0;
   $344 = Math_imul($337, $343)|0;
   $345 = $344<<3;
   $346 = HEAP32[$8>>2]|0;
   $347 = HEAP32[$3>>2]|0;
   $348 = ((($347)) + 17820|0);
   $349 = (($348) + (($346*72)|0)|0);
   $350 = ((($349)) + 40|0);
   HEAP32[$350>>2] = $345;
   $351 = HEAP32[$8>>2]|0;
   $352 = HEAP32[$3>>2]|0;
   $353 = ((($352)) + 17820|0);
   $354 = (($353) + (($351*72)|0)|0);
   $355 = ((($354)) + 36|0);
   $356 = HEAP32[$355>>2]|0;
   $357 = HEAP32[$8>>2]|0;
   $358 = HEAP32[$3>>2]|0;
   $359 = ((($358)) + 17820|0);
   $360 = (($359) + (($357*72)|0)|0);
   $361 = ((($360)) + 40|0);
   $362 = HEAP32[$361>>2]|0;
   $363 = Math_imul($356, $362)|0;
   $364 = (($363) + 15)|0;
   $365 = (_stbi__malloc($364)|0);
   $366 = HEAP32[$8>>2]|0;
   $367 = HEAP32[$3>>2]|0;
   $368 = ((($367)) + 17820|0);
   $369 = (($368) + (($366*72)|0)|0);
   $370 = ((($369)) + 48|0);
   HEAP32[$370>>2] = $365;
   $371 = HEAP32[$8>>2]|0;
   $372 = HEAP32[$3>>2]|0;
   $373 = ((($372)) + 17820|0);
   $374 = (($373) + (($371*72)|0)|0);
   $375 = ((($374)) + 48|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = ($376|0)==(0|0);
   $378 = HEAP32[$8>>2]|0;
   if ($377) {
    break;
   }
   $396 = HEAP32[$3>>2]|0;
   $397 = ((($396)) + 17820|0);
   $398 = (($397) + (($378*72)|0)|0);
   $399 = ((($398)) + 48|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = $400;
   $402 = (($401) + 15)|0;
   $403 = $402 & -16;
   $404 = $403;
   $405 = HEAP32[$8>>2]|0;
   $406 = HEAP32[$3>>2]|0;
   $407 = ((($406)) + 17820|0);
   $408 = (($407) + (($405*72)|0)|0);
   $409 = ((($408)) + 44|0);
   HEAP32[$409>>2] = $404;
   $410 = HEAP32[$8>>2]|0;
   $411 = HEAP32[$3>>2]|0;
   $412 = ((($411)) + 17820|0);
   $413 = (($412) + (($410*72)|0)|0);
   $414 = ((($413)) + 56|0);
   HEAP32[$414>>2] = 0;
   $415 = HEAP32[$3>>2]|0;
   $416 = ((($415)) + 18124|0);
   $417 = HEAP32[$416>>2]|0;
   $418 = ($417|0)!=(0);
   $419 = HEAP32[$8>>2]|0;
   $420 = HEAP32[$3>>2]|0;
   $421 = ((($420)) + 17820|0);
   $422 = (($421) + (($419*72)|0)|0);
   if ($418) {
    $423 = ((($422)) + 36|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = (($424) + 7)|0;
    $426 = $425 >> 3;
    $427 = HEAP32[$8>>2]|0;
    $428 = HEAP32[$3>>2]|0;
    $429 = ((($428)) + 17820|0);
    $430 = (($429) + (($427*72)|0)|0);
    $431 = ((($430)) + 64|0);
    HEAP32[$431>>2] = $426;
    $432 = HEAP32[$8>>2]|0;
    $433 = HEAP32[$3>>2]|0;
    $434 = ((($433)) + 17820|0);
    $435 = (($434) + (($432*72)|0)|0);
    $436 = ((($435)) + 40|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = (($437) + 7)|0;
    $439 = $438 >> 3;
    $440 = HEAP32[$8>>2]|0;
    $441 = HEAP32[$3>>2]|0;
    $442 = ((($441)) + 17820|0);
    $443 = (($442) + (($440*72)|0)|0);
    $444 = ((($443)) + 68|0);
    HEAP32[$444>>2] = $439;
    $445 = HEAP32[$8>>2]|0;
    $446 = HEAP32[$3>>2]|0;
    $447 = ((($446)) + 17820|0);
    $448 = (($447) + (($445*72)|0)|0);
    $449 = ((($448)) + 64|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = HEAP32[$8>>2]|0;
    $452 = HEAP32[$3>>2]|0;
    $453 = ((($452)) + 17820|0);
    $454 = (($453) + (($451*72)|0)|0);
    $455 = ((($454)) + 68|0);
    $456 = HEAP32[$455>>2]|0;
    $457 = Math_imul($450, $456)|0;
    $458 = $457<<6;
    $459 = $458<<1;
    $460 = (($459) + 15)|0;
    $461 = (_malloc($460)|0);
    $462 = HEAP32[$8>>2]|0;
    $463 = HEAP32[$3>>2]|0;
    $464 = ((($463)) + 17820|0);
    $465 = (($464) + (($462*72)|0)|0);
    $466 = ((($465)) + 52|0);
    HEAP32[$466>>2] = $461;
    $467 = HEAP32[$8>>2]|0;
    $468 = HEAP32[$3>>2]|0;
    $469 = ((($468)) + 17820|0);
    $470 = (($469) + (($467*72)|0)|0);
    $471 = ((($470)) + 52|0);
    $472 = HEAP32[$471>>2]|0;
    $473 = $472;
    $474 = (($473) + 15)|0;
    $475 = $474 & -16;
    $476 = $475;
    $477 = HEAP32[$8>>2]|0;
    $478 = HEAP32[$3>>2]|0;
    $479 = ((($478)) + 17820|0);
    $480 = (($479) + (($477*72)|0)|0);
    $481 = ((($480)) + 60|0);
    HEAP32[$481>>2] = $476;
   } else {
    $482 = ((($422)) + 60|0);
    HEAP32[$482>>2] = 0;
    $483 = HEAP32[$8>>2]|0;
    $484 = HEAP32[$3>>2]|0;
    $485 = ((($484)) + 17820|0);
    $486 = (($485) + (($483*72)|0)|0);
    $487 = ((($486)) + 52|0);
    HEAP32[$487>>2] = 0;
   }
   $488 = HEAP32[$8>>2]|0;
   $489 = (($488) + 1)|0;
   HEAP32[$8>>2] = $489;
  }
  if ((label|0) == 54) {
   HEAP32[$2>>2] = 1;
   $490 = HEAP32[$2>>2]|0;
   STACKTOP = sp;return ($490|0);
  }
  $379 = (($378) + -1)|0;
  HEAP32[$8>>2] = $379;
  while(1) {
   $380 = HEAP32[$8>>2]|0;
   $381 = ($380|0)>=(0);
   if (!($381)) {
    break;
   }
   $382 = HEAP32[$8>>2]|0;
   $383 = HEAP32[$3>>2]|0;
   $384 = ((($383)) + 17820|0);
   $385 = (($384) + (($382*72)|0)|0);
   $386 = ((($385)) + 48|0);
   $387 = HEAP32[$386>>2]|0;
   _free($387);
   $388 = HEAP32[$8>>2]|0;
   $389 = HEAP32[$3>>2]|0;
   $390 = ((($389)) + 17820|0);
   $391 = (($390) + (($388*72)|0)|0);
   $392 = ((($391)) + 48|0);
   HEAP32[$392>>2] = 0;
   $393 = HEAP32[$8>>2]|0;
   $394 = (($393) + -1)|0;
   HEAP32[$8>>2] = $394;
  }
  $395 = (_stbi__err(20616)|0);
  HEAP32[$2>>2] = $395;
  $490 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($490|0);
 }
 return (0)|0;
}
function _stbi__idct_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $3 = sp + 388|0;
 $4 = sp + 384|0;
 $5 = sp + 380|0;
 $6 = sp + 376|0;
 $7 = sp + 120|0;
 $8 = sp + 116|0;
 $9 = sp + 112|0;
 $10 = sp + 108|0;
 $11 = sp + 104|0;
 $12 = sp + 100|0;
 $13 = sp + 96|0;
 $14 = sp + 92|0;
 $15 = sp + 88|0;
 $16 = sp + 84|0;
 $17 = sp + 80|0;
 $18 = sp + 76|0;
 $19 = sp + 72|0;
 $20 = sp + 68|0;
 $21 = sp + 64|0;
 $22 = sp + 60|0;
 $23 = sp + 56|0;
 $24 = sp + 52|0;
 $25 = sp + 48|0;
 $26 = sp + 44|0;
 $27 = sp + 40|0;
 $28 = sp + 36|0;
 $29 = sp + 32|0;
 $30 = sp + 28|0;
 $31 = sp + 24|0;
 $32 = sp + 20|0;
 $33 = sp + 16|0;
 $34 = sp + 12|0;
 $35 = sp + 8|0;
 $36 = sp + 4|0;
 $37 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$8>>2] = $7;
 $38 = HEAP32[$5>>2]|0;
 HEAP32[$10>>2] = $38;
 HEAP32[$6>>2] = 0;
 while(1) {
  $39 = HEAP32[$6>>2]|0;
  $40 = ($39|0)<(8);
  if (!($40)) {
   break;
  }
  $41 = HEAP32[$10>>2]|0;
  $42 = ((($41)) + 16|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = ($44|0)==(0);
  if ($45) {
   $46 = HEAP32[$10>>2]|0;
   $47 = ((($46)) + 32|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = $48 << 16 >> 16;
   $50 = ($49|0)==(0);
   if ($50) {
    $51 = HEAP32[$10>>2]|0;
    $52 = ((($51)) + 48|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = $53 << 16 >> 16;
    $55 = ($54|0)==(0);
    if ($55) {
     $56 = HEAP32[$10>>2]|0;
     $57 = ((($56)) + 64|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)==(0);
     if ($60) {
      $61 = HEAP32[$10>>2]|0;
      $62 = ((($61)) + 80|0);
      $63 = HEAP16[$62>>1]|0;
      $64 = $63 << 16 >> 16;
      $65 = ($64|0)==(0);
      if ($65) {
       $66 = HEAP32[$10>>2]|0;
       $67 = ((($66)) + 96|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = $68 << 16 >> 16;
       $70 = ($69|0)==(0);
       if ($70) {
        $71 = HEAP32[$10>>2]|0;
        $72 = ((($71)) + 112|0);
        $73 = HEAP16[$72>>1]|0;
        $74 = $73 << 16 >> 16;
        $75 = ($74|0)==(0);
        if ($75) {
         $76 = HEAP32[$10>>2]|0;
         $77 = HEAP16[$76>>1]|0;
         $78 = $77 << 16 >> 16;
         $79 = $78 << 2;
         HEAP32[$11>>2] = $79;
         $80 = HEAP32[$11>>2]|0;
         $81 = HEAP32[$8>>2]|0;
         $82 = ((($81)) + 224|0);
         HEAP32[$82>>2] = $80;
         $83 = HEAP32[$8>>2]|0;
         $84 = ((($83)) + 192|0);
         HEAP32[$84>>2] = $80;
         $85 = HEAP32[$8>>2]|0;
         $86 = ((($85)) + 160|0);
         HEAP32[$86>>2] = $80;
         $87 = HEAP32[$8>>2]|0;
         $88 = ((($87)) + 128|0);
         HEAP32[$88>>2] = $80;
         $89 = HEAP32[$8>>2]|0;
         $90 = ((($89)) + 96|0);
         HEAP32[$90>>2] = $80;
         $91 = HEAP32[$8>>2]|0;
         $92 = ((($91)) + 64|0);
         HEAP32[$92>>2] = $80;
         $93 = HEAP32[$8>>2]|0;
         $94 = ((($93)) + 32|0);
         HEAP32[$94>>2] = $80;
         $95 = HEAP32[$8>>2]|0;
         HEAP32[$95>>2] = $80;
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $96 = HEAP32[$10>>2]|0;
   $97 = ((($96)) + 32|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = $98 << 16 >> 16;
   HEAP32[$17>>2] = $99;
   $100 = HEAP32[$10>>2]|0;
   $101 = ((($100)) + 96|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102 << 16 >> 16;
   HEAP32[$18>>2] = $103;
   $104 = HEAP32[$17>>2]|0;
   $105 = HEAP32[$18>>2]|0;
   $106 = (($104) + ($105))|0;
   $107 = ($106*2217)|0;
   HEAP32[$16>>2] = $107;
   $108 = HEAP32[$16>>2]|0;
   $109 = HEAP32[$18>>2]|0;
   $110 = Math_imul($109, -7567)|0;
   $111 = (($108) + ($110))|0;
   HEAP32[$14>>2] = $111;
   $112 = HEAP32[$16>>2]|0;
   $113 = HEAP32[$17>>2]|0;
   $114 = ($113*3135)|0;
   $115 = (($112) + ($114))|0;
   HEAP32[$15>>2] = $115;
   $116 = HEAP32[$10>>2]|0;
   $117 = HEAP16[$116>>1]|0;
   $118 = $117 << 16 >> 16;
   HEAP32[$17>>2] = $118;
   $119 = HEAP32[$10>>2]|0;
   $120 = ((($119)) + 64|0);
   $121 = HEAP16[$120>>1]|0;
   $122 = $121 << 16 >> 16;
   HEAP32[$18>>2] = $122;
   $123 = HEAP32[$17>>2]|0;
   $124 = HEAP32[$18>>2]|0;
   $125 = (($123) + ($124))|0;
   $126 = $125 << 12;
   HEAP32[$12>>2] = $126;
   $127 = HEAP32[$17>>2]|0;
   $128 = HEAP32[$18>>2]|0;
   $129 = (($127) - ($128))|0;
   $130 = $129 << 12;
   HEAP32[$13>>2] = $130;
   $131 = HEAP32[$12>>2]|0;
   $132 = HEAP32[$15>>2]|0;
   $133 = (($131) + ($132))|0;
   HEAP32[$21>>2] = $133;
   $134 = HEAP32[$12>>2]|0;
   $135 = HEAP32[$15>>2]|0;
   $136 = (($134) - ($135))|0;
   HEAP32[$24>>2] = $136;
   $137 = HEAP32[$13>>2]|0;
   $138 = HEAP32[$14>>2]|0;
   $139 = (($137) + ($138))|0;
   HEAP32[$22>>2] = $139;
   $140 = HEAP32[$13>>2]|0;
   $141 = HEAP32[$14>>2]|0;
   $142 = (($140) - ($141))|0;
   HEAP32[$23>>2] = $142;
   $143 = HEAP32[$10>>2]|0;
   $144 = ((($143)) + 112|0);
   $145 = HEAP16[$144>>1]|0;
   $146 = $145 << 16 >> 16;
   HEAP32[$12>>2] = $146;
   $147 = HEAP32[$10>>2]|0;
   $148 = ((($147)) + 80|0);
   $149 = HEAP16[$148>>1]|0;
   $150 = $149 << 16 >> 16;
   HEAP32[$13>>2] = $150;
   $151 = HEAP32[$10>>2]|0;
   $152 = ((($151)) + 48|0);
   $153 = HEAP16[$152>>1]|0;
   $154 = $153 << 16 >> 16;
   HEAP32[$14>>2] = $154;
   $155 = HEAP32[$10>>2]|0;
   $156 = ((($155)) + 16|0);
   $157 = HEAP16[$156>>1]|0;
   $158 = $157 << 16 >> 16;
   HEAP32[$15>>2] = $158;
   $159 = HEAP32[$12>>2]|0;
   $160 = HEAP32[$14>>2]|0;
   $161 = (($159) + ($160))|0;
   HEAP32[$18>>2] = $161;
   $162 = HEAP32[$13>>2]|0;
   $163 = HEAP32[$15>>2]|0;
   $164 = (($162) + ($163))|0;
   HEAP32[$19>>2] = $164;
   $165 = HEAP32[$12>>2]|0;
   $166 = HEAP32[$15>>2]|0;
   $167 = (($165) + ($166))|0;
   HEAP32[$16>>2] = $167;
   $168 = HEAP32[$13>>2]|0;
   $169 = HEAP32[$14>>2]|0;
   $170 = (($168) + ($169))|0;
   HEAP32[$17>>2] = $170;
   $171 = HEAP32[$18>>2]|0;
   $172 = HEAP32[$19>>2]|0;
   $173 = (($171) + ($172))|0;
   $174 = ($173*4816)|0;
   HEAP32[$20>>2] = $174;
   $175 = HEAP32[$12>>2]|0;
   $176 = ($175*1223)|0;
   HEAP32[$12>>2] = $176;
   $177 = HEAP32[$13>>2]|0;
   $178 = ($177*8410)|0;
   HEAP32[$13>>2] = $178;
   $179 = HEAP32[$14>>2]|0;
   $180 = ($179*12586)|0;
   HEAP32[$14>>2] = $180;
   $181 = HEAP32[$15>>2]|0;
   $182 = ($181*6149)|0;
   HEAP32[$15>>2] = $182;
   $183 = HEAP32[$20>>2]|0;
   $184 = HEAP32[$16>>2]|0;
   $185 = Math_imul($184, -3685)|0;
   $186 = (($183) + ($185))|0;
   HEAP32[$16>>2] = $186;
   $187 = HEAP32[$20>>2]|0;
   $188 = HEAP32[$17>>2]|0;
   $189 = Math_imul($188, -10497)|0;
   $190 = (($187) + ($189))|0;
   HEAP32[$17>>2] = $190;
   $191 = HEAP32[$18>>2]|0;
   $192 = Math_imul($191, -8034)|0;
   HEAP32[$18>>2] = $192;
   $193 = HEAP32[$19>>2]|0;
   $194 = Math_imul($193, -1597)|0;
   HEAP32[$19>>2] = $194;
   $195 = HEAP32[$16>>2]|0;
   $196 = HEAP32[$19>>2]|0;
   $197 = (($195) + ($196))|0;
   $198 = HEAP32[$15>>2]|0;
   $199 = (($198) + ($197))|0;
   HEAP32[$15>>2] = $199;
   $200 = HEAP32[$17>>2]|0;
   $201 = HEAP32[$18>>2]|0;
   $202 = (($200) + ($201))|0;
   $203 = HEAP32[$14>>2]|0;
   $204 = (($203) + ($202))|0;
   HEAP32[$14>>2] = $204;
   $205 = HEAP32[$17>>2]|0;
   $206 = HEAP32[$19>>2]|0;
   $207 = (($205) + ($206))|0;
   $208 = HEAP32[$13>>2]|0;
   $209 = (($208) + ($207))|0;
   HEAP32[$13>>2] = $209;
   $210 = HEAP32[$16>>2]|0;
   $211 = HEAP32[$18>>2]|0;
   $212 = (($210) + ($211))|0;
   $213 = HEAP32[$12>>2]|0;
   $214 = (($213) + ($212))|0;
   HEAP32[$12>>2] = $214;
   $215 = HEAP32[$21>>2]|0;
   $216 = (($215) + 512)|0;
   HEAP32[$21>>2] = $216;
   $217 = HEAP32[$22>>2]|0;
   $218 = (($217) + 512)|0;
   HEAP32[$22>>2] = $218;
   $219 = HEAP32[$23>>2]|0;
   $220 = (($219) + 512)|0;
   HEAP32[$23>>2] = $220;
   $221 = HEAP32[$24>>2]|0;
   $222 = (($221) + 512)|0;
   HEAP32[$24>>2] = $222;
   $223 = HEAP32[$21>>2]|0;
   $224 = HEAP32[$15>>2]|0;
   $225 = (($223) + ($224))|0;
   $226 = $225 >> 10;
   $227 = HEAP32[$8>>2]|0;
   HEAP32[$227>>2] = $226;
   $228 = HEAP32[$21>>2]|0;
   $229 = HEAP32[$15>>2]|0;
   $230 = (($228) - ($229))|0;
   $231 = $230 >> 10;
   $232 = HEAP32[$8>>2]|0;
   $233 = ((($232)) + 224|0);
   HEAP32[$233>>2] = $231;
   $234 = HEAP32[$22>>2]|0;
   $235 = HEAP32[$14>>2]|0;
   $236 = (($234) + ($235))|0;
   $237 = $236 >> 10;
   $238 = HEAP32[$8>>2]|0;
   $239 = ((($238)) + 32|0);
   HEAP32[$239>>2] = $237;
   $240 = HEAP32[$22>>2]|0;
   $241 = HEAP32[$14>>2]|0;
   $242 = (($240) - ($241))|0;
   $243 = $242 >> 10;
   $244 = HEAP32[$8>>2]|0;
   $245 = ((($244)) + 192|0);
   HEAP32[$245>>2] = $243;
   $246 = HEAP32[$23>>2]|0;
   $247 = HEAP32[$13>>2]|0;
   $248 = (($246) + ($247))|0;
   $249 = $248 >> 10;
   $250 = HEAP32[$8>>2]|0;
   $251 = ((($250)) + 64|0);
   HEAP32[$251>>2] = $249;
   $252 = HEAP32[$23>>2]|0;
   $253 = HEAP32[$13>>2]|0;
   $254 = (($252) - ($253))|0;
   $255 = $254 >> 10;
   $256 = HEAP32[$8>>2]|0;
   $257 = ((($256)) + 160|0);
   HEAP32[$257>>2] = $255;
   $258 = HEAP32[$24>>2]|0;
   $259 = HEAP32[$12>>2]|0;
   $260 = (($258) + ($259))|0;
   $261 = $260 >> 10;
   $262 = HEAP32[$8>>2]|0;
   $263 = ((($262)) + 96|0);
   HEAP32[$263>>2] = $261;
   $264 = HEAP32[$24>>2]|0;
   $265 = HEAP32[$12>>2]|0;
   $266 = (($264) - ($265))|0;
   $267 = $266 >> 10;
   $268 = HEAP32[$8>>2]|0;
   $269 = ((($268)) + 128|0);
   HEAP32[$269>>2] = $267;
  }
  $270 = HEAP32[$6>>2]|0;
  $271 = (($270) + 1)|0;
  HEAP32[$6>>2] = $271;
  $272 = HEAP32[$10>>2]|0;
  $273 = ((($272)) + 2|0);
  HEAP32[$10>>2] = $273;
  $274 = HEAP32[$8>>2]|0;
  $275 = ((($274)) + 4|0);
  HEAP32[$8>>2] = $275;
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$8>>2] = $7;
 $276 = HEAP32[$3>>2]|0;
 HEAP32[$9>>2] = $276;
 while(1) {
  $277 = HEAP32[$6>>2]|0;
  $278 = ($277|0)<(8);
  if (!($278)) {
   break;
  }
  $279 = HEAP32[$8>>2]|0;
  $280 = ((($279)) + 8|0);
  $281 = HEAP32[$280>>2]|0;
  HEAP32[$30>>2] = $281;
  $282 = HEAP32[$8>>2]|0;
  $283 = ((($282)) + 24|0);
  $284 = HEAP32[$283>>2]|0;
  HEAP32[$31>>2] = $284;
  $285 = HEAP32[$30>>2]|0;
  $286 = HEAP32[$31>>2]|0;
  $287 = (($285) + ($286))|0;
  $288 = ($287*2217)|0;
  HEAP32[$29>>2] = $288;
  $289 = HEAP32[$29>>2]|0;
  $290 = HEAP32[$31>>2]|0;
  $291 = Math_imul($290, -7567)|0;
  $292 = (($289) + ($291))|0;
  HEAP32[$27>>2] = $292;
  $293 = HEAP32[$29>>2]|0;
  $294 = HEAP32[$30>>2]|0;
  $295 = ($294*3135)|0;
  $296 = (($293) + ($295))|0;
  HEAP32[$28>>2] = $296;
  $297 = HEAP32[$8>>2]|0;
  $298 = HEAP32[$297>>2]|0;
  HEAP32[$30>>2] = $298;
  $299 = HEAP32[$8>>2]|0;
  $300 = ((($299)) + 16|0);
  $301 = HEAP32[$300>>2]|0;
  HEAP32[$31>>2] = $301;
  $302 = HEAP32[$30>>2]|0;
  $303 = HEAP32[$31>>2]|0;
  $304 = (($302) + ($303))|0;
  $305 = $304 << 12;
  HEAP32[$25>>2] = $305;
  $306 = HEAP32[$30>>2]|0;
  $307 = HEAP32[$31>>2]|0;
  $308 = (($306) - ($307))|0;
  $309 = $308 << 12;
  HEAP32[$26>>2] = $309;
  $310 = HEAP32[$25>>2]|0;
  $311 = HEAP32[$28>>2]|0;
  $312 = (($310) + ($311))|0;
  HEAP32[$34>>2] = $312;
  $313 = HEAP32[$25>>2]|0;
  $314 = HEAP32[$28>>2]|0;
  $315 = (($313) - ($314))|0;
  HEAP32[$37>>2] = $315;
  $316 = HEAP32[$26>>2]|0;
  $317 = HEAP32[$27>>2]|0;
  $318 = (($316) + ($317))|0;
  HEAP32[$35>>2] = $318;
  $319 = HEAP32[$26>>2]|0;
  $320 = HEAP32[$27>>2]|0;
  $321 = (($319) - ($320))|0;
  HEAP32[$36>>2] = $321;
  $322 = HEAP32[$8>>2]|0;
  $323 = ((($322)) + 28|0);
  $324 = HEAP32[$323>>2]|0;
  HEAP32[$25>>2] = $324;
  $325 = HEAP32[$8>>2]|0;
  $326 = ((($325)) + 20|0);
  $327 = HEAP32[$326>>2]|0;
  HEAP32[$26>>2] = $327;
  $328 = HEAP32[$8>>2]|0;
  $329 = ((($328)) + 12|0);
  $330 = HEAP32[$329>>2]|0;
  HEAP32[$27>>2] = $330;
  $331 = HEAP32[$8>>2]|0;
  $332 = ((($331)) + 4|0);
  $333 = HEAP32[$332>>2]|0;
  HEAP32[$28>>2] = $333;
  $334 = HEAP32[$25>>2]|0;
  $335 = HEAP32[$27>>2]|0;
  $336 = (($334) + ($335))|0;
  HEAP32[$31>>2] = $336;
  $337 = HEAP32[$26>>2]|0;
  $338 = HEAP32[$28>>2]|0;
  $339 = (($337) + ($338))|0;
  HEAP32[$32>>2] = $339;
  $340 = HEAP32[$25>>2]|0;
  $341 = HEAP32[$28>>2]|0;
  $342 = (($340) + ($341))|0;
  HEAP32[$29>>2] = $342;
  $343 = HEAP32[$26>>2]|0;
  $344 = HEAP32[$27>>2]|0;
  $345 = (($343) + ($344))|0;
  HEAP32[$30>>2] = $345;
  $346 = HEAP32[$31>>2]|0;
  $347 = HEAP32[$32>>2]|0;
  $348 = (($346) + ($347))|0;
  $349 = ($348*4816)|0;
  HEAP32[$33>>2] = $349;
  $350 = HEAP32[$25>>2]|0;
  $351 = ($350*1223)|0;
  HEAP32[$25>>2] = $351;
  $352 = HEAP32[$26>>2]|0;
  $353 = ($352*8410)|0;
  HEAP32[$26>>2] = $353;
  $354 = HEAP32[$27>>2]|0;
  $355 = ($354*12586)|0;
  HEAP32[$27>>2] = $355;
  $356 = HEAP32[$28>>2]|0;
  $357 = ($356*6149)|0;
  HEAP32[$28>>2] = $357;
  $358 = HEAP32[$33>>2]|0;
  $359 = HEAP32[$29>>2]|0;
  $360 = Math_imul($359, -3685)|0;
  $361 = (($358) + ($360))|0;
  HEAP32[$29>>2] = $361;
  $362 = HEAP32[$33>>2]|0;
  $363 = HEAP32[$30>>2]|0;
  $364 = Math_imul($363, -10497)|0;
  $365 = (($362) + ($364))|0;
  HEAP32[$30>>2] = $365;
  $366 = HEAP32[$31>>2]|0;
  $367 = Math_imul($366, -8034)|0;
  HEAP32[$31>>2] = $367;
  $368 = HEAP32[$32>>2]|0;
  $369 = Math_imul($368, -1597)|0;
  HEAP32[$32>>2] = $369;
  $370 = HEAP32[$29>>2]|0;
  $371 = HEAP32[$32>>2]|0;
  $372 = (($370) + ($371))|0;
  $373 = HEAP32[$28>>2]|0;
  $374 = (($373) + ($372))|0;
  HEAP32[$28>>2] = $374;
  $375 = HEAP32[$30>>2]|0;
  $376 = HEAP32[$31>>2]|0;
  $377 = (($375) + ($376))|0;
  $378 = HEAP32[$27>>2]|0;
  $379 = (($378) + ($377))|0;
  HEAP32[$27>>2] = $379;
  $380 = HEAP32[$30>>2]|0;
  $381 = HEAP32[$32>>2]|0;
  $382 = (($380) + ($381))|0;
  $383 = HEAP32[$26>>2]|0;
  $384 = (($383) + ($382))|0;
  HEAP32[$26>>2] = $384;
  $385 = HEAP32[$29>>2]|0;
  $386 = HEAP32[$31>>2]|0;
  $387 = (($385) + ($386))|0;
  $388 = HEAP32[$25>>2]|0;
  $389 = (($388) + ($387))|0;
  HEAP32[$25>>2] = $389;
  $390 = HEAP32[$34>>2]|0;
  $391 = (($390) + 16842752)|0;
  HEAP32[$34>>2] = $391;
  $392 = HEAP32[$35>>2]|0;
  $393 = (($392) + 16842752)|0;
  HEAP32[$35>>2] = $393;
  $394 = HEAP32[$36>>2]|0;
  $395 = (($394) + 16842752)|0;
  HEAP32[$36>>2] = $395;
  $396 = HEAP32[$37>>2]|0;
  $397 = (($396) + 16842752)|0;
  HEAP32[$37>>2] = $397;
  $398 = HEAP32[$34>>2]|0;
  $399 = HEAP32[$28>>2]|0;
  $400 = (($398) + ($399))|0;
  $401 = $400 >> 17;
  $402 = (_stbi__clamp($401)|0);
  $403 = HEAP32[$9>>2]|0;
  HEAP8[$403>>0] = $402;
  $404 = HEAP32[$34>>2]|0;
  $405 = HEAP32[$28>>2]|0;
  $406 = (($404) - ($405))|0;
  $407 = $406 >> 17;
  $408 = (_stbi__clamp($407)|0);
  $409 = HEAP32[$9>>2]|0;
  $410 = ((($409)) + 7|0);
  HEAP8[$410>>0] = $408;
  $411 = HEAP32[$35>>2]|0;
  $412 = HEAP32[$27>>2]|0;
  $413 = (($411) + ($412))|0;
  $414 = $413 >> 17;
  $415 = (_stbi__clamp($414)|0);
  $416 = HEAP32[$9>>2]|0;
  $417 = ((($416)) + 1|0);
  HEAP8[$417>>0] = $415;
  $418 = HEAP32[$35>>2]|0;
  $419 = HEAP32[$27>>2]|0;
  $420 = (($418) - ($419))|0;
  $421 = $420 >> 17;
  $422 = (_stbi__clamp($421)|0);
  $423 = HEAP32[$9>>2]|0;
  $424 = ((($423)) + 6|0);
  HEAP8[$424>>0] = $422;
  $425 = HEAP32[$36>>2]|0;
  $426 = HEAP32[$26>>2]|0;
  $427 = (($425) + ($426))|0;
  $428 = $427 >> 17;
  $429 = (_stbi__clamp($428)|0);
  $430 = HEAP32[$9>>2]|0;
  $431 = ((($430)) + 2|0);
  HEAP8[$431>>0] = $429;
  $432 = HEAP32[$36>>2]|0;
  $433 = HEAP32[$26>>2]|0;
  $434 = (($432) - ($433))|0;
  $435 = $434 >> 17;
  $436 = (_stbi__clamp($435)|0);
  $437 = HEAP32[$9>>2]|0;
  $438 = ((($437)) + 5|0);
  HEAP8[$438>>0] = $436;
  $439 = HEAP32[$37>>2]|0;
  $440 = HEAP32[$25>>2]|0;
  $441 = (($439) + ($440))|0;
  $442 = $441 >> 17;
  $443 = (_stbi__clamp($442)|0);
  $444 = HEAP32[$9>>2]|0;
  $445 = ((($444)) + 3|0);
  HEAP8[$445>>0] = $443;
  $446 = HEAP32[$37>>2]|0;
  $447 = HEAP32[$25>>2]|0;
  $448 = (($446) - ($447))|0;
  $449 = $448 >> 17;
  $450 = (_stbi__clamp($449)|0);
  $451 = HEAP32[$9>>2]|0;
  $452 = ((($451)) + 4|0);
  HEAP8[$452>>0] = $450;
  $453 = HEAP32[$6>>2]|0;
  $454 = (($453) + 1)|0;
  HEAP32[$6>>2] = $454;
  $455 = HEAP32[$8>>2]|0;
  $456 = ((($455)) + 32|0);
  HEAP32[$8>>2] = $456;
  $457 = HEAP32[$4>>2]|0;
  $458 = HEAP32[$9>>2]|0;
  $459 = (($458) + ($457)|0);
  HEAP32[$9>>2] = $459;
 }
 STACKTOP = sp;return;
}
function _stbi__YCbCr_to_RGB_row($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 48|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $9 = sp + 36|0;
 $10 = sp + 32|0;
 $11 = sp + 28|0;
 $12 = sp + 24|0;
 $13 = sp + 20|0;
 $14 = sp + 16|0;
 $15 = sp + 12|0;
 $16 = sp + 8|0;
 $17 = sp + 4|0;
 $18 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 HEAP32[$11>>2] = $5;
 HEAP32[$12>>2] = 0;
 while(1) {
  $19 = HEAP32[$12>>2]|0;
  $20 = HEAP32[$10>>2]|0;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[$12>>2]|0;
  $23 = HEAP32[$7>>2]|0;
  $24 = (($23) + ($22)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 20;
  $28 = (($27) + 524288)|0;
  HEAP32[$13>>2] = $28;
  $29 = HEAP32[$12>>2]|0;
  $30 = HEAP32[$9>>2]|0;
  $31 = (($30) + ($29)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = (($33) - 128)|0;
  HEAP32[$17>>2] = $34;
  $35 = HEAP32[$12>>2]|0;
  $36 = HEAP32[$8>>2]|0;
  $37 = (($36) + ($35)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (($39) - 128)|0;
  HEAP32[$18>>2] = $40;
  $41 = HEAP32[$13>>2]|0;
  $42 = HEAP32[$17>>2]|0;
  $43 = Math_imul($42, 1470208)|0;
  $44 = (($41) + ($43))|0;
  HEAP32[$14>>2] = $44;
  $45 = HEAP32[$13>>2]|0;
  $46 = HEAP32[$17>>2]|0;
  $47 = Math_imul($46, -748800)|0;
  $48 = (($45) + ($47))|0;
  $49 = HEAP32[$18>>2]|0;
  $50 = Math_imul($49, -360960)|0;
  $51 = $50 & -65536;
  $52 = (($48) + ($51))|0;
  HEAP32[$15>>2] = $52;
  $53 = HEAP32[$13>>2]|0;
  $54 = HEAP32[$18>>2]|0;
  $55 = Math_imul($54, 1858048)|0;
  $56 = (($53) + ($55))|0;
  HEAP32[$16>>2] = $56;
  $57 = HEAP32[$14>>2]|0;
  $58 = $57 >> 20;
  HEAP32[$14>>2] = $58;
  $59 = HEAP32[$15>>2]|0;
  $60 = $59 >> 20;
  HEAP32[$15>>2] = $60;
  $61 = HEAP32[$16>>2]|0;
  $62 = $61 >> 20;
  HEAP32[$16>>2] = $62;
  $63 = HEAP32[$14>>2]|0;
  $64 = ($63>>>0)>(255);
  do {
   if ($64) {
    $65 = HEAP32[$14>>2]|0;
    $66 = ($65|0)<(0);
    if ($66) {
     HEAP32[$14>>2] = 0;
     break;
    } else {
     HEAP32[$14>>2] = 255;
     break;
    }
   }
  } while(0);
  $67 = HEAP32[$15>>2]|0;
  $68 = ($67>>>0)>(255);
  do {
   if ($68) {
    $69 = HEAP32[$15>>2]|0;
    $70 = ($69|0)<(0);
    if ($70) {
     HEAP32[$15>>2] = 0;
     break;
    } else {
     HEAP32[$15>>2] = 255;
     break;
    }
   }
  } while(0);
  $71 = HEAP32[$16>>2]|0;
  $72 = ($71>>>0)>(255);
  do {
   if ($72) {
    $73 = HEAP32[$16>>2]|0;
    $74 = ($73|0)<(0);
    if ($74) {
     HEAP32[$16>>2] = 0;
     break;
    } else {
     HEAP32[$16>>2] = 255;
     break;
    }
   }
  } while(0);
  $75 = HEAP32[$14>>2]|0;
  $76 = $75&255;
  $77 = HEAP32[$6>>2]|0;
  HEAP8[$77>>0] = $76;
  $78 = HEAP32[$15>>2]|0;
  $79 = $78&255;
  $80 = HEAP32[$6>>2]|0;
  $81 = ((($80)) + 1|0);
  HEAP8[$81>>0] = $79;
  $82 = HEAP32[$16>>2]|0;
  $83 = $82&255;
  $84 = HEAP32[$6>>2]|0;
  $85 = ((($84)) + 2|0);
  HEAP8[$85>>0] = $83;
  $86 = HEAP32[$6>>2]|0;
  $87 = ((($86)) + 3|0);
  HEAP8[$87>>0] = -1;
  $88 = HEAP32[$11>>2]|0;
  $89 = HEAP32[$6>>2]|0;
  $90 = (($89) + ($88)|0);
  HEAP32[$6>>2] = $90;
  $91 = HEAP32[$12>>2]|0;
  $92 = (($91) + 1)|0;
  HEAP32[$12>>2] = $92;
 }
 STACKTOP = sp;return;
}
function _stbi__resample_row_hv_2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 20|0;
 $9 = sp + 16|0;
 $10 = sp + 12|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 HEAP32[$6>>2] = $0;
 HEAP32[$7>>2] = $1;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $3;
 HEAP32[$10>>2] = $4;
 $14 = HEAP32[$9>>2]|0;
 $15 = ($14|0)==(1);
 $16 = HEAP32[$7>>2]|0;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18*3)|0;
 $20 = HEAP32[$8>>2]|0;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($19) + ($22))|0;
 if ($15) {
  $24 = (($23) + 2)|0;
  $25 = $24 >> 2;
  $26 = $25&255;
  $27 = HEAP32[$6>>2]|0;
  $28 = ((($27)) + 1|0);
  HEAP8[$28>>0] = $26;
  $29 = HEAP32[$6>>2]|0;
  HEAP8[$29>>0] = $26;
  $30 = HEAP32[$6>>2]|0;
  HEAP32[$5>>2] = $30;
  $86 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($86|0);
 }
 HEAP32[$13>>2] = $23;
 $31 = HEAP32[$13>>2]|0;
 $32 = (($31) + 2)|0;
 $33 = $32 >> 2;
 $34 = $33&255;
 $35 = HEAP32[$6>>2]|0;
 HEAP8[$35>>0] = $34;
 HEAP32[$11>>2] = 1;
 while(1) {
  $36 = HEAP32[$11>>2]|0;
  $37 = HEAP32[$9>>2]|0;
  $38 = ($36|0)<($37|0);
  $39 = HEAP32[$13>>2]|0;
  if (!($38)) {
   break;
  }
  HEAP32[$12>>2] = $39;
  $40 = HEAP32[$11>>2]|0;
  $41 = HEAP32[$7>>2]|0;
  $42 = (($41) + ($40)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = ($44*3)|0;
  $46 = HEAP32[$11>>2]|0;
  $47 = HEAP32[$8>>2]|0;
  $48 = (($47) + ($46)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = (($45) + ($50))|0;
  HEAP32[$13>>2] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = ($52*3)|0;
  $54 = HEAP32[$13>>2]|0;
  $55 = (($53) + ($54))|0;
  $56 = (($55) + 8)|0;
  $57 = $56 >> 4;
  $58 = $57&255;
  $59 = HEAP32[$11>>2]|0;
  $60 = $59<<1;
  $61 = (($60) - 1)|0;
  $62 = HEAP32[$6>>2]|0;
  $63 = (($62) + ($61)|0);
  HEAP8[$63>>0] = $58;
  $64 = HEAP32[$13>>2]|0;
  $65 = ($64*3)|0;
  $66 = HEAP32[$12>>2]|0;
  $67 = (($65) + ($66))|0;
  $68 = (($67) + 8)|0;
  $69 = $68 >> 4;
  $70 = $69&255;
  $71 = HEAP32[$11>>2]|0;
  $72 = $71<<1;
  $73 = HEAP32[$6>>2]|0;
  $74 = (($73) + ($72)|0);
  HEAP8[$74>>0] = $70;
  $75 = HEAP32[$11>>2]|0;
  $76 = (($75) + 1)|0;
  HEAP32[$11>>2] = $76;
 }
 $77 = (($39) + 2)|0;
 $78 = $77 >> 2;
 $79 = $78&255;
 $80 = HEAP32[$9>>2]|0;
 $81 = $80<<1;
 $82 = (($81) - 1)|0;
 $83 = HEAP32[$6>>2]|0;
 $84 = (($83) + ($82)|0);
 HEAP8[$84>>0] = $79;
 $85 = HEAP32[$6>>2]|0;
 HEAP32[$5>>2] = $85;
 $86 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($86|0);
}
function _stbi__clamp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>(255);
 do {
  if ($4) {
   $5 = HEAP32[$2>>2]|0;
   $6 = ($5|0)<(0);
   if ($6) {
    HEAP8[$1>>0] = 0;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)>(255);
   if ($8) {
    HEAP8[$1>>0] = -1;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = HEAP32[$2>>2]|0;
  $10 = $9&255;
  HEAP8[$1>>0] = $10;
 }
 $11 = HEAP8[$1>>0]|0;
 STACKTOP = sp;return ($11|0);
}
function _stbi__start_callbacks($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[$3>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$4>>2]|0;
 ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($10)) + 28|0);
 HEAP32[$11>>2] = $9;
 $12 = HEAP32[$3>>2]|0;
 $13 = ((($12)) + 36|0);
 HEAP32[$13>>2] = 128;
 $14 = HEAP32[$3>>2]|0;
 $15 = ((($14)) + 32|0);
 HEAP32[$15>>2] = 1;
 $16 = HEAP32[$3>>2]|0;
 $17 = ((($16)) + 40|0);
 $18 = HEAP32[$3>>2]|0;
 $19 = ((($18)) + 176|0);
 HEAP32[$19>>2] = $17;
 $20 = HEAP32[$3>>2]|0;
 _stbi__refill_buffer($20);
 $21 = HEAP32[$3>>2]|0;
 $22 = ((($21)) + 172|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$3>>2]|0;
 $25 = ((($24)) + 180|0);
 HEAP32[$25>>2] = $23;
 STACKTOP = sp;return;
}
function _rlVertex2i($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = (+($4|0));
 $6 = HEAP32[$3>>2]|0;
 $7 = (+($6|0));
 $8 = +HEAPF32[1386];
 _rlVertex3f($5,$7,$8);
 STACKTOP = sp;return;
}
function _DrawRectangle($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 48|0;
 $$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $11 = HEAP32[$5>>2]|0;
 $12 = (+($11|0));
 HEAPF32[$9>>2] = $12;
 $13 = ((($9)) + 4|0);
 $14 = HEAP32[$6>>2]|0;
 $15 = (+($14|0));
 HEAPF32[$13>>2] = $15;
 $16 = HEAP32[$7>>2]|0;
 $17 = (+($16|0));
 HEAPF32[$10>>2] = $17;
 $18 = ((($10)) + 4|0);
 $19 = HEAP32[$8>>2]|0;
 $20 = (+($19|0));
 HEAPF32[$18>>2] = $20;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$9+4>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$10+4>>2]|0;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$4+3>>0]|0;
 _DrawRectangleV($$byval_copy,$$byval_copy1,$$byval_copy2);
 STACKTOP = sp;return;
}
function _DrawRectangleV($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = (_rlGetVersion()|0);
 $5 = ($4|0)==(1);
 if ($5) {
  _rlBegin(1);
  $6 = HEAP8[$2>>0]|0;
  $7 = ((($2)) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ((($2)) + 2|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($2)) + 3|0);
  $12 = HEAP8[$11>>0]|0;
  _rlColor4ub($6,$8,$10,$12);
  $13 = +HEAPF32[$0>>2];
  $14 = (~~(($13)));
  $15 = ((($0)) + 4|0);
  $16 = +HEAPF32[$15>>2];
  $17 = (~~(($16)));
  _rlVertex2i($14,$17);
  $18 = +HEAPF32[$0>>2];
  $19 = (~~(($18)));
  $20 = ((($0)) + 4|0);
  $21 = +HEAPF32[$20>>2];
  $22 = ((($1)) + 4|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $21 + $23;
  $25 = (~~(($24)));
  _rlVertex2i($19,$25);
  $26 = +HEAPF32[$0>>2];
  $27 = +HEAPF32[$1>>2];
  $28 = $26 + $27;
  $29 = (~~(($28)));
  $30 = ((($0)) + 4|0);
  $31 = +HEAPF32[$30>>2];
  $32 = ((($1)) + 4|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $31 + $33;
  $35 = (~~(($34)));
  _rlVertex2i($29,$35);
  $36 = +HEAPF32[$0>>2];
  $37 = (~~(($36)));
  $38 = ((($0)) + 4|0);
  $39 = +HEAPF32[$38>>2];
  $40 = (~~(($39)));
  _rlVertex2i($37,$40);
  $41 = +HEAPF32[$0>>2];
  $42 = +HEAPF32[$1>>2];
  $43 = $41 + $42;
  $44 = (~~(($43)));
  $45 = ((($0)) + 4|0);
  $46 = +HEAPF32[$45>>2];
  $47 = ((($1)) + 4|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $46 + $48;
  $50 = (~~(($49)));
  _rlVertex2i($44,$50);
  $51 = +HEAPF32[$0>>2];
  $52 = +HEAPF32[$1>>2];
  $53 = $51 + $52;
  $54 = (~~(($53)));
  $55 = ((($0)) + 4|0);
  $56 = +HEAPF32[$55>>2];
  $57 = (~~(($56)));
  _rlVertex2i($54,$57);
  _rlEnd();
  STACKTOP = sp;return;
 }
 $58 = (_rlGetVersion()|0);
 $59 = ($58|0)==(2);
 if (!($59)) {
  $60 = (_rlGetVersion()|0);
  $61 = ($60|0)==(3);
  if (!($61)) {
   $62 = (_rlGetVersion()|0);
   $63 = ($62|0)==(4);
   if (!($63)) {
    STACKTOP = sp;return;
   }
  }
 }
 _GetDefaultTexture($3);
 $64 = HEAP32[$3>>2]|0;
 _rlEnableTexture($64);
 _rlBegin(2);
 $65 = HEAP8[$2>>0]|0;
 $66 = ((($2)) + 1|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ((($2)) + 2|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = ((($2)) + 3|0);
 $71 = HEAP8[$70>>0]|0;
 _rlColor4ub($65,$67,$69,$71);
 _rlNormal3f(0.0,0.0,1.0);
 _rlTexCoord2f(0.0,0.0);
 $72 = +HEAPF32[$0>>2];
 $73 = ((($0)) + 4|0);
 $74 = +HEAPF32[$73>>2];
 _rlVertex2f($72,$74);
 _rlTexCoord2f(0.0,1.0);
 $75 = +HEAPF32[$0>>2];
 $76 = ((($0)) + 4|0);
 $77 = +HEAPF32[$76>>2];
 $78 = ((($1)) + 4|0);
 $79 = +HEAPF32[$78>>2];
 $80 = $77 + $79;
 _rlVertex2f($75,$80);
 _rlTexCoord2f(1.0,1.0);
 $81 = +HEAPF32[$0>>2];
 $82 = +HEAPF32[$1>>2];
 $83 = $81 + $82;
 $84 = ((($0)) + 4|0);
 $85 = +HEAPF32[$84>>2];
 $86 = ((($1)) + 4|0);
 $87 = +HEAPF32[$86>>2];
 $88 = $85 + $87;
 _rlVertex2f($83,$88);
 _rlTexCoord2f(1.0,0.0);
 $89 = +HEAPF32[$0>>2];
 $90 = +HEAPF32[$1>>2];
 $91 = $89 + $90;
 $92 = ((($0)) + 4|0);
 $93 = +HEAPF32[$92>>2];
 _rlVertex2f($91,$93);
 _rlEnd();
 _rlDisableTexture();
 STACKTOP = sp;return;
}
function _DrawRectangleRec($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
 _DrawRectangle($2,$4,$6,$8,$$byval_copy);
 STACKTOP = sp;return;
}
function _CheckCollisionPointRec($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = 0;
 $3 = +HEAPF32[$0>>2];
 $4 = HEAP32[$1>>2]|0;
 $5 = (+($4|0));
 $6 = $3 >= $5;
 if ($6) {
  $7 = +HEAPF32[$0>>2];
  $8 = HEAP32[$1>>2]|0;
  $9 = ((($1)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + ($10))|0;
  $12 = (+($11|0));
  $13 = $7 <= $12;
  if ($13) {
   $14 = ((($0)) + 4|0);
   $15 = +HEAPF32[$14>>2];
   $16 = ((($1)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (+($17|0));
   $19 = $15 >= $18;
   if ($19) {
    $20 = ((($0)) + 4|0);
    $21 = +HEAPF32[$20>>2];
    $22 = ((($1)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($1)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($23) + ($25))|0;
    $27 = (+($26|0));
    $28 = $21 <= $27;
    if ($28) {
     HEAP32[$2>>2] = 1;
    }
   }
  }
 }
 $29 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _GetDefaultFont($0) {
 $0 = $0|0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; src=34520; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _DrawText($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 128|0;
 $$byval_copy = sp + 80|0;
 $5 = sp + 76|0;
 $6 = sp + 72|0;
 $7 = sp + 68|0;
 $8 = sp + 64|0;
 $9 = sp + 56|0;
 $10 = sp + 48|0;
 $11 = sp + 44|0;
 $12 = sp;
 HEAP32[$5>>2] = $0;
 HEAP32[$6>>2] = $1;
 HEAP32[$7>>2] = $2;
 HEAP32[$8>>2] = $3;
 $13 = HEAP32[8630]|0;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$6>>2]|0;
 $16 = (+($15|0));
 HEAPF32[$9>>2] = $16;
 $17 = ((($9)) + 4|0);
 $18 = HEAP32[$7>>2]|0;
 $19 = (+($18|0));
 HEAPF32[$17>>2] = $19;
 HEAP32[$10>>2] = 10;
 $20 = HEAP32[$8>>2]|0;
 $21 = HEAP32[$10>>2]|0;
 $22 = ($20|0)<($21|0);
 if ($22) {
  $23 = HEAP32[$10>>2]|0;
  HEAP32[$8>>2] = $23;
 }
 $24 = HEAP32[$8>>2]|0;
 $25 = HEAP32[$10>>2]|0;
 $26 = (($24|0) / ($25|0))&-1;
 HEAP32[$11>>2] = $26;
 _GetDefaultFont($12);
 $27 = HEAP32[$5>>2]|0;
 $28 = HEAP32[$8>>2]|0;
 $29 = (+($28|0));
 $30 = HEAP32[$11>>2]|0;
 dest=$$byval_copy; src=$12; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$9+4>>2]|0;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$4+3>>0]|0;
 _DrawTextEx($$byval_copy,$27,$$byval_copy1,$29,$30,$$byval_copy2);
 STACKTOP = sp;return;
}
function _DrawTextEx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0;
 var $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy7 = sp + 120|0;
 $$byval_copy6 = sp + 112|0;
 $$byval_copy5 = sp + 96|0;
 $$byval_copy4 = sp + 80|0;
 $$byval_copy3 = sp + 60|0;
 $6 = sp + 56|0;
 $7 = sp + 52|0;
 $8 = sp + 48|0;
 $9 = sp + 44|0;
 $10 = sp + 40|0;
 $11 = sp + 36|0;
 $12 = sp + 32|0;
 $13 = sp + 164|0;
 $14 = sp + 28|0;
 $15 = sp + 24|0;
 $16 = sp + 8|0;
 $17 = sp;
 HEAP32[$6>>2] = $1;
 HEAPF32[$7>>2] = $3;
 HEAP32[$8>>2] = $4;
 $18 = HEAP32[$6>>2]|0;
 $19 = (_strlen($18)|0);
 HEAP32[$9>>2] = $19;
 HEAP32[$10>>2] = 0;
 HEAP32[$11>>2] = 0;
 $20 = +HEAPF32[$7>>2];
 $21 = ((($0)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (+($22|0));
 $24 = $20 / $23;
 HEAPF32[$12>>2] = $24;
 HEAP32[$15>>2] = 0;
 while(1) {
  $25 = HEAP32[$15>>2]|0;
  $26 = HEAP32[$9>>2]|0;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = HEAP32[$15>>2]|0;
  $29 = HEAP32[$6>>2]|0;
  $30 = (($29) + ($28)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)==(10);
  do {
   if ($33) {
    $34 = ((($0)) + 20|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($0)) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37|0) / 2)&-1;
    $39 = (($35) + ($38))|0;
    $40 = (+($39|0));
    $41 = +HEAPF32[$12>>2];
    $42 = $40 * $41;
    $43 = HEAP32[$11>>2]|0;
    $44 = (+($43|0));
    $45 = $44 + $42;
    $46 = (~~(($45)));
    HEAP32[$11>>2] = $46;
    HEAP32[$10>>2] = 0;
   } else {
    $47 = HEAP32[$15>>2]|0;
    $48 = HEAP32[$6>>2]|0;
    $49 = (($48) + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = ($51|0)==(194);
    $53 = HEAP32[$15>>2]|0;
    do {
     if ($52) {
      $54 = (($53) + 1)|0;
      $55 = HEAP32[$6>>2]|0;
      $56 = (($55) + ($54)|0);
      $57 = HEAP8[$56>>0]|0;
      HEAP8[$13>>0] = $57;
      $58 = HEAP8[$13>>0]|0;
      $59 = $58&255;
      dest=$$byval_copy7; src=$0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $60 = (_GetCharIndex($$byval_copy7,$59)|0);
      HEAP32[$14>>2] = $60;
      $61 = HEAP32[$15>>2]|0;
      $62 = (($61) + 1)|0;
      HEAP32[$15>>2] = $62;
     } else {
      $63 = HEAP32[$6>>2]|0;
      $64 = (($63) + ($53)|0);
      $65 = HEAP8[$64>>0]|0;
      $66 = $65&255;
      $67 = ($66|0)==(195);
      $68 = HEAP32[$15>>2]|0;
      if ($67) {
       $69 = (($68) + 1)|0;
       $70 = HEAP32[$6>>2]|0;
       $71 = (($70) + ($69)|0);
       $72 = HEAP8[$71>>0]|0;
       HEAP8[$13>>0] = $72;
       $73 = HEAP8[$13>>0]|0;
       $74 = $73&255;
       $75 = (($74) + 64)|0;
       dest=$$byval_copy7; src=$0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
       $76 = (_GetCharIndex($$byval_copy7,$75)|0);
       HEAP32[$14>>2] = $76;
       $77 = HEAP32[$15>>2]|0;
       $78 = (($77) + 1)|0;
       HEAP32[$15>>2] = $78;
       break;
      } else {
       $79 = HEAP32[$6>>2]|0;
       $80 = (($79) + ($68)|0);
       $81 = HEAP8[$80>>0]|0;
       $82 = $81 << 24 >> 24;
       dest=$$byval_copy7; src=$0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
       $83 = (_GetCharIndex($$byval_copy7,$82)|0);
       HEAP32[$14>>2] = $83;
       break;
      }
     }
    } while(0);
    $84 = HEAP32[$14>>2]|0;
    $85 = ((($0)) + 32|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($84<<4)|0);
    $88 = +HEAPF32[$2>>2];
    $89 = HEAP32[$10>>2]|0;
    $90 = (+($89|0));
    $91 = $88 + $90;
    $92 = HEAP32[$14>>2]|0;
    $93 = ((($0)) + 36|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + ($92<<3)|0);
    $96 = +HEAPF32[$95>>2];
    $97 = +HEAPF32[$12>>2];
    $98 = $96 * $97;
    $99 = $91 + $98;
    $100 = (~~(($99)));
    HEAP32[$16>>2] = $100;
    $101 = ((($16)) + 4|0);
    $102 = ((($2)) + 4|0);
    $103 = +HEAPF32[$102>>2];
    $104 = HEAP32[$11>>2]|0;
    $105 = (+($104|0));
    $106 = $103 + $105;
    $107 = HEAP32[$14>>2]|0;
    $108 = ((($0)) + 36|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + ($107<<3)|0);
    $111 = ((($110)) + 4|0);
    $112 = +HEAPF32[$111>>2];
    $113 = +HEAPF32[$12>>2];
    $114 = $112 * $113;
    $115 = $106 + $114;
    $116 = (~~(($115)));
    HEAP32[$101>>2] = $116;
    $117 = ((($16)) + 8|0);
    $118 = HEAP32[$14>>2]|0;
    $119 = ((($0)) + 32|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + ($118<<4)|0);
    $122 = ((($121)) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (+($123|0));
    $125 = +HEAPF32[$12>>2];
    $126 = $124 * $125;
    $127 = (~~(($126)));
    HEAP32[$117>>2] = $127;
    $128 = ((($16)) + 12|0);
    $129 = HEAP32[$14>>2]|0;
    $130 = ((($0)) + 32|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + ($129<<4)|0);
    $133 = ((($132)) + 12|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (+($134|0));
    $136 = +HEAPF32[$12>>2];
    $137 = $135 * $136;
    $138 = (~~(($137)));
    HEAP32[$128>>2] = $138;
    HEAPF32[$17>>2] = 0.0;
    $139 = ((($17)) + 4|0);
    HEAPF32[$139>>2] = 0.0;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy3+16>>2]=HEAP32[$0+16>>2]|0;
    ;HEAP32[$$byval_copy4>>2]=HEAP32[$87>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$87+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$87+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$87+12>>2]|0;
    ;HEAP32[$$byval_copy5>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$16+12>>2]|0;
    ;HEAP32[$$byval_copy6>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$17+4>>2]|0;
    ;HEAP8[$$byval_copy7>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy7+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy7+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy7+3>>0]=HEAP8[$5+3>>0]|0;
    _DrawTexturePro($$byval_copy3,$$byval_copy4,$$byval_copy5,$$byval_copy6,0.0,$$byval_copy7);
    $140 = HEAP32[$14>>2]|0;
    $141 = ((($0)) + 40|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + ($140<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = ($144|0)==(0);
    $146 = HEAP32[$14>>2]|0;
    if ($145) {
     $147 = ((($0)) + 32|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($148) + ($146<<4)|0);
     $150 = ((($149)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = (+($151|0));
     $153 = +HEAPF32[$12>>2];
     $154 = $152 * $153;
     $155 = HEAP32[$8>>2]|0;
     $156 = (+($155|0));
     $157 = $154 + $156;
     $158 = HEAP32[$10>>2]|0;
     $159 = (+($158|0));
     $160 = $159 + $157;
     $161 = (~~(($160)));
     HEAP32[$10>>2] = $161;
     break;
    } else {
     $162 = ((($0)) + 40|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (($163) + ($146<<2)|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (+($165|0));
     $167 = +HEAPF32[$12>>2];
     $168 = $166 * $167;
     $169 = HEAP32[$8>>2]|0;
     $170 = (+($169|0));
     $171 = $168 + $170;
     $172 = HEAP32[$10>>2]|0;
     $173 = (+($172|0));
     $174 = $173 + $171;
     $175 = (~~(($174)));
     HEAP32[$10>>2] = $175;
     break;
    }
   }
  } while(0);
  $176 = HEAP32[$15>>2]|0;
  $177 = (($176) + 1)|0;
  HEAP32[$15>>2] = $177;
 }
 STACKTOP = sp;return;
}
function _GetCharIndex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $1;
 HEAP32[$3>>2] = 0;
 HEAP32[$4>>2] = 0;
 while(1) {
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = HEAP32[$4>>2]|0;
  $10 = ((($0)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($9<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$2>>2]|0;
  $15 = ($13|0)==($14|0);
  $16 = HEAP32[$4>>2]|0;
  if ($15) {
   break;
  }
  $17 = (($16) + 1)|0;
  HEAP32[$4>>2] = $17;
 }
 if ((label|0) == 6) {
  $18 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($18|0);
 }
 HEAP32[$3>>2] = $16;
 $18 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($18|0);
}
function _DrawTexturePro($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0;
 var $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0;
 var $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 HEAPF32[$6>>2] = $4;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = ((($1)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 if ($11) {
  $12 = ((($1)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) - ($13))|0;
  HEAP32[$1>>2] = $15;
 }
 $16 = ((($1)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)<(0);
 if ($18) {
  $19 = ((($1)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($1)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) - ($20))|0;
  HEAP32[$21>>2] = $23;
 }
 $24 = HEAP32[$0>>2]|0;
 _rlEnableTexture($24);
 _rlPushMatrix();
 $25 = HEAP32[$2>>2]|0;
 $26 = (+($25|0));
 $27 = ((($2)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (+($28|0));
 _rlTranslatef($26,$29,0.0);
 $30 = +HEAPF32[$6>>2];
 _rlRotatef($30,0.0,0.0,1.0);
 $31 = +HEAPF32[$3>>2];
 $32 = -$31;
 $33 = ((($3)) + 4|0);
 $34 = +HEAPF32[$33>>2];
 $35 = -$34;
 _rlTranslatef($32,$35,0.0);
 _rlBegin(2);
 $36 = HEAP8[$5>>0]|0;
 $37 = ((($5)) + 1|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ((($5)) + 2|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = ((($5)) + 3|0);
 $42 = HEAP8[$41>>0]|0;
 _rlColor4ub($36,$38,$40,$42);
 _rlNormal3f(0.0,0.0,1.0);
 $43 = HEAP32[$1>>2]|0;
 $44 = (+($43|0));
 $45 = ((($0)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (+($46|0));
 $48 = $44 / $47;
 $49 = ((($1)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (+($50|0));
 $52 = ((($0)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (+($53|0));
 $55 = $51 / $54;
 _rlTexCoord2f($48,$55);
 _rlVertex2f(0.0,0.0);
 $56 = HEAP32[$1>>2]|0;
 $57 = (+($56|0));
 $58 = ((($0)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (+($59|0));
 $61 = $57 / $60;
 $62 = ((($1)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($1)) + 12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($63) + ($65))|0;
 $67 = (+($66|0));
 $68 = ((($0)) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (+($69|0));
 $71 = $67 / $70;
 _rlTexCoord2f($61,$71);
 $72 = ((($2)) + 12|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (+($73|0));
 _rlVertex2f(0.0,$74);
 $75 = HEAP32[$1>>2]|0;
 $76 = ((($1)) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($75) + ($77))|0;
 $79 = (+($78|0));
 $80 = ((($0)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (+($81|0));
 $83 = $79 / $82;
 $84 = ((($1)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($1)) + 12|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + ($87))|0;
 $89 = (+($88|0));
 $90 = ((($0)) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (+($91|0));
 $93 = $89 / $92;
 _rlTexCoord2f($83,$93);
 $94 = ((($2)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (+($95|0));
 $97 = ((($2)) + 12|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (+($98|0));
 _rlVertex2f($96,$99);
 $100 = HEAP32[$1>>2]|0;
 $101 = ((($1)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($100) + ($102))|0;
 $104 = (+($103|0));
 $105 = ((($0)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (+($106|0));
 $108 = $104 / $107;
 $109 = ((($1)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (+($110|0));
 $112 = ((($0)) + 8|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (+($113|0));
 $115 = $111 / $114;
 _rlTexCoord2f($108,$115);
 $116 = ((($2)) + 8|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (+($117|0));
 _rlVertex2f($118,0.0);
 _rlEnd();
 _rlPopMatrix();
 _rlDisableTexture();
 STACKTOP = sp;return;
}
function _MeasureText($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 80|0;
 $2 = sp + 76|0;
 $3 = sp + 72|0;
 $4 = sp + 64|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 8|0;
 $8 = sp;
 HEAP32[$2>>2] = $0;
 HEAP32[$3>>2] = $1;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;
 $9 = HEAP32[8630]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $22 = +HEAPF32[$4>>2];
  $23 = (~~(($22)));
  STACKTOP = sp;return ($23|0);
 }
 HEAP32[$5>>2] = 10;
 $11 = HEAP32[$3>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = ($11|0)<($12|0);
 if ($13) {
  $14 = HEAP32[$5>>2]|0;
  HEAP32[$3>>2] = $14;
 }
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$5>>2]|0;
 $17 = (($15|0) / ($16|0))&-1;
 HEAP32[$6>>2] = $17;
 _GetDefaultFont($7);
 $18 = HEAP32[$2>>2]|0;
 $19 = HEAP32[$3>>2]|0;
 $20 = (+($19|0));
 $21 = HEAP32[$6>>2]|0;
 dest=$$byval_copy; src=$7; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MeasureTextEx($8,$$byval_copy,$18,$20,$21);
 ;HEAP32[$4>>2]=HEAP32[$8>>2]|0;HEAP32[$4+4>>2]=HEAP32[$8+4>>2]|0;
 $22 = +HEAPF32[$4>>2];
 $23 = (~~(($22)));
 STACKTOP = sp;return ($23|0);
}
function _MeasureTextEx($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 56|0;
 $5 = sp + 52|0;
 $6 = sp + 48|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $9 = sp + 36|0;
 $10 = sp + 32|0;
 $11 = sp + 28|0;
 $12 = sp + 24|0;
 $13 = sp + 20|0;
 $14 = sp + 16|0;
 $15 = sp + 12|0;
 $16 = sp + 8|0;
 $17 = sp;
 HEAP32[$5>>2] = $2;
 HEAPF32[$6>>2] = $3;
 HEAP32[$7>>2] = $4;
 $18 = HEAP32[$5>>2]|0;
 $19 = (_strlen($18)|0);
 HEAP32[$8>>2] = $19;
 HEAP32[$9>>2] = 0;
 HEAP32[$10>>2] = 0;
 HEAP32[$11>>2] = 0;
 HEAP32[$12>>2] = 0;
 $20 = ((($1)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$13>>2] = $21;
 $22 = +HEAPF32[$6>>2];
 $23 = ((($1)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (+($24|0));
 $26 = $22 / $25;
 HEAPF32[$14>>2] = $26;
 HEAP32[$15>>2] = 0;
 while(1) {
  $27 = HEAP32[$15>>2]|0;
  $28 = HEAP32[$8>>2]|0;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = HEAP32[$10>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$10>>2] = $31;
  $32 = HEAP32[$15>>2]|0;
  $33 = HEAP32[$5>>2]|0;
  $34 = (($33) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)!=(10);
  do {
   if ($37) {
    $38 = HEAP32[$15>>2]|0;
    $39 = HEAP32[$5>>2]|0;
    $40 = (($39) + ($38)|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41 << 24 >> 24;
    dest=$$byval_copy; src=$1; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $43 = (_GetCharIndex($$byval_copy,$42)|0);
    HEAP32[$16>>2] = $43;
    $44 = HEAP32[$16>>2]|0;
    $45 = ((($1)) + 40|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + ($44<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)!=(0);
    $50 = HEAP32[$16>>2]|0;
    if ($49) {
     $51 = ((($1)) + 40|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($52) + ($50<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = HEAP32[$11>>2]|0;
     $56 = (($55) + ($54))|0;
     HEAP32[$11>>2] = $56;
     break;
    } else {
     $57 = ((($1)) + 32|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (($58) + ($50<<4)|0);
     $60 = ((($59)) + 8|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (+($61|0));
     $63 = HEAP32[$16>>2]|0;
     $64 = ((($1)) + 36|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($65) + ($63<<3)|0);
     $67 = +HEAPF32[$66>>2];
     $68 = $62 + $67;
     $69 = HEAP32[$11>>2]|0;
     $70 = (+($69|0));
     $71 = $70 + $68;
     $72 = (~~(($71)));
     HEAP32[$11>>2] = $72;
     break;
    }
   } else {
    $73 = HEAP32[$12>>2]|0;
    $74 = HEAP32[$11>>2]|0;
    $75 = ($73|0)<($74|0);
    if ($75) {
     $76 = HEAP32[$11>>2]|0;
     HEAP32[$12>>2] = $76;
    }
    HEAP32[$10>>2] = 0;
    HEAP32[$11>>2] = 0;
    $77 = ((($1)) + 20|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ((($1)) + 20|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80|0) / 2)&-1;
    $82 = (($78) + ($81))|0;
    $83 = HEAP32[$13>>2]|0;
    $84 = (($83) + ($82))|0;
    HEAP32[$13>>2] = $84;
   }
  } while(0);
  $85 = HEAP32[$9>>2]|0;
  $86 = HEAP32[$10>>2]|0;
  $87 = ($85|0)<($86|0);
  if ($87) {
   $88 = HEAP32[$10>>2]|0;
   HEAP32[$9>>2] = $88;
  }
  $89 = HEAP32[$15>>2]|0;
  $90 = (($89) + 1)|0;
  HEAP32[$15>>2] = $90;
 }
 $91 = HEAP32[$12>>2]|0;
 $92 = HEAP32[$11>>2]|0;
 $93 = ($91|0)<($92|0);
 if (!($93)) {
  $95 = HEAP32[$12>>2]|0;
  $96 = (+($95|0));
  $97 = +HEAPF32[$14>>2];
  $98 = $96 * $97;
  $99 = HEAP32[$9>>2]|0;
  $100 = (($99) - 1)|0;
  $101 = HEAP32[$7>>2]|0;
  $102 = Math_imul($100, $101)|0;
  $103 = (+($102|0));
  $104 = $98 + $103;
  HEAPF32[$17>>2] = $104;
  $105 = HEAP32[$13>>2]|0;
  $106 = (+($105|0));
  $107 = +HEAPF32[$14>>2];
  $108 = $106 * $107;
  $109 = ((($17)) + 4|0);
  HEAPF32[$109>>2] = $108;
  ;HEAP32[$0>>2]=HEAP32[$17>>2]|0;HEAP32[$0+4>>2]=HEAP32[$17+4>>2]|0;
  STACKTOP = sp;return;
 }
 $94 = HEAP32[$11>>2]|0;
 HEAP32[$12>>2] = $94;
 $95 = HEAP32[$12>>2]|0;
 $96 = (+($95|0));
 $97 = +HEAPF32[$14>>2];
 $98 = $96 * $97;
 $99 = HEAP32[$9>>2]|0;
 $100 = (($99) - 1)|0;
 $101 = HEAP32[$7>>2]|0;
 $102 = Math_imul($100, $101)|0;
 $103 = (+($102|0));
 $104 = $98 + $103;
 HEAPF32[$17>>2] = $104;
 $105 = HEAP32[$13>>2]|0;
 $106 = (+($105|0));
 $107 = +HEAPF32[$14>>2];
 $108 = $106 * $107;
 $109 = ((($17)) + 4|0);
 HEAPF32[$109>>2] = $108;
 ;HEAP32[$0>>2]=HEAP32[$17>>2]|0;HEAP32[$0+4>>2]=HEAP32[$17+4>>2]|0;
 STACKTOP = sp;return;
}
function _DrawTexture($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 48|0;
 $$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 $7 = HEAP32[$4>>2]|0;
 $8 = (+($7|0));
 HEAPF32[$6>>2] = $8;
 $9 = ((($6)) + 4|0);
 $10 = HEAP32[$5>>2]|0;
 $11 = (+($10|0));
 HEAPF32[$9>>2] = $11;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$6+4>>2]|0;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$3+3>>0]|0;
 _DrawTextureEx($$byval_copy,$$byval_copy1,0.0,1.0,$$byval_copy2);
 STACKTOP = sp;return;
}
function _DrawTextureEx($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy4 = sp + 112|0;
 $$byval_copy3 = sp + 104|0;
 $$byval_copy2 = sp + 88|0;
 $$byval_copy1 = sp + 72|0;
 $$byval_copy = sp + 48|0;
 $5 = sp + 44|0;
 $6 = sp + 40|0;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp;
 HEAPF32[$5>>2] = $2;
 HEAPF32[$6>>2] = $3;
 HEAP32[$7>>2] = 0;
 $10 = ((($7)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($7)) + 8|0);
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$11>>2] = $13;
 $14 = ((($7)) + 12|0);
 $15 = ((($0)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$14>>2] = $16;
 $17 = +HEAPF32[$1>>2];
 $18 = (~~(($17)));
 HEAP32[$8>>2] = $18;
 $19 = ((($8)) + 4|0);
 $20 = ((($1)) + 4|0);
 $21 = +HEAPF32[$20>>2];
 $22 = (~~(($21)));
 HEAP32[$19>>2] = $22;
 $23 = ((($8)) + 8|0);
 $24 = ((($0)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (+($25|0));
 $27 = +HEAPF32[$6>>2];
 $28 = $26 * $27;
 $29 = (~~(($28)));
 HEAP32[$23>>2] = $29;
 $30 = ((($8)) + 12|0);
 $31 = ((($0)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (+($32|0));
 $34 = +HEAPF32[$6>>2];
 $35 = $33 * $34;
 $36 = (~~(($35)));
 HEAP32[$30>>2] = $36;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;
 $37 = +HEAPF32[$5>>2];
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$7+12>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$8+12>>2]|0;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$9+4>>2]|0;
 ;HEAP8[$$byval_copy4>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$4+3>>0]|0;
 _DrawTexturePro($$byval_copy,$$byval_copy1,$$byval_copy2,$$byval_copy3,$37,$$byval_copy4);
 STACKTOP = sp;return;
}
function _emscripten_GetProcAddress($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = $0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (_strlen($5)|0);
 $7 = (($6) + 1)|0;
 $8 = (_malloc($7)|0);
 HEAP32[$3>>2] = $8;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 (_strcpy($9,$10)|0);
 $11 = HEAP32[$3>>2]|0;
 $12 = (_strstr($11,22230)|0);
 HEAP32[$4>>2] = $12;
 $13 = HEAP32[$4>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = HEAP32[$4>>2]|0;
  HEAP8[$15>>0] = 0;
 }
 $16 = HEAP32[$3>>2]|0;
 $17 = (_strstr($16,22234)|0);
 HEAP32[$4>>2] = $17;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = HEAP32[$4>>2]|0;
  HEAP8[$20>>0] = 0;
 }
 $21 = HEAP32[$3>>2]|0;
 $22 = (_strstr($21,22238)|0);
 HEAP32[$4>>2] = $22;
 $23 = HEAP32[$4>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = HEAP32[$4>>2]|0;
  HEAP8[$25>>0] = 0;
 }
 $26 = HEAP32[$3>>2]|0;
 $27 = (_strstr($26,22242)|0);
 HEAP32[$4>>2] = $27;
 $28 = HEAP32[$4>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = HEAP32[$4>>2]|0;
  HEAP8[$30>>0] = 0;
 }
 $31 = HEAP32[$3>>2]|0;
 $32 = (_strcmp($31,22248)|0);
 $33 = ($32|0)!=(0);
 do {
  if ($33) {
   $34 = HEAP32[$3>>2]|0;
   $35 = (_strcmp($34,22286)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    HEAP32[$3>>2] = 22305;
    break;
   }
   $37 = HEAP32[$3>>2]|0;
   $38 = (_strcmp($37,22318)|0);
   $39 = ($38|0)!=(0);
   if (!($39)) {
    HEAP32[$3>>2] = 22339;
    break;
   }
   $40 = HEAP32[$3>>2]|0;
   $41 = (_strcmp($40,22354)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    HEAP32[$3>>2] = 22369;
    break;
   }
   $43 = HEAP32[$3>>2]|0;
   $44 = (_strcmp($43,22384)|0);
   $45 = ($44|0)!=(0);
   if (!($45)) {
    HEAP32[$3>>2] = 22399;
   }
  } else {
   HEAP32[$3>>2] = 22270;
  }
 } while(0);
 $46 = HEAP32[$3>>2]|0;
 $47 = (_strcmp($46,22414)|0);
 $48 = ($47|0)!=(0);
 do {
  if ($48) {
   $49 = HEAP32[$3>>2]|0;
   $50 = (_strcmp($49,22428)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    HEAP32[$1>>2] = 65;
    break;
   }
   $52 = HEAP32[$3>>2]|0;
   $53 = (_strcmp($52,22440)|0);
   $54 = ($53|0)!=(0);
   if (!($54)) {
    HEAP32[$1>>2] = 47;
    break;
   }
   $55 = HEAP32[$3>>2]|0;
   $56 = (_strcmp($55,22454)|0);
   $57 = ($56|0)!=(0);
   if (!($57)) {
    HEAP32[$1>>2] = 48;
    break;
   }
   $58 = HEAP32[$3>>2]|0;
   $59 = (_strcmp($58,22466)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    HEAP32[$1>>2] = 49;
    break;
   }
   $61 = HEAP32[$3>>2]|0;
   $62 = (_strcmp($61,22480)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    HEAP32[$1>>2] = 50;
    break;
   }
   $64 = HEAP32[$3>>2]|0;
   $65 = (_strcmp($64,22494)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    HEAP32[$1>>2] = 51;
    break;
   }
   $67 = HEAP32[$3>>2]|0;
   $68 = (_strcmp($67,22511)|0);
   $69 = ($68|0)!=(0);
   if (!($69)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $70 = HEAP32[$3>>2]|0;
   $71 = (_strcmp($70,22534)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $73 = HEAP32[$3>>2]|0;
   $74 = (_strcmp($73,22560)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $76 = HEAP32[$3>>2]|0;
   $77 = (_strcmp($76,22573)|0);
   $78 = ($77|0)!=(0);
   if (!($78)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $79 = HEAP32[$3>>2]|0;
   $80 = (_strcmp($79,22589)|0);
   $81 = ($80|0)!=(0);
   if (!($81)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $82 = HEAP32[$3>>2]|0;
   $83 = (_strcmp($82,22602)|0);
   $84 = ($83|0)!=(0);
   if (!($84)) {
    HEAP32[$1>>2] = 52;
    break;
   }
   $85 = HEAP32[$3>>2]|0;
   $86 = (_strcmp($85,22616)|0);
   $87 = ($86|0)!=(0);
   if (!($87)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $88 = HEAP32[$3>>2]|0;
   $89 = (_strcmp($88,22636)|0);
   $90 = ($89|0)!=(0);
   if (!($90)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $91 = HEAP32[$3>>2]|0;
   $92 = (_strcmp($91,22656)|0);
   $93 = ($92|0)!=(0);
   if (!($93)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $94 = HEAP32[$3>>2]|0;
   $95 = (_strcmp($94,22673)|0);
   $96 = ($95|0)!=(0);
   if (!($96)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $97 = HEAP32[$3>>2]|0;
   $98 = (_strcmp($97,22690)|0);
   $99 = ($98|0)!=(0);
   if (!($99)) {
    HEAP32[$1>>2] = 66;
    break;
   }
   $100 = HEAP32[$3>>2]|0;
   $101 = (_strcmp($100,22702)|0);
   $102 = ($101|0)!=(0);
   if (!($102)) {
    HEAP32[$1>>2] = 53;
    break;
   }
   $103 = HEAP32[$3>>2]|0;
   $104 = (_strcmp($103,22715)|0);
   $105 = ($104|0)!=(0);
   if (!($105)) {
    HEAP32[$1>>2] = 54;
    break;
   }
   $106 = HEAP32[$3>>2]|0;
   $107 = (_strcmp($106,22731)|0);
   $108 = ($107|0)!=(0);
   if (!($108)) {
    HEAP32[$1>>2] = 7;
    break;
   }
   $109 = HEAP32[$3>>2]|0;
   $110 = (_strcmp($109,22754)|0);
   $111 = ($110|0)!=(0);
   if (!($111)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $112 = HEAP32[$3>>2]|0;
   $113 = (_strcmp($112,22767)|0);
   $114 = ($113|0)!=(0);
   if (!($114)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $115 = HEAP32[$3>>2]|0;
   $116 = (_strcmp($115,22783)|0);
   $117 = ($116|0)!=(0);
   if (!($117)) {
    HEAP32[$1>>2] = 67;
    break;
   }
   $118 = HEAP32[$3>>2]|0;
   $119 = (_strcmp($118,22794)|0);
   $120 = ($119|0)!=(0);
   if (!($120)) {
    HEAP32[$1>>2] = 55;
    break;
   }
   $121 = HEAP32[$3>>2]|0;
   $122 = (_strcmp($121,22813)|0);
   $123 = ($122|0)!=(0);
   if (!($123)) {
    HEAP32[$1>>2] = 56;
    break;
   }
   $124 = HEAP32[$3>>2]|0;
   $125 = (_strcmp($124,22835)|0);
   $126 = ($125|0)!=(0);
   if (!($126)) {
    HEAP32[$1>>2] = 57;
    break;
   }
   $127 = HEAP32[$3>>2]|0;
   $128 = (_strcmp($127,22854)|0);
   $129 = ($128|0)!=(0);
   if (!($129)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $130 = HEAP32[$3>>2]|0;
   $131 = (_strcmp($130,22883)|0);
   $132 = ($131|0)!=(0);
   if (!($132)) {
    HEAP32[$1>>2] = 68;
    break;
   }
   $133 = HEAP32[$3>>2]|0;
   $134 = (_strcmp($133,22900)|0);
   $135 = ($134|0)!=(0);
   if (!($135)) {
    HEAP32[$1>>2] = 9;
    break;
   }
   $136 = HEAP32[$3>>2]|0;
   $137 = (_strcmp($136,22915)|0);
   $138 = ($137|0)!=(0);
   if (!($138)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $139 = HEAP32[$3>>2]|0;
   $140 = (_strcmp($139,22930)|0);
   $141 = ($140|0)!=(0);
   if (!($141)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $142 = HEAP32[$3>>2]|0;
   $143 = (_strcmp($142,22951)|0);
   $144 = ($143|0)!=(0);
   if (!($144)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $145 = HEAP32[$3>>2]|0;
   $146 = (_strcmp($145,22971)|0);
   $147 = ($146|0)!=(0);
   if (!($147)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $148 = HEAP32[$3>>2]|0;
   $149 = (_strcmp($148,22991)|0);
   $150 = ($149|0)!=(0);
   if (!($150)) {
    HEAP32[$1>>2] = 13;
    break;
   }
   $151 = HEAP32[$3>>2]|0;
   $152 = (_strcmp($151,23017)|0);
   $153 = ($152|0)!=(0);
   if (!($153)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $154 = HEAP32[$3>>2]|0;
   $155 = (_strcmp($154,23036)|0);
   $156 = ($155|0)!=(0);
   if (!($156)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $157 = HEAP32[$3>>2]|0;
   $158 = (_strcmp($157,23048)|0);
   $159 = ($158|0)!=(0);
   if (!($159)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $160 = HEAP32[$3>>2]|0;
   $161 = (_strcmp($160,23060)|0);
   $162 = ($161|0)!=(0);
   if (!($162)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $163 = HEAP32[$3>>2]|0;
   $164 = (_strcmp($163,23072)|0);
   $165 = ($164|0)!=(0);
   if (!($165)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $166 = HEAP32[$3>>2]|0;
   $167 = (_strcmp($166,23084)|0);
   $168 = ($167|0)!=(0);
   if (!($168)) {
    HEAP32[$1>>2] = 58;
    break;
   }
   $169 = HEAP32[$3>>2]|0;
   $170 = (_strcmp($169,23096)|0);
   $171 = ($170|0)!=(0);
   if (!($171)) {
    HEAP32[$1>>2] = 14;
    break;
   }
   $172 = HEAP32[$3>>2]|0;
   $173 = (_strcmp($172,23108)|0);
   $174 = ($173|0)!=(0);
   if (!($174)) {
    HEAP32[$1>>2] = 12;
    break;
   }
   $175 = HEAP32[$3>>2]|0;
   $176 = (_strcmp($175,23120)|0);
   $177 = ($176|0)!=(0);
   if (!($177)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $178 = HEAP32[$3>>2]|0;
   $179 = (_strcmp($178,23132)|0);
   $180 = ($179|0)!=(0);
   if (!($180)) {
    HEAP32[$1>>2] = 15;
    break;
   }
   $181 = HEAP32[$3>>2]|0;
   $182 = (_strcmp($181,23145)|0);
   $183 = ($182|0)!=(0);
   if (!($183)) {
    HEAP32[$1>>2] = 16;
    break;
   }
   $184 = HEAP32[$3>>2]|0;
   $185 = (_strcmp($184,23158)|0);
   $186 = ($185|0)!=(0);
   if (!($186)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $187 = HEAP32[$3>>2]|0;
   $188 = (_strcmp($187,23171)|0);
   $189 = ($188|0)!=(0);
   if (!($189)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $190 = HEAP32[$3>>2]|0;
   $191 = (_strcmp($190,23184)|0);
   $192 = ($191|0)!=(0);
   if (!($192)) {
    HEAP32[$1>>2] = 19;
    break;
   }
   $193 = HEAP32[$3>>2]|0;
   $194 = (_strcmp($193,23197)|0);
   $195 = ($194|0)!=(0);
   if (!($195)) {
    HEAP32[$1>>2] = 20;
    break;
   }
   $196 = HEAP32[$3>>2]|0;
   $197 = (_strcmp($196,23210)|0);
   $198 = ($197|0)!=(0);
   if (!($198)) {
    HEAP32[$1>>2] = 21;
    break;
   }
   $199 = HEAP32[$3>>2]|0;
   $200 = (_strcmp($199,23223)|0);
   $201 = ($200|0)!=(0);
   if (!($201)) {
    HEAP32[$1>>2] = 22;
    break;
   }
   $202 = HEAP32[$3>>2]|0;
   $203 = (_strcmp($202,23236)|0);
   $204 = ($203|0)!=(0);
   if (!($204)) {
    HEAP32[$1>>2] = 13;
    break;
   }
   $205 = HEAP32[$3>>2]|0;
   $206 = (_strcmp($205,23255)|0);
   $207 = ($206|0)!=(0);
   if (!($207)) {
    HEAP32[$1>>2] = 14;
    break;
   }
   $208 = HEAP32[$3>>2]|0;
   $209 = (_strcmp($208,23274)|0);
   $210 = ($209|0)!=(0);
   if (!($210)) {
    HEAP32[$1>>2] = 15;
    break;
   }
   $211 = HEAP32[$3>>2]|0;
   $212 = (_strcmp($211,23293)|0);
   $213 = ($212|0)!=(0);
   if (!($213)) {
    HEAP32[$1>>2] = 59;
    break;
   }
   $214 = HEAP32[$3>>2]|0;
   $215 = (_strcmp($214,23306)|0);
   $216 = ($215|0)!=(0);
   if (!($216)) {
    HEAP32[$1>>2] = 60;
    break;
   }
   $217 = HEAP32[$3>>2]|0;
   $218 = (_strcmp($217,23324)|0);
   $219 = ($218|0)!=(0);
   if (!($219)) {
    HEAP32[$1>>2] = 61;
    break;
   }
   $220 = HEAP32[$3>>2]|0;
   $221 = (_strcmp($220,23342)|0);
   $222 = ($221|0)!=(0);
   if (!($222)) {
    HEAP32[$1>>2] = 62;
    break;
   }
   $223 = HEAP32[$3>>2]|0;
   $224 = (_strcmp($223,23360)|0);
   $225 = ($224|0)!=(0);
   if (!($225)) {
    HEAP32[$1>>2] = 63;
    break;
   }
   $226 = HEAP32[$3>>2]|0;
   $227 = (_strcmp($226,23378)|0);
   $228 = ($227|0)!=(0);
   if (!($228)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $229 = HEAP32[$3>>2]|0;
   $230 = (_strcmp($229,23398)|0);
   $231 = ($230|0)!=(0);
   if (!($231)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $232 = HEAP32[$3>>2]|0;
   $233 = (_strcmp($232,22339)|0);
   $234 = ($233|0)!=(0);
   if (!($234)) {
    HEAP32[$1>>2] = 69;
    break;
   }
   $235 = HEAP32[$3>>2]|0;
   $236 = (_strcmp($235,23416)|0);
   $237 = ($236|0)!=(0);
   if (!($237)) {
    HEAP32[$1>>2] = 117;
    break;
   }
   $238 = HEAP32[$3>>2]|0;
   $239 = (_strcmp($238,23431)|0);
   $240 = ($239|0)!=(0);
   if (!($240)) {
    HEAP32[$1>>2] = 16;
    break;
   }
   $241 = HEAP32[$3>>2]|0;
   $242 = (_strcmp($241,23452)|0);
   $243 = ($242|0)!=(0);
   if (!($243)) {
    HEAP32[$1>>2] = 17;
    break;
   }
   $244 = HEAP32[$3>>2]|0;
   $245 = (_strcmp($244,23467)|0);
   $246 = ($245|0)!=(0);
   if (!($246)) {
    HEAP32[$1>>2] = 18;
    break;
   }
   $247 = HEAP32[$3>>2]|0;
   $248 = (_strcmp($247,23485)|0);
   $249 = ($248|0)!=(0);
   if (!($249)) {
    HEAP32[$1>>2] = 118;
    break;
   }
   $250 = HEAP32[$3>>2]|0;
   $251 = (_strcmp($250,23501)|0);
   $252 = ($251|0)!=(0);
   if (!($252)) {
    HEAP32[$1>>2] = 19;
    break;
   }
   $253 = HEAP32[$3>>2]|0;
   $254 = (_strcmp($253,23520)|0);
   $255 = ($254|0)!=(0);
   if (!($255)) {
    HEAP32[$1>>2] = 23;
    break;
   }
   $256 = HEAP32[$3>>2]|0;
   $257 = (_strcmp($256,23534)|0);
   $258 = ($257|0)!=(0);
   if (!($258)) {
    HEAP32[$1>>2] = 24;
    break;
   }
   $259 = HEAP32[$3>>2]|0;
   $260 = (_strcmp($259,23549)|0);
   $261 = ($260|0)!=(0);
   if (!($261)) {
    HEAP32[$1>>2] = 70;
    break;
   }
   $262 = HEAP32[$3>>2]|0;
   $263 = (_strcmp($262,22270)|0);
   $264 = ($263|0)!=(0);
   if (!($264)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $265 = HEAP32[$3>>2]|0;
   $266 = (_strcmp($265,23560)|0);
   $267 = ($266|0)!=(0);
   if (!($267)) {
    HEAP32[$1>>2] = 119;
    break;
   }
   $268 = HEAP32[$3>>2]|0;
   $269 = (_strcmp($268,22369)|0);
   $270 = ($269|0)!=(0);
   if (!($270)) {
    HEAP32[$1>>2] = 64;
    break;
   }
   $271 = HEAP32[$3>>2]|0;
   $272 = (_strcmp($271,22399)|0);
   $273 = ($272|0)!=(0);
   if (!($273)) {
    HEAP32[$1>>2] = 65;
    break;
   }
   $274 = HEAP32[$3>>2]|0;
   $275 = (_strcmp($274,23576)|0);
   $276 = ($275|0)!=(0);
   if (!($276)) {
    HEAP32[$1>>2] = 20;
    break;
   }
   $277 = HEAP32[$3>>2]|0;
   $278 = (_strcmp($277,23603)|0);
   $279 = ($278|0)!=(0);
   if (!($279)) {
    HEAP32[$1>>2] = 120;
    break;
   }
   $280 = HEAP32[$3>>2]|0;
   $281 = (_strcmp($280,23617)|0);
   $282 = ($281|0)!=(0);
   if (!($282)) {
    HEAP32[$1>>2] = 21;
    break;
   }
   $283 = HEAP32[$3>>2]|0;
   $284 = (_strcmp($283,22305)|0);
   $285 = ($284|0)!=(0);
   if (!($285)) {
    HEAP32[$1>>2] = 121;
    break;
   }
   $286 = HEAP32[$3>>2]|0;
   $287 = (_strcmp($286,23637)|0);
   $288 = ($287|0)!=(0);
   if (!($288)) {
    HEAP32[$1>>2] = 122;
    break;
   }
   $289 = HEAP32[$3>>2]|0;
   $290 = (_strcmp($289,23655)|0);
   $291 = ($290|0)!=(0);
   if (!($291)) {
    HEAP32[$1>>2] = 71;
    break;
   }
   $292 = HEAP32[$3>>2]|0;
   $293 = (_strcmp($292,23667)|0);
   $294 = ($293|0)!=(0);
   if (!($294)) {
    HEAP32[$1>>2] = 25;
    break;
   }
   $295 = HEAP32[$3>>2]|0;
   $296 = (_strcmp($295,23688)|0);
   $297 = ($296|0)!=(0);
   if (!($297)) {
    HEAP32[$1>>2] = 66;
    break;
   }
   $298 = HEAP32[$3>>2]|0;
   $299 = (_strcmp($298,23706)|0);
   $300 = ($299|0)!=(0);
   if (!($300)) {
    HEAP32[$1>>2] = 67;
    break;
   }
   $301 = HEAP32[$3>>2]|0;
   $302 = (_strcmp($301,23724)|0);
   $303 = ($302|0)!=(0);
   if (!($303)) {
    HEAP32[$1>>2] = 68;
    break;
   }
   $304 = HEAP32[$3>>2]|0;
   $305 = (_strcmp($304,23745)|0);
   $306 = ($305|0)!=(0);
   if (!($306)) {
    HEAP32[$1>>2] = 22;
    break;
   }
   $307 = HEAP32[$3>>2]|0;
   $308 = (_strcmp($307,23771)|0);
   $309 = ($308|0)!=(0);
   if (!($309)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $310 = HEAP32[$3>>2]|0;
   $311 = (_strcmp($310,23794)|0);
   $312 = ($311|0)!=(0);
   if (!($312)) {
    HEAP32[$1>>2] = 23;
    break;
   }
   $313 = HEAP32[$3>>2]|0;
   $314 = (_strcmp($313,23832)|0);
   $315 = ($314|0)!=(0);
   if (!($315)) {
    HEAP32[$1>>2] = 72;
    break;
   }
   $316 = HEAP32[$3>>2]|0;
   $317 = (_strcmp($316,23848)|0);
   $318 = ($317|0)!=(0);
   if (!($318)) {
    HEAP32[$1>>2] = 123;
    break;
   }
   $319 = HEAP32[$3>>2]|0;
   $320 = (_strcmp($319,23863)|0);
   $321 = ($320|0)!=(0);
   if (!($321)) {
    HEAP32[$1>>2] = 26;
    break;
   }
   $322 = HEAP32[$3>>2]|0;
   $323 = (_strcmp($322,23886)|0);
   $324 = ($323|0)!=(0);
   if (!($324)) {
    HEAP32[$1>>2] = 24;
    break;
   }
   $325 = HEAP32[$3>>2]|0;
   $326 = (_strcmp($325,23899)|0);
   $327 = ($326|0)!=(0);
   if (!($327)) {
    HEAP32[$1>>2] = 69;
    break;
   }
   $328 = HEAP32[$3>>2]|0;
   $329 = (_strcmp($328,23913)|0);
   $330 = ($329|0)!=(0);
   if (!($330)) {
    HEAP32[$1>>2] = 70;
    break;
   }
   $331 = HEAP32[$3>>2]|0;
   $332 = (_strcmp($331,23927)|0);
   $333 = ($332|0)!=(0);
   if (!($333)) {
    HEAP32[$1>>2] = 10;
    break;
   }
   $334 = HEAP32[$3>>2]|0;
   $335 = (_strcmp($334,23947)|0);
   $336 = ($335|0)!=(0);
   if (!($336)) {
    HEAP32[$1>>2] = 124;
    break;
   }
   $337 = HEAP32[$3>>2]|0;
   $338 = (_strcmp($337,23967)|0);
   $339 = ($338|0)!=(0);
   if (!($339)) {
    HEAP32[$1>>2] = 25;
    break;
   }
   $340 = HEAP32[$3>>2]|0;
   $341 = (_strcmp($340,23983)|0);
   $342 = ($341|0)!=(0);
   if (!($342)) {
    HEAP32[$1>>2] = 26;
    break;
   }
   $343 = HEAP32[$3>>2]|0;
   $344 = (_strcmp($343,24001)|0);
   $345 = ($344|0)!=(0);
   if (!($345)) {
    HEAP32[$1>>2] = 27;
    break;
   }
   $346 = HEAP32[$3>>2]|0;
   $347 = (_strcmp($346,24017)|0);
   $348 = ($347|0)!=(0);
   if (!($348)) {
    HEAP32[$1>>2] = 27;
    break;
   }
   $349 = HEAP32[$3>>2]|0;
   $350 = (_strcmp($349,24032)|0);
   $351 = ($350|0)!=(0);
   if (!($351)) {
    HEAP32[$1>>2] = 125;
    break;
   }
   $352 = HEAP32[$3>>2]|0;
   $353 = (_strcmp($352,24054)|0);
   $354 = ($353|0)!=(0);
   if (!($354)) {
    HEAP32[$1>>2] = 71;
    break;
   }
   $355 = HEAP32[$3>>2]|0;
   $356 = (_strcmp($355,24072)|0);
   $357 = ($356|0)!=(0);
   if (!($357)) {
    HEAP32[$1>>2] = 72;
    break;
   }
   $358 = HEAP32[$3>>2]|0;
   $359 = (_strcmp($358,24093)|0);
   $360 = ($359|0)!=(0);
   if (!($360)) {
    HEAP32[$1>>2] = 126;
    break;
   }
   $361 = HEAP32[$3>>2]|0;
   $362 = (_strcmp($361,24111)|0);
   $363 = ($362|0)!=(0);
   if (!($363)) {
    HEAP32[$1>>2] = 127;
    break;
   }
   $364 = HEAP32[$3>>2]|0;
   $365 = (_strcmp($364,24124)|0);
   $366 = ($365|0)!=(0);
   if (!($366)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $367 = HEAP32[$3>>2]|0;
   $368 = (_strcmp($367,24139)|0);
   $369 = ($368|0)!=(0);
   if (!($369)) {
    HEAP32[$1>>2] = 128;
    break;
   }
   $370 = HEAP32[$3>>2]|0;
   $371 = (_strcmp($370,24153)|0);
   $372 = ($371|0)!=(0);
   if (!($372)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $373 = HEAP32[$3>>2]|0;
   $374 = (_strcmp($373,24163)|0);
   $375 = ($374|0)!=(0);
   if (!($375)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $376 = HEAP32[$3>>2]|0;
   $377 = (_strcmp($376,24173)|0);
   $378 = ($377|0)!=(0);
   if (!($378)) {
    HEAP32[$1>>2] = 11;
    break;
   }
   $379 = HEAP32[$3>>2]|0;
   $380 = (_strcmp($379,24195)|0);
   $381 = ($380|0)!=(0);
   if (!($381)) {
    HEAP32[$1>>2] = 129;
    break;
   }
   $382 = HEAP32[$3>>2]|0;
   $383 = (_strcmp($382,24221)|0);
   $384 = ($383|0)!=(0);
   if (!($384)) {
    HEAP32[$1>>2] = 130;
    break;
   }
   $385 = HEAP32[$3>>2]|0;
   $386 = (_strcmp($385,24248)|0);
   $387 = ($386|0)!=(0);
   if (!($387)) {
    HEAP32[$1>>2] = 28;
    break;
   }
   $388 = HEAP32[$3>>2]|0;
   $389 = (_strcmp($388,24261)|0);
   $390 = ($389|0)!=(0);
   if (!($390)) {
    HEAP32[$1>>2] = 28;
    break;
   }
   $391 = HEAP32[$3>>2]|0;
   $392 = (_strcmp($391,24276)|0);
   $393 = ($392|0)!=(0);
   if (!($393)) {
    HEAP32[$1>>2] = 7;
    break;
   }
   $394 = HEAP32[$3>>2]|0;
   $395 = (_strcmp($394,24291)|0);
   $396 = ($395|0)!=(0);
   if (!($396)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $397 = HEAP32[$3>>2]|0;
   $398 = (_strcmp($397,24315)|0);
   $399 = ($398|0)!=(0);
   if (!($399)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $400 = HEAP32[$3>>2]|0;
   $401 = (_strcmp($400,24326)|0);
   $402 = ($401|0)!=(0);
   if (!($402)) {
    HEAP32[$1>>2] = 73;
    break;
   }
   $403 = HEAP32[$3>>2]|0;
   $404 = (_strcmp($403,24348)|0);
   $405 = ($404|0)!=(0);
   if (!($405)) {
    HEAP32[$1>>2] = 29;
    break;
   }
   $406 = HEAP32[$3>>2]|0;
   $407 = (_strcmp($406,24370)|0);
   $408 = ($407|0)!=(0);
   if (!($408)) {
    HEAP32[$1>>2] = 8;
    break;
   }
   $409 = HEAP32[$3>>2]|0;
   $410 = (_strcmp($409,24394)|0);
   $411 = ($410|0)!=(0);
   if (!($411)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   $412 = HEAP32[$3>>2]|0;
   $413 = (_strcmp($412,24403)|0);
   $414 = ($413|0)!=(0);
   if (!($414)) {
    HEAP32[$1>>2] = 6;
    break;
   }
   $415 = HEAP32[$3>>2]|0;
   $416 = (_strcmp($415,24411)|0);
   $417 = ($416|0)!=(0);
   if (!($417)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $418 = HEAP32[$3>>2]|0;
   $419 = (_strcmp($418,24424)|0);
   $420 = ($419|0)!=(0);
   if (!($420)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $421 = HEAP32[$3>>2]|0;
   $422 = (_strcmp($421,24438)|0);
   $423 = ($422|0)!=(0);
   if (!($423)) {
    HEAP32[$1>>2] = 131;
    break;
   }
   $424 = HEAP32[$3>>2]|0;
   $425 = (_strcmp($424,24450)|0);
   $426 = ($425|0)!=(0);
   if (!($426)) {
    HEAP32[$1>>2] = 132;
    break;
   }
   $427 = HEAP32[$3>>2]|0;
   $428 = (_strcmp($427,24459)|0);
   $429 = ($428|0)!=(0);
   if (!($429)) {
    HEAP32[$1>>2] = 133;
    break;
   }
   $430 = HEAP32[$3>>2]|0;
   $431 = (_strcmp($430,24469)|0);
   $432 = ($431|0)!=(0);
   if (!($432)) {
    HEAP32[$1>>2] = 134;
    break;
   }
   $433 = HEAP32[$3>>2]|0;
   $434 = (_strcmp($433,24481)|0);
   $435 = ($434|0)!=(0);
   if (!($435)) {
    HEAP32[$1>>2] = 135;
    break;
   }
   $436 = HEAP32[$3>>2]|0;
   $437 = (_strcmp($436,24492)|0);
   $438 = ($437|0)!=(0);
   if (!($438)) {
    HEAP32[$1>>2] = 136;
    break;
   }
   $439 = HEAP32[$3>>2]|0;
   $440 = (_strcmp($439,24500)|0);
   $441 = ($440|0)!=(0);
   if (!($441)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $442 = HEAP32[$3>>2]|0;
   $443 = (_strcmp($442,24512)|0);
   $444 = ($443|0)!=(0);
   if (!($444)) {
    HEAP32[$1>>2] = 137;
    break;
   }
   $445 = HEAP32[$3>>2]|0;
   $446 = (_strcmp($445,24527)|0);
   $447 = ($446|0)!=(0);
   if (!($447)) {
    HEAP32[$1>>2] = 138;
    break;
   }
   $448 = HEAP32[$3>>2]|0;
   $449 = (_strcmp($448,24539)|0);
   $450 = ($449|0)!=(0);
   if (!($450)) {
    HEAP32[$1>>2] = 139;
    break;
   }
   $451 = HEAP32[$3>>2]|0;
   $452 = (_strcmp($451,24553)|0);
   $453 = ($452|0)!=(0);
   if (!($453)) {
    HEAP32[$1>>2] = 73;
    break;
   }
   $454 = HEAP32[$3>>2]|0;
   $455 = (_strcmp($454,24578)|0);
   $456 = ($455|0)!=(0);
   if (!($456)) {
    HEAP32[$1>>2] = 140;
    break;
   }
   $457 = HEAP32[$3>>2]|0;
   $458 = (_strcmp($457,24595)|0);
   $459 = ($458|0)!=(0);
   if (!($459)) {
    HEAP32[$1>>2] = 141;
    break;
   }
   $460 = HEAP32[$3>>2]|0;
   $461 = (_strcmp($460,24611)|0);
   $462 = ($461|0)!=(0);
   if (!($462)) {
    HEAP32[$1>>2] = 142;
    break;
   }
   $463 = HEAP32[$3>>2]|0;
   $464 = (_strcmp($463,24627)|0);
   $465 = ($464|0)!=(0);
   if (!($465)) {
    HEAP32[$1>>2] = 74;
    break;
   }
   $466 = HEAP32[$3>>2]|0;
   $467 = (_strcmp($466,24639)|0);
   $468 = ($467|0)!=(0);
   if (!($468)) {
    HEAP32[$1>>2] = 74;
    break;
   }
   $469 = HEAP32[$3>>2]|0;
   $470 = (_strcmp($469,24651)|0);
   $471 = ($470|0)!=(0);
   if (!($471)) {
    HEAP32[$1>>2] = 75;
    break;
   }
   $472 = HEAP32[$3>>2]|0;
   $473 = (_strcmp($472,24675)|0);
   $474 = ($473|0)!=(0);
   if (!($474)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $475 = HEAP32[$3>>2]|0;
   $476 = (_strcmp($475,24688)|0);
   $477 = ($476|0)!=(0);
   if (!($477)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $478 = HEAP32[$3>>2]|0;
   $479 = (_strcmp($478,24702)|0);
   $480 = ($479|0)!=(0);
   if (!($480)) {
    HEAP32[$1>>2] = 76;
    break;
   }
   $481 = HEAP32[$3>>2]|0;
   $482 = (_strcmp($481,24724)|0);
   $483 = ($482|0)!=(0);
   if (!($483)) {
    HEAP32[$1>>2] = 77;
    break;
   }
   $484 = HEAP32[$3>>2]|0;
   $485 = (_strcmp($484,24731)|0);
   $486 = ($485|0)!=(0);
   if (!($486)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $487 = HEAP32[$3>>2]|0;
   $488 = (_strcmp($487,24747)|0);
   $489 = ($488|0)!=(0);
   if (!($489)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $490 = HEAP32[$3>>2]|0;
   $491 = (_strcmp($490,24764)|0);
   $492 = ($491|0)!=(0);
   if (!($492)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $493 = HEAP32[$3>>2]|0;
   $494 = (_strcmp($493,24781)|0);
   $495 = ($494|0)!=(0);
   if (!($495)) {
    HEAP32[$1>>2] = 29;
    break;
   }
   $496 = HEAP32[$3>>2]|0;
   $497 = (_strcmp($496,24797)|0);
   $498 = ($497|0)!=(0);
   if (!($498)) {
    HEAP32[$1>>2] = 1;
    break;
   }
   $499 = HEAP32[$3>>2]|0;
   $500 = (_strcmp($499,24813)|0);
   $501 = ($500|0)!=(0);
   if (!($501)) {
    HEAP32[$1>>2] = 4;
    break;
   }
   $502 = HEAP32[$3>>2]|0;
   $503 = (_strcmp($502,24830)|0);
   $504 = ($503|0)!=(0);
   if (!($504)) {
    HEAP32[$1>>2] = 30;
    break;
   }
   $505 = HEAP32[$3>>2]|0;
   $506 = (_strcmp($505,24844)|0);
   $507 = ($506|0)!=(0);
   if (!($507)) {
    HEAP32[$1>>2] = 31;
    break;
   }
   $508 = HEAP32[$3>>2]|0;
   $509 = (_strcmp($508,24856)|0);
   $510 = ($509|0)!=(0);
   if (!($510)) {
    HEAP32[$1>>2] = 30;
    break;
   }
   $511 = HEAP32[$3>>2]|0;
   $512 = (_strcmp($511,24867)|0);
   $513 = ($512|0)!=(0);
   if (!($513)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $514 = HEAP32[$3>>2]|0;
   $515 = (_strcmp($514,24880)|0);
   $516 = ($515|0)!=(0);
   if (!($516)) {
    HEAP32[$1>>2] = 31;
    break;
   }
   $517 = HEAP32[$3>>2]|0;
   $518 = (_strcmp($517,24890)|0);
   $519 = ($518|0)!=(0);
   if (!($519)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $520 = HEAP32[$3>>2]|0;
   $521 = (_strcmp($520,24907)|0);
   $522 = ($521|0)!=(0);
   if (!($522)) {
    HEAP32[$1>>2] = 32;
    break;
   }
   $523 = HEAP32[$3>>2]|0;
   $524 = (_strcmp($523,24919)|0);
   $525 = ($524|0)!=(0);
   if (!($525)) {
    HEAP32[$1>>2] = 33;
    break;
   }
   $526 = HEAP32[$3>>2]|0;
   $527 = (_strcmp($526,24941)|0);
   $528 = ($527|0)!=(0);
   if (!($528)) {
    HEAP32[$1>>2] = 34;
    break;
   }
   $529 = HEAP32[$3>>2]|0;
   $530 = (_strcmp($529,24961)|0);
   $531 = ($530|0)!=(0);
   if (!($531)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $532 = HEAP32[$3>>2]|0;
   $533 = (_strcmp($532,24974)|0);
   $534 = ($533|0)!=(0);
   if (!($534)) {
    HEAP32[$1>>2] = 35;
    break;
   }
   $535 = HEAP32[$3>>2]|0;
   $536 = (_strcmp($535,24996)|0);
   $537 = ($536|0)!=(0);
   if (!($537)) {
    HEAP32[$1>>2] = 36;
    break;
   }
   $538 = HEAP32[$3>>2]|0;
   $539 = (_strcmp($538,25016)|0);
   $540 = ($539|0)!=(0);
   if (!($540)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $541 = HEAP32[$3>>2]|0;
   $542 = (_strcmp($541,25033)|0);
   $543 = ($542|0)!=(0);
   if (!($543)) {
    HEAP32[$1>>2] = 2;
    break;
   }
   $544 = HEAP32[$3>>2]|0;
   $545 = (_strcmp($544,25050)|0);
   $546 = ($545|0)!=(0);
   if (!($546)) {
    HEAP32[$1>>2] = 3;
    break;
   }
   $547 = HEAP32[$3>>2]|0;
   $548 = (_strcmp($547,25070)|0);
   $549 = ($548|0)!=(0);
   if ($549) {
    $550 = HEAP32[$2>>2]|0;
    $551 = HEAP32[$3>>2]|0;
    $552 = _emscripten_asm_const_iii(0, ($550|0), ($551|0))|0;
    HEAP32[$1>>2] = 0;
    break;
   } else {
    HEAP32[$1>>2] = 78;
    break;
   }
  } else {
   HEAP32[$1>>2] = 46;
  }
 } while(0);
 $553 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($553|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[9199]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((143|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9199]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 36840;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _cleanup_387($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = HEAP32[9199]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $20 = ((($0)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $21;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $3;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $22 = (___syscall145(145,($vararg_buffer3|0))|0);
  $23 = (___syscall_ret($22)|0);
  $$0 = $23;
 } else {
  _pthread_cleanup_push((144|0),($0|0));
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer|0))|0);
  $19 = (___syscall_ret($18)|0);
  _pthread_cleanup_pop(0);
  $$0 = $19;
 }
 $24 = ($$0|0)<(1);
 if ($24) {
  $25 = $$0 & 48;
  $26 = $25 ^ 16;
  $27 = HEAP32[$0>>2]|0;
  $28 = $27 | $26;
  HEAP32[$0>>2] = $28;
  $29 = ((($0)) + 8|0);
  HEAP32[$29>>2] = 0;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = 0;
  $$026 = $$0;
 } else {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($$0>>>0)>($31>>>0);
  if ($32) {
   $33 = (($$0) - ($31))|0;
   $34 = HEAP32[$11>>2]|0;
   $35 = ((($0)) + 4|0);
   HEAP32[$35>>2] = $34;
   $$cast = $34;
   $36 = (($$cast) + ($33)|0);
   $37 = ((($0)) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = HEAP32[$5>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $$026 = $2;
   } else {
    $40 = ((($$cast)) + 1|0);
    HEAP32[$35>>2] = $40;
    $41 = HEAP8[$$cast>>0]|0;
    $42 = (($2) + -1)|0;
    $43 = (($1) + ($42)|0);
    HEAP8[$43>>0] = $41;
    $$026 = $2;
   }
  } else {
   $$026 = $$0;
  }
 }
 STACKTOP = sp;return ($$026|0);
}
function _cleanup_382($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 5;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function _strtoull_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoull($0,$1,$2)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 return ($4|0);
}
function _strtoull($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_519($0,$1,$2,-1,-1)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _strtox_519($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155188 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156206 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162$lcssa = 0, $$3162211 = 0, $$4163$be = 0, $$4163$lcssa = 0;
 var $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7194 = 0, $$8 = 0, $$9$be = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond183 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   $19 = ($16|0)==(45);
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((25187) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((25187) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $69 = ($$1165|0)==(10);
    if ($69) {
     $70 = (($$1160) + -48)|0;
     $71 = ($70>>>0)<(10);
     if ($71) {
      $$0154222 = 0;$74 = $70;
      while(1) {
       $72 = ($$0154222*10)|0;
       $73 = (($72) + ($74))|0;
       $75 = HEAP32[$6>>2]|0;
       $76 = HEAP32[$7>>2]|0;
       $77 = ($75>>>0)<($76>>>0);
       if ($77) {
        $78 = ((($75)) + 1|0);
        HEAP32[$6>>2] = $78;
        $79 = HEAP8[$75>>0]|0;
        $80 = $79&255;
        $$2161$be = $80;
       } else {
        $81 = (___shgetc($0)|0);
        $$2161$be = $81;
       }
       $82 = (($$2161$be) + -48)|0;
       $83 = ($82>>>0)<(10);
       $84 = ($73>>>0)<(429496729);
       $85 = $83 & $84;
       if ($85) {
        $$0154222 = $73;$74 = $82;
       } else {
        break;
       }
      }
      $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
     } else {
      $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
     }
     $86 = (($$2161$lcssa) + -48)|0;
     $87 = ($86>>>0)<(10);
     if ($87) {
      $$3162211 = $$2161$lcssa;$88 = $291;$89 = $292;$93 = $86;
      while(1) {
       $90 = (___muldi3(($88|0),($89|0),10,0)|0);
       $91 = tempRet0;
       $92 = ($93|0)<(0);
       $94 = $92 << 31 >> 31;
       $95 = $93 ^ -1;
       $96 = $94 ^ -1;
       $97 = ($91>>>0)>($96>>>0);
       $98 = ($90>>>0)>($95>>>0);
       $99 = ($91|0)==($96|0);
       $100 = $99 & $98;
       $101 = $97 | $100;
       if ($101) {
        $$3162$lcssa = $$3162211;$$lcssa = $93;$293 = $88;$294 = $89;
        break;
       }
       $102 = (_i64Add(($90|0),($91|0),($93|0),($94|0))|0);
       $103 = tempRet0;
       $104 = HEAP32[$6>>2]|0;
       $105 = HEAP32[$7>>2]|0;
       $106 = ($104>>>0)<($105>>>0);
       if ($106) {
        $107 = ((($104)) + 1|0);
        HEAP32[$6>>2] = $107;
        $108 = HEAP8[$104>>0]|0;
        $109 = $108&255;
        $$3162$be = $109;
       } else {
        $110 = (___shgetc($0)|0);
        $$3162$be = $110;
       }
       $111 = (($$3162$be) + -48)|0;
       $112 = ($111>>>0)<(10);
       $113 = ($103>>>0)<(429496729);
       $114 = ($102>>>0)<(2576980378);
       $115 = ($103|0)==(429496729);
       $116 = $115 & $114;
       $117 = $113 | $116;
       $or$cond7 = $112 & $117;
       if ($or$cond7) {
        $$3162211 = $$3162$be;$88 = $102;$89 = $103;$93 = $111;
       } else {
        $$3162$lcssa = $$3162$be;$$lcssa = $111;$293 = $102;$294 = $103;
        break;
       }
      }
      $118 = ($$lcssa>>>0)>(9);
      if ($118) {
       $$1158 = $$0157;$263 = $294;$265 = $293;
      } else {
       $$1165167 = 10;$$8 = $$3162$lcssa;$295 = $293;$296 = $294;
       label = 72;
      }
     } else {
      $$1158 = $$0157;$263 = $292;$265 = $291;
     }
    } else {
     $$1160169 = $$1160;$$1165168 = $$1165;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (25443 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((25187) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155188 = 0;$138 = $134;
       while(1) {
        $136 = $$1155188 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((25187) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155188 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$158 = 0;$160 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$158 = 0;$160 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $157 = ($158>>>0)>($153>>>0);
      $159 = ($160>>>0)>($152>>>0);
      $161 = ($158|0)==($153|0);
      $162 = $161 & $159;
      $163 = $157 | $162;
      $or$cond183 = $156 | $163;
      if ($or$cond183) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$295 = $160;$296 = $158;
       label = 72;
       break;
      } else {
       $164 = $160;$165 = $158;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((25187) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$295 = $170;$296 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((25187) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156206 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156206, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((25187) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156206 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$297 = $188;$298 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$297 = 0;$298 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7194 = $$6$lcssa;$209 = $298;$211 = $297;$218 = $204;
      while(1) {
       $208 = ($209>>>0)>($207>>>0);
       $210 = ($211>>>0)>($206>>>0);
       $212 = ($209|0)==($207|0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $211;$296 = $209;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($211|0),($209|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $211;$296 = $209;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((25187) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7194 = $$7$be;$209 = $226;$211 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$295 = $225;$296 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$295 = $297;$296 = $298;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((25187) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((25187) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$263 = $4;$265 = $3;
    } else {
     $$1158 = $$0157;$263 = $296;$265 = $295;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $262 = ($263>>>0)<($4>>>0);
   $264 = ($265>>>0)<($3>>>0);
   $266 = ($263|0)==($4|0);
   $267 = $266 & $264;
   $268 = $262 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($263>>>0)>($4>>>0);
    $278 = ($265>>>0)>($3>>>0);
    $279 = ($263|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $265 ^ $$1158;
   $286 = $263 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $27 = $42;
   }
   $26 = ($27|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($26) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $27;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==($7|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___toread($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 31]($0,$1,1)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP8[$1>>0]|0;
   $12 = $11&255;
   $$0 = $12;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 31]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 20;
 $18 = ($17|0)==(0);
 if ($18) {
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $22;
  $$0 = 0;
 } else {
  $19 = $16 & 4;
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = $16 | 32;
   HEAP32[$0>>2] = $21;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _strtoll_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoll($0,$1,$2)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 return ($4|0);
}
function _strtoll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_519($0,$1,$2,0,-2147483648)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$10 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $9 = ($10<<24>>24)==($6<<24>>24);
     $or$cond21 = $9 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $10;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$10 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=6216; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 31]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$79 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$79 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$79 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $78 = ($79<<24>>24)==(42);
  do {
   if ($78) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $79 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $79;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((25452 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 25932;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 25932;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 25932;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 25932 : (25934);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (25933);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 25932;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 25932;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 25942;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 25949;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (25950) : (25955);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (25952);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (25916 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$499 = $$pr$i;
       while(1) {
        $498 = ($499|0)>(29);
        $500 = $498 ? 29 : $499;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$499 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(25980,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(25980,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 25968 : 25972;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 27883 : 25976;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 25932;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$249 = 0;$251 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (25916 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$249 = $244;$251 = $247;
    }
    $248 = ($249|0)==(0);
    $250 = ($251|0)==(0);
    $252 = $248 & $250;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (25932 + ($255)|0);
    $$332 = $or$cond282 ? 25932 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 25932;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $805 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $804 = ($805|0)<(10);
      if ($804) {
       $$3379 = $805;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 31]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 31]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (25982 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 26070;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 26070;
  } else {
   $$01113 = 26070;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6328|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6332|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7872|0);
}
function _wcslen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(6);
 $4 = $isdigit | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0340$i = 0, $$$0345$i = 0, $$$0380$i = 0, $$$0396$i = 0, $$$5350$i = 0, $$$5385$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107163 = 0, $$0113 = 0, $$0114 = 0.0, $$0133$i = 0, $$0142$i = 0, $$0146$i = 0, $$0148$i = 0, $$0151$i = 0.0;
 var $$0152$i = 0.0, $$0155$i = 0.0, $$0159$i = 0, $$0166$i = 0, $$0166169$i = 0, $$0166170$i = 0, $$0324$i = 0, $$0327480$i = 0, $$0328$i = 0, $$0329$i = 0, $$0331476$i = 0, $$0335486$i = 0, $$0336$lcssa$i = 0, $$0336453$i = 0, $$0336454$i = 0, $$0336455$i = 0, $$0336503$i = 0, $$0340$lcssa$i = 0, $$0340457$i = 0, $$0340458$i = 0;
 var $$0340459$i = 0, $$0340502$i = 0, $$0345$lcssa545$i = 0, $$0345484$i = 0, $$0355$i = 0.0, $$0356$i = 0.0, $$0360474$i = 0.0, $$0364$i = 0, $$0367$i = 0, $$0375$i = 0, $$0375$ph$i = 0, $$0380$lcssa544$i = 0, $$0380483$i = 0, $$0388$i = 0, $$0391$i = 0, $$0396$lcssa$i = 0, $$0396463$i = 0, $$0396464$i = 0, $$0396465$i = 0, $$0396499$i = 0;
 var $$1$i = 0.0, $$1$lcssa = 0, $$1$ph$i = 0, $$10$i = 0, $$1108 = 0, $$1147$i = 0, $$1149$i = 0, $$1153$i = 0.0, $$1156$i = 0.0, $$1160$i = 0, $$1164 = 0, $$1325$be$i = 0, $$1325$ph$i = 0, $$1330$i = 0, $$1332$i = 0, $$1357$i = 0.0, $$1361$i = 0.0, $$1365$i = 0, $$1368$i = 0, $$1368$ph438$i = 0;
 var $$1376$i = 0, $$1376$ph$i = 0, $$1376$ph549$i = 0, $$1389$lcssa$i = 0, $$1389501$i = 0, $$2 = 0, $$2$i = 0, $$2$i117 = 0, $$2$lcssa$i = 0, $$2109161 = 0, $$2144$i = 0, $$2150$i = 0, $$2154$i = 0.0, $$2157$i = 0.0, $$2161$i = 0, $$2338$i = 0, $$2342$i = 0, $$2347$ph439$i = 0, $$2362$i = 0.0, $$2366$i = 0;
 var $$2369$i = 0, $$2382$ph437$i = 0, $$2390$i = 0, $$2393$i = 0, $$2398$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3110 = 0, $$3145$i = 0, $$3158$lcssa$i = 0.0, $$3158179$i = 0.0, $$3162 = 0, $$3162$lcssa$i = 0, $$3162183$i = 0, $$3339493$i = 0, $$3343$i = 0, $$3359$i = 0.0, $$3363$i = 0.0, $$3370$i = 0, $$3378$i = 0;
 var $$3394$lcssa$i = 0, $$3394500$i = 0, $$3504$i = 0, $$4 = 0, $$4$i = 0.0, $$408$i = 0, $$4111 = 0, $$416$i = 0, $$4163$lcssa$i = 0, $$4163178$i = 0, $$4344485$i = 0, $$4349$i = 0, $$4349$ph$i = 0, $$4349$ph550$i = 0, $$4371$i = 0, $$4379$i = 0, $$4384$ph$i = 0, $$4384$ph435$i = 0, $$4395$i = 0, $$4475$i = 0;
 var $$5 = 0, $$5$$2369$i = 0, $$5$i = 0.0, $$5$i121 = 0, $$5$in$i = 0, $$5164$i = 0, $$5350478$i = 0, $$5385477$i = 0, $$6 = 0, $$6$i = 0, $$6373$ph$i = 0, $$6479$i = 0, $$9473$i = 0, $$in = 0, $$neg432$i = 0, $$neg433$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i119 = 0;
 var $$pre$phi202$iZ2D = 0.0, $$pre201$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0;
 var $674 = 0.0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i = 0, $exitcond$i = 0;
 var $exitcond541$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i118 = 0, $or$cond168$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond410$i = 0, $or$cond412$i = 0, $or$cond413$i = 0, $or$cond414$i = 0, $or$cond417$i = 0, $or$cond418$i = 0, $or$cond5 = 0, $or$cond571$i = 0, $or$cond6$i = 0, $or$cond6$i122 = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0;
 var $storemerge$i = 0, $sum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $3 = sp;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $4 = ((($0)) + 4|0);
   $5 = ((($0)) + 100|0);
   while(1) {
    $6 = HEAP32[$4>>2]|0;
    $7 = HEAP32[$5>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$4>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($0)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
   }
   $16 = ($13|0)==(45);
   L13: do {
    switch ($13|0) {
    case 43: case 45:  {
     $17 = $16&1;
     $18 = $17 << 1;
     $19 = (1 - ($18))|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = HEAP32[$5>>2]|0;
     $22 = ($20>>>0)<($21>>>0);
     if ($22) {
      $23 = ((($20)) + 1|0);
      HEAP32[$4>>2] = $23;
      $24 = HEAP8[$20>>0]|0;
      $25 = $24&255;
      $$0 = $25;$$0113 = $19;
      break L13;
     } else {
      $26 = (___shgetc($0)|0);
      $$0 = $26;$$0113 = $19;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $13;$$0113 = 1;
    }
    }
   } while(0);
   $$0107163 = 0;$$1164 = $$0;
   while(1) {
    $27 = $$1164 | 32;
    $28 = (27874 + ($$0107163)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($27|0)==($30|0);
    if (!($31)) {
     $$0107$lcssa = $$0107163;$$1$lcssa = $$1164;
     break;
    }
    $32 = ($$0107163>>>0)<(7);
    do {
     if ($32) {
      $33 = HEAP32[$4>>2]|0;
      $34 = HEAP32[$5>>2]|0;
      $35 = ($33>>>0)<($34>>>0);
      if ($35) {
       $36 = ((($33)) + 1|0);
       HEAP32[$4>>2] = $36;
       $37 = HEAP8[$33>>0]|0;
       $38 = $37&255;
       $$2 = $38;
       break;
      } else {
       $39 = (___shgetc($0)|0);
       $$2 = $39;
       break;
      }
     } else {
      $$2 = $$1164;
     }
    } while(0);
    $40 = (($$0107163) + 1)|0;
    $41 = ($40>>>0)<(8);
    if ($41) {
     $$0107163 = $40;$$1164 = $$2;
    } else {
     $$0107$lcssa = $40;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $42 = ($$0107$lcssa>>>0)>(3);
     $43 = ($2|0)!=(0);
     $or$cond5 = $43 & $42;
     if ($or$cond5) {
      $44 = ($$0107$lcssa|0)==(8);
      if ($44) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($57) {
       $$2109161 = 0;$$3162 = $$1$lcssa;
       while(1) {
        $58 = $$3162 | 32;
        $59 = (27883 + ($$2109161)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3110 = $$2109161;$$5 = $$3162;
         break L34;
        }
        $63 = ($$2109161>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$4>>2]|0;
          $65 = HEAP32[$5>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$4>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3162;
         }
        } while(0);
        $71 = (($$2109161) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2109161 = $71;$$3162 = $$4;
        } else {
         $$3110 = $71;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $73 = HEAP32[$4>>2]|0;
      $74 = HEAP32[$5>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$4>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $81 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $81 = $79;
      }
      $80 = ($81|0)==(40);
      if ($80) {
       $$4111 = 1;
      } else {
       $82 = HEAP32[$5>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0114 = nan;
        break L4;
       }
       $84 = HEAP32[$4>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$4>>2] = $85;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $86 = HEAP32[$4>>2]|0;
       $87 = HEAP32[$5>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$4>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4111) + 1)|0;
       $$4111 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0114 = nan;
       break L4;
      }
      $102 = HEAP32[$5>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$4>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$4>>2] = $105;
      }
      if (!($43)) {
       $107 = (___errno_location()|0);
       HEAP32[$107>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $106 = ($$4111|0)==(0);
      if ($106) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$4>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$4>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      do {
       if ($118) {
        $119 = HEAP32[$4>>2]|0;
        $120 = HEAP32[$5>>2]|0;
        $121 = ($119>>>0)<($120>>>0);
        if ($121) {
         $122 = ((($119)) + 1|0);
         HEAP32[$4>>2] = $122;
         $123 = HEAP8[$119>>0]|0;
         $124 = $123&255;
         $127 = $124;
        } else {
         $125 = (___shgetc($0)|0);
         $127 = $125;
        }
        $126 = $127 | 32;
        $128 = ($126|0)==(120);
        if (!($128)) {
         $329 = HEAP32[$5>>2]|0;
         $330 = ($329|0)==(0|0);
         if ($330) {
          $$6 = 48;
          break;
         }
         $331 = HEAP32[$4>>2]|0;
         $332 = ((($331)) + -1|0);
         HEAP32[$4>>2] = $332;
         $$6 = 48;
         break;
        }
        $129 = HEAP32[$4>>2]|0;
        $130 = HEAP32[$5>>2]|0;
        $131 = ($129>>>0)<($130>>>0);
        if ($131) {
         $132 = ((($129)) + 1|0);
         HEAP32[$4>>2] = $132;
         $133 = HEAP8[$129>>0]|0;
         $134 = $133&255;
         $$0$i = $134;$$0142$i = 0;
        } else {
         $135 = (___shgetc($0)|0);
         $$0$i = $135;$$0142$i = 0;
        }
        L94: while(1) {
         switch ($$0$i|0) {
         case 46:  {
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $$0146$i = 0;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$0$i;$$2144$i = $$0142$i;$173 = 0;$175 = 0;$217 = 0;$219 = 0;
          break L94;
         }
         }
         $136 = HEAP32[$4>>2]|0;
         $137 = HEAP32[$5>>2]|0;
         $138 = ($136>>>0)<($137>>>0);
         if ($138) {
          $139 = ((($136)) + 1|0);
          HEAP32[$4>>2] = $139;
          $140 = HEAP8[$136>>0]|0;
          $141 = $140&255;
          $$0$i = $141;$$0142$i = 1;
          continue;
         } else {
          $142 = (___shgetc($0)|0);
          $$0$i = $142;$$0142$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $143 = HEAP32[$4>>2]|0;
         $144 = HEAP32[$5>>2]|0;
         $145 = ($143>>>0)<($144>>>0);
         if ($145) {
          $146 = ((($143)) + 1|0);
          HEAP32[$4>>2] = $146;
          $147 = HEAP8[$143>>0]|0;
          $148 = $147&255;
          $$1$ph$i = $148;
         } else {
          $149 = (___shgetc($0)|0);
          $$1$ph$i = $149;
         }
         $150 = ($$1$ph$i|0)==(48);
         if ($150) {
          $158 = 0;$159 = 0;
          while(1) {
           $151 = HEAP32[$4>>2]|0;
           $152 = HEAP32[$5>>2]|0;
           $153 = ($151>>>0)<($152>>>0);
           if ($153) {
            $154 = ((($151)) + 1|0);
            HEAP32[$4>>2] = $154;
            $155 = HEAP8[$151>>0]|0;
            $156 = $155&255;
            $163 = $156;
           } else {
            $157 = (___shgetc($0)|0);
            $163 = $157;
           }
           $160 = (_i64Add(($158|0),($159|0),-1,-1)|0);
           $161 = tempRet0;
           $162 = ($163|0)==(48);
           if ($162) {
            $158 = $160;$159 = $161;
           } else {
            $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $163;$$2144$i = 1;$173 = 0;$175 = 0;$217 = $160;$219 = $161;
            break;
           }
          }
         } else {
          $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$1$ph$i;$$2144$i = $$0142$i;$173 = 0;$175 = 0;$217 = 0;$219 = 0;
         }
        }
        while(1) {
         $164 = (($$2$i) + -48)|0;
         $165 = ($164>>>0)<(10);
         $$pre$i = $$2$i | 32;
         if ($165) {
          label = 86;
         } else {
          $166 = (($$pre$i) + -97)|0;
          $167 = ($166>>>0)<(6);
          $168 = ($$2$i|0)==(46);
          $or$cond6$i = $168 | $167;
          if (!($or$cond6$i)) {
           $$2$lcssa$i = $$2$i;
           break;
          }
          if ($168) {
           $169 = ($$0146$i|0)==(0);
           if ($169) {
            $$1147$i = 1;$$2150$i = $$0148$i;$$2154$i = $$0152$i;$$2157$i = $$0155$i;$$2161$i = $$0159$i;$$3145$i = $$2144$i;$693 = $175;$694 = $173;$695 = $175;$696 = $173;
           } else {
            $$2$lcssa$i = 46;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $170 = ($$2$i|0)>(57);
          $171 = (($$pre$i) + -87)|0;
          $$0133$i = $170 ? $171 : $164;
          $172 = ($173|0)<(0);
          $174 = ($175>>>0)<(8);
          $176 = ($173|0)==(0);
          $177 = $176 & $174;
          $178 = $172 | $177;
          do {
           if ($178) {
            $179 = $$0159$i << 4;
            $180 = (($$0133$i) + ($179))|0;
            $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $180;
           } else {
            $181 = ($173|0)<(0);
            $182 = ($175>>>0)<(14);
            $183 = ($173|0)==(0);
            $184 = $183 & $182;
            $185 = $181 | $184;
            if ($185) {
             $186 = (+($$0133$i|0));
             $187 = $$0152$i * 0.0625;
             $188 = $187 * $186;
             $189 = $$0155$i + $188;
             $$1149$i = $$0148$i;$$1153$i = $187;$$1156$i = $189;$$1160$i = $$0159$i;
             break;
            }
            $190 = ($$0133$i|0)==(0);
            $191 = ($$0148$i|0)!=(0);
            $or$cond$i = $191 | $190;
            if ($or$cond$i) {
             $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $$0159$i;
            } else {
             $192 = $$0152$i * 0.5;
             $193 = $$0155$i + $192;
             $$1149$i = 1;$$1153$i = $$0152$i;$$1156$i = $193;$$1160$i = $$0159$i;
            }
           }
          } while(0);
          $194 = (_i64Add(($175|0),($173|0),1,0)|0);
          $195 = tempRet0;
          $$1147$i = $$0146$i;$$2150$i = $$1149$i;$$2154$i = $$1153$i;$$2157$i = $$1156$i;$$2161$i = $$1160$i;$$3145$i = 1;$693 = $217;$694 = $219;$695 = $194;$696 = $195;
         }
         $196 = HEAP32[$4>>2]|0;
         $197 = HEAP32[$5>>2]|0;
         $198 = ($196>>>0)<($197>>>0);
         if ($198) {
          $199 = ((($196)) + 1|0);
          HEAP32[$4>>2] = $199;
          $200 = HEAP8[$196>>0]|0;
          $201 = $200&255;
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $201;$$2144$i = $$3145$i;$173 = $696;$175 = $695;$217 = $693;$219 = $694;
          continue;
         } else {
          $202 = (___shgetc($0)|0);
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $202;$$2144$i = $$3145$i;$173 = $696;$175 = $695;$217 = $693;$219 = $694;
          continue;
         }
        }
        $203 = ($$2144$i|0)==(0);
        if ($203) {
         $204 = HEAP32[$5>>2]|0;
         $205 = ($204|0)==(0|0);
         if (!($205)) {
          $206 = HEAP32[$4>>2]|0;
          $207 = ((($206)) + -1|0);
          HEAP32[$4>>2] = $207;
         }
         $208 = ($2|0)==(0);
         if ($208) {
          ___shlim($0,0);
         } else {
          if (!($205)) {
           $209 = HEAP32[$4>>2]|0;
           $210 = ((($209)) + -1|0);
           HEAP32[$4>>2] = $210;
           $211 = ($$0146$i|0)==(0);
           if (!($211)) {
            $212 = ((($209)) + -2|0);
            HEAP32[$4>>2] = $212;
           }
          }
         }
         $213 = (+($$0113|0));
         $214 = $213 * 0.0;
         $$0114 = $214;
         break L4;
        }
        $215 = ($$0146$i|0)==(0);
        $216 = $215 ? $175 : $217;
        $218 = $215 ? $173 : $219;
        $220 = ($173|0)<(0);
        $221 = ($175>>>0)<(8);
        $222 = ($173|0)==(0);
        $223 = $222 & $221;
        $224 = $220 | $223;
        if ($224) {
         $$3162183$i = $$0159$i;$226 = $175;$227 = $173;
         while(1) {
          $225 = $$3162183$i << 4;
          $228 = (_i64Add(($226|0),($227|0),1,0)|0);
          $229 = tempRet0;
          $230 = ($229|0)<(0);
          $231 = ($228>>>0)<(8);
          $232 = ($229|0)==(0);
          $233 = $232 & $231;
          $234 = $230 | $233;
          if ($234) {
           $$3162183$i = $225;$226 = $228;$227 = $229;
          } else {
           $$3162$lcssa$i = $225;
           break;
          }
         }
        } else {
         $$3162$lcssa$i = $$0159$i;
        }
        $235 = $$2$lcssa$i | 32;
        $236 = ($235|0)==(112);
        if ($236) {
         $237 = (_scanexp($0,$2)|0);
         $238 = tempRet0;
         $239 = ($237|0)==(0);
         $240 = ($238|0)==(-2147483648);
         $241 = $239 & $240;
         if ($241) {
          $242 = ($2|0)==(0);
          if ($242) {
           ___shlim($0,0);
           $$0114 = 0.0;
           break L4;
          }
          $243 = HEAP32[$5>>2]|0;
          $244 = ($243|0)==(0|0);
          if ($244) {
           $255 = 0;$256 = 0;
          } else {
           $245 = HEAP32[$4>>2]|0;
           $246 = ((($245)) + -1|0);
           HEAP32[$4>>2] = $246;
           $255 = 0;$256 = 0;
          }
         } else {
          $255 = $237;$256 = $238;
         }
        } else {
         $247 = HEAP32[$5>>2]|0;
         $248 = ($247|0)==(0|0);
         if ($248) {
          $255 = 0;$256 = 0;
         } else {
          $249 = HEAP32[$4>>2]|0;
          $250 = ((($249)) + -1|0);
          HEAP32[$4>>2] = $250;
          $255 = 0;$256 = 0;
         }
        }
        $251 = (_bitshift64Shl(($216|0),($218|0),2)|0);
        $252 = tempRet0;
        $253 = (_i64Add(($251|0),($252|0),-32,-1)|0);
        $254 = tempRet0;
        $257 = (_i64Add(($253|0),($254|0),($255|0),($256|0))|0);
        $258 = tempRet0;
        $259 = ($$3162$lcssa$i|0)==(0);
        if ($259) {
         $260 = (+($$0113|0));
         $261 = $260 * 0.0;
         $$0114 = $261;
         break L4;
        }
        $262 = (0 - ($$0105$ph))|0;
        $263 = ($258|0)>(0);
        $264 = ($257>>>0)>($262>>>0);
        $265 = ($258|0)==(0);
        $266 = $265 & $264;
        $267 = $263 | $266;
        if ($267) {
         $268 = (___errno_location()|0);
         HEAP32[$268>>2] = 34;
         $269 = (+($$0113|0));
         $270 = $269 * 1.7976931348623157E+308;
         $271 = $270 * 1.7976931348623157E+308;
         $$0114 = $271;
         break L4;
        }
        $272 = (($$0105$ph) + -106)|0;
        $273 = ($272|0)<(0);
        $274 = $273 << 31 >> 31;
        $275 = ($258|0)<($274|0);
        $276 = ($257>>>0)<($272>>>0);
        $277 = ($258|0)==($274|0);
        $278 = $277 & $276;
        $279 = $275 | $278;
        if ($279) {
         $281 = (___errno_location()|0);
         HEAP32[$281>>2] = 34;
         $282 = (+($$0113|0));
         $283 = $282 * 2.2250738585072014E-308;
         $284 = $283 * 2.2250738585072014E-308;
         $$0114 = $284;
         break L4;
        }
        $280 = ($$3162$lcssa$i|0)>(-1);
        if ($280) {
         $$3158179$i = $$0155$i;$$4163178$i = $$3162$lcssa$i;$290 = $257;$291 = $258;
         while(1) {
          $285 = !($$3158179$i >= 0.5);
          $286 = $$4163178$i << 1;
          $287 = $$3158179$i + -1.0;
          $288 = $285&1;
          $289 = $288 | $286;
          $$5164$i = $289 ^ 1;
          $$pn$i = $285 ? $$3158179$i : $287;
          $$4$i = $$3158179$i + $$pn$i;
          $292 = (_i64Add(($290|0),($291|0),-1,-1)|0);
          $293 = tempRet0;
          $294 = ($289|0)>(-1);
          if ($294) {
           $$3158179$i = $$4$i;$$4163178$i = $$5164$i;$290 = $292;$291 = $293;
          } else {
           $$3158$lcssa$i = $$4$i;$$4163$lcssa$i = $$5164$i;$299 = $292;$300 = $293;
           break;
          }
         }
        } else {
         $$3158$lcssa$i = $$0155$i;$$4163$lcssa$i = $$3162$lcssa$i;$299 = $257;$300 = $258;
        }
        $295 = ($$0105$ph|0)<(0);
        $296 = $295 << 31 >> 31;
        $297 = (_i64Subtract(32,0,($$0105$ph|0),($296|0))|0);
        $298 = tempRet0;
        $301 = (_i64Add(($299|0),($300|0),($297|0),($298|0))|0);
        $302 = tempRet0;
        $303 = (0)>($302|0);
        $304 = ($$0106$ph>>>0)>($301>>>0);
        $305 = (0)==($302|0);
        $306 = $305 & $304;
        $307 = $303 | $306;
        if ($307) {
         $308 = ($301|0)<(0);
         if ($308) {
          $$0166170$i = 0;$311 = 84;
          label = 127;
         } else {
          $$0166$i = $301;
          label = 125;
         }
        } else {
         $$0166$i = $$0106$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $309 = ($$0166$i|0)<(53);
         $310 = (84 - ($$0166$i))|0;
         if ($309) {
          $$0166170$i = $$0166$i;$311 = $310;
          label = 127;
         } else {
          $$pre201$i = (+($$0113|0));
          $$0151$i = 0.0;$$0166169$i = $$0166$i;$$pre$phi202$iZ2D = $$pre201$i;
         }
        }
        if ((label|0) == 127) {
         $312 = (+_scalbn(1.0,$311));
         $313 = (+($$0113|0));
         $314 = (+_copysignl($312,$313));
         $$0151$i = $314;$$0166169$i = $$0166170$i;$$pre$phi202$iZ2D = $313;
        }
        $315 = ($$0166169$i|0)<(32);
        $316 = $$3158$lcssa$i != 0.0;
        $or$cond4$i = $316 & $315;
        $317 = $$4163$lcssa$i & 1;
        $318 = ($317|0)==(0);
        $or$cond168$i = $318 & $or$cond4$i;
        $319 = $or$cond168$i&1;
        $$6$i = (($319) + ($$4163$lcssa$i))|0;
        $$5$i = $or$cond168$i ? 0.0 : $$3158$lcssa$i;
        $320 = (+($$6$i>>>0));
        $321 = $$pre$phi202$iZ2D * $320;
        $322 = $$0151$i + $321;
        $323 = $$pre$phi202$iZ2D * $$5$i;
        $324 = $323 + $322;
        $325 = $324 - $$0151$i;
        $326 = $325 != 0.0;
        if (!($326)) {
         $327 = (___errno_location()|0);
         HEAP32[$327>>2] = 34;
        }
        $328 = (+_scalbnl($325,$299));
        $$0114 = $328;
        break L4;
       } else {
        $$6 = $$5;
       }
      } while(0);
      $sum$i = (($$0105$ph) + ($$0106$ph))|0;
      $333 = (0 - ($sum$i))|0;
      $$0324$i = $$6;$$0391$i = 0;
      L184: while(1) {
       switch ($$0324$i|0) {
       case 46:  {
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$0388$i = 0;$$2$i117 = $$0324$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
        break L184;
       }
       }
       $334 = HEAP32[$4>>2]|0;
       $335 = HEAP32[$5>>2]|0;
       $336 = ($334>>>0)<($335>>>0);
       if ($336) {
        $337 = ((($334)) + 1|0);
        HEAP32[$4>>2] = $337;
        $338 = HEAP8[$334>>0]|0;
        $339 = $338&255;
        $$0324$i = $339;$$0391$i = 1;
        continue;
       } else {
        $340 = (___shgetc($0)|0);
        $$0324$i = $340;$$0391$i = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $341 = HEAP32[$4>>2]|0;
       $342 = HEAP32[$5>>2]|0;
       $343 = ($341>>>0)<($342>>>0);
       if ($343) {
        $344 = ((($341)) + 1|0);
        HEAP32[$4>>2] = $344;
        $345 = HEAP8[$341>>0]|0;
        $346 = $345&255;
        $$1325$ph$i = $346;
       } else {
        $347 = (___shgetc($0)|0);
        $$1325$ph$i = $347;
       }
       $348 = ($$1325$ph$i|0)==(48);
       if ($348) {
        $349 = 0;$350 = 0;
        while(1) {
         $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
         $352 = tempRet0;
         $353 = HEAP32[$4>>2]|0;
         $354 = HEAP32[$5>>2]|0;
         $355 = ($353>>>0)<($354>>>0);
         if ($355) {
          $356 = ((($353)) + 1|0);
          HEAP32[$4>>2] = $356;
          $357 = HEAP8[$353>>0]|0;
          $358 = $357&255;
          $$1325$be$i = $358;
         } else {
          $359 = (___shgetc($0)|0);
          $$1325$be$i = $359;
         }
         $360 = ($$1325$be$i|0)==(48);
         if ($360) {
          $349 = $351;$350 = $352;
         } else {
          $$0388$i = 1;$$2$i117 = $$1325$be$i;$$2393$i = 1;$697 = $351;$698 = $352;
          break;
         }
        }
       } else {
        $$0388$i = 1;$$2$i117 = $$1325$ph$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
       }
      }
      HEAP32[$3>>2] = 0;
      $361 = (($$2$i117) + -48)|0;
      $362 = ($361>>>0)<(10);
      $363 = ($$2$i117|0)==(46);
      $364 = $363 | $362;
      L203: do {
       if ($364) {
        $365 = ((($3)) + 496|0);
        $$0336503$i = 0;$$0340502$i = 0;$$0396499$i = 0;$$1389501$i = $$0388$i;$$3394500$i = $$2393$i;$$3504$i = $$2$i117;$368 = 0;$369 = 0;$699 = $363;$700 = $361;$701 = $697;$702 = $698;
        L205: while(1) {
         do {
          if ($699) {
           $cond$i = ($$1389501$i|0)==(0);
           if ($cond$i) {
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = 1;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $368;$704 = $369;$705 = $368;$706 = $369;
           } else {
            break L205;
           }
          } else {
           $367 = ($$0340502$i|0)<(125);
           $370 = (_i64Add(($368|0),($369|0),1,0)|0);
           $371 = tempRet0;
           $372 = ($$3504$i|0)!=(48);
           if (!($367)) {
            if (!($372)) {
             $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
             break;
            }
            $382 = HEAP32[$365>>2]|0;
            $383 = $382 | 1;
            HEAP32[$365>>2] = $383;
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
            break;
           }
           $$$0396$i = $372 ? $370 : $$0396499$i;
           $373 = ($$0336503$i|0)==(0);
           $374 = (($3) + ($$0340502$i<<2)|0);
           if ($373) {
            $storemerge$i = $700;
           } else {
            $375 = (($$3504$i) + -48)|0;
            $376 = HEAP32[$374>>2]|0;
            $377 = ($376*10)|0;
            $378 = (($375) + ($377))|0;
            $storemerge$i = $378;
           }
           HEAP32[$374>>2] = $storemerge$i;
           $379 = (($$0336503$i) + 1)|0;
           $380 = ($379|0)==(9);
           $381 = $380&1;
           $$$0340$i = (($381) + ($$0340502$i))|0;
           $$408$i = $380 ? 0 : $379;
           $$2338$i = $$408$i;$$2342$i = $$$0340$i;$$2390$i = $$1389501$i;$$2398$i = $$$0396$i;$$4395$i = 1;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
          }
         } while(0);
         $384 = HEAP32[$4>>2]|0;
         $385 = HEAP32[$5>>2]|0;
         $386 = ($384>>>0)<($385>>>0);
         if ($386) {
          $387 = ((($384)) + 1|0);
          HEAP32[$4>>2] = $387;
          $388 = HEAP8[$384>>0]|0;
          $389 = $388&255;
          $$3$be$i = $389;
         } else {
          $390 = (___shgetc($0)|0);
          $$3$be$i = $390;
         }
         $391 = (($$3$be$i) + -48)|0;
         $392 = ($391>>>0)<(10);
         $393 = ($$3$be$i|0)==(46);
         $394 = $393 | $392;
         if ($394) {
          $$0336503$i = $$2338$i;$$0340502$i = $$2342$i;$$0396499$i = $$2398$i;$$1389501$i = $$2390$i;$$3394500$i = $$4395$i;$$3504$i = $$3$be$i;$368 = $705;$369 = $706;$699 = $393;$700 = $391;$701 = $703;$702 = $704;
         } else {
          $$0336$lcssa$i = $$2338$i;$$0340$lcssa$i = $$2342$i;$$0396$lcssa$i = $$2398$i;$$1389$lcssa$i = $$2390$i;$$3$lcssa$i = $$3$be$i;$$3394$lcssa$i = $$4395$i;$397 = $705;$398 = $703;$400 = $706;$401 = $704;
          label = 161;
          break L203;
         }
        }
        $366 = ($$3394500$i|0)!=(0);
        $$0336455$i = $$0336503$i;$$0340459$i = $$0340502$i;$$0396465$i = $$0396499$i;$707 = $368;$708 = $369;$709 = $701;$710 = $702;$711 = $366;
        label = 169;
       } else {
        $$0336$lcssa$i = 0;$$0340$lcssa$i = 0;$$0396$lcssa$i = 0;$$1389$lcssa$i = $$0388$i;$$3$lcssa$i = $$2$i117;$$3394$lcssa$i = $$2393$i;$397 = 0;$398 = $697;$400 = 0;$401 = $698;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $395 = ($$1389$lcssa$i|0)==(0);
        $396 = $395 ? $397 : $398;
        $399 = $395 ? $400 : $401;
        $402 = ($$3394$lcssa$i|0)!=(0);
        $403 = $$3$lcssa$i | 32;
        $404 = ($403|0)==(101);
        $or$cond410$i = $402 & $404;
        if (!($or$cond410$i)) {
         $419 = ($$3$lcssa$i|0)>(-1);
         if ($419) {
          $$0336455$i = $$0336$lcssa$i;$$0340459$i = $$0340$lcssa$i;$$0396465$i = $$0396$lcssa$i;$707 = $397;$708 = $400;$709 = $396;$710 = $399;$711 = $402;
          label = 169;
          break;
         } else {
          $$0336454$i = $$0336$lcssa$i;$$0340458$i = $$0340$lcssa$i;$$0396464$i = $$0396$lcssa$i;$712 = $397;$713 = $400;$714 = $402;$715 = $396;$716 = $399;
          label = 171;
          break;
         }
        }
        $405 = (_scanexp($0,$2)|0);
        $406 = tempRet0;
        $407 = ($405|0)==(0);
        $408 = ($406|0)==(-2147483648);
        $409 = $407 & $408;
        if ($409) {
         $410 = ($2|0)==(0);
         if ($410) {
          ___shlim($0,0);
          $$1$i = 0.0;
          break;
         }
         $411 = HEAP32[$5>>2]|0;
         $412 = ($411|0)==(0|0);
         if ($412) {
          $415 = 0;$416 = 0;
         } else {
          $413 = HEAP32[$4>>2]|0;
          $414 = ((($413)) + -1|0);
          HEAP32[$4>>2] = $414;
          $415 = 0;$416 = 0;
         }
        } else {
         $415 = $405;$416 = $406;
        }
        $417 = (_i64Add(($415|0),($416|0),($396|0),($399|0))|0);
        $418 = tempRet0;
        $$0336453$i = $$0336$lcssa$i;$$0340457$i = $$0340$lcssa$i;$$0396463$i = $$0396$lcssa$i;$430 = $417;$431 = $397;$433 = $418;$434 = $400;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $420 = HEAP32[$5>>2]|0;
       $421 = ($420|0)==(0|0);
       if ($421) {
        $$0336454$i = $$0336455$i;$$0340458$i = $$0340459$i;$$0396464$i = $$0396465$i;$712 = $707;$713 = $708;$714 = $711;$715 = $709;$716 = $710;
        label = 171;
       } else {
        $422 = HEAP32[$4>>2]|0;
        $423 = ((($422)) + -1|0);
        HEAP32[$4>>2] = $423;
        if ($711) {
         $$0336453$i = $$0336455$i;$$0340457$i = $$0340459$i;$$0396463$i = $$0396465$i;$430 = $709;$431 = $707;$433 = $710;$434 = $708;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($714) {
        $$0336453$i = $$0336454$i;$$0340457$i = $$0340458$i;$$0396463$i = $$0396464$i;$430 = $715;$431 = $712;$433 = $716;$434 = $713;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $424 = (___errno_location()|0);
        HEAP32[$424>>2] = 22;
        ___shlim($0,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $425 = HEAP32[$3>>2]|0;
        $426 = ($425|0)==(0);
        if ($426) {
         $427 = (+($$0113|0));
         $428 = $427 * 0.0;
         $$1$i = $428;
         break;
        }
        $429 = ($430|0)==($431|0);
        $432 = ($433|0)==($434|0);
        $435 = $429 & $432;
        $436 = ($434|0)<(0);
        $437 = ($431>>>0)<(10);
        $438 = ($434|0)==(0);
        $439 = $438 & $437;
        $440 = $436 | $439;
        $or$cond$i118 = $440 & $435;
        if ($or$cond$i118) {
         $441 = ($$0106$ph>>>0)>(30);
         $442 = $425 >>> $$0106$ph;
         $443 = ($442|0)==(0);
         $or$cond412$i = $441 | $443;
         if ($or$cond412$i) {
          $444 = (+($$0113|0));
          $445 = (+($425>>>0));
          $446 = $444 * $445;
          $$1$i = $446;
          break;
         }
        }
        $447 = (($$0105$ph|0) / -2)&-1;
        $448 = ($447|0)<(0);
        $449 = $448 << 31 >> 31;
        $450 = ($433|0)>($449|0);
        $451 = ($430>>>0)>($447>>>0);
        $452 = ($433|0)==($449|0);
        $453 = $452 & $451;
        $454 = $450 | $453;
        if ($454) {
         $455 = (___errno_location()|0);
         HEAP32[$455>>2] = 34;
         $456 = (+($$0113|0));
         $457 = $456 * 1.7976931348623157E+308;
         $458 = $457 * 1.7976931348623157E+308;
         $$1$i = $458;
         break;
        }
        $459 = (($$0105$ph) + -106)|0;
        $460 = ($459|0)<(0);
        $461 = $460 << 31 >> 31;
        $462 = ($433|0)<($461|0);
        $463 = ($430>>>0)<($459>>>0);
        $464 = ($433|0)==($461|0);
        $465 = $464 & $463;
        $466 = $462 | $465;
        if ($466) {
         $467 = (___errno_location()|0);
         HEAP32[$467>>2] = 34;
         $468 = (+($$0113|0));
         $469 = $468 * 2.2250738585072014E-308;
         $470 = $469 * 2.2250738585072014E-308;
         $$1$i = $470;
         break;
        }
        $471 = ($$0336453$i|0)==(0);
        if ($471) {
         $$3343$i = $$0340457$i;
        } else {
         $472 = ($$0336453$i|0)<(9);
         if ($472) {
          $473 = (($3) + ($$0340457$i<<2)|0);
          $$promoted$i = HEAP32[$473>>2]|0;
          $$3339493$i = $$0336453$i;$475 = $$promoted$i;
          while(1) {
           $474 = ($475*10)|0;
           $476 = (($$3339493$i) + 1)|0;
           $exitcond541$i = ($476|0)==(9);
           if ($exitcond541$i) {
            break;
           } else {
            $$3339493$i = $476;$475 = $474;
           }
          }
          HEAP32[$473>>2] = $474;
         }
         $477 = (($$0340457$i) + 1)|0;
         $$3343$i = $477;
        }
        $478 = ($$0396463$i|0)<(9);
        if ($478) {
         $479 = ($$0396463$i|0)<=($430|0);
         $480 = ($430|0)<(18);
         $or$cond3$i = $479 & $480;
         if ($or$cond3$i) {
          $481 = ($430|0)==(9);
          if ($481) {
           $482 = (+($$0113|0));
           $483 = HEAP32[$3>>2]|0;
           $484 = (+($483>>>0));
           $485 = $482 * $484;
           $$1$i = $485;
           break;
          }
          $486 = ($430|0)<(9);
          if ($486) {
           $487 = (+($$0113|0));
           $488 = HEAP32[$3>>2]|0;
           $489 = (+($488>>>0));
           $490 = $487 * $489;
           $491 = (8 - ($430))|0;
           $492 = (9412 + ($491<<2)|0);
           $493 = HEAP32[$492>>2]|0;
           $494 = (+($493|0));
           $495 = $490 / $494;
           $$1$i = $495;
           break;
          }
          $$neg432$i = Math_imul($430, -3)|0;
          $$neg433$i = (($$0106$ph) + 27)|0;
          $496 = (($$neg433$i) + ($$neg432$i))|0;
          $497 = ($496|0)>(30);
          $$pre$i119 = HEAP32[$3>>2]|0;
          $498 = $$pre$i119 >>> $496;
          $499 = ($498|0)==(0);
          $or$cond571$i = $497 | $499;
          if ($or$cond571$i) {
           $500 = (+($$0113|0));
           $501 = (+($$pre$i119>>>0));
           $502 = $500 * $501;
           $503 = (($430) + -10)|0;
           $504 = (9412 + ($503<<2)|0);
           $505 = HEAP32[$504>>2]|0;
           $506 = (+($505|0));
           $507 = $502 * $506;
           $$1$i = $507;
           break;
          }
         }
        }
        $508 = (($430|0) % 9)&-1;
        $509 = ($508|0)==(0);
        if ($509) {
         $$0375$ph$i = 0;$$1368$ph438$i = $$3343$i;$$2347$ph439$i = 0;$$2382$ph437$i = $430;
        } else {
         $510 = ($430|0)>(-1);
         $511 = (($508) + 9)|0;
         $512 = $510 ? $508 : $511;
         $513 = (8 - ($512))|0;
         $514 = (9412 + ($513<<2)|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($$3343$i|0)==(0);
         if ($516) {
          $$0345$lcssa545$i = 0;$$0367$i = 0;$$0380$lcssa544$i = $430;
         } else {
          $517 = (1000000000 / ($515|0))&-1;
          $$0335486$i = 0;$$0345484$i = 0;$$0380483$i = $430;$$4344485$i = 0;
          while(1) {
           $518 = (($3) + ($$4344485$i<<2)|0);
           $519 = HEAP32[$518>>2]|0;
           $520 = (($519>>>0) % ($515>>>0))&-1;
           $521 = (($519>>>0) / ($515>>>0))&-1;
           $522 = (($521) + ($$0335486$i))|0;
           HEAP32[$518>>2] = $522;
           $523 = Math_imul($520, $517)|0;
           $524 = ($$4344485$i|0)==($$0345484$i|0);
           $525 = ($522|0)==(0);
           $or$cond413$i = $524 & $525;
           $526 = (($$0345484$i) + 1)|0;
           $527 = $526 & 127;
           $528 = (($$0380483$i) + -9)|0;
           $$$0380$i = $or$cond413$i ? $528 : $$0380483$i;
           $$$0345$i = $or$cond413$i ? $527 : $$0345484$i;
           $529 = (($$4344485$i) + 1)|0;
           $530 = ($529|0)==($$3343$i|0);
           if ($530) {
            break;
           } else {
            $$0335486$i = $523;$$0345484$i = $$$0345$i;$$0380483$i = $$$0380$i;$$4344485$i = $529;
           }
          }
          $531 = ($523|0)==(0);
          if ($531) {
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $$3343$i;$$0380$lcssa544$i = $$$0380$i;
          } else {
           $532 = (($$3343$i) + 1)|0;
           $533 = (($3) + ($$3343$i<<2)|0);
           HEAP32[$533>>2] = $523;
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $532;$$0380$lcssa544$i = $$$0380$i;
          }
         }
         $534 = (9 - ($512))|0;
         $535 = (($534) + ($$0380$lcssa544$i))|0;
         $$0375$ph$i = 0;$$1368$ph438$i = $$0367$i;$$2347$ph439$i = $$0345$lcssa545$i;$$2382$ph437$i = $535;
        }
        L284: while(1) {
         $536 = ($$2382$ph437$i|0)<(18);
         $537 = ($$2382$ph437$i|0)==(18);
         $538 = (($3) + ($$2347$ph439$i<<2)|0);
         $$0375$i = $$0375$ph$i;$$1368$i = $$1368$ph438$i;
         while(1) {
          if (!($536)) {
           if (!($537)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = $$2382$ph437$i;$$6373$ph$i = $$1368$i;
            break L284;
           }
           $539 = HEAP32[$538>>2]|0;
           $540 = ($539>>>0)<(9007199);
           if (!($540)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = 18;$$6373$ph$i = $$1368$i;
            break L284;
           }
          }
          $541 = (($$1368$i) + 127)|0;
          $$0329$i = 0;$$2369$i = $$1368$i;$$5$in$i = $541;
          while(1) {
           $$5$i121 = $$5$in$i & 127;
           $542 = (($3) + ($$5$i121<<2)|0);
           $543 = HEAP32[$542>>2]|0;
           $544 = (_bitshift64Shl(($543|0),0,29)|0);
           $545 = tempRet0;
           $546 = (_i64Add(($544|0),($545|0),($$0329$i|0),0)|0);
           $547 = tempRet0;
           $548 = ($547>>>0)>(0);
           $549 = ($546>>>0)>(1000000000);
           $550 = ($547|0)==(0);
           $551 = $550 & $549;
           $552 = $548 | $551;
           if ($552) {
            $553 = (___udivdi3(($546|0),($547|0),1000000000,0)|0);
            $554 = tempRet0;
            $555 = (___uremdi3(($546|0),($547|0),1000000000,0)|0);
            $556 = tempRet0;
            $$1330$i = $553;$$sink$off0$i = $555;
           } else {
            $$1330$i = 0;$$sink$off0$i = $546;
           }
           HEAP32[$542>>2] = $$sink$off0$i;
           $557 = (($$2369$i) + 127)|0;
           $558 = $557 & 127;
           $559 = ($$5$i121|0)!=($558|0);
           $560 = ($$5$i121|0)==($$2347$ph439$i|0);
           $or$cond414$i = $559 | $560;
           $561 = ($$sink$off0$i|0)==(0);
           $$5$$2369$i = $561 ? $$5$i121 : $$2369$i;
           $$3370$i = $or$cond414$i ? $$2369$i : $$5$$2369$i;
           $562 = (($$5$i121) + -1)|0;
           if ($560) {
            break;
           } else {
            $$0329$i = $$1330$i;$$2369$i = $$3370$i;$$5$in$i = $562;
           }
          }
          $563 = (($$0375$i) + -29)|0;
          $564 = ($$1330$i|0)==(0);
          if ($564) {
           $$0375$i = $563;$$1368$i = $$3370$i;
          } else {
           break;
          }
         }
         $565 = (($$2382$ph437$i) + 9)|0;
         $566 = (($$2347$ph439$i) + 127)|0;
         $567 = $566 & 127;
         $568 = ($567|0)==($$3370$i|0);
         $569 = (($$3370$i) + 127)|0;
         $570 = $569 & 127;
         $571 = (($$3370$i) + 126)|0;
         $572 = $571 & 127;
         $573 = (($3) + ($572<<2)|0);
         if ($568) {
          $574 = (($3) + ($570<<2)|0);
          $575 = HEAP32[$574>>2]|0;
          $576 = HEAP32[$573>>2]|0;
          $577 = $576 | $575;
          HEAP32[$573>>2] = $577;
          $$4371$i = $570;
         } else {
          $$4371$i = $$3370$i;
         }
         $578 = (($3) + ($567<<2)|0);
         HEAP32[$578>>2] = $$1330$i;
         $$0375$ph$i = $563;$$1368$ph438$i = $$4371$i;$$2347$ph439$i = $567;$$2382$ph437$i = $565;
        }
        L302: while(1) {
         $615 = (($$6373$ph$i) + 1)|0;
         $613 = $615 & 127;
         $616 = (($$6373$ph$i) + 127)|0;
         $617 = $616 & 127;
         $618 = (($3) + ($617<<2)|0);
         $$1376$ph549$i = $$1376$ph$i;$$4349$ph550$i = $$4349$ph$i;$$4384$ph$i = $$4384$ph435$i;
         while(1) {
          $591 = ($$4384$ph$i|0)==(18);
          $619 = ($$4384$ph$i|0)>(27);
          $$416$i = $619 ? 9 : 1;
          $$1376$i = $$1376$ph549$i;$$4349$i = $$4349$ph550$i;
          while(1) {
           $$0331476$i = 0;
           while(1) {
            $579 = (($$0331476$i) + ($$4349$i))|0;
            $580 = $579 & 127;
            $581 = ($580|0)==($$6373$ph$i|0);
            if ($581) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $582 = (($3) + ($580<<2)|0);
            $583 = HEAP32[$582>>2]|0;
            $584 = (9444 + ($$0331476$i<<2)|0);
            $585 = HEAP32[$584>>2]|0;
            $586 = ($583>>>0)<($585>>>0);
            if ($586) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $587 = ($583>>>0)>($585>>>0);
            if ($587) {
             break;
            }
            $588 = (($$0331476$i) + 1)|0;
            $589 = ($588|0)<(2);
            if ($589) {
             $$0331476$i = $588;
            } else {
             $$1332$i = $588;
             label = 220;
             break;
            }
           }
           if ((label|0) == 220) {
            label = 0;
            $590 = ($$1332$i|0)==(2);
            $or$cond6$i122 = $591 & $590;
            if ($or$cond6$i122) {
             $$0360474$i = 0.0;$$4475$i = 0;$$9473$i = $$6373$ph$i;
             break L302;
            }
           }
           $592 = (($$1376$i) + ($$416$i))|0;
           $593 = ($$4349$i|0)==($$6373$ph$i|0);
           if ($593) {
            $$1376$i = $592;$$4349$i = $$6373$ph$i;
           } else {
            break;
           }
          }
          $594 = 1 << $$416$i;
          $595 = (($594) + -1)|0;
          $596 = 1000000000 >>> $$416$i;
          $$0327480$i = 0;$$5350478$i = $$4349$i;$$5385477$i = $$4384$ph$i;$$6479$i = $$4349$i;
          while(1) {
           $597 = (($3) + ($$6479$i<<2)|0);
           $598 = HEAP32[$597>>2]|0;
           $599 = $598 & $595;
           $600 = $598 >>> $$416$i;
           $601 = (($600) + ($$0327480$i))|0;
           HEAP32[$597>>2] = $601;
           $602 = Math_imul($599, $596)|0;
           $603 = ($$6479$i|0)==($$5350478$i|0);
           $604 = ($601|0)==(0);
           $or$cond417$i = $603 & $604;
           $605 = (($$5350478$i) + 1)|0;
           $606 = $605 & 127;
           $607 = (($$5385477$i) + -9)|0;
           $$$5385$i = $or$cond417$i ? $607 : $$5385477$i;
           $$$5350$i = $or$cond417$i ? $606 : $$5350478$i;
           $608 = (($$6479$i) + 1)|0;
           $609 = $608 & 127;
           $610 = ($609|0)==($$6373$ph$i|0);
           if ($610) {
            break;
           } else {
            $$0327480$i = $602;$$5350478$i = $$$5350$i;$$5385477$i = $$$5385$i;$$6479$i = $609;
           }
          }
          $611 = ($602|0)==(0);
          if ($611) {
           $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
           continue;
          }
          $612 = ($613|0)==($$$5350$i|0);
          if (!($612)) {
           break;
          }
          $620 = HEAP32[$618>>2]|0;
          $621 = $620 | 1;
          HEAP32[$618>>2] = $621;
          $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
         }
         $614 = (($3) + ($$6373$ph$i<<2)|0);
         HEAP32[$614>>2] = $602;
         $$1376$ph$i = $592;$$4349$ph$i = $$$5350$i;$$4384$ph435$i = $$$5385$i;$$6373$ph$i = $613;
        }
        while(1) {
         $622 = (($$4475$i) + ($$4349$i))|0;
         $623 = $622 & 127;
         $624 = ($623|0)==($$9473$i|0);
         $625 = (($$9473$i) + 1)|0;
         $626 = $625 & 127;
         if ($624) {
          $627 = (($626) + -1)|0;
          $628 = (($3) + ($627<<2)|0);
          HEAP32[$628>>2] = 0;
          $$10$i = $626;
         } else {
          $$10$i = $$9473$i;
         }
         $629 = $$0360474$i * 1.0E+9;
         $630 = (($3) + ($623<<2)|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (+($631>>>0));
         $633 = $629 + $632;
         $634 = (($$4475$i) + 1)|0;
         $exitcond$i = ($634|0)==(2);
         if ($exitcond$i) {
          break;
         } else {
          $$0360474$i = $633;$$4475$i = $634;$$9473$i = $$10$i;
         }
        }
        $635 = (+($$0113|0));
        $636 = $635 * $633;
        $637 = (($$1376$i) + 53)|0;
        $638 = (($637) - ($$0105$ph))|0;
        $639 = ($638|0)<($$0106$ph|0);
        $640 = ($638|0)<(0);
        $$$i = $640 ? 0 : $638;
        $$0364$i = $639&1;
        $$0328$i = $639 ? $$$i : $$0106$ph;
        $641 = ($$0328$i|0)<(53);
        if ($641) {
         $642 = (105 - ($$0328$i))|0;
         $643 = (+_scalbn(1.0,$642));
         $644 = (+_copysignl($643,$636));
         $645 = (53 - ($$0328$i))|0;
         $646 = (+_scalbn(1.0,$645));
         $647 = (+_fmodl($636,$646));
         $648 = $636 - $647;
         $649 = $644 + $648;
         $$0355$i = $644;$$0356$i = $647;$$1361$i = $649;
        } else {
         $$0355$i = 0.0;$$0356$i = 0.0;$$1361$i = $636;
        }
        $650 = (($$4349$i) + 2)|0;
        $651 = $650 & 127;
        $652 = ($651|0)==($$10$i|0);
        do {
         if ($652) {
          $$3359$i = $$0356$i;
         } else {
          $653 = (($3) + ($651<<2)|0);
          $654 = HEAP32[$653>>2]|0;
          $655 = ($654>>>0)<(500000000);
          do {
           if ($655) {
            $656 = ($654|0)==(0);
            if ($656) {
             $657 = (($$4349$i) + 3)|0;
             $658 = $657 & 127;
             $659 = ($658|0)==($$10$i|0);
             if ($659) {
              $$1357$i = $$0356$i;
              break;
             }
            }
            $660 = $635 * 0.25;
            $661 = $660 + $$0356$i;
            $$1357$i = $661;
           } else {
            $662 = ($654|0)==(500000000);
            if (!($662)) {
             $663 = $635 * 0.75;
             $664 = $663 + $$0356$i;
             $$1357$i = $664;
             break;
            }
            $665 = (($$4349$i) + 3)|0;
            $666 = $665 & 127;
            $667 = ($666|0)==($$10$i|0);
            if ($667) {
             $668 = $635 * 0.5;
             $669 = $668 + $$0356$i;
             $$1357$i = $669;
             break;
            } else {
             $670 = $635 * 0.75;
             $671 = $670 + $$0356$i;
             $$1357$i = $671;
             break;
            }
           }
          } while(0);
          $672 = (53 - ($$0328$i))|0;
          $673 = ($672|0)>(1);
          if ($673) {
           $674 = (+_fmodl($$1357$i,1.0));
           $675 = $674 != 0.0;
           if ($675) {
            $$3359$i = $$1357$i;
            break;
           }
           $676 = $$1357$i + 1.0;
           $$3359$i = $676;
          } else {
           $$3359$i = $$1357$i;
          }
         }
        } while(0);
        $677 = $$1361$i + $$3359$i;
        $678 = $677 - $$0355$i;
        $679 = $637 & 2147483647;
        $680 = (-2 - ($sum$i))|0;
        $681 = ($679|0)>($680|0);
        do {
         if ($681) {
          $682 = (+Math_abs((+$678)));
          $683 = !($682 >= 9007199254740992.0);
          if ($683) {
           $$2362$i = $678;$$2366$i = $$0364$i;$$3378$i = $$1376$i;
          } else {
           $684 = (($$1376$i) + 1)|0;
           $685 = ($$0328$i|0)==($638|0);
           $or$cond418$i = $639 & $685;
           $$1365$i = $or$cond418$i ? 0 : $$0364$i;
           $686 = $678 * 0.5;
           $$2362$i = $686;$$2366$i = $$1365$i;$$3378$i = $684;
          }
          $687 = (($$3378$i) + 50)|0;
          $688 = ($687|0)>($333|0);
          if (!($688)) {
           $689 = ($$2366$i|0)!=(0);
           $690 = $$3359$i != 0.0;
           $or$cond9$i = $690 & $689;
           if (!($or$cond9$i)) {
            $$3363$i = $$2362$i;$$4379$i = $$3378$i;
            break;
           }
          }
          $691 = (___errno_location()|0);
          HEAP32[$691>>2] = 34;
          $$3363$i = $$2362$i;$$4379$i = $$3378$i;
         } else {
          $$3363$i = $678;$$4379$i = $$1376$i;
         }
        } while(0);
        $692 = (+_scalbnl($$3363$i,$$4379$i));
        $$1$i = $692;
       }
      } while(0);
      $$0114 = $$1$i;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$5>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$4>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$4>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $45 = HEAP32[$5>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $47 = HEAP32[$4>>2]|0;
     $48 = ((($47)) + -1|0);
     HEAP32[$4>>2] = $48;
    }
    $49 = ($2|0)!=(0);
    $50 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $49 & $50;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($46)) {
       $51 = HEAP32[$4>>2]|0;
       $52 = ((($51)) + -1|0);
       HEAP32[$4>>2] = $52;
      }
      $53 = (($$1108) + -1)|0;
      $$old8 = ($53>>>0)>(3);
      if ($$old8) {
       $$1108 = $53;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0113|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0114 = $56;
  }
 } while(0);
 STACKTOP = sp;return (+$$0114);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $12 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $12 = $10;
 }
 $11 = ($12|0)==(45);
 switch ($12|0) {
 case 43: case 45:  {
  $13 = $11&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $12;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = (($1) + -2046)|0;
  if ($5) {
   $7 = $3 * 8.9884656743115795E+307;
   $8 = ($6|0)>(1023);
   $$ = $8 ? 1023 : $6;
   $$0 = $7;$$020 = $$;
  } else {
   $$0 = $3;$$020 = $4;
  }
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = (($1) + 2044)|0;
   if ($12) {
    $14 = $10 * 2.2250738585072014E-308;
    $15 = ($13|0)<(-1022);
    $$1 = $15 ? -1022 : $13;
    $$0 = $14;$$020 = $$1;
   } else {
    $$0 = $10;$$020 = $11;
   }
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07195 = 0, $$073$lcssa = 0, $$073101 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27587 = 0, $$376$lcssa = 0, $$37684 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = $5 & 2147483647;
   $19 = ($18>>>0)>(2146435072);
   $20 = ($4>>>0)>(0);
   $21 = ($18|0)==(2146435072);
   $22 = $21 & $20;
   $23 = $19 | $22;
   $24 = ($8|0)==(2047);
   $or$cond = $23 | $24;
   if ($or$cond) {
    label = 3;
   } else {
    $27 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $28 = tempRet0;
    $29 = ($28>>>0)>($14>>>0);
    $30 = ($27>>>0)>($13>>>0);
    $31 = ($28|0)==($14|0);
    $32 = $31 & $30;
    $33 = $29 | $32;
    if (!($33)) {
     $34 = ($27|0)==($13|0);
     $35 = ($28|0)==($14|0);
     $36 = $34 & $35;
     $37 = $0 * 0.0;
     $$ = $36 ? $37 : $0;
     return (+$$);
    }
    $38 = ($8|0)==(0);
    if ($38) {
     $39 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $40 = tempRet0;
     $41 = ($40|0)>(-1);
     $42 = ($39>>>0)>(4294967295);
     $43 = ($40|0)==(-1);
     $44 = $43 & $42;
     $45 = $41 | $44;
     if ($45) {
      $$073101 = 0;$47 = $39;$48 = $40;
      while(1) {
       $46 = (($$073101) + -1)|0;
       $49 = (_bitshift64Shl(($47|0),($48|0),1)|0);
       $50 = tempRet0;
       $51 = ($50|0)>(-1);
       $52 = ($49>>>0)>(4294967295);
       $53 = ($50|0)==(-1);
       $54 = $53 & $52;
       $55 = $51 | $54;
       if ($55) {
        $$073101 = $46;$47 = $49;$48 = $50;
       } else {
        $$073$lcssa = $46;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $56 = (1 - ($$073$lcssa))|0;
     $57 = (_bitshift64Shl(($2|0),($3|0),($56|0))|0);
     $58 = tempRet0;
     $$174 = $$073$lcssa;$85 = $57;$86 = $58;
    } else {
     $59 = $3 & 1048575;
     $60 = $59 | 1048576;
     $$174 = $8;$85 = $2;$86 = $60;
    }
    $61 = ($11|0)==(0);
    if ($61) {
     $62 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $63 = tempRet0;
     $64 = ($63|0)>(-1);
     $65 = ($62>>>0)>(4294967295);
     $66 = ($63|0)==(-1);
     $67 = $66 & $65;
     $68 = $64 | $67;
     if ($68) {
      $$07195 = 0;$70 = $62;$71 = $63;
      while(1) {
       $69 = (($$07195) + -1)|0;
       $72 = (_bitshift64Shl(($70|0),($71|0),1)|0);
       $73 = tempRet0;
       $74 = ($73|0)>(-1);
       $75 = ($72>>>0)>(4294967295);
       $76 = ($73|0)==(-1);
       $77 = $76 & $75;
       $78 = $74 | $77;
       if ($78) {
        $$07195 = $69;$70 = $72;$71 = $73;
       } else {
        $$071$lcssa = $69;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $79 = (1 - ($$071$lcssa))|0;
     $80 = (_bitshift64Shl(($4|0),($5|0),($79|0))|0);
     $81 = tempRet0;
     $$172$ph = $$071$lcssa;$87 = $80;$88 = $81;
    } else {
     $82 = $5 & 1048575;
     $83 = $82 | 1048576;
     $$172$ph = $11;$87 = $4;$88 = $83;
    }
    $84 = ($$174|0)>($$172$ph|0);
    $89 = (_i64Subtract(($85|0),($86|0),($87|0),($88|0))|0);
    $90 = tempRet0;
    $91 = ($90|0)>(-1);
    $92 = ($89>>>0)>(4294967295);
    $93 = ($90|0)==(-1);
    $94 = $93 & $92;
    $95 = $91 | $94;
    L23: do {
     if ($84) {
      $$27587 = $$174;$154 = $95;$155 = $85;$156 = $86;$97 = $89;$99 = $90;
      while(1) {
       if ($154) {
        $96 = ($97|0)==(0);
        $98 = ($99|0)==(0);
        $100 = $96 & $98;
        if ($100) {
         break;
        } else {
         $102 = $97;$103 = $99;
        }
       } else {
        $102 = $155;$103 = $156;
       }
       $104 = (_bitshift64Shl(($102|0),($103|0),1)|0);
       $105 = tempRet0;
       $106 = (($$27587) + -1)|0;
       $107 = ($106|0)>($$172$ph|0);
       $108 = (_i64Subtract(($104|0),($105|0),($87|0),($88|0))|0);
       $109 = tempRet0;
       $110 = ($109|0)>(-1);
       $111 = ($108>>>0)>(4294967295);
       $112 = ($109|0)==(-1);
       $113 = $112 & $111;
       $114 = $110 | $113;
       if ($107) {
        $$27587 = $106;$154 = $114;$155 = $104;$156 = $105;$97 = $108;$99 = $109;
       } else {
        $$275$lcssa = $106;$$lcssa = $114;$116 = $108;$118 = $109;$157 = $104;$158 = $105;
        break L23;
       }
      }
      $101 = $0 * 0.0;
      $$070 = $101;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $95;$116 = $89;$118 = $90;$157 = $85;$158 = $86;
     }
    } while(0);
    if ($$lcssa) {
     $115 = ($116|0)==(0);
     $117 = ($118|0)==(0);
     $119 = $115 & $117;
     if ($119) {
      $127 = $0 * 0.0;
      $$070 = $127;
      break;
     } else {
      $121 = $118;$123 = $116;
     }
    } else {
     $121 = $158;$123 = $157;
    }
    $120 = ($121>>>0)<(1048576);
    $122 = ($123>>>0)<(0);
    $124 = ($121|0)==(1048576);
    $125 = $124 & $122;
    $126 = $120 | $125;
    if ($126) {
     $$37684 = $$275$lcssa;$128 = $123;$129 = $121;
     while(1) {
      $130 = (_bitshift64Shl(($128|0),($129|0),1)|0);
      $131 = tempRet0;
      $132 = (($$37684) + -1)|0;
      $133 = ($131>>>0)<(1048576);
      $134 = ($130>>>0)<(0);
      $135 = ($131|0)==(1048576);
      $136 = $135 & $134;
      $137 = $133 | $136;
      if ($137) {
       $$37684 = $132;$128 = $130;$129 = $131;
      } else {
       $$376$lcssa = $132;$139 = $130;$140 = $131;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$139 = $123;$140 = $121;
    }
    $138 = ($$376$lcssa|0)>(0);
    if ($138) {
     $141 = (_i64Add(($139|0),($140|0),0,-1048576)|0);
     $142 = tempRet0;
     $143 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $144 = tempRet0;
     $145 = $141 | $143;
     $146 = $142 | $144;
     $151 = $146;$152 = $145;
    } else {
     $147 = (1 - ($$376$lcssa))|0;
     $148 = (_bitshift64Lshr(($139|0),($140|0),($147|0))|0);
     $149 = tempRet0;
     $151 = $149;$152 = $148;
    }
    $150 = $151 | $12;
    HEAP32[tempDoublePtr>>2] = $152;HEAP32[tempDoublePtr+4>>2] = $150;$153 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $153;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $25 = $0 * $1;
  $26 = $25 / $25;
  $$070 = $26;
 }
 return (+$$070);
}
function _catclose($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _catgets($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($3|0);
}
function _catopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _freelocale($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03750 = 0, $$03849 = 0, $$04148 = 0, $$1 = 0, $$139 = 0, $$142 = 0, $$2 = 0, $$45 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 36844 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$45 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = $12&255;
     $14 = ($12<<24>>24)>(-1);
     if ($14) {
      HEAP32[$$45>>2] = $13;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (($13) + -194)|0;
     $18 = ($17>>>0)>(50);
     if ($18) {
      label = 15;
      break;
     }
     $19 = ((($1)) + 1|0);
     $20 = (5660 + ($17<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($2) + -1)|0;
     $23 = ($22|0)==(0);
     if ($23) {
      $$2 = $21;
     } else {
      $$03750 = $19;$$03849 = $21;$$04148 = $22;
      label = 9;
     }
    } else {
     $$03750 = $1;$$03849 = $6;$$04148 = $2;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $24 = HEAP8[$$03750>>0]|0;
      $25 = $24&255;
      $26 = $25 >>> 3;
      $27 = (($26) + -16)|0;
      $28 = $$03849 >> 26;
      $29 = (($26) + ($28))|0;
      $30 = $27 | $29;
      $31 = ($30>>>0)>(7);
      if ($31) {
       label = 15;
       break L1;
      } else {
       $$1 = $$03750;$$139 = $$03849;$$142 = $$04148;$35 = $24;
      }
      while(1) {
       $32 = $$139 << 6;
       $33 = ((($$1)) + 1|0);
       $34 = $35&255;
       $36 = (($34) + -128)|0;
       $37 = $36 | $32;
       $38 = (($$142) + -1)|0;
       $39 = ($37|0)<(0);
       if (!($39)) {
        break;
       }
       $41 = ($38|0)==(0);
       if ($41) {
        $$2 = $37;
        break L11;
       }
       $42 = HEAP8[$33>>0]|0;
       $43 = $42 & -64;
       $44 = ($43<<24>>24)==(-128);
       if ($44) {
        $$1 = $33;$$139 = $37;$$142 = $38;$35 = $42;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$45>>2] = $37;
      $40 = (($2) - ($38))|0;
      $$0 = $40;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$>>2] = 0;
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _isdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $2 = $isdigit&1;
 return ($2|0);
}
function _isxdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isxdigit($0)|0);
 return ($2|0);
}
function _newlocale($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  label = 4;
 } else {
  $5 = (_strcmp($1,28519)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 4;
  } else {
   $7 = (_strcmp($1,27887)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    label = 4;
   } else {
    $$06 = 0;
   }
  }
 }
 do {
  if ((label|0) == 4) {
   $9 = ($2|0)==(0|0);
   if ($9) {
    $10 = HEAP32[9212]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     HEAP32[9212] = 1;
     $$06 = 36852;
     break;
    } else {
     $12 = (_calloc(1,4)|0);
     $$06 = $12;
     break;
    }
   } else {
    $$06 = $2;
   }
  }
 } while(0);
 return ($$06|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _uselocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_pthread_self()|0);
 $2 = ((($1)) + 184|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($0|0)==(0|0);
 if (!($4)) {
  HEAP32[$2>>2] = $0;
 }
 return ($3|0);
}
function _wmemcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$058 = 0, $$067 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$058 = $2;$$067 = $1;$$09 = $0;
  while(1) {
   $4 = (($$058) + -1)|0;
   $5 = ((($$067)) + 4|0);
   $6 = HEAP32[$$067>>2]|0;
   $7 = ((($$09)) + 4|0);
   HEAP32[$$09>>2] = $6;
   $8 = ($4|0)==(0);
   if ($8) {
    break;
   } else {
    $$058 = $4;$$067 = $5;$$09 = $7;
   }
  }
 }
 return ($0|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $$ = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$$>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if (!($13)) {
      $14 = ((($1)) + 1|0);
      $15 = (5660 + ($12<<2)|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($2>>>0)<(4);
      if ($17) {
       $18 = ($2*6)|0;
       $19 = (($18) + -6)|0;
       $20 = -2147483648 >>> $19;
       $21 = $16 & $20;
       $22 = ($21|0)==(0);
       if (!($22)) {
        break;
       }
      }
      $23 = HEAP8[$14>>0]|0;
      $24 = $23&255;
      $25 = $24 >>> 3;
      $26 = (($25) + -16)|0;
      $27 = $16 >> 26;
      $28 = (($25) + ($27))|0;
      $29 = $26 | $28;
      $30 = ($29>>>0)>(7);
      if (!($30)) {
       $31 = $16 << 6;
       $32 = (($24) + -128)|0;
       $33 = $32 | $31;
       $34 = ($33|0)<(0);
       if (!($34)) {
        HEAP32[$$>>2] = $33;
        $$0 = 2;
        break L1;
       }
       $35 = ((($1)) + 2|0);
       $36 = HEAP8[$35>>0]|0;
       $37 = $36&255;
       $38 = (($37) + -128)|0;
       $39 = ($38>>>0)>(63);
       if (!($39)) {
        $40 = $33 << 6;
        $41 = $38 | $40;
        $42 = ($41|0)<(0);
        if (!($42)) {
         HEAP32[$$>>2] = $41;
         $$0 = 3;
         break L1;
        }
        $43 = ((($1)) + 3|0);
        $44 = HEAP8[$43>>0]|0;
        $45 = $44&255;
        $46 = (($45) + -128)|0;
        $47 = ($46>>>0)>(63);
        if (!($47)) {
         $48 = $41 << 6;
         $49 = $46 | $48;
         HEAP32[$$>>2] = $49;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $50 = (___errno_location()|0);
   HEAP32[$50>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(27893,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $8 = (___syscall5(5,($vararg_buffer|0))|0);
  $9 = (___syscall_ret($8)|0);
  $10 = ($9|0)<(0);
  if ($10) {
   $$0 = 0;
  } else {
   $11 = (___fdopen($9,$1)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $9;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $11;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 52|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(27893,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1144)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $16 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $16 = $$pre;
   }
   $15 = ($16<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre34 = HEAP32[$7>>2]|0;
    $29 = $$pre34;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 120|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $2;
    $31 = (___syscall54(54,($vararg_buffer12|0))|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[$27>>0] = 10;
    }
   }
   $33 = ((($7)) + 32|0);
   HEAP32[$33>>2] = 7;
   $34 = ((($7)) + 36|0);
   HEAP32[$34>>2] = 5;
   $35 = ((($7)) + 40|0);
   HEAP32[$35>>2] = 6;
   $36 = ((($7)) + 12|0);
   HEAP32[$36>>2] = 6;
   $37 = HEAP32[(36800)>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($7)) + 76|0);
    HEAP32[$39>>2] = -1;
   }
   ___lock(((36824)|0));
   $40 = HEAP32[(36820)>>2]|0;
   $41 = ((($7)) + 56|0);
   HEAP32[$41>>2] = $40;
   $42 = ($40|0)==(0);
   if (!($42)) {
    $$cast = $40;
    $43 = ((($$cast)) + 52|0);
    HEAP32[$43>>2] = $7;
   }
   HEAP32[(36820)>>2] = $7;
   ___unlock(((36824)|0));
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___lock(((36824)|0));
  $7 = ((($0)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  $10 = $8;
  $$pre = ((($0)) + 56|0);
  if (!($9)) {
   $11 = HEAP32[$$pre>>2]|0;
   $12 = ((($8)) + 56|0);
   HEAP32[$12>>2] = $11;
  }
  $13 = HEAP32[$$pre>>2]|0;
  $14 = ($13|0)==(0|0);
  $15 = $13;
  if (!($14)) {
   $16 = ((($13)) + 52|0);
   HEAP32[$16>>2] = $10;
  }
  $17 = HEAP32[(36820)>>2]|0;
  $18 = ($17|0)==($0|0);
  if ($18) {
   HEAP32[(36820)>>2] = $15;
  }
  ___unlock(((36824)|0));
 }
 $19 = (_fflush($0)|0);
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 127]($0)|0);
 $23 = $22 | $19;
 $24 = ((($0)) + 92|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _free($25);
 }
 if (!($6)) {
  _free($0);
 }
 return ($23|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1553]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[1553]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((36824)|0));
   $$02325 = HEAP32[(36820)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $25 = $16;
     } else {
      $25 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $24 = ($25|0)==(0);
     if (!($24)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((36824)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 31]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 31]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _feof($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 4;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 4;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 dest=$3; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 30;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$0$i = 0, $$0266$lcssa = 0, $$0266408 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph331 = 0, $$0283419 = 0, $$0286411 = 0, $$0288$ = 0, $$0288416 = 0, $$0292 = 0, $$0293 = 0;
 var $$0294415 = 0, $$0305414 = 0, $$10 = 0, $$10304 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1295 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0;
 var $$2290 = 0, $$2296 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0, $$320 = 0, $$321 = 0, $$322 = 0, $$3281 = 0, $$3291 = 0, $$3297$ph = 0, $$3407 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6300 = 0;
 var $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7301 = 0, $$7312 = 0, $$8 = 0, $$8302 = 0, $$8313 = 0, $$9 = 0, $$9303 = 0, $$9314 = 0, $$lcssa349 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi493Z2D = 0, $$pre482 = 0, $$pre484 = 0, $$pre486 = 0, $$pre488 = 0;
 var $$pre489 = 0, $$pre490 = 0, $$pre491 = 0, $$pre492 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor327 = 0, $isdigit = 0, $isdigit316 = 0, $isdigit316406 = 0, $isdigittmp = 0, $isdigittmp315 = 0, $isdigittmp315405 = 0, $not$ = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp + 33|0;
 $6 = sp;
 $7 = sp + 32|0;
 $8 = ((($0)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(-1);
 if ($10) {
  $11 = (___lockfile($0)|0);
  $333 = $11;
 } else {
  $333 = 0;
 }
 $12 = HEAP8[$1>>0]|0;
 $13 = ($12<<24>>24)==(0);
 L4: do {
  if ($13) {
   $$3291 = 0;
  } else {
   $14 = ((($0)) + 4|0);
   $15 = ((($0)) + 100|0);
   $16 = ((($0)) + 108|0);
   $17 = ((($0)) + 8|0);
   $18 = ((($5)) + 10|0);
   $19 = ((($5)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($4)) + 4|0);
   $20 = ((($5)) + 46|0);
   $21 = ((($5)) + 94|0);
   $22 = ((($5)) + 1|0);
   $23 = ((($5)) + 1|0);
   $$0273420 = $1;$$0283419 = 0;$$0288416 = 0;$$0294415 = 0;$$0305414 = 0;$25 = $12;
   L6: while(1) {
    $24 = $25&255;
    $26 = (_isspace($24)|0);
    $27 = ($26|0)==(0);
    L8: do {
     if ($27) {
      $54 = ($25<<24>>24)==(37);
      L10: do {
       if ($54) {
        $55 = ((($$0273420)) + 1|0);
        $56 = HEAP8[$55>>0]|0;
        L12: do {
         switch ($56<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $77 = ((($$0273420)) + 2|0);
          $$0293 = 0;$$2275 = $77;
          break;
         }
         default: {
          $78 = $56&255;
          $isdigittmp = (($78) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $79 = ((($$0273420)) + 2|0);
           $80 = HEAP8[$79>>0]|0;
           $81 = ($80<<24>>24)==(36);
           if ($81) {
            $vacopy_currentptr = HEAP32[$2>>2]|0;
            HEAP32[$3>>2] = $vacopy_currentptr;
            $$0$i = $isdigittmp;
            while(1) {
             $82 = ($$0$i>>>0)>(1);
             $arglist_current = HEAP32[$3>>2]|0;
             $83 = $arglist_current;
             $84 = ((0) + 4|0);
             $expanded4 = $84;
             $expanded = (($expanded4) - 1)|0;
             $85 = (($83) + ($expanded))|0;
             $86 = ((0) + 4|0);
             $expanded8 = $86;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $87 = $85 & $expanded6;
             $88 = $87;
             $89 = HEAP32[$88>>2]|0;
             $arglist_next = ((($88)) + 4|0);
             HEAP32[$3>>2] = $arglist_next;
             $90 = (($$0$i) + -1)|0;
             if ($82) {
              $$0$i = $90;
             } else {
              break;
             }
            }
            $91 = ((($$0273420)) + 3|0);
            $$0293 = $89;$$2275 = $91;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$2>>2]|0;
          $92 = $arglist_current2;
          $93 = ((0) + 4|0);
          $expanded11 = $93;
          $expanded10 = (($expanded11) - 1)|0;
          $94 = (($92) + ($expanded10))|0;
          $95 = ((0) + 4|0);
          $expanded15 = $95;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $96 = $94 & $expanded13;
          $97 = $96;
          $98 = HEAP32[$97>>2]|0;
          $arglist_next3 = ((($97)) + 4|0);
          HEAP32[$2>>2] = $arglist_next3;
          $$0293 = $98;$$2275 = $55;
         }
         }
        } while(0);
        $99 = HEAP8[$$2275>>0]|0;
        $100 = $99&255;
        $isdigittmp315405 = (($100) + -48)|0;
        $isdigit316406 = ($isdigittmp315405>>>0)<(10);
        if ($isdigit316406) {
         $$0266408 = 0;$$3407 = $$2275;$104 = $100;
         while(1) {
          $101 = ($$0266408*10)|0;
          $102 = (($101) + -48)|0;
          $103 = (($102) + ($104))|0;
          $105 = ((($$3407)) + 1|0);
          $106 = HEAP8[$105>>0]|0;
          $107 = $106&255;
          $isdigittmp315 = (($107) + -48)|0;
          $isdigit316 = ($isdigittmp315>>>0)<(10);
          if ($isdigit316) {
           $$0266408 = $103;$$3407 = $105;$104 = $107;
          } else {
           $$0266$lcssa = $103;$$3$lcssa = $105;$$lcssa349 = $106;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;$$lcssa349 = $99;
        }
        $108 = ($$lcssa349<<24>>24)==(109);
        if ($108) {
         $109 = ($$0293|0)!=(0|0);
         $110 = $109&1;
         $111 = ((($$3$lcssa)) + 1|0);
         $$pre482 = HEAP8[$111>>0]|0;
         $$0270 = $110;$$1295 = 0;$$1306 = 0;$$4 = $111;$113 = $$pre482;
        } else {
         $$0270 = 0;$$1295 = $$0294415;$$1306 = $$0305414;$$4 = $$3$lcssa;$113 = $$lcssa349;
        }
        $112 = ((($$4)) + 1|0);
        switch ($113<<24>>24) {
        case 104:  {
         $114 = HEAP8[$112>>0]|0;
         $115 = ($114<<24>>24)==(104);
         $116 = ((($$4)) + 2|0);
         $$319 = $115 ? $116 : $112;
         $$320 = $115 ? -2 : -1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 108:  {
         $117 = HEAP8[$112>>0]|0;
         $118 = ($117<<24>>24)==(108);
         $119 = ((($$4)) + 2|0);
         $$321 = $118 ? $119 : $112;
         $$322 = $118 ? 3 : 1;
         $$0268 = $$322;$$5 = $$321;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $112;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $112;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $112;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$7312 = $$1306;$$8302 = $$1295;
         label = 154;
         break L6;
        }
        }
        $120 = HEAP8[$$5>>0]|0;
        $121 = $120&255;
        $122 = $121 & 47;
        $123 = ($122|0)==(3);
        $124 = $121 | 32;
        $$ = $123 ? $124 : $121;
        $$$0268 = $123 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $125 = ($$0266$lcssa|0)<(1);
         $$$0266 = $125 ? 1 : $$0266$lcssa;
         $$1267 = $$$0266;$$1284 = $$0283419;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283419;
         break;
        }
        case 110:  {
         $126 = ($$0283419|0)<(0);
         $127 = $126 << 31 >> 31;
         $128 = ($$0293|0)==(0|0);
         if ($128) {
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
         }
         switch ($$$0268|0) {
         case -2:  {
          $129 = $$0283419&255;
          HEAP8[$$0293>>0] = $129;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case -1:  {
          $130 = $$0283419&65535;
          HEAP16[$$0293>>1] = $130;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$$0293>>2] = $$0283419;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$$0293>>2] = $$0283419;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 3:  {
          $131 = $$0293;
          $132 = $131;
          HEAP32[$132>>2] = $$0283419;
          $133 = (($131) + 4)|0;
          $134 = $133;
          HEAP32[$134>>2] = $127;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         default: {
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $135 = HEAP32[$14>>2]|0;
          $136 = HEAP32[$15>>2]|0;
          $137 = ($135>>>0)<($136>>>0);
          if ($137) {
           $138 = ((($135)) + 1|0);
           HEAP32[$14>>2] = $138;
           $139 = HEAP8[$135>>0]|0;
           $140 = $139&255;
           $142 = $140;
          } else {
           $141 = (___shgetc($0)|0);
           $142 = $141;
          }
          $143 = (_isspace($142)|0);
          $144 = ($143|0)==(0);
          if ($144) {
           break;
          }
         }
         $145 = HEAP32[$15>>2]|0;
         $146 = ($145|0)==(0|0);
         if ($146) {
          $$pre484 = HEAP32[$14>>2]|0;
          $154 = $$pre484;
         } else {
          $147 = HEAP32[$14>>2]|0;
          $148 = ((($147)) + -1|0);
          HEAP32[$14>>2] = $148;
          $149 = $148;
          $154 = $149;
         }
         $150 = HEAP32[$16>>2]|0;
         $151 = HEAP32[$17>>2]|0;
         $152 = (($150) + ($$0283419))|0;
         $153 = (($152) + ($154))|0;
         $155 = (($153) - ($151))|0;
         $$1267 = $$0266$lcssa;$$1284 = $155;
        }
        }
        ___shlim($0,$$1267);
        $156 = HEAP32[$14>>2]|0;
        $157 = HEAP32[$15>>2]|0;
        $158 = ($156>>>0)<($157>>>0);
        if ($158) {
         $159 = ((($156)) + 1|0);
         HEAP32[$14>>2] = $159;
         $163 = $157;
        } else {
         $160 = (___shgetc($0)|0);
         $161 = ($160|0)<(0);
         if ($161) {
          $$7312 = $$1306;$$8302 = $$1295;
          label = 154;
          break L6;
         }
         $$pre486 = HEAP32[$15>>2]|0;
         $163 = $$pre486;
        }
        $162 = ($163|0)==(0|0);
        if (!($162)) {
         $164 = HEAP32[$14>>2]|0;
         $165 = ((($164)) + -1|0);
         HEAP32[$14>>2] = $165;
        }
        L68: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $166 = ($$|0)==(99);
          $167 = $$ | 16;
          $168 = ($167|0)==(115);
          L70: do {
           if ($168) {
            $169 = ($$|0)==(115);
            _memset(($22|0),-1,256)|0;
            HEAP8[$5>>0] = 0;
            if ($169) {
             HEAP8[$19>>0] = 0;
             ;HEAP8[$18>>0]=0|0;HEAP8[$18+1>>0]=0|0;HEAP8[$18+2>>0]=0|0;HEAP8[$18+3>>0]=0|0;HEAP8[$18+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $170 = ((($$5)) + 1|0);
            $171 = HEAP8[$170>>0]|0;
            $172 = ($171<<24>>24)==(94);
            $173 = ((($$5)) + 2|0);
            $$0292 = $172&1;
            $$6 = $172 ? $173 : $170;
            $174 = $172&1;
            _memset(($23|0),($174|0),256)|0;
            HEAP8[$5>>0] = 0;
            $175 = HEAP8[$$6>>0]|0;
            switch ($175<<24>>24) {
            case 45:  {
             $176 = ((($$6)) + 1|0);
             $177 = $$0292 ^ 1;
             $178 = $177&255;
             HEAP8[$20>>0] = $178;
             $$7$ph = $176;$$pre$phi493Z2D = $178;
             break;
            }
            case 93:  {
             $179 = ((($$6)) + 1|0);
             $180 = $$0292 ^ 1;
             $181 = $180&255;
             HEAP8[$21>>0] = $181;
             $$7$ph = $179;$$pre$phi493Z2D = $181;
             break;
            }
            default: {
             $$pre491 = $$0292 ^ 1;
             $$pre492 = $$pre491&255;
             $$7$ph = $$6;$$pre$phi493Z2D = $$pre492;
            }
            }
            $$7 = $$7$ph;
            while(1) {
             $182 = HEAP8[$$7>>0]|0;
             L81: do {
              switch ($182<<24>>24) {
              case 0:  {
               $$7312 = $$1306;$$8302 = $$1295;
               label = 154;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L70;
               break;
              }
              case 45:  {
               $183 = ((($$7)) + 1|0);
               $184 = HEAP8[$183>>0]|0;
               switch ($184<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$195 = 45;
                break L81;
                break;
               }
               default: {
               }
               }
               $185 = ((($$7)) + -1|0);
               $186 = HEAP8[$185>>0]|0;
               $187 = ($186&255)<($184&255);
               if ($187) {
                $188 = $186&255;
                $$0286411 = $188;
                while(1) {
                 $189 = (($$0286411) + 1)|0;
                 $190 = (($5) + ($189)|0);
                 HEAP8[$190>>0] = $$pre$phi493Z2D;
                 $191 = HEAP8[$183>>0]|0;
                 $192 = $191&255;
                 $193 = ($189|0)<($192|0);
                 if ($193) {
                  $$0286411 = $189;
                 } else {
                  $$8 = $183;$195 = $191;
                  break;
                 }
                }
               } else {
                $$8 = $183;$195 = $184;
               }
               break;
              }
              default: {
               $$8 = $$7;$195 = $182;
              }
              }
             } while(0);
             $194 = $195&255;
             $196 = (($194) + 1)|0;
             $197 = (($5) + ($196)|0);
             HEAP8[$197>>0] = $$pre$phi493Z2D;
             $198 = ((($$8)) + 1|0);
             $$7 = $198;
            }
           }
          } while(0);
          $199 = (($$1267) + 1)|0;
          $200 = $166 ? $199 : 31;
          $201 = ($$$0268|0)==(1);
          $202 = ($$0270|0)!=(0);
          L89: do {
           if ($201) {
            if ($202) {
             $203 = $200 << 2;
             $204 = (_malloc($203)|0);
             $205 = ($204|0)==(0|0);
             if ($205) {
              $$7312 = 0;$$8302 = $204;
              label = 154;
              break L6;
             } else {
              $$2296 = $204;
             }
            } else {
             $$2296 = $$0293;
            }
            HEAP32[$4>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $200;$$0278$ph = 0;$$3297$ph = $$2296;
            L95: while(1) {
             $206 = ($$3297$ph|0)==(0|0);
             $$0278$ph331 = $$0278$ph;
             while(1) {
              L99: while(1) {
               $207 = HEAP32[$14>>2]|0;
               $208 = HEAP32[$15>>2]|0;
               $209 = ($207>>>0)<($208>>>0);
               if ($209) {
                $210 = ((($207)) + 1|0);
                HEAP32[$14>>2] = $210;
                $211 = HEAP8[$207>>0]|0;
                $212 = $211&255;
                $215 = $212;
               } else {
                $213 = (___shgetc($0)|0);
                $215 = $213;
               }
               $214 = (($215) + 1)|0;
               $216 = (($5) + ($214)|0);
               $217 = HEAP8[$216>>0]|0;
               $218 = ($217<<24>>24)==(0);
               if ($218) {
                break L95;
               }
               $219 = $215&255;
               HEAP8[$7>>0] = $219;
               $220 = (_mbrtowc($6,$7,1,$4)|0);
               switch ($220|0) {
               case -1:  {
                $$7312 = 0;$$8302 = $$3297$ph;
                label = 154;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L99;
               }
               }
              }
              if ($206) {
               $$1279 = $$0278$ph331;
              } else {
               $221 = (($$3297$ph) + ($$0278$ph331<<2)|0);
               $222 = (($$0278$ph331) + 1)|0;
               $223 = HEAP32[$6>>2]|0;
               HEAP32[$221>>2] = $223;
               $$1279 = $222;
              }
              $224 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $202 & $224;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph331 = $$1279;
              }
             }
             $factor327 = $$0276$ph << 1;
             $225 = $factor327 | 1;
             $226 = $225 << 2;
             $227 = (_realloc($$3297$ph,$226)|0);
             $228 = ($227|0)==(0|0);
             if ($228) {
              $$7312 = 0;$$8302 = $$3297$ph;
              label = 154;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $225;$$3297$ph = $227;$$0278$ph = $$0278$ph$phi;
             }
            }
            $229 = (_mbsinit($4)|0);
            $230 = ($229|0)==(0);
            if ($230) {
             $$7312 = 0;$$8302 = $$3297$ph;
             label = 154;
             break L6;
            } else {
             $$4282 = $$0278$ph331;$$4309 = 0;$$5299 = $$3297$ph;
            }
           } else {
            if ($202) {
             $231 = (_malloc($200)|0);
             $232 = ($231|0)==(0|0);
             if ($232) {
              $$7312 = 0;$$8302 = 0;
              label = 154;
              break L6;
             } else {
              $$1277$ph = $200;$$2280$ph = 0;$$2307$ph = $231;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $233 = HEAP32[$14>>2]|0;
               $234 = HEAP32[$15>>2]|0;
               $235 = ($233>>>0)<($234>>>0);
               if ($235) {
                $236 = ((($233)) + 1|0);
                HEAP32[$14>>2] = $236;
                $237 = HEAP8[$233>>0]|0;
                $238 = $237&255;
                $241 = $238;
               } else {
                $239 = (___shgetc($0)|0);
                $241 = $239;
               }
               $240 = (($241) + 1)|0;
               $242 = (($5) + ($240)|0);
               $243 = HEAP8[$242>>0]|0;
               $244 = ($243<<24>>24)==(0);
               if ($244) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;
                break L89;
               }
               $245 = $241&255;
               $246 = (($$2280) + 1)|0;
               $247 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$247>>0] = $245;
               $248 = ($246|0)==($$1277$ph|0);
               if ($248) {
                break;
               } else {
                $$2280 = $246;
               }
              }
              $factor = $$1277$ph << 1;
              $249 = $factor | 1;
              $250 = (_realloc($$2307$ph,$249)|0);
              $251 = ($250|0)==(0|0);
              if ($251) {
               $$7312 = $$2307$ph;$$8302 = 0;
               label = 154;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $249;$$2307$ph = $250;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $252 = ($$0293|0)==(0|0);
            if ($252) {
             $270 = $163;
             while(1) {
              $268 = HEAP32[$14>>2]|0;
              $269 = ($268>>>0)<($270>>>0);
              if ($269) {
               $271 = ((($268)) + 1|0);
               HEAP32[$14>>2] = $271;
               $272 = HEAP8[$268>>0]|0;
               $273 = $272&255;
               $276 = $273;
              } else {
               $274 = (___shgetc($0)|0);
               $276 = $274;
              }
              $275 = (($276) + 1)|0;
              $277 = (($5) + ($275)|0);
              $278 = HEAP8[$277>>0]|0;
              $279 = ($278<<24>>24)==(0);
              if ($279) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;
               break L89;
              }
              $$pre489 = HEAP32[$15>>2]|0;
              $270 = $$pre489;
             }
            } else {
             $$3281 = 0;$255 = $163;
             while(1) {
              $253 = HEAP32[$14>>2]|0;
              $254 = ($253>>>0)<($255>>>0);
              if ($254) {
               $256 = ((($253)) + 1|0);
               HEAP32[$14>>2] = $256;
               $257 = HEAP8[$253>>0]|0;
               $258 = $257&255;
               $261 = $258;
              } else {
               $259 = (___shgetc($0)|0);
               $261 = $259;
              }
              $260 = (($261) + 1)|0;
              $262 = (($5) + ($260)|0);
              $263 = HEAP8[$262>>0]|0;
              $264 = ($263<<24>>24)==(0);
              if ($264) {
               $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;
               break L89;
              }
              $265 = $261&255;
              $266 = (($$3281) + 1)|0;
              $267 = (($$0293) + ($$3281)|0);
              HEAP8[$267>>0] = $265;
              $$pre488 = HEAP32[$15>>2]|0;
              $$3281 = $266;$255 = $$pre488;
             }
            }
           }
          } while(0);
          $280 = HEAP32[$15>>2]|0;
          $281 = ($280|0)==(0|0);
          if ($281) {
           $$pre490 = HEAP32[$14>>2]|0;
           $288 = $$pre490;
          } else {
           $282 = HEAP32[$14>>2]|0;
           $283 = ((($282)) + -1|0);
           HEAP32[$14>>2] = $283;
           $284 = $283;
           $288 = $284;
          }
          $285 = HEAP32[$16>>2]|0;
          $286 = HEAP32[$17>>2]|0;
          $287 = (($288) - ($286))|0;
          $289 = (($287) + ($285))|0;
          $290 = ($289|0)==(0);
          if ($290) {
           $$10304 = $$5299;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$4309;
           break L6;
          }
          $$not = $166 ^ 1;
          $291 = ($289|0)==($$1267|0);
          $or$cond318 = $291 | $$not;
          if (!($or$cond318)) {
           $$10304 = $$5299;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$4309;
           break L6;
          }
          do {
           if ($202) {
            if ($201) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($166) {
           $$10 = $$9;$$5310 = $$4309;$$6300 = $$5299;
          } else {
           $292 = ($$5299|0)==(0|0);
           if (!($292)) {
            $293 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$293>>2] = 0;
           }
           $294 = ($$4309|0)==(0|0);
           if ($294) {
            $$10 = $$9;$$5310 = 0;$$6300 = $$5299;
            break L68;
           }
           $295 = (($$4309) + ($$4282)|0);
           HEAP8[$295>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$$6300 = $$5299;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 136;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 136;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 136;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 136;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $313 = (+___floatscan($0,$$$0268,0));
          $314 = HEAP32[$16>>2]|0;
          $315 = HEAP32[$14>>2]|0;
          $316 = HEAP32[$17>>2]|0;
          $317 = (($316) - ($315))|0;
          $318 = ($314|0)==($317|0);
          if ($318) {
           $$10304 = $$1295;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$1306;
           break L6;
          }
          $319 = ($$0293|0)==(0|0);
          if ($319) {
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $320 = $313;
            HEAPF32[$$0293>>2] = $320;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $313;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $313;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
         }
         }
        } while(0);
        L169: do {
         if ((label|0) == 136) {
          label = 0;
          $296 = (___intscan($0,$$0272,0,-1,-1)|0);
          $297 = tempRet0;
          $298 = HEAP32[$16>>2]|0;
          $299 = HEAP32[$14>>2]|0;
          $300 = HEAP32[$17>>2]|0;
          $301 = (($300) - ($299))|0;
          $302 = ($298|0)==($301|0);
          if ($302) {
           $$10304 = $$1295;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$1306;
           break L6;
          }
          $303 = ($$|0)==(112);
          $304 = ($$0293|0)!=(0|0);
          $or$cond3 = $304 & $303;
          if ($or$cond3) {
           $305 = $296;
           HEAP32[$$0293>>2] = $305;
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
           break;
          }
          $306 = ($$0293|0)==(0|0);
          if ($306) {
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
          } else {
           switch ($$$0268|0) {
           case -2:  {
            $307 = $296&255;
            HEAP8[$$0293>>0] = $307;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case -1:  {
            $308 = $296&65535;
            HEAP16[$$0293>>1] = $308;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 0:  {
            HEAP32[$$0293>>2] = $296;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 1:  {
            HEAP32[$$0293>>2] = $296;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 3:  {
            $309 = $$0293;
            $310 = $309;
            HEAP32[$310>>2] = $296;
            $311 = (($309) + 4)|0;
            $312 = $311;
            HEAP32[$312>>2] = $297;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
           }
           }
          }
         }
        } while(0);
        $321 = HEAP32[$16>>2]|0;
        $322 = HEAP32[$14>>2]|0;
        $323 = HEAP32[$17>>2]|0;
        $324 = (($321) + ($$1284))|0;
        $325 = (($324) + ($322))|0;
        $326 = (($325) - ($323))|0;
        $not$ = ($$0293|0)!=(0|0);
        $327 = $not$&1;
        $$0288$ = (($327) + ($$0288416))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $326;$$6311 = $$5310;$$7301 = $$6300;
        break L8;
       }
      } while(0);
      $57 = $54&1;
      $58 = (($$0273420) + ($57)|0);
      ___shlim($0,0);
      $59 = HEAP32[$14>>2]|0;
      $60 = HEAP32[$15>>2]|0;
      $61 = ($59>>>0)<($60>>>0);
      if ($61) {
       $62 = ((($59)) + 1|0);
       HEAP32[$14>>2] = $62;
       $63 = HEAP8[$59>>0]|0;
       $64 = $63&255;
       $69 = $64;
      } else {
       $65 = (___shgetc($0)|0);
       $69 = $65;
      }
      $66 = HEAP8[$58>>0]|0;
      $67 = $66&255;
      $68 = ($69|0)==($67|0);
      if (!($68)) {
       label = 22;
       break L6;
      }
      $76 = (($$0283419) + 1)|0;
      $$11 = $58;$$1289 = $$0288416;$$2285 = $76;$$6311 = $$0305414;$$7301 = $$0294415;
     } else {
      $$1274 = $$0273420;
      while(1) {
       $28 = ((($$1274)) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = (_isspace($30)|0);
       $32 = ($31|0)==(0);
       if ($32) {
        break;
       } else {
        $$1274 = $28;
       }
      }
      ___shlim($0,0);
      while(1) {
       $33 = HEAP32[$14>>2]|0;
       $34 = HEAP32[$15>>2]|0;
       $35 = ($33>>>0)<($34>>>0);
       if ($35) {
        $36 = ((($33)) + 1|0);
        HEAP32[$14>>2] = $36;
        $37 = HEAP8[$33>>0]|0;
        $38 = $37&255;
        $40 = $38;
       } else {
        $39 = (___shgetc($0)|0);
        $40 = $39;
       }
       $41 = (_isspace($40)|0);
       $42 = ($41|0)==(0);
       if ($42) {
        break;
       }
      }
      $43 = HEAP32[$15>>2]|0;
      $44 = ($43|0)==(0|0);
      if ($44) {
       $$pre = HEAP32[$14>>2]|0;
       $52 = $$pre;
      } else {
       $45 = HEAP32[$14>>2]|0;
       $46 = ((($45)) + -1|0);
       HEAP32[$14>>2] = $46;
       $47 = $46;
       $52 = $47;
      }
      $48 = HEAP32[$16>>2]|0;
      $49 = HEAP32[$17>>2]|0;
      $50 = (($48) + ($$0283419))|0;
      $51 = (($50) + ($52))|0;
      $53 = (($51) - ($49))|0;
      $$11 = $$1274;$$1289 = $$0288416;$$2285 = $53;$$6311 = $$0305414;$$7301 = $$0294415;
     }
    } while(0);
    $328 = ((($$11)) + 1|0);
    $329 = HEAP8[$328>>0]|0;
    $330 = ($329<<24>>24)==(0);
    if ($330) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273420 = $328;$$0283419 = $$2285;$$0288416 = $$1289;$$0294415 = $$7301;$$0305414 = $$6311;$25 = $329;
    }
   }
   if ((label|0) == 22) {
    $70 = HEAP32[$15>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = HEAP32[$14>>2]|0;
     $73 = ((($72)) + -1|0);
     HEAP32[$14>>2] = $73;
    }
    $74 = ($69|0)>(-1);
    $75 = ($$0288416|0)!=(0);
    $or$cond5 = $75 | $74;
    if ($or$cond5) {
     $$3291 = $$0288416;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305414;$$9303 = $$0294415;
     label = 155;
    }
   }
   else if ((label|0) == 154) {
    $$old4 = ($$0288416|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$8313 = $$7312;$$9303 = $$8302;
     label = 155;
    } else {
     $$10304 = $$8302;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$7312;
    }
   }
   if ((label|0) == 155) {
    $$10304 = $$9303;$$2 = $$1271;$$2290 = -1;$$9314 = $$8313;
   }
   $331 = ($$2|0)==(0);
   if ($331) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($$10304);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $332 = ($333|0)==(0);
 if (!($332)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 _memcpy(($1|0),($4|0),($$027$|0))|0;
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 31]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 31]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in16$i = 0, $$014$lcssa$i = 0, $$01415$i = 0, $$016$lcssa$i = 0, $$01618$i = 0, $$0165$i = 0, $$0167$i = 0, $$0168$i = 0, $$0169$i = 0, $$0174$ph$ph$lcssa217$i = 0, $$0174$ph$ph$lcssa217329$i = 0, $$0174$ph$ph256$i = 0, $$0178244$i = 0, $$018$lcssa$i = 0, $$0182$ph197$ph255$i = 0, $$0182$ph197250$i = 0, $$0182$ph262$i = 0, $$01820$i = 0, $$0184$ph$lcssa$i = 0;
 var $$0184$ph$lcssa328$i = 0, $$0184$ph261$i = 0, $$0186265$i = 0, $$019$i = 0, $$021$i = 0, $$1175$$0174$i = 0, $$1175$ph$ph$lcssa208$i = 0, $$1175$ph$ph235$i = 0, $$1179224$i = 0, $$1183$ph193$ph234$i = 0, $$1183$ph193229$i = 0, $$1183$ph241$i = 0, $$1185$$0184$$i = 0, $$1185$$0184$i = 0, $$1185$ph$lcssa$i = 0, $$1185$ph240$i = 0, $$2180$i = 0, $$3$i = 0, $$3172$i = 0, $$3177$i = 0;
 var $$3181223$i = 0, $$4$i = 0, $$lcssa$i = 0, $$lcssa$i23 = 0, $$pr$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div$i = 0, $div187$i = 0, $or$cond$i = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond188$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $2 = sp + 1024|0;
 $3 = sp;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $$0 = $0;
  } else {
   $6 = $4 << 24 >> 24;
   $7 = (_strchr($0,$6)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 0;
   } else {
    $9 = ((($1)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$0 = $7;
    } else {
     $12 = ((($7)) + 1|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0 = 0;
     } else {
      $15 = ((($1)) + 2|0);
      $16 = HEAP8[$15>>0]|0;
      $17 = ($16<<24>>24)==(0);
      if ($17) {
       $18 = $4&255;
       $19 = $18 << 8;
       $20 = $10&255;
       $21 = $20 | $19;
       $22 = HEAP8[$7>>0]|0;
       $23 = $22&255;
       $24 = $23 << 8;
       $25 = $13&255;
       $26 = $24 | $25;
       $$0$in16$i = $26;$$01415$i = $12;$237 = $13;
       while(1) {
        $27 = $$0$in16$i & 65535;
        $28 = ($27|0)==($21|0);
        if ($28) {
         $$014$lcssa$i = $$01415$i;$36 = $237;
         break;
        }
        $29 = $27 << 8;
        $30 = ((($$01415$i)) + 1|0);
        $31 = HEAP8[$30>>0]|0;
        $32 = $31&255;
        $33 = $32 | $29;
        $34 = ($31<<24>>24)==(0);
        if ($34) {
         $$014$lcssa$i = $30;$36 = 0;
         break;
        } else {
         $$0$in16$i = $33;$$01415$i = $30;$237 = $31;
        }
       }
       $35 = ($36<<24>>24)!=(0);
       $37 = ((($$014$lcssa$i)) + -1|0);
       $38 = $35 ? $37 : 0;
       $$0 = $38;
       break;
      }
      $39 = ((($7)) + 2|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = ($40<<24>>24)==(0);
      if ($41) {
       $$0 = 0;
      } else {
       $42 = ((($1)) + 3|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = ($43<<24>>24)==(0);
       if ($44) {
        $45 = $4&255;
        $46 = $45 << 24;
        $47 = $10&255;
        $48 = $47 << 16;
        $49 = $48 | $46;
        $50 = $16&255;
        $51 = $50 << 8;
        $52 = $49 | $51;
        $53 = HEAP8[$7>>0]|0;
        $54 = $53&255;
        $55 = $54 << 24;
        $56 = $13&255;
        $57 = $56 << 16;
        $58 = $40&255;
        $59 = $58 << 8;
        $60 = $59 | $57;
        $61 = $60 | $55;
        $62 = ($61|0)==($52|0);
        if ($62) {
         $$016$lcssa$i = $39;$$lcssa$i = $40;
        } else {
         $$01618$i = $39;$$019$i = $61;
         while(1) {
          $63 = ((($$01618$i)) + 1|0);
          $64 = HEAP8[$63>>0]|0;
          $65 = $64&255;
          $66 = $65 | $$019$i;
          $67 = $66 << 8;
          $68 = ($64<<24>>24)==(0);
          $69 = ($67|0)==($52|0);
          $or$cond$i18 = $68 | $69;
          if ($or$cond$i18) {
           $$016$lcssa$i = $63;$$lcssa$i = $64;
           break;
          } else {
           $$01618$i = $63;$$019$i = $67;
          }
         }
        }
        $70 = ($$lcssa$i<<24>>24)!=(0);
        $71 = ((($$016$lcssa$i)) + -2|0);
        $72 = $70 ? $71 : 0;
        $$0 = $72;
        break;
       }
       $73 = ((($7)) + 3|0);
       $74 = HEAP8[$73>>0]|0;
       $75 = ($74<<24>>24)==(0);
       if ($75) {
        $$0 = 0;
       } else {
        $76 = ((($1)) + 4|0);
        $77 = HEAP8[$76>>0]|0;
        $78 = ($77<<24>>24)==(0);
        if ($78) {
         $79 = $4&255;
         $80 = $79 << 24;
         $81 = $10&255;
         $82 = $81 << 16;
         $83 = $82 | $80;
         $84 = $16&255;
         $85 = $84 << 8;
         $86 = $83 | $85;
         $87 = $43&255;
         $88 = $86 | $87;
         $89 = HEAP8[$7>>0]|0;
         $90 = $89&255;
         $91 = $90 << 24;
         $92 = $13&255;
         $93 = $92 << 16;
         $94 = $40&255;
         $95 = $94 << 8;
         $96 = $74&255;
         $97 = $95 | $93;
         $98 = $97 | $96;
         $99 = $98 | $91;
         $100 = ($99|0)==($88|0);
         if ($100) {
          $$018$lcssa$i = $73;$$lcssa$i23 = $74;
         } else {
          $$01820$i = $73;$$021$i = $99;
          while(1) {
           $101 = $$021$i << 8;
           $102 = ((($$01820$i)) + 1|0);
           $103 = HEAP8[$102>>0]|0;
           $104 = $103&255;
           $105 = $104 | $101;
           $106 = ($103<<24>>24)==(0);
           $107 = ($105|0)==($88|0);
           $or$cond$i21 = $106 | $107;
           if ($or$cond$i21) {
            $$018$lcssa$i = $102;$$lcssa$i23 = $103;
            break;
           } else {
            $$01820$i = $102;$$021$i = $105;
           }
          }
         }
         $108 = ($$lcssa$i23<<24>>24)!=(0);
         $109 = ((($$018$lcssa$i)) + -3|0);
         $110 = $108 ? $109 : 0;
         $$0 = $110;
         break;
        }
        ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
        $$0186265$i = 0;$115 = $4;
        while(1) {
         $111 = (($7) + ($$0186265$i)|0);
         $112 = HEAP8[$111>>0]|0;
         $113 = ($112<<24>>24)==(0);
         if ($113) {
          $$3$i = 0;
          break;
         }
         $114 = $115 & 31;
         $116 = $114&255;
         $117 = 1 << $116;
         $div187$i = ($115&255) >>> 5;
         $118 = $div187$i&255;
         $119 = (($2) + ($118<<2)|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = $120 | $117;
         HEAP32[$119>>2] = $121;
         $122 = (($$0186265$i) + 1)|0;
         $123 = $115&255;
         $124 = (($3) + ($123<<2)|0);
         HEAP32[$124>>2] = $122;
         $125 = (($1) + ($122)|0);
         $126 = HEAP8[$125>>0]|0;
         $127 = ($126<<24>>24)==(0);
         if ($127) {
          label = 23;
          break;
         } else {
          $$0186265$i = $122;$115 = $126;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $128 = ($122>>>0)>(1);
          L34: do {
           if ($128) {
            $$0182$ph262$i = 0;$$0184$ph261$i = -1;$238 = 1;
            L35: while(1) {
             $$0174$ph$ph256$i = 1;$$0182$ph197$ph255$i = $$0182$ph262$i;$239 = $238;
             while(1) {
              $$0182$ph197250$i = $$0182$ph197$ph255$i;$240 = $239;
              L39: while(1) {
               $$0178244$i = 1;$130 = $240;
               while(1) {
                $135 = (($$0178244$i) + ($$0184$ph261$i))|0;
                $136 = (($1) + ($135)|0);
                $137 = HEAP8[$136>>0]|0;
                $138 = (($1) + ($130)|0);
                $139 = HEAP8[$138>>0]|0;
                $140 = ($137<<24>>24)==($139<<24>>24);
                if (!($140)) {
                 break L39;
                }
                $141 = ($$0178244$i|0)==($$0174$ph$ph256$i|0);
                $133 = (($$0178244$i) + 1)|0;
                if ($141) {
                 break;
                }
                $132 = (($133) + ($$0182$ph197250$i))|0;
                $134 = ($132>>>0)<($122>>>0);
                if ($134) {
                 $$0178244$i = $133;$130 = $132;
                } else {
                 $$0174$ph$ph$lcssa217$i = $$0174$ph$ph256$i;$$0184$ph$lcssa$i = $$0184$ph261$i;
                 break L35;
                }
               }
               $142 = (($$0182$ph197250$i) + ($$0174$ph$ph256$i))|0;
               $143 = (($142) + 1)|0;
               $144 = ($143>>>0)<($122>>>0);
               if ($144) {
                $$0182$ph197250$i = $142;$240 = $143;
               } else {
                $$0174$ph$ph$lcssa217$i = $$0174$ph$ph256$i;$$0184$ph$lcssa$i = $$0184$ph261$i;
                break L35;
               }
              }
              $145 = ($137&255)>($139&255);
              $146 = (($130) - ($$0184$ph261$i))|0;
              if (!($145)) {
               break;
              }
              $129 = (($130) + 1)|0;
              $131 = ($129>>>0)<($122>>>0);
              if ($131) {
               $$0174$ph$ph256$i = $146;$$0182$ph197$ph255$i = $130;$239 = $129;
              } else {
               $$0174$ph$ph$lcssa217$i = $146;$$0184$ph$lcssa$i = $$0184$ph261$i;
               break L35;
              }
             }
             $147 = (($$0182$ph197250$i) + 1)|0;
             $148 = (($$0182$ph197250$i) + 2)|0;
             $149 = ($148>>>0)<($122>>>0);
             if ($149) {
              $$0182$ph262$i = $147;$$0184$ph261$i = $$0182$ph197250$i;$238 = $148;
             } else {
              $$0174$ph$ph$lcssa217$i = 1;$$0184$ph$lcssa$i = $$0182$ph197250$i;
              break;
             }
            }
            $$1183$ph241$i = 0;$$1185$ph240$i = -1;$241 = 1;
            while(1) {
             $$1175$ph$ph235$i = 1;$$1183$ph193$ph234$i = $$1183$ph241$i;$243 = $241;
             while(1) {
              $$1183$ph193229$i = $$1183$ph193$ph234$i;$242 = $243;
              L54: while(1) {
               $$1179224$i = 1;$157 = $242;
               while(1) {
                $153 = (($$1179224$i) + ($$1185$ph240$i))|0;
                $154 = (($1) + ($153)|0);
                $155 = HEAP8[$154>>0]|0;
                $156 = (($1) + ($157)|0);
                $158 = HEAP8[$156>>0]|0;
                $159 = ($155<<24>>24)==($158<<24>>24);
                if (!($159)) {
                 break L54;
                }
                $160 = ($$1179224$i|0)==($$1175$ph$ph235$i|0);
                $151 = (($$1179224$i) + 1)|0;
                if ($160) {
                 break;
                }
                $150 = (($151) + ($$1183$ph193229$i))|0;
                $152 = ($150>>>0)<($122>>>0);
                if ($152) {
                 $$1179224$i = $151;$157 = $150;
                } else {
                 $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $$1175$ph$ph235$i;$$1185$ph$lcssa$i = $$1185$ph240$i;
                 break L34;
                }
               }
               $161 = (($$1183$ph193229$i) + ($$1175$ph$ph235$i))|0;
               $162 = (($161) + 1)|0;
               $163 = ($162>>>0)<($122>>>0);
               if ($163) {
                $$1183$ph193229$i = $161;$242 = $162;
               } else {
                $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $$1175$ph$ph235$i;$$1185$ph$lcssa$i = $$1185$ph240$i;
                break L34;
               }
              }
              $164 = ($155&255)<($158&255);
              $165 = (($157) - ($$1185$ph240$i))|0;
              if (!($164)) {
               break;
              }
              $169 = (($157) + 1)|0;
              $170 = ($169>>>0)<($122>>>0);
              if ($170) {
               $$1175$ph$ph235$i = $165;$$1183$ph193$ph234$i = $157;$243 = $169;
              } else {
               $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $165;$$1185$ph$lcssa$i = $$1185$ph240$i;
               break L34;
              }
             }
             $166 = (($$1183$ph193229$i) + 1)|0;
             $167 = (($$1183$ph193229$i) + 2)|0;
             $168 = ($167>>>0)<($122>>>0);
             if ($168) {
              $$1183$ph241$i = $166;$$1185$ph240$i = $$1183$ph193229$i;$241 = $167;
             } else {
              $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = 1;$$1185$ph$lcssa$i = $$1183$ph193229$i;
              break;
             }
            }
           } else {
            $$0174$ph$ph$lcssa217329$i = 1;$$0184$ph$lcssa328$i = -1;$$1175$ph$ph$lcssa208$i = 1;$$1185$ph$lcssa$i = -1;
           }
          } while(0);
          $171 = (($$1185$ph$lcssa$i) + 1)|0;
          $172 = (($$0184$ph$lcssa328$i) + 1)|0;
          $173 = ($171>>>0)>($172>>>0);
          $$1175$$0174$i = $173 ? $$1175$ph$ph$lcssa208$i : $$0174$ph$ph$lcssa217329$i;
          $$1185$$0184$i = $173 ? $$1185$ph$lcssa$i : $$0184$ph$lcssa328$i;
          $174 = (($1) + ($$1175$$0174$i)|0);
          $175 = (($$1185$$0184$i) + 1)|0;
          $176 = (_memcmp($1,$174,$175)|0);
          $177 = ($176|0)==(0);
          if ($177) {
           $182 = (($122) - ($$1175$$0174$i))|0;
           $$0167$i = $182;$$3177$i = $$1175$$0174$i;
          } else {
           $178 = (($122) - ($$1185$$0184$i))|0;
           $179 = (($178) + -1)|0;
           $180 = ($$1185$$0184$i>>>0)>($179>>>0);
           $$1185$$0184$$i = $180 ? $$1185$$0184$i : $179;
           $181 = (($$1185$$0184$$i) + 1)|0;
           $$0167$i = 0;$$3177$i = $181;
          }
          $183 = $122 | 63;
          $184 = ($$0167$i|0)!=(0);
          $185 = (($122) - ($$3177$i))|0;
          $$0165$i = $7;$$0168$i = 0;$$0169$i = $7;
          L69: while(1) {
           $186 = $$0169$i;
           $187 = $$0165$i;
           $188 = (($186) - ($187))|0;
           $189 = ($188>>>0)<($122>>>0);
           do {
            if ($189) {
             $190 = (_memchr($$0169$i,0,$183)|0);
             $191 = ($190|0)==(0|0);
             if ($191) {
              $195 = (($$0169$i) + ($183)|0);
              $$3172$i = $195;
              break;
             } else {
              $192 = $190;
              $193 = (($192) - ($187))|0;
              $194 = ($193>>>0)<($122>>>0);
              if ($194) {
               $$3$i = 0;
               break L32;
              } else {
               $$3172$i = $190;
               break;
              }
             }
            } else {
             $$3172$i = $$0169$i;
            }
           } while(0);
           $196 = (($$0165$i) + ($$0186265$i)|0);
           $197 = HEAP8[$196>>0]|0;
           $div$i = ($197&255) >>> 5;
           $198 = $div$i&255;
           $199 = (($2) + ($198<<2)|0);
           $200 = HEAP32[$199>>2]|0;
           $201 = $197 & 31;
           $202 = $201&255;
           $203 = 1 << $202;
           $204 = $203 & $200;
           $205 = ($204|0)==(0);
           if ($205) {
            $214 = (($$0165$i) + ($122)|0);
            $$0165$i = $214;$$0168$i = 0;$$0169$i = $$3172$i;
            continue;
           }
           $206 = $197&255;
           $207 = (($3) + ($206<<2)|0);
           $208 = HEAP32[$207>>2]|0;
           $209 = (($122) - ($208))|0;
           $210 = ($209|0)==(0);
           if (!($210)) {
            $211 = ($$0168$i|0)!=(0);
            $or$cond$i = $184 & $211;
            $212 = ($209>>>0)<($$3177$i>>>0);
            $or$cond188$i = $or$cond$i & $212;
            $$2180$i = $or$cond188$i ? $185 : $209;
            $213 = (($$0165$i) + ($$2180$i)|0);
            $$0165$i = $213;$$0168$i = 0;$$0169$i = $$3172$i;
            continue;
           }
           $215 = ($175>>>0)>($$0168$i>>>0);
           $216 = $215 ? $175 : $$0168$i;
           $217 = (($1) + ($216)|0);
           $218 = HEAP8[$217>>0]|0;
           $219 = ($218<<24>>24)==(0);
           L83: do {
            if ($219) {
             $$4$i = $175;
            } else {
             $$3181223$i = $216;$$pr$i = $218;
             while(1) {
              $220 = (($$0165$i) + ($$3181223$i)|0);
              $221 = HEAP8[$220>>0]|0;
              $222 = ($$pr$i<<24>>24)==($221<<24>>24);
              if (!($222)) {
               break;
              }
              $223 = (($$3181223$i) + 1)|0;
              $224 = (($1) + ($223)|0);
              $225 = HEAP8[$224>>0]|0;
              $226 = ($225<<24>>24)==(0);
              if ($226) {
               $$4$i = $175;
               break L83;
              } else {
               $$3181223$i = $223;$$pr$i = $225;
              }
             }
             $227 = (($$3181223$i) - ($$1185$$0184$i))|0;
             $228 = (($$0165$i) + ($227)|0);
             $$0165$i = $228;$$0168$i = 0;$$0169$i = $$3172$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $229 = ($$4$i>>>0)>($$0168$i>>>0);
            if (!($229)) {
             $$3$i = $$0165$i;
             break L32;
            }
            $230 = (($$4$i) + -1)|0;
            $231 = (($1) + ($230)|0);
            $232 = HEAP8[$231>>0]|0;
            $233 = (($$0165$i) + ($230)|0);
            $234 = HEAP8[$233>>0]|0;
            $235 = ($232<<24>>24)==($234<<24>>24);
            if ($235) {
             $$4$i = $230;
            } else {
             break;
            }
           }
           $236 = (($$0165$i) + ($$3177$i)|0);
           $$0165$i = $236;$$0168$i = $$0167$i;$$0169$i = $$3172$i;
          }
         }
        } while(0);
        $$0 = $$3$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function _mbrlen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)!=(0|0);
 $4 = $3 ? $2 : 36856;
 $5 = (_mbrtowc(0,$0,$1,$4)|0);
 return ($5|0);
}
function _mbsnrtowcs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$04975 = 0, $$05274 = 0, $$055$ = 0, $$05573 = 0, $$064 = 0, $$076 = 0, $$1 = 0, $$150 = 0, $$153 = 0, $$156 = 0, $$25170 = 0, $$25469 = 0, $$257 = 0, $$271 = 0, $$3 = 0, $$35868 = 0, $$59 = 0, $$cast = 0, $$pr$pre = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $5 = sp + 8|0;
 $6 = sp;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$ = $8 ? $3 : 256;
 $$59 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$|0)!=(0);
 $or$cond72 = $10 & $9;
 L1: do {
  if ($or$cond72) {
   $$04975 = 0;$$05274 = $2;$$05573 = $$;$$076 = $$59;$44 = $$cast;
   while(1) {
    $11 = $$05274 >>> 2;
    $12 = ($11>>>0)>=($$05573>>>0);
    $13 = ($$05274>>>0)>(131);
    $14 = $13 | $12;
    if (!($14)) {
     $$064 = $$076;$$150 = $$04975;$$153 = $$05274;$$257 = $$05573;$26 = $44;
     break L1;
    }
    $$055$ = $12 ? $$05573 : $11;
    $15 = (($$05274) - ($$055$))|0;
    $16 = (_mbsrtowcs($$076,$6,$$055$,$4)|0);
    $17 = ($16|0)==(-1);
    if ($17) {
     break;
    }
    $18 = ($$076|0)==($5|0);
    $19 = (($$076) + ($16<<2)|0);
    $20 = $18 ? 0 : $16;
    $$156 = (($$05573) - ($20))|0;
    $$1 = $18 ? $$076 : $19;
    $21 = (($16) + ($$04975))|0;
    $22 = HEAP32[$6>>2]|0;
    $23 = ($22|0)!=(0|0);
    $24 = ($$156|0)!=(0);
    $or$cond = $24 & $23;
    if ($or$cond) {
     $$04975 = $21;$$05274 = $15;$$05573 = $$156;$$076 = $$1;$44 = $22;
    } else {
     $$064 = $$1;$$150 = $21;$$153 = $15;$$257 = $$156;$26 = $22;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$064 = $$076;$$150 = -1;$$153 = $15;$$257 = 0;$26 = $$pr$pre;
  } else {
   $$064 = $$59;$$150 = 0;$$153 = $2;$$257 = $$;$26 = $$cast;
  }
 } while(0);
 $25 = ($26|0)==(0|0);
 L8: do {
  if ($25) {
   $$3 = $$150;
  } else {
   $27 = ($$257|0)!=(0);
   $28 = ($$153|0)!=(0);
   $29 = $27 & $28;
   if ($29) {
    $$25170 = $$150;$$25469 = $$153;$$271 = $$064;$$35868 = $$257;$30 = $26;
    while(1) {
     $31 = (_mbrtowc($$271,$30,$$25469,$4)|0);
     $32 = (($31) + 2)|0;
     $33 = ($32>>>0)<(3);
     if ($33) {
      break;
     }
     $34 = HEAP32[$6>>2]|0;
     $35 = (($34) + ($31)|0);
     HEAP32[$6>>2] = $35;
     $36 = (($$25469) - ($31))|0;
     $37 = ((($$271)) + 4|0);
     $38 = (($$35868) + -1)|0;
     $39 = (($$25170) + 1)|0;
     $40 = ($38|0)!=(0);
     $41 = ($36|0)!=(0);
     $42 = $40 & $41;
     if ($42) {
      $$25170 = $39;$$25469 = $36;$$271 = $37;$$35868 = $38;$30 = $35;
     } else {
      $$3 = $39;
      break L8;
     }
    }
    switch ($31|0) {
    case -1:  {
     $$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$6>>2] = 0;
     $$3 = $$25170;
     break L8;
     break;
    }
    default: {
     HEAP32[$4>>2] = 0;
     $$3 = $$25170;
     break L8;
    }
    }
   } else {
    $$3 = $$150;
   }
  }
 } while(0);
 if ($8) {
  $43 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $43;
 }
 STACKTOP = sp;return ($$3|0);
}
function _mbsrtowcs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$086 = 0, $$087 = 0, $$087$ph = 0, $$094$ph = 0, $$094119 = 0, $$099 = 0, $$099$ph = 0, $$10 = 0, $$10109 = 0, $$10135 = 0, $$1100115 = 0, $$188116 = 0, $$195 = 0, $$2 = 0, $$2101 = 0, $$289 = 0, $$296 = 0, $$3102 = 0, $$390 = 0, $$397 = 0;
 var $$4 = 0, $$4103$ph = 0, $$4103118 = 0, $$491 = 0, $$498 = 0, $$498108 = 0, $$498134 = 0, $$5 = 0, $$5104 = 0, $$592$lcssa = 0, $$592$ph = 0, $$592120 = 0, $$6 = 0, $$6105 = 0, $$693 = 0, $$7 = 0, $$7106 = 0, $$8 = 0, $$8107 = 0, $$8107133 = 0;
 var $$9 = 0, $$old1 = 0, $$pre$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==(0|0);
 if ($5) {
  label = 5;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   label = 5;
  } else {
   $8 = ($0|0)==(0|0);
   if ($8) {
    $$2 = $6;$$3102 = $2;$$390 = $4;
    label = 17;
   } else {
    HEAP32[$3>>2] = 0;
    $$397 = $0;$$4 = $6;$$7106 = $2;$$8 = $4;
    label = 38;
   }
  }
 }
 if ((label|0) == 5) {
  $9 = ($0|0)==(0|0);
  if ($9) {
   $$087$ph = $4;$$099$ph = $2;
   label = 7;
  } else {
   $$094$ph = $0;$$4103$ph = $2;$$592$ph = $4;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $10 = ($$4103$ph|0)==(0);
   if ($10) {
    $$592$lcssa = $$592$ph;
    label = 27;
    break;
   } else {
    $$094119 = $$094$ph;$$4103118 = $$4103$ph;$$592120 = $$592$ph;
   }
   while(1) {
    $68 = HEAP8[$$592120>>0]|0;
    $69 = $68&255;
    $70 = (($69) + -1)|0;
    $71 = ($70>>>0)<(127);
    do {
     if ($71) {
      $72 = $$592120;
      $73 = $72 & 3;
      $74 = ($73|0)==(0);
      $75 = ($$4103118>>>0)>(4);
      $or$cond = $75 & $74;
      if ($or$cond) {
       $$195 = $$094119;$$5104 = $$4103118;$$693 = $$592120;
       while(1) {
        $76 = HEAP32[$$693>>2]|0;
        $77 = (($76) + -16843009)|0;
        $78 = $77 | $76;
        $79 = $78 & -2139062144;
        $80 = ($79|0)==(0);
        if (!($80)) {
         label = 33;
         break;
        }
        $81 = ((($$693)) + 1|0);
        $82 = $76 & 255;
        $83 = ((($$195)) + 4|0);
        HEAP32[$$195>>2] = $82;
        $84 = ((($$693)) + 2|0);
        $85 = HEAP8[$81>>0]|0;
        $86 = $85&255;
        $87 = ((($$195)) + 8|0);
        HEAP32[$83>>2] = $86;
        $88 = ((($$693)) + 3|0);
        $89 = HEAP8[$84>>0]|0;
        $90 = $89&255;
        $91 = ((($$195)) + 12|0);
        HEAP32[$87>>2] = $90;
        $92 = ((($$693)) + 4|0);
        $93 = HEAP8[$88>>0]|0;
        $94 = $93&255;
        $95 = ((($$195)) + 16|0);
        HEAP32[$91>>2] = $94;
        $96 = (($$5104) + -4)|0;
        $$old1 = ($96>>>0)>(4);
        if ($$old1) {
         $$195 = $95;$$5104 = $96;$$693 = $92;
        } else {
         label = 32;
         break;
        }
       }
       if ((label|0) == 32) {
        label = 0;
        $$pre$pre = HEAP8[$92>>0]|0;
        $$296 = $95;$$6105 = $96;$$7 = $92;$99 = $$pre$pre;
        break;
       }
       else if ((label|0) == 33) {
        label = 0;
        $97 = $76&255;
        $$296 = $$195;$$6105 = $$5104;$$7 = $$693;$99 = $97;
        break;
       }
      } else {
       $$296 = $$094119;$$6105 = $$4103118;$$7 = $$592120;$99 = $68;
      }
     } else {
      $$296 = $$094119;$$6105 = $$4103118;$$7 = $$592120;$99 = $68;
     }
    } while(0);
    $98 = $99&255;
    $100 = (($98) + -1)|0;
    $101 = ($100>>>0)<(127);
    if (!($101)) {
     break;
    }
    $102 = ((($$7)) + 1|0);
    $103 = ((($$296)) + 4|0);
    HEAP32[$$296>>2] = $98;
    $104 = (($$6105) + -1)|0;
    $105 = ($104|0)==(0);
    if ($105) {
     $$592$lcssa = $102;
     label = 27;
     break L7;
    } else {
     $$094119 = $103;$$4103118 = $104;$$592120 = $102;
    }
   }
   $106 = (($98) + -194)|0;
   $107 = ($106>>>0)>(50);
   if ($107) {
    $$10135 = $$7;$$498134 = $$296;$$8107133 = $$6105;
    label = 49;
    break;
   }
   $108 = ((($$7)) + 1|0);
   $109 = (5660 + ($106<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $$397 = $$296;$$4 = $110;$$7106 = $$6105;$$8 = $108;
   label = 38;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $$087 = $$087$ph;$$099 = $$099$ph;
   while(1) {
    $11 = HEAP8[$$087>>0]|0;
    $12 = $11&255;
    $13 = (($12) + -1)|0;
    $14 = ($13>>>0)<(127);
    if ($14) {
     $15 = $$087;
     $16 = $15 & 3;
     $17 = ($16|0)==(0);
     if ($17) {
      $18 = HEAP32[$$087>>2]|0;
      $19 = (($18) + -16843009)|0;
      $20 = $19 | $18;
      $21 = $20 & -2139062144;
      $22 = ($21|0)==(0);
      $23 = $18&255;
      if ($22) {
       $$1100115 = $$099;$$188116 = $$087;
       while(1) {
        $24 = ((($$188116)) + 4|0);
        $25 = (($$1100115) + -4)|0;
        $26 = HEAP32[$24>>2]|0;
        $27 = (($26) + -16843009)|0;
        $28 = $27 | $26;
        $29 = $28 & -2139062144;
        $30 = ($29|0)==(0);
        if ($30) {
         $$1100115 = $25;$$188116 = $24;
        } else {
         break;
        }
       }
       $31 = $26&255;
       $$2101 = $25;$$289 = $24;$33 = $31;
      } else {
       $$2101 = $$099;$$289 = $$087;$33 = $23;
      }
     } else {
      $$2101 = $$099;$$289 = $$087;$33 = $11;
     }
    } else {
     $$2101 = $$099;$$289 = $$087;$33 = $11;
    }
    $32 = $33&255;
    $34 = (($32) + -1)|0;
    $35 = ($34>>>0)<(127);
    if (!($35)) {
     break;
    }
    $36 = ((($$289)) + 1|0);
    $37 = (($$2101) + -1)|0;
    $$087 = $36;$$099 = $37;
   }
   $38 = (($32) + -194)|0;
   $39 = ($38>>>0)>(50);
   if ($39) {
    $$10135 = $$289;$$498134 = $0;$$8107133 = $$2101;
    label = 49;
    break;
   }
   $40 = ((($$289)) + 1|0);
   $41 = (5660 + ($38<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $$2 = $42;$$3102 = $$2101;$$390 = $40;
   label = 17;
   continue;
  }
  else if ((label|0) == 17) {
   label = 0;
   $43 = HEAP8[$$390>>0]|0;
   $44 = $43&255;
   $45 = $44 >>> 3;
   $46 = (($45) + -16)|0;
   $47 = $$2 >> 26;
   $48 = (($45) + ($47))|0;
   $49 = $46 | $48;
   $50 = ($49>>>0)>(7);
   if ($50) {
    label = 18;
    break;
   }
   $52 = ((($$390)) + 1|0);
   $53 = $$2 & 33554432;
   $54 = ($53|0)==(0);
   if ($54) {
    $$491 = $52;
   } else {
    $55 = HEAP8[$52>>0]|0;
    $56 = $55 & -64;
    $57 = ($56<<24>>24)==(-128);
    if (!($57)) {
     label = 21;
     break;
    }
    $59 = ((($$390)) + 2|0);
    $60 = $$2 & 524288;
    $61 = ($60|0)==(0);
    if ($61) {
     $$491 = $59;
    } else {
     $62 = HEAP8[$59>>0]|0;
     $63 = $62 & -64;
     $64 = ($63<<24>>24)==(-128);
     if (!($64)) {
      label = 24;
      break;
     }
     $66 = ((($$390)) + 3|0);
     $$491 = $66;
    }
   }
   $67 = (($$3102) + -1)|0;
   $$087$ph = $$491;$$099$ph = $67;
   label = 7;
   continue;
  }
  else if ((label|0) == 38) {
   label = 0;
   $111 = HEAP8[$$8>>0]|0;
   $112 = $111&255;
   $113 = $112 >>> 3;
   $114 = (($113) + -16)|0;
   $115 = $$4 >> 26;
   $116 = (($113) + ($115))|0;
   $117 = $114 | $116;
   $118 = ($117>>>0)>(7);
   if ($118) {
    label = 39;
    break;
   }
   $120 = $$4 << 6;
   $121 = ((($$8)) + 1|0);
   $122 = (($112) + -128)|0;
   $123 = $122 | $120;
   $124 = ($123|0)<(0);
   if ($124) {
    $125 = HEAP8[$121>>0]|0;
    $126 = $125&255;
    $127 = (($126) + -128)|0;
    $128 = ($127>>>0)>(63);
    if ($128) {
     label = 42;
     break;
    }
    $130 = $123 << 6;
    $131 = ((($$8)) + 2|0);
    $132 = $127 | $130;
    $133 = ($132|0)<(0);
    if ($133) {
     $134 = HEAP8[$131>>0]|0;
     $135 = $134&255;
     $136 = (($135) + -128)|0;
     $137 = ($136>>>0)>(63);
     if ($137) {
      label = 45;
      break;
     }
     $139 = $132 << 6;
     $140 = ((($$8)) + 3|0);
     $141 = $136 | $139;
     $$5 = $141;$$9 = $140;
    } else {
     $$5 = $132;$$9 = $131;
    }
   } else {
    $$5 = $123;$$9 = $121;
   }
   $142 = ((($$397)) + 4|0);
   HEAP32[$$397>>2] = $$5;
   $143 = (($$7106) + -1)|0;
   $$094$ph = $142;$$4103$ph = $143;$$592$ph = $$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 18) {
  $51 = ((($$390)) + -1|0);
  $$10 = $51;$$498 = $0;$$6 = $$2;$$8107 = $$3102;
  label = 48;
 }
 else if ((label|0) == 21) {
  $58 = ((($$390)) + -1|0);
  $$10 = $58;$$498 = $0;$$6 = $$2;$$8107 = $$3102;
  label = 48;
 }
 else if ((label|0) == 24) {
  $65 = ((($$390)) + -1|0);
  $$10 = $65;$$498 = $0;$$6 = $$2;$$8107 = $$3102;
  label = 48;
 }
 else if ((label|0) == 27) {
  HEAP32[$1>>2] = $$592$lcssa;
  $$086 = $2;
 }
 else if ((label|0) == 39) {
  $119 = ((($$8)) + -1|0);
  $$10 = $119;$$498 = $$397;$$6 = $$4;$$8107 = $$7106;
  label = 48;
 }
 else if ((label|0) == 42) {
  $129 = ((($$8)) + -1|0);
  $$10109 = $129;$$498108 = $$397;
  label = 53;
 }
 else if ((label|0) == 45) {
  $138 = ((($$8)) + -1|0);
  $$10109 = $138;$$498108 = $$397;
  label = 53;
 }
 if ((label|0) == 48) {
  $144 = ($$6|0)==(0);
  if ($144) {
   $$10135 = $$10;$$498134 = $$498;$$8107133 = $$8107;
   label = 49;
  } else {
   $$10109 = $$10;$$498108 = $$498;
   label = 53;
  }
 }
 if ((label|0) == 49) {
  $145 = HEAP8[$$10135>>0]|0;
  $146 = ($145<<24>>24)==(0);
  if ($146) {
   $147 = ($$498134|0)==(0|0);
   if (!($147)) {
    HEAP32[$$498134>>2] = 0;
    HEAP32[$1>>2] = 0;
   }
   $148 = (($2) - ($$8107133))|0;
   $$086 = $148;
  } else {
   $$10109 = $$10135;$$498108 = $$498134;
   label = 53;
  }
 }
 if ((label|0) == 53) {
  $149 = (___errno_location()|0);
  HEAP32[$149>>2] = 84;
  $150 = ($$498108|0)==(0|0);
  if ($150) {
   $$086 = -1;
  } else {
   HEAP32[$1>>2] = $$10109;
   $$086 = -1;
  }
 }
 return ($$086|0);
}
function _wcsnrtombs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$04672 = 0, $$04971 = 0, $$052$$049 = 0, $$05270 = 0, $$061 = 0, $$073 = 0, $$1 = 0, $$147 = 0, $$150 = 0, $$153 = 0, $$24867 = 0, $$25166 = 0, $$254 = 0, $$268 = 0, $$3 = 0, $$35565 = 0, $$56 = 0, $$cast = 0, $$pr$pre = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $5 = sp + 8|0;
 $6 = sp;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$ = $8 ? $3 : 256;
 $$56 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$|0)!=(0);
 $or$cond69 = $10 & $9;
 L1: do {
  if ($or$cond69) {
   $$04672 = 0;$$04971 = $2;$$05270 = $$;$$073 = $$56;$45 = $$cast;
   while(1) {
    $11 = ($$04971>>>0)>=($$05270>>>0);
    $12 = ($$04971>>>0)>(32);
    $13 = $11 | $12;
    if (!($13)) {
     $$061 = $$073;$$147 = $$04672;$$150 = $$04971;$$254 = $$05270;$25 = $45;
     break L1;
    }
    $$052$$049 = $11 ? $$05270 : $$04971;
    $14 = (($$04971) - ($$052$$049))|0;
    $15 = (_wcsrtombs($$073,$6,$$052$$049,0)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     break;
    }
    $17 = ($$073|0)==($5|0);
    $18 = (($$073) + ($15)|0);
    $19 = $17 ? 0 : $15;
    $$153 = (($$05270) - ($19))|0;
    $$1 = $17 ? $$073 : $18;
    $20 = (($15) + ($$04672))|0;
    $21 = HEAP32[$6>>2]|0;
    $22 = ($21|0)!=(0|0);
    $23 = ($$153|0)!=(0);
    $or$cond = $23 & $22;
    if ($or$cond) {
     $$04672 = $20;$$04971 = $14;$$05270 = $$153;$$073 = $$1;$45 = $21;
    } else {
     $$061 = $$1;$$147 = $20;$$150 = $14;$$254 = $$153;$25 = $21;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$061 = $$073;$$147 = -1;$$150 = $14;$$254 = 0;$25 = $$pr$pre;
  } else {
   $$061 = $$56;$$147 = 0;$$150 = $2;$$254 = $$;$25 = $$cast;
  }
 } while(0);
 $24 = ($25|0)==(0|0);
 L8: do {
  if ($24) {
   $$3 = $$147;
  } else {
   $26 = ($$254|0)!=(0);
   $27 = ($$150|0)!=(0);
   $28 = $26 & $27;
   if ($28) {
    $$24867 = $$147;$$25166 = $$150;$$268 = $$061;$$35565 = $$254;$30 = $25;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (_wcrtomb($$268,$29,0)|0);
     $32 = (($31) + 1)|0;
     $33 = ($32>>>0)<(2);
     if ($33) {
      break;
     }
     $35 = HEAP32[$6>>2]|0;
     $36 = ((($35)) + 4|0);
     HEAP32[$6>>2] = $36;
     $37 = (($$25166) + -1)|0;
     $38 = (($$268) + ($31)|0);
     $39 = (($$35565) - ($31))|0;
     $40 = (($$24867) + 1)|0;
     $41 = ($39|0)!=(0);
     $42 = ($37|0)!=(0);
     $43 = $41 & $42;
     if ($43) {
      $$24867 = $40;$$25166 = $37;$$268 = $38;$$35565 = $39;$30 = $36;
     } else {
      $$3 = $40;
      break L8;
     }
    }
    $34 = ($31|0)==(0);
    if ($34) {
     HEAP32[$6>>2] = 0;
     $$3 = $$24867;
    } else {
     $$3 = -1;
    }
   } else {
    $$3 = $$147;
   }
  }
 } while(0);
 if ($8) {
  $44 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $44;
 }
 STACKTOP = sp;return ($$3|0);
}
function _wcsrtombs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$05675 = 0, $$057$lcssa = 0, $$05785 = 0, $$05874 = 0, $$1 = 0, $$159 = 0, $$260$lcssa = 0, $$26084 = 0, $$279 = 0, $$3 = 0, $$361 = 0, $$478 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre100 = 0, $$pre101 = 0, $$pre102 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==(0|0);
 L1: do {
  if ($5) {
   $7 = HEAP32[$1>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $$0 = 0;
   } else {
    $$05675 = $7;$$05874 = 0;$11 = $8;
    while(1) {
     $10 = ($11>>>0)>(127);
     if ($10) {
      $12 = (_wcrtomb($4,$11,0)|0);
      $13 = ($12|0)==(-1);
      if ($13) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $12;
      }
     } else {
      $$pn = 1;
     }
     $$159 = (($$pn) + ($$05874))|0;
     $14 = ((($$05675)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0);
     if ($16) {
      $$0 = $$159;
      break;
     } else {
      $$05675 = $14;$$05874 = $$159;$11 = $15;
     }
    }
   }
  } else {
   $6 = ($2>>>0)>(3);
   L9: do {
    if ($6) {
     $$pre = HEAP32[$1>>2]|0;
     $$05785 = $0;$$26084 = $2;$19 = $$pre;
     while(1) {
      $18 = HEAP32[$19>>2]|0;
      $20 = (($18) + -1)|0;
      $21 = ($20>>>0)>(126);
      if ($21) {
       $22 = ($18|0)==(0);
       if ($22) {
        break;
       }
       $24 = (_wcrtomb($$05785,$18,0)|0);
       $25 = ($24|0)==(-1);
       if ($25) {
        $$0 = -1;
        break L1;
       }
       $26 = (($$05785) + ($24)|0);
       $27 = (($$26084) - ($24))|0;
       $$1 = $26;$$361 = $27;$32 = $19;
      } else {
       $28 = $18&255;
       $29 = ((($$05785)) + 1|0);
       HEAP8[$$05785>>0] = $28;
       $30 = (($$26084) + -1)|0;
       $$pre100 = HEAP32[$1>>2]|0;
       $$1 = $29;$$361 = $30;$32 = $$pre100;
      }
      $31 = ((($32)) + 4|0);
      HEAP32[$1>>2] = $31;
      $33 = ($$361>>>0)>(3);
      if ($33) {
       $$05785 = $$1;$$26084 = $$361;$19 = $31;
      } else {
       $$057$lcssa = $$1;$$260$lcssa = $$361;
       break L9;
      }
     }
     HEAP8[$$05785>>0] = 0;
     HEAP32[$1>>2] = 0;
     $23 = (($2) - ($$26084))|0;
     $$0 = $23;
     break L1;
    } else {
     $$057$lcssa = $0;$$260$lcssa = $2;
    }
   } while(0);
   $17 = ($$260$lcssa|0)==(0);
   if ($17) {
    $$0 = $2;
   } else {
    $$pre101 = HEAP32[$1>>2]|0;
    $$279 = $$057$lcssa;$$478 = $$260$lcssa;$35 = $$pre101;
    while(1) {
     $34 = HEAP32[$35>>2]|0;
     $36 = (($34) + -1)|0;
     $37 = ($36>>>0)>(126);
     if ($37) {
      $38 = ($34|0)==(0);
      if ($38) {
       label = 19;
       break;
      }
      $40 = (_wcrtomb($4,$34,0)|0);
      $41 = ($40|0)==(-1);
      if ($41) {
       $$0 = -1;
       break L1;
      }
      $42 = ($$478>>>0)<($40>>>0);
      if ($42) {
       label = 22;
       break;
      }
      $44 = HEAP32[$35>>2]|0;
      (_wcrtomb($$279,$44,0)|0);
      $45 = (($$279) + ($40)|0);
      $46 = (($$478) - ($40))|0;
      $$3 = $45;$$5 = $46;$51 = $35;
     } else {
      $47 = $34&255;
      $48 = ((($$279)) + 1|0);
      HEAP8[$$279>>0] = $47;
      $49 = (($$478) + -1)|0;
      $$pre102 = HEAP32[$1>>2]|0;
      $$3 = $48;$$5 = $49;$51 = $$pre102;
     }
     $50 = ((($51)) + 4|0);
     HEAP32[$1>>2] = $50;
     $52 = ($$5|0)==(0);
     if ($52) {
      $$0 = $2;
      break L1;
     } else {
      $$279 = $$3;$$478 = $$5;$35 = $50;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$279>>0] = 0;
     HEAP32[$1>>2] = 0;
     $39 = (($2) - ($$478))|0;
     $$0 = $39;
     break;
    }
    else if ((label|0) == 22) {
     $43 = (($2) - ($$478))|0;
     $$0 = $43;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01925 = 0, $$020 = 0, $$1$lcssa = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $div21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$020 = $0;
    while(1) {
     $8 = HEAP8[$$020>>0]|0;
     $9 = ($8<<24>>24)==($3<<24>>24);
     $10 = ((($$020)) + 1|0);
     if ($9) {
      $$020 = $10;
     } else {
      break;
     }
    }
    $11 = $$020;
    $12 = $0;
    $13 = (($11) - ($12))|0;
    $$0 = $13;
    break;
   } else {
    $$01925 = $1;$17 = $3;
   }
   while(1) {
    $16 = $17 & 31;
    $18 = $16&255;
    $19 = 1 << $18;
    $div21 = ($17&255) >>> 5;
    $20 = $div21&255;
    $21 = (($2) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 | $19;
    HEAP32[$21>>2] = $23;
    $24 = ((($$01925)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     break;
    } else {
     $$01925 = $24;$17 = $25;
    }
   }
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(0);
   L10: do {
    if ($15) {
     $$1$lcssa = $0;
    } else {
     $$123 = $0;$27 = $14;
     while(1) {
      $div = ($27&255) >>> 5;
      $28 = $div&255;
      $29 = (($2) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $27 & 31;
      $32 = $31&255;
      $33 = 1 << $32;
      $34 = $30 & $33;
      $35 = ($34|0)==(0);
      if ($35) {
       $$1$lcssa = $$123;
       break L10;
      }
      $36 = ((($$123)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1$lcssa = $36;
       break;
      } else {
       $$123 = $36;$27 = $37;
      }
     }
    }
   } while(0);
   $39 = $$1$lcssa;
   $40 = $0;
   $41 = (($39) - ($40))|0;
   $$0 = $41;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _srand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = 31800;
 $3 = $2;
 HEAP32[$3>>2] = $1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 31800;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 31800;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 31]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _vasprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (_malloc(240)|0);
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$2>>2]|0;
   HEAP32[$3>>2] = $vacopy_currentptr;
   $6 = (_vsnprintf($4,240,$1,$3)|0);
   $7 = ($6>>>0)<(240);
   if ($7) {
    $8 = (($6) + 1)|0;
    $9 = (_realloc($4,$8)|0);
    $10 = ($9|0)!=(0|0);
    $11 = $10 ? $9 : $4;
    HEAP32[$0>>2] = $11;
    $$0 = $6;
    break;
   }
   _free($4);
   $12 = ($6|0)<(0);
   if ($12) {
    $$0 = -1;
   } else {
    $13 = (($6) + 1)|0;
    $14 = (_malloc($13)|0);
    HEAP32[$0>>2] = $14;
    $15 = ($14|0)==(0|0);
    if ($15) {
     $$0 = -1;
    } else {
     $16 = (_vsnprintf($14,$13,$1,$2)|0);
     $$0 = $16;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ungetc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(-1);
 do {
  if ($2) {
   $$1 = -1;
  } else {
   $3 = ((($1)) + 76|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(-1);
   if ($5) {
    $6 = (___lockfile($1)|0);
    $19 = $6;
   } else {
    $19 = 0;
   }
   $7 = ((($1)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $10 = (___toread($1)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     label = 6;
    }
   } else {
    label = 6;
   }
   if ((label|0) == 6) {
    $12 = ((($1)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($1)) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + -8|0);
    $17 = ($13>>>0)>($16>>>0);
    if ($17) {
     $20 = $0&255;
     $21 = ((($13)) + -1|0);
     HEAP32[$12>>2] = $21;
     HEAP8[$21>>0] = $20;
     $22 = HEAP32[$1>>2]|0;
     $23 = $22 & -17;
     HEAP32[$1>>2] = $23;
     $24 = ($19|0)==(0);
     if ($24) {
      $$1 = $0;
      break;
     }
     ___unlockfile($1);
     $$1 = $0;
     break;
    }
   }
   $18 = ($19|0)==(0);
   if ($18) {
    $$1 = -1;
   } else {
    ___unlockfile($1);
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 31]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==($0|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = $0&255;
     $30 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $30;
     HEAP8[$25>>0] = $29;
     $31 = $0 & 255;
     $33 = $31;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = ((($1)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==($0|0);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = $0&255;
     $17 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $17;
     HEAP8[$12>>0] = $16;
     $18 = $0 & 255;
     $$0 = $18;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $9 = (___lockfile($3)|0);
  $phitmp = ($9|0)==(0);
  $10 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $12 = $10;
  } else {
   ___unlockfile($3);
   $12 = $10;
  }
 } else {
  $8 = (___fwritex($0,$4,$3)|0);
  $12 = $8;
 }
 $11 = ($12|0)==($4|0);
 if ($11) {
  $14 = $2;
 } else {
  $13 = (($12>>>0) / ($1>>>0))&-1;
  $14 = $13;
 }
 return ($14|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$053$ph = 0, $$05357 = 0, $$054$ph = 0, $$05456 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($3)|0);
  $35 = $8;
 } else {
  $35 = 0;
 }
 $9 = ((($3)) + 74|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = (($11) + 255)|0;
 $13 = $12 | $11;
 $14 = $13&255;
 HEAP8[$9>>0] = $14;
 $15 = ((($3)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($3)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) - ($18))|0;
 $20 = ($19|0)>(0);
 $21 = $18;
 if ($20) {
  $22 = ($19>>>0)<($4>>>0);
  $$ = $22 ? $19 : $4;
  _memcpy(($0|0),($21|0),($$|0))|0;
  $23 = (($21) + ($$)|0);
  HEAP32[$17>>2] = $23;
  $24 = (($0) + ($$)|0);
  $25 = (($4) - ($$))|0;
  $$053$ph = $25;$$054$ph = $24;
 } else {
  $$053$ph = $4;$$054$ph = $0;
 }
 $26 = ($$053$ph|0)==(0);
 L7: do {
  if ($26) {
   label = 13;
  } else {
   $27 = ((($3)) + 32|0);
   $$05357 = $$053$ph;$$05456 = $$054$ph;
   while(1) {
    $28 = (___toread($3)|0);
    $29 = ($28|0)==(0);
    if (!($29)) {
     break;
    }
    $30 = HEAP32[$27>>2]|0;
    $31 = (FUNCTION_TABLE_iiii[$30 & 31]($3,$$05456,$$05357)|0);
    $32 = (($31) + 1)|0;
    $33 = ($32>>>0)<(2);
    if ($33) {
     break;
    }
    $38 = (($$05357) - ($31))|0;
    $39 = (($$05456) + ($31)|0);
    $40 = ($38|0)==(0);
    if ($40) {
     label = 13;
     break L7;
    } else {
     $$05357 = $38;$$05456 = $39;
    }
   }
   $34 = ($35|0)==(0);
   if (!($34)) {
    ___unlockfile($3);
   }
   $36 = (($4) - ($$05357))|0;
   $37 = (($36>>>0) / ($1>>>0))&-1;
   $$0 = $37;
  }
 } while(0);
 if ((label|0) == 13) {
  $41 = ($35|0)==(0);
  if ($41) {
   $$0 = $2;
  } else {
   ___unlockfile($3);
   $$0 = $2;
  }
 }
 return ($$0|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _getc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _rewind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  (___fseeko_unlocked($0,0,0)|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 & -33;
  HEAP32[$0>>2] = $6;
  if (!($phitmp)) {
   ___unlockfile($0);
  }
 } else {
  (___fseeko_unlocked($0,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & -33;
  HEAP32[$0>>2] = $8;
 }
 return;
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 dest=$3; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _strcspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01823 = 0, $$019$lcssa = 0, $$01921 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $div = 0, $div20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  label = 3;
 } else {
  $5 = ((($1)) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   label = 3;
  } else {
   ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
   $$01823 = $1;$16 = $3;
   while(1) {
    $15 = $16 & 31;
    $17 = $15&255;
    $18 = 1 << $17;
    $div20 = ($16&255) >>> 5;
    $19 = $div20&255;
    $20 = (($2) + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21 | $18;
    HEAP32[$20>>2] = $22;
    $23 = ((($$01823)) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = ($24<<24>>24)==(0);
    if ($25) {
     break;
    } else {
     $$01823 = $23;$16 = $24;
    }
   }
   $13 = HEAP8[$0>>0]|0;
   $14 = ($13<<24>>24)==(0);
   L7: do {
    if ($14) {
     $$019$lcssa = $0;
    } else {
     $$01921 = $0;$26 = $13;
     while(1) {
      $div = ($26&255) >>> 5;
      $27 = $div&255;
      $28 = (($2) + ($27<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $26 & 31;
      $31 = $30&255;
      $32 = 1 << $31;
      $33 = $29 & $32;
      $34 = ($33|0)==(0);
      if (!($34)) {
       $$019$lcssa = $$01921;
       break L7;
      }
      $35 = ((($$01921)) + 1|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = ($36<<24>>24)==(0);
      if ($37) {
       $$019$lcssa = $35;
       break;
      } else {
       $$01921 = $35;$26 = $36;
      }
     }
    }
   } while(0);
   $38 = $$019$lcssa;
   $39 = $0;
   $40 = (($38) - ($39))|0;
   $$0 = $40;
  }
 }
 if ((label|0) == 3) {
  $8 = $3 << 24 >> 24;
  $9 = (___strchrnul($0,$8)|0);
  $10 = $9;
  $11 = $0;
  $12 = (($10) - ($11))|0;
  $$0 = $12;
 }
 STACKTOP = sp;return ($$0|0);
}
function _strtold_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtox($0,$1,2));
 return (+$3);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _strtok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = HEAP32[9215]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (_strspn($$010,$1)|0);
   $6 = (($$010) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    HEAP32[9215] = 0;
    $$0 = 0;
    break;
   }
   $9 = (_strcspn($6,$1)|0);
   $10 = (($6) + ($9)|0);
   HEAP32[9215] = $10;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    HEAP32[9215] = 0;
    $$0 = $6;
    break;
   } else {
    $13 = ((($10)) + 1|0);
    HEAP32[9215] = $13;
    HEAP8[$10>>0] = 0;
    $$0 = $6;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wmemset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$056 = 0, $$07 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$056 = $2;$$07 = $0;
  while(1) {
   $4 = (($$056) + -1)|0;
   $5 = ((($$07)) + 4|0);
   HEAP32[$$07>>2] = $1;
   $6 = ($4|0)==(0);
   if ($6) {
    break;
   } else {
    $$056 = $4;$$07 = $5;
   }
  }
 }
 return ($0|0);
}
function _wmemmove($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01417 = 0, $$019 = 0, $$118 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($2>>>0);
 $8 = ($2|0)==(0);
 if ($7) {
  if (!($8)) {
   $$in = $2;
   while(1) {
    $9 = (($$in) + -1)|0;
    $10 = (($1) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($0) + ($9<<2)|0);
    HEAP32[$12>>2] = $11;
    $13 = ($9|0)==(0);
    if ($13) {
     break;
    } else {
     $$in = $9;
    }
   }
  }
 } else {
  if (!($8)) {
   $$01417 = $1;$$019 = $0;$$118 = $2;
   while(1) {
    $14 = (($$118) + -1)|0;
    $15 = ((($$01417)) + 4|0);
    $16 = HEAP32[$$01417>>2]|0;
    $17 = ((($$019)) + 4|0);
    HEAP32[$$019>>2] = $16;
    $18 = ($14|0)==(0);
    if ($18) {
     break;
    } else {
     $$01417 = $15;$$019 = $17;$$118 = $14;
    }
   }
  }
 }
 return ($0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[9216]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (36904 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[9216] = $24;
     } else {
      $25 = HEAP32[(36880)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(36872)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (36904 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[9216] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(36880)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(36884)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (36904 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[9216] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(36880)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(36872)>>2] = $84;
     HEAP32[(36884)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(36868)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (37168 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(36880)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (37168 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(36868)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(36880)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(36880)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(36880)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(36884)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (36904 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[9216] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(36880)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(36872)>>2] = $$0191$i;
      HEAP32[(36884)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(36868)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (37168 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (37168 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(36872)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(36880)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (37168 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(36868)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(36880)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(36880)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(36880)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (36904 + ($425<<2)|0);
          $427 = HEAP32[9216]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[9216] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(36880)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (37168 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(36868)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(36880)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(36880)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(36872)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(36884)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(36884)>>2] = $511;
   HEAP32[(36872)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(36872)>>2] = 0;
   HEAP32[(36884)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(36876)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(36876)>>2] = $526;
  $527 = HEAP32[(36888)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(36888)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[9334]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(37344)>>2] = 4096;
  HEAP32[(37340)>>2] = 4096;
  HEAP32[(37348)>>2] = -1;
  HEAP32[(37352)>>2] = -1;
  HEAP32[(37356)>>2] = 0;
  HEAP32[(37308)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[9334] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(37344)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(37304)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(37296)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(37308)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(36888)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (37312);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(37340)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(37296)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(37304)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(37344)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(37308)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(37308)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(37296)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(37296)>>2] = $624;
  $625 = HEAP32[(37300)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(37300)>>2] = $624;
  }
  $627 = HEAP32[(36888)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(36880)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(36880)>>2] = $$748$i;
    }
    HEAP32[(37312)>>2] = $$748$i;
    HEAP32[(37316)>>2] = $$723947$i;
    HEAP32[(37324)>>2] = 0;
    $632 = HEAP32[9334]|0;
    HEAP32[(36900)>>2] = $632;
    HEAP32[(36896)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (36904 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(36888)>>2] = $646;
    HEAP32[(36876)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(37352)>>2]|0;
    HEAP32[(36892)>>2] = $652;
   } else {
    $$024370$i = (37312);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(36876)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(36888)>>2] = $676;
       HEAP32[(36876)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(37352)>>2]|0;
       HEAP32[(36892)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(36880)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(36880)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (37312);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (37312);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(36876)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(36876)>>2] = $724;
        HEAP32[(36888)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(36884)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(36872)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(36872)>>2] = $730;
         HEAP32[(36884)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (36904 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[9216]|0;
            $757 = $756 & $755;
            HEAP32[9216] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (37168 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(36868)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(36868)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(36880)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(36880)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(36880)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (36904 + ($834<<2)|0);
         $836 = HEAP32[9216]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[9216] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(36880)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (37168 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(36868)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(36868)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(36880)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(36880)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (37312);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(36888)>>2] = $944;
    HEAP32[(36876)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(37352)>>2]|0;
    HEAP32[(36892)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(37312)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(37312)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(37312)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(37312)+12>>2]|0;
    HEAP32[(37312)>>2] = $$748$i;
    HEAP32[(37316)>>2] = $$723947$i;
    HEAP32[(37324)>>2] = 0;
    HEAP32[(37320)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (36904 + ($965<<2)|0);
      $967 = HEAP32[9216]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[9216] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(36880)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (37168 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(36868)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(36868)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(36880)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(36880)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(36876)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(36876)>>2] = $1047;
   $1048 = HEAP32[(36888)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(36888)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(36880)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(36884)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(36872)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (36904 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[9216]|0;
     $38 = $37 & $36;
     HEAP32[9216] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (37168 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(36868)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(36868)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(36880)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(36880)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(36880)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(36888)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(36876)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(36876)>>2] = $123;
   HEAP32[(36888)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(36884)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(36884)>>2] = 0;
   HEAP32[(36872)>>2] = 0;
   return;
  }
  $128 = HEAP32[(36884)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(36872)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(36872)>>2] = $131;
   HEAP32[(36884)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (36904 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(36880)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[9216]|0;
     $155 = $154 & $153;
     HEAP32[9216] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(36880)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(36880)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(36880)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (37168 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(36868)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(36868)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(36880)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(36880)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(36880)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(36884)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(36872)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (36904 + ($236<<2)|0);
  $238 = HEAP32[9216]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[9216] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(36880)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (37168 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(36868)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(36868)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(36880)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(36880)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(36896)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(36896)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (37320);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(36896)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(36880)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(37344)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(36888)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(36876)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(36888)>>2] = $40;
  HEAP32[(36876)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(36884)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(36872)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(36872)>>2] = $storemerge1;
  HEAP32[(36884)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (36904 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[9216]|0;
    $93 = $92 & $91;
    HEAP32[9216] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (37168 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(36868)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(36868)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(36880)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(36880)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(36880)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(36880)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(36884)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(36872)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (36904 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[9216]|0;
     $34 = $33 & $32;
     HEAP32[9216] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (37168 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(36868)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(36868)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(36880)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(36880)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(36880)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(36880)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(36888)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(36876)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(36876)>>2] = $118;
   HEAP32[(36888)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(36884)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(36884)>>2] = 0;
   HEAP32[(36872)>>2] = 0;
   return;
  }
  $123 = HEAP32[(36884)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(36872)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(36872)>>2] = $126;
   HEAP32[(36884)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (36904 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[9216]|0;
     $149 = $148 & $147;
     HEAP32[9216] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (37168 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(36868)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(36868)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(36880)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(36880)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(36880)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(36884)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(36872)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (36904 + ($227<<2)|0);
  $229 = HEAP32[9216]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[9216] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(36880)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (37168 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(36868)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(36868)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(36880)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(36880)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}
function __ZNSt3__28ios_baseD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9460);
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0,0);
 $1 = ((($0)) + 28|0);
 __ZNSt3__26localeD2Ev($1);
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = ((($0)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = ((($0)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 return;
}
function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = ((($0)) + 36|0);
 $$0 = $3;
 while(1) {
  $6 = ($$0|0)==(0);
  if ($6) {
   break;
  }
  $7 = (($$0) + -1)|0;
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = (($11) + ($7<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viii[$10 & 31]($1,$0,$13);
  $$0 = $7;
 }
 return;
}
function __ZNSt3__28ios_baseD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9476);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9476);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 16|0);
 $$0 = 0;$$013 = $1;
 while(1) {
  $5 = ($$0|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = ((($6)) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $storemerge = $10;
  } else {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_ii[$13 & 127]($0)|0);
   $15 = ($14|0)==(-1);
   if ($15) {
    break;
   }
   $16 = $14&255;
   $storemerge = $16;
  }
  HEAP8[$$013>>0] = $storemerge;
  $17 = (($$0) + 1)|0;
  $18 = ((($$013)) + 1|0);
  $$0 = $17;$$013 = $18;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 127]($0)|0);
 $5 = ($4|0)==(-1);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = ((($0)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 1|0);
  HEAP32[$6>>2] = $8;
  $9 = HEAP8[$7>>0]|0;
  $10 = $9&255;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$pre = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 $4 = ((($0)) + 28|0);
 $$0 = $1;$$021 = 0;
 while(1) {
  $5 = ($$021|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ((($9)) + 52|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP8[$$0>>0]|0;
   $13 = $12&255;
   $14 = (FUNCTION_TABLE_iii[$11 & 31]($0,$13)|0);
   $15 = ($14|0)==(-1);
   if ($15) {
    break;
   }
   $16 = ((($$0)) + 1|0);
   $17 = (($$021) + 1)|0;
   $$0 = $16;$$021 = $17;
   continue;
  }
  $18 = $6;
  $19 = $7;
  $20 = (($19) - ($18))|0;
  $21 = (($2) - ($$021))|0;
  $22 = ($21|0)<($20|0);
  $$sroa$speculated = $22 ? $21 : $20;
  $23 = ($$sroa$speculated|0)==(0);
  if ($23) {
   $25 = $6;
  } else {
   _memcpy(($6|0),($$0|0),($$sroa$speculated|0))|0;
   $$pre = HEAP32[$3>>2]|0;
   $25 = $$pre;
  }
  $24 = (($25) + ($$sroa$speculated)|0);
  HEAP32[$3>>2] = $24;
  $26 = (($$0) + ($$sroa$speculated)|0);
  $27 = (($$sroa$speculated) + ($$021))|0;
  $$0 = $26;$$021 = $27;
 }
 return ($$021|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9540);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9540);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 16|0);
 $$0 = 0;$$013 = $1;
 while(1) {
  $5 = ($$0|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = ((($6)) + 4|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP32[$6>>2]|0;
   $storemerge = $10;
  } else {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_ii[$13 & 127]($0)|0);
   $15 = ($14|0)==(-1);
   if ($15) {
    break;
   } else {
    $storemerge = $14;
   }
  }
  HEAP32[$$013>>2] = $storemerge;
  $16 = (($$0) + 1)|0;
  $17 = ((($$013)) + 4|0);
  $$0 = $16;$$013 = $17;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 127]($0)|0);
 $5 = ($4|0)==(-1);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = ((($0)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 4|0);
  HEAP32[$6>>2] = $8;
  $9 = HEAP32[$7>>2]|0;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 $4 = ((($0)) + 28|0);
 $$0 = $1;$$021 = 0;
 while(1) {
  $5 = ($$021|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $17 = $6;
   $18 = $7;
   $19 = (($18) - ($17))|0;
   $20 = $19 >> 2;
   $21 = (($2) - ($$021))|0;
   $22 = ($21|0)<($20|0);
   $$sroa$speculated = $22 ? $21 : $20;
   (__ZNSt3__211char_traitsIwE4copyEPwPKwj($6,$$0,$$sroa$speculated)|0);
   $23 = HEAP32[$3>>2]|0;
   $24 = (($23) + ($$sroa$speculated<<2)|0);
   HEAP32[$3>>2] = $24;
   $25 = (($$0) + ($$sroa$speculated<<2)|0);
   $26 = (($$sroa$speculated) + ($$021))|0;
   $$0 = $25;$$021 = $26;
   continue;
  }
  $9 = HEAP32[$0>>2]|0;
  $10 = ((($9)) + 52|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$$0>>2]|0;
  $13 = (FUNCTION_TABLE_iii[$11 & 31]($0,$12)|0);
  $14 = ($13|0)==(-1);
  if ($14) {
   break;
  }
  $15 = ((($$0)) + 4|0);
  $16 = (($$021) + 1)|0;
  $$0 = $15;$$021 = $16;
 }
 return ($$021|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__211char_traitsIwE4copyEPwPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemcpy($0,$1,$2)|0);
  $5 = $4;
 }
 return ($5|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($1);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 $5 = ((($4)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($1);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 $5 = ((($4)) + 8|0);
 __ZNSt3__28ios_baseD2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($1);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 $5 = ((($4)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($1);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 $5 = ((($4)) + 4|0);
 __ZNSt3__28ios_baseD2Ev($5);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($4);
 return;
}
function __ZNSt3__28ios_base5clearEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = $4&1;
 $$ = $5 | $1;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = $$;
 return;
}
function __ZNSt3__28ios_base4initEPv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 HEAP32[$2>>2] = $1;
 $not$ = ($1|0)==(0|0);
 $3 = $not$&1;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = 4098;
 $7 = ((($0)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 HEAP32[$8>>2] = 6;
 $9 = ((($0)) + 32|0);
 $10 = ((($0)) + 28|0);
 dest=$9; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__26localeC2Ev($10);
 return;
}
function __ZNKSt3__28ios_base6getlocEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 28|0);
 __ZNSt3__26localeC2ERKS0_($1,$2);
 $3 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9476);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeC2Ev($1);
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9540);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeC2Ev($1);
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i$i = 0, $$$i$i$i12 = 0, $$0$i$i = 0, $$pre$phiZ2D = 0, $$sroa$023$132 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isascii3$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP8[$0>>0] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + ($6)|0);
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = ((($7)) + 72|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($12)|0);
  }
  do {
   if (!($2)) {
    $14 = HEAP32[$1>>2]|0;
    $15 = ((($14)) + -12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($1) + ($16)|0);
    $18 = ((($17)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 & 4096;
    $21 = ($20|0)==(0);
    if (!($21)) {
     $22 = (__ZNKSt3__28ios_base6getlocEv($17)|0);
     HEAP32[$3>>2] = $22;
     $23 = (__ZNKSt3__26locale9use_facetERNS0_2idE($3,38408)|0);
     __ZNSt3__26localeD2Ev($3);
     $24 = HEAP32[$1>>2]|0;
     $25 = ((($24)) + -12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($1) + ($26)|0);
     $28 = ((($27)) + 24|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($23)) + 8|0);
     $31 = $29;
     $32 = ($29|0)==(0);
     $33 = ((($31)) + 12|0);
     $34 = ((($31)) + 16|0);
     $35 = $29;
     $36 = $29;
     $37 = ((($36)) + 12|0);
     $38 = ((($36)) + 16|0);
     $39 = $29;
     $40 = $29;
     while(1) {
      if ($32) {
       $$pre$phiZ2D = 0;$$sroa$023$132 = 0;
       break;
      }
      $41 = HEAP32[$33>>2]|0;
      $42 = HEAP32[$34>>2]|0;
      $43 = ($41|0)==($42|0);
      if ($43) {
       $44 = HEAP32[$35>>2]|0;
       $45 = ((($44)) + 36|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = (FUNCTION_TABLE_ii[$46 & 127]($31)|0);
       $48 = ($47|0)==(-1);
       if ($48) {
        $$pre$phiZ2D = 0;$$sroa$023$132 = 0;
        break;
       }
      }
      $49 = HEAP32[$37>>2]|0;
      $50 = HEAP32[$38>>2]|0;
      $51 = ($49|0)==($50|0);
      if ($51) {
       $52 = HEAP32[$39>>2]|0;
       $53 = ((($52)) + 36|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (FUNCTION_TABLE_ii[$54 & 127]($36)|0);
       $$0$i$i = $55;
      } else {
       $56 = HEAP8[$49>>0]|0;
       $57 = $56&255;
       $$0$i$i = $57;
      }
      $58 = $$0$i$i&255;
      $isascii3$i = ($58<<24>>24)>(-1);
      if (!($isascii3$i)) {
       $$pre$phiZ2D = $36;$$sroa$023$132 = $29;
       break;
      }
      $sext = $$0$i$i << 24;
      $59 = $sext >> 24;
      $60 = HEAP32[$30>>2]|0;
      $61 = (($60) + ($59<<1)|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = $62 & 8192;
      $64 = ($63<<16>>16)==(0);
      if ($64) {
       $$pre$phiZ2D = $36;$$sroa$023$132 = $29;
       break;
      }
      $65 = HEAP32[$37>>2]|0;
      $66 = HEAP32[$38>>2]|0;
      $67 = ($65|0)==($66|0);
      if ($67) {
       $68 = HEAP32[$40>>2]|0;
       $69 = ((($68)) + 40|0);
       $70 = HEAP32[$69>>2]|0;
       (FUNCTION_TABLE_ii[$70 & 127]($36)|0);
       continue;
      } else {
       $71 = ((($65)) + 1|0);
       HEAP32[$37>>2] = $71;
       continue;
      }
     }
     $72 = ($$sroa$023$132|0)==(0);
     if (!($72)) {
      $73 = ((($$pre$phiZ2D)) + 12|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ((($$pre$phiZ2D)) + 16|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($74|0)==($76|0);
      if (!($77)) {
       break;
      }
      $78 = $$sroa$023$132;
      $79 = HEAP32[$78>>2]|0;
      $80 = ((($79)) + 36|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = (FUNCTION_TABLE_ii[$81 & 127]($$pre$phiZ2D)|0);
      $83 = ($82|0)==(-1);
      if (!($83)) {
       break;
      }
     }
     $84 = HEAP32[$1>>2]|0;
     $85 = ((($84)) + -12|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($1) + ($86)|0);
     $88 = ((($87)) + 16|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ((($87)) + 24|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)==(0|0);
     $93 = $92&1;
     $94 = $89 | $93;
     $$$i$i$i12 = $94 | 6;
     HEAP32[$88>>2] = $$$i$i$i12;
    }
   }
  } while(0);
  $95 = HEAP32[$1>>2]|0;
  $96 = ((($95)) + -12|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($1) + ($97)|0);
  $99 = ((($98)) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($100|0)==(0);
  $102 = $101&1;
  HEAP8[$0>>0] = $102;
 } else {
  $103 = ((($7)) + 24|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($104|0)==(0|0);
  $106 = $105&1;
  $107 = $9 | $106;
  $$$i$i$i = $107 | 4;
  HEAP32[$8>>2] = $$$i$i$i;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($0) + ($4)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($1,$0);
  $9 = HEAP8[$1>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + -12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($0) + ($13)|0);
   $15 = ((($14)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_ii[$19 & 127]($16)|0);
   $21 = ($20|0)==(-1);
   if ($21) {
    $22 = HEAP32[$0>>2]|0;
    $23 = ((($22)) + -12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($0) + ($24)|0);
    $26 = ((($25)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 | 1;
    HEAP32[$26>>2] = $28;
   }
  }
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($6)) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11)|0);
  }
  HEAP8[$0>>0] = 1;
 }
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = ((($6)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = ((($6)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 8192;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = (__ZSt18uncaught_exceptionv()|0);
    if (!($17)) {
     $18 = HEAP32[$1>>2]|0;
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($19)) + -12|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($18) + ($21)|0);
     $23 = ((($22)) + 24|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ((($25)) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_ii[$27 & 127]($24)|0);
     $29 = ($28|0)==(-1);
     if ($29) {
      $30 = HEAP32[$1>>2]|0;
      $31 = HEAP32[$30>>2]|0;
      $32 = ((($31)) + -12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($30) + ($33)|0);
      $35 = ((($34)) + 16|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $36 | 1;
      HEAP32[$35>>2] = $37;
     }
    }
   }
  }
 }
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i$i$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 24|0;
 $$byval_copy = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 28|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($4,$0,0);
 $8 = HEAP8[$4>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  HEAP32[$5>>2] = 0;
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + -12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($0) + ($12)|0);
  $14 = (__ZNKSt3__28ios_base6getlocEv($13)|0);
  HEAP32[$7>>2] = $14;
  $15 = (__ZNKSt3__26locale9use_facetERNS0_2idE($7,38432)|0);
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($16)) + -12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($0) + ($18)|0);
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$15>>2]|0;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$2>>2] = $21;
  HEAP32[$3>>2] = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;
  (FUNCTION_TABLE_iiiiiii[$24 & 63]($15,$$byval_copy,$$byval_copy1,$19,$5,$6)|0);
  __ZNSt3__26localeD2Ev($7);
  $25 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $25;
  $26 = HEAP32[$0>>2]|0;
  $27 = ((($26)) + -12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($0) + ($28)|0);
  $30 = HEAP32[$5>>2]|0;
  $31 = ((($29)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | $30;
  $34 = ((($29)) + 24|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0|0);
  $37 = $36&1;
  $$$i$i$i = $33 | $37;
  HEAP32[$31>>2] = $$$i$i$i;
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($0) + ($4)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($1,$0);
  $9 = HEAP8[$1>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + -12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($0) + ($13)|0);
   $15 = ((($14)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_ii[$19 & 127]($16)|0);
   $21 = ($20|0)==(-1);
   if ($21) {
    $22 = HEAP32[$0>>2]|0;
    $23 = ((($22)) + -12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($0) + ($24)|0);
    $26 = ((($25)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 | 1;
    HEAP32[$26>>2] = $28;
   }
  }
  __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($1);
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($6)) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv($11)|0);
  }
  HEAP8[$0>>0] = 1;
 }
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = ((($6)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = ((($6)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 8192;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = (__ZSt18uncaught_exceptionv()|0);
    if (!($17)) {
     $18 = HEAP32[$1>>2]|0;
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($19)) + -12|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($18) + ($21)|0);
     $23 = ((($22)) + 24|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ((($25)) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_ii[$27 & 127]($24)|0);
     $29 = ($28|0)==(-1);
     if ($29) {
      $30 = HEAP32[$1>>2]|0;
      $31 = HEAP32[$30>>2]|0;
      $32 = ((($31)) + -12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($30) + ($33)|0);
      $35 = ((($34)) + 16|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $36 | 1;
      HEAP32[$35>>2] = $37;
     }
    }
   }
  }
 }
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 1;
 HEAP32[$1>>2] = $3;
 return;
}
function __GLOBAL__I_000101() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_base4InitC2Ev(0);
 (___cxa_atexit((145|0),(43759|0),(___dso_handle|0))|0);
 return;
}
function __GLOBAL__sub_I_iostream_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28ios_base4InitC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[1495]|0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(38040,$1,38096);
 HEAP32[9340] = (9608);
 HEAP32[(37368)>>2] = (9628);
 HEAP32[(37364)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((37368),38040);
 HEAP32[(37440)>>2] = 0;
 HEAP32[(37444)>>2] = -1;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(38104,$1,38160);
 HEAP32[9362] = (9648);
 HEAP32[(37456)>>2] = (9668);
 HEAP32[(37452)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((37456),38104);
 HEAP32[(37528)>>2] = 0;
 HEAP32[(37532)>>2] = -1;
 $2 = HEAP32[1524]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(38168,$2,38216);
 HEAP32[9384] = (9688);
 HEAP32[(37540)>>2] = (9708);
 __ZNSt3__28ios_base4initEPv((37540),38168);
 HEAP32[(37612)>>2] = 0;
 HEAP32[(37616)>>2] = -1;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(38224,$2,38272);
 HEAP32[9405] = (9728);
 HEAP32[(37624)>>2] = (9748);
 __ZNSt3__28ios_base4initEPv((37624),38224);
 HEAP32[(37696)>>2] = 0;
 HEAP32[(37700)>>2] = -1;
 $3 = HEAP32[1466]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(38280,$3,38328);
 HEAP32[9426] = (9688);
 HEAP32[(37708)>>2] = (9708);
 __ZNSt3__28ios_base4initEPv((37708),38280);
 HEAP32[(37780)>>2] = 0;
 HEAP32[(37784)>>2] = -1;
 $4 = HEAP32[9426]|0;
 $5 = ((($4)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (37704 + ($6)|0);
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[9468] = (9688);
 HEAP32[(37876)>>2] = (9708);
 __ZNSt3__28ios_base4initEPv((37876),$9);
 HEAP32[(37948)>>2] = 0;
 HEAP32[(37952)>>2] = -1;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(38336,$3,38384);
 HEAP32[9447] = (9728);
 HEAP32[(37792)>>2] = (9748);
 __ZNSt3__28ios_base4initEPv((37792),38336);
 HEAP32[(37864)>>2] = 0;
 HEAP32[(37868)>>2] = -1;
 $10 = HEAP32[9447]|0;
 $11 = ((($10)) + -12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (37788 + ($12)|0);
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[9489] = (9728);
 HEAP32[(37960)>>2] = (9748);
 __ZNSt3__28ios_base4initEPv((37960),$15);
 HEAP32[(38032)>>2] = 0;
 HEAP32[(38036)>>2] = -1;
 $16 = HEAP32[9340]|0;
 $17 = ((($16)) + -12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (37360 + ($18)|0);
 $20 = ((($19)) + 72|0);
 HEAP32[$20>>2] = 37536;
 $21 = HEAP32[9362]|0;
 $22 = ((($21)) + -12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (37448 + ($23)|0);
 $25 = ((($24)) + 72|0);
 HEAP32[$25>>2] = 37620;
 $26 = HEAP32[9426]|0;
 $27 = ((($26)) + -12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (37704 + ($28)|0);
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 | 8192;
 HEAP32[$30>>2] = $32;
 $33 = HEAP32[9447]|0;
 $34 = ((($33)) + -12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (37788 + ($35)|0);
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 | 8192;
 HEAP32[$37>>2] = $39;
 $40 = HEAP32[9426]|0;
 $41 = ((($40)) + -12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (37704 + ($42)|0);
 $44 = ((($43)) + 72|0);
 HEAP32[$44>>2] = 37536;
 $45 = HEAP32[9447]|0;
 $46 = ((($45)) + -12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (37788 + ($47)|0);
 $49 = ((($48)) + 72|0);
 HEAP32[$49>>2] = 37620;
 return;
}
function __ZNSt3__28ios_base4InitD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(37536)|0);
 (__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv(37620)|0);
 (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(37872)|0);
 (__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEE5flushEv(37956)|0);
 return;
}
function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (9956);
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 40|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($0)) + 48|0);
 HEAP32[$7>>2] = -1;
 $8 = ((($0)) + 52|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$9);
 $10 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $10;
 __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($0,$4);
 __ZNSt3__26localeD2Ev($4);
 STACKTOP = sp;return;
}
function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0>>2] = (9892);
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 40|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($0)) + 48|0);
 HEAP32[$7>>2] = -1;
 $8 = ((($0)) + 52|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$9);
 $10 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $10;
 __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($0,$4);
 __ZNSt3__26localeD2Ev($4);
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (9828);
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 36|0);
 $7 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$7);
 $8 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $8;
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($4,40200)|0);
 __ZNSt3__26localeD2Ev($4);
 HEAP32[$6>>2] = $9;
 $10 = ((($0)) + 40|0);
 HEAP32[$10>>2] = $2;
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$9>>2]|0;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($9)|0);
 $16 = $15&1;
 HEAP8[$11>>0] = $16;
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0>>2] = (9764);
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 36|0);
 $7 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$7);
 $8 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $8;
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($4,40208)|0);
 __ZNSt3__26localeD2Ev($4);
 HEAP32[$6>>2] = $9;
 $10 = ((($0)) + 40|0);
 HEAP32[$10>>2] = $2;
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$9>>2]|0;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($9)|0);
 $16 = $15&1;
 HEAP8[$11>>0] = $16;
 STACKTOP = sp;return;
}
function __ZNSt3__211__stdoutbufIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 127]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,40208)|0);
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($5)|0);
 $11 = ((($0)) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 return;
}
function __ZNSt3__211__stdoutbufIwE4syncEv($0) {
 $0 = $0|0;
 var $$10 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 36|0);
 $4 = ((($0)) + 40|0);
 $5 = ((($1)) + 8|0);
 $6 = $1;
 $7 = ((($0)) + 32|0);
 L1: while(1) {
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 31]($8,$9,$1,$5,$2)|0);
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) - ($6))|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = (_fwrite($1,1,$15,$16)|0);
  $18 = ($17|0)==($15|0);
  if (!($18)) {
   $$2 = -1;
   break;
  }
  switch ($13|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$7>>2]|0;
  $20 = (_fflush($19)|0);
  $not$ = ($20|0)!=(0);
  $$10 = $not$ << 31 >> 31;
  $$2 = $$10;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__211__stdoutbufIwE6xsputnEPKwi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;$$011 = $1;
   while(1) {
    $9 = ($$0|0)<($2|0);
    if (!($9)) {
     $$010 = $$0;
     break L1;
    }
    $10 = HEAP32[$0>>2]|0;
    $11 = ((($10)) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$$011>>2]|0;
    $14 = (FUNCTION_TABLE_iii[$12 & 31]($0,$13)|0);
    $15 = ($14|0)==(-1);
    if ($15) {
     $$010 = $$0;
     break L1;
    }
    $16 = (($$0) + 1)|0;
    $17 = ((($$011)) + 4|0);
    $$0 = $16;$$011 = $17;
   }
  } else {
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_fwrite($1,4,$2,$7)|0);
   $$010 = $8;
  }
 } while(0);
 return ($$010|0);
}
function __ZNSt3__211__stdoutbufIwE8overflowEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$032 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ($1|0)==(-1);
 do {
  if ($6) {
   label = 14;
  } else {
   HEAP32[$3>>2] = $1;
   $7 = ((($0)) + 44|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(0);
   if (!($9)) {
    $10 = ((($0)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_fwrite($3,4,1,$11)|0);
    $13 = ($12|0)==(1);
    if ($13) {
     label = 14;
     break;
    } else {
     $$4 = -1;
     break;
    }
   }
   HEAP32[$4>>2] = $2;
   $14 = ((($3)) + 4|0);
   $15 = ((($0)) + 36|0);
   $16 = ((($0)) + 40|0);
   $17 = ((($2)) + 8|0);
   $18 = $2;
   $19 = ((($0)) + 32|0);
   $$032 = $3;
   while(1) {
    $20 = HEAP32[$15>>2]|0;
    $21 = HEAP32[$16>>2]|0;
    $22 = HEAP32[$20>>2]|0;
    $23 = ((($22)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_iiiiiiiii[$24 & 15]($20,$21,$$032,$14,$5,$2,$17,$4)|0);
    $26 = HEAP32[$5>>2]|0;
    $27 = ($26|0)==($$032|0);
    if ($27) {
     label = 13;
     break;
    }
    $28 = ($25|0)==(3);
    if ($28) {
     label = 7;
     break;
    }
    $32 = ($25|0)==(1);
    $33 = $25 | 1;
    $34 = ($33|0)==(1);
    if (!($34)) {
     label = 13;
     break;
    }
    $35 = HEAP32[$4>>2]|0;
    $36 = (($35) - ($18))|0;
    $37 = HEAP32[$19>>2]|0;
    $38 = (_fwrite($2,1,$36,$37)|0);
    $39 = ($38|0)==($36|0);
    if (!($39)) {
     label = 13;
     break;
    }
    $40 = HEAP32[$5>>2]|0;
    if ($32) {
     $$032 = $40;
    } else {
     label = 12;
     break;
    }
   }
   if ((label|0) == 7) {
    $29 = HEAP32[$19>>2]|0;
    $30 = (_fwrite($$032,1,1,$29)|0);
    $31 = ($30|0)==(1);
    if ($31) {
     label = 12;
    } else {
     label = 13;
    }
   }
   if ((label|0) == 12) {
    label = 14;
    break;
   }
   else if ((label|0) == 13) {
    $$4 = -1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $$$i = $6 ? 0 : $1;
  $$4 = $$$i;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__211__stdoutbufIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 127]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,40200)|0);
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($5)|0);
 $11 = ((($0)) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 return;
}
function __ZNSt3__211__stdoutbufIcE4syncEv($0) {
 $0 = $0|0;
 var $$10 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 36|0);
 $4 = ((($0)) + 40|0);
 $5 = ((($1)) + 8|0);
 $6 = $1;
 $7 = ((($0)) + 32|0);
 L1: while(1) {
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 31]($8,$9,$1,$5,$2)|0);
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) - ($6))|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = (_fwrite($1,1,$15,$16)|0);
  $18 = ($17|0)==($15|0);
  if (!($18)) {
   $$2 = -1;
   break;
  }
  switch ($13|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$7>>2]|0;
  $20 = (_fflush($19)|0);
  $not$ = ($20|0)!=(0);
  $$10 = $not$ << 31 >> 31;
  $$2 = $$10;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__211__stdoutbufIcE6xsputnEPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;$$011 = $1;
   while(1) {
    $9 = ($$0|0)<($2|0);
    if (!($9)) {
     $$010 = $$0;
     break L1;
    }
    $10 = HEAP32[$0>>2]|0;
    $11 = ((($10)) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP8[$$011>>0]|0;
    $14 = $13&255;
    $15 = (FUNCTION_TABLE_iii[$12 & 31]($0,$14)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     $$010 = $$0;
     break L1;
    }
    $17 = (($$0) + 1)|0;
    $18 = ((($$011)) + 1|0);
    $$0 = $17;$$011 = $18;
   }
  } else {
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_fwrite($1,1,$2,$7)|0);
   $$010 = $8;
  }
 } while(0);
 return ($$010|0);
}
function __ZNSt3__211__stdoutbufIcE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$032 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ($1|0)==(-1);
 do {
  if ($6) {
   label = 14;
  } else {
   $7 = $1&255;
   HEAP8[$3>>0] = $7;
   $8 = ((($0)) + 44|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if (!($10)) {
    $11 = ((($0)) + 32|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (_fwrite($3,1,1,$12)|0);
    $14 = ($13|0)==(1);
    if ($14) {
     label = 14;
     break;
    } else {
     $$4 = -1;
     break;
    }
   }
   HEAP32[$4>>2] = $2;
   $15 = ((($3)) + 1|0);
   $16 = ((($0)) + 36|0);
   $17 = ((($0)) + 40|0);
   $18 = ((($2)) + 8|0);
   $19 = $2;
   $20 = ((($0)) + 32|0);
   $$032 = $3;
   while(1) {
    $21 = HEAP32[$16>>2]|0;
    $22 = HEAP32[$17>>2]|0;
    $23 = HEAP32[$21>>2]|0;
    $24 = ((($23)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (FUNCTION_TABLE_iiiiiiiii[$25 & 15]($21,$22,$$032,$15,$5,$2,$18,$4)|0);
    $27 = HEAP32[$5>>2]|0;
    $28 = ($27|0)==($$032|0);
    if ($28) {
     label = 13;
     break;
    }
    $29 = ($26|0)==(3);
    if ($29) {
     label = 7;
     break;
    }
    $33 = ($26|0)==(1);
    $34 = $26 | 1;
    $35 = ($34|0)==(1);
    if (!($35)) {
     label = 13;
     break;
    }
    $36 = HEAP32[$4>>2]|0;
    $37 = (($36) - ($19))|0;
    $38 = HEAP32[$20>>2]|0;
    $39 = (_fwrite($2,1,$37,$38)|0);
    $40 = ($39|0)==($37|0);
    if (!($40)) {
     label = 13;
     break;
    }
    $41 = HEAP32[$5>>2]|0;
    if ($33) {
     $$032 = $41;
    } else {
     label = 12;
     break;
    }
   }
   if ((label|0) == 7) {
    $30 = HEAP32[$20>>2]|0;
    $31 = (_fwrite($$032,1,1,$30)|0);
    $32 = ($31|0)==(1);
    if ($32) {
     label = 12;
    } else {
     label = 13;
    }
   }
   if ((label|0) == 12) {
    label = 14;
    break;
   }
   else if ((label|0) == 13) {
    $$4 = -1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $$$i = $6 ? 0 : $1;
  $$4 = $$$i;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,40208)|0);
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($2)|0);
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($9)|0);
 $14 = ((($0)) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
 }
 return;
}
function __ZNSt3__210__stdinbufIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__stdinbufIwE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIwE9__getcharEb($0,0)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIwE5uflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIwE9__getcharEb($0,1)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIwE9pbackfailEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ($1|0)==(-1);
 $7 = ((($0)) + 52|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 L1: do {
  if ($6) {
   if ($9) {
    $$1 = -1;
   } else {
    $10 = ((($0)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)!=(-1);
    $13 = $12&1;
    HEAP8[$7>>0] = $13;
    $$1 = $11;
   }
  } else {
   L5: do {
    if ($9) {
     $14 = ((($0)) + 48|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$4>>2] = $15;
     $16 = ((($0)) + 36|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($0)) + 40|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($4)) + 4|0);
     $21 = ((($2)) + 8|0);
     $22 = HEAP32[$17>>2]|0;
     $23 = ((($22)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiiiiiiii[$24 & 15]($17,$19,$4,$20,$5,$2,$21,$3)|0);
     switch ($25|0) {
     case 1: case 2:  {
      break;
     }
     case 3:  {
      $26 = HEAP32[$14>>2]|0;
      $27 = $26&255;
      HEAP8[$2>>0] = $27;
      $28 = ((($2)) + 1|0);
      HEAP32[$3>>2] = $28;
      label = 8;
      break;
     }
     default: {
      label = 8;
     }
     }
     L9: do {
      if ((label|0) == 8) {
       $29 = ((($0)) + 32|0);
       while(1) {
        $30 = HEAP32[$3>>2]|0;
        $31 = ($30>>>0)>($2>>>0);
        if (!($31)) {
         break;
        }
        $32 = ((($30)) + -1|0);
        HEAP32[$3>>2] = $32;
        $33 = HEAP8[$32>>0]|0;
        $34 = $33 << 24 >> 24;
        $35 = HEAP32[$29>>2]|0;
        $36 = (_ungetc($34,$35)|0);
        $37 = ($36|0)==(-1);
        if ($37) {
         break L9;
        }
       }
       $$pre$phiZ2D = $14;
       break L5;
      }
     } while(0);
     $$1 = -1;
     break L1;
    } else {
     $$pre = ((($0)) + 48|0);
     $$pre$phiZ2D = $$pre;
    }
   } while(0);
   HEAP32[$$pre$phiZ2D>>2] = $1;
   HEAP8[$7>>0] = 1;
   $$1 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__210__stdinbufIwE9__getcharEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$pre = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 52|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = ((($0)) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(1);
  $$sroa$speculated = $13 ? $12 : 1;
  $14 = ((($0)) + 32|0);
  $$052 = 0;
  while(1) {
   $15 = ($$052|0)<($$sroa$speculated|0);
   if (!($15)) {
    label = 8;
    break;
   }
   $16 = HEAP32[$14>>2]|0;
   $17 = (_getc($16)|0);
   $18 = ($17|0)==(-1);
   if ($18) {
    $$10 = -1;
    break;
   }
   $19 = $17&255;
   $20 = (($2) + ($$052)|0);
   HEAP8[$20>>0] = $19;
   $21 = (($$052) + 1)|0;
   $$052 = $21;
  }
  if ((label|0) == 8) {
   $22 = ((($0)) + 53|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   do {
    if ($24) {
     $27 = ((($0)) + 40|0);
     $28 = ((($0)) + 36|0);
     $29 = ((($3)) + 4|0);
     $$048 = $$sroa$speculated;
     L11: while(1) {
      $30 = HEAP32[$27>>2]|0;
      $31 = $30;
      $32 = $31;
      $33 = HEAP32[$32>>2]|0;
      $34 = (($31) + 4)|0;
      $35 = $34;
      $36 = HEAP32[$35>>2]|0;
      $37 = HEAP32[$28>>2]|0;
      $38 = (($2) + ($$048)|0);
      $39 = HEAP32[$37>>2]|0;
      $40 = ((($39)) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (FUNCTION_TABLE_iiiiiiiii[$41 & 15]($37,$30,$2,$38,$4,$3,$29,$5)|0);
      switch ($42|0) {
      case 3:  {
       label = 15;
       break L11;
       break;
      }
      case 2:  {
       label = 17;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $43 = HEAP32[$27>>2]|0;
      $44 = $43;
      $45 = $44;
      HEAP32[$45>>2] = $33;
      $46 = (($44) + 4)|0;
      $47 = $46;
      HEAP32[$47>>2] = $36;
      $48 = ($$048|0)==(8);
      if ($48) {
       label = 17;
       break;
      }
      $49 = HEAP32[$14>>2]|0;
      $50 = (_getc($49)|0);
      $51 = ($50|0)==(-1);
      if ($51) {
       label = 17;
       break;
      }
      $52 = $50&255;
      HEAP8[$38>>0] = $52;
      $53 = (($$048) + 1)|0;
      $$048 = $53;
     }
     if ((label|0) == 15) {
      $54 = HEAP8[$2>>0]|0;
      $55 = $54 << 24 >> 24;
      HEAP32[$3>>2] = $55;
     }
     else if ((label|0) == 17) {
      $$9 = -1;
      break;
     }
     $$351 = $$048;
     label = 18;
    } else {
     $25 = HEAP8[$2>>0]|0;
     $26 = $25 << 24 >> 24;
     HEAP32[$3>>2] = $26;
     $$351 = $$sroa$speculated;
     label = 18;
    }
   } while(0);
   L21: do {
    if ((label|0) == 18) {
     if ($1) {
      $64 = HEAP32[$3>>2]|0;
      $65 = ((($0)) + 48|0);
      HEAP32[$65>>2] = $64;
      $$9 = $64;
      break;
     } else {
      $$0 = $$351;
     }
     while(1) {
      $56 = ($$0|0)>(0);
      if (!($56)) {
       break;
      }
      $57 = (($$0) + -1)|0;
      $58 = (($2) + ($57)|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = $59 << 24 >> 24;
      $61 = HEAP32[$14>>2]|0;
      $62 = (_ungetc($60,$61)|0);
      $63 = ($62|0)==(-1);
      if ($63) {
       $$9 = -1;
       break L21;
      } else {
       $$0 = $57;
      }
     }
     $$pre = HEAP32[$3>>2]|0;
     $$9 = $$pre;
    }
   } while(0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = ((($0)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  if ($1) {
   HEAP32[$9>>2] = -1;
   HEAP8[$6>>0] = 0;
   $$11 = $10;
  } else {
   $$11 = $10;
  }
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,40200)|0);
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($2)|0);
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($9)|0);
 $14 = ((($0)) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
 }
 return;
}
function __ZNSt3__210__stdinbufIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__stdinbufIcE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIcE9__getcharEb($0,0)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIcE5uflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIcE9__getcharEb($0,1)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIcE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 4|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = ($1|0)==(-1);
 $7 = ((($0)) + 52|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 L1: do {
  if ($6) {
   if ($9) {
    $$1 = -1;
   } else {
    $10 = ((($0)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)!=(-1);
    $13 = $12&1;
    HEAP8[$7>>0] = $13;
    $$1 = $11;
   }
  } else {
   L5: do {
    if ($9) {
     $14 = ((($0)) + 48|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = $15&255;
     HEAP8[$4>>0] = $16;
     $17 = ((($0)) + 36|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($0)) + 40|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ((($4)) + 1|0);
     $22 = ((($2)) + 8|0);
     $23 = HEAP32[$18>>2]|0;
     $24 = ((($23)) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (FUNCTION_TABLE_iiiiiiiii[$25 & 15]($18,$20,$4,$21,$5,$2,$22,$3)|0);
     switch ($26|0) {
     case 1: case 2:  {
      break;
     }
     case 3:  {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27&255;
      HEAP8[$2>>0] = $28;
      $29 = ((($2)) + 1|0);
      HEAP32[$3>>2] = $29;
      label = 8;
      break;
     }
     default: {
      label = 8;
     }
     }
     L9: do {
      if ((label|0) == 8) {
       $30 = ((($0)) + 32|0);
       while(1) {
        $31 = HEAP32[$3>>2]|0;
        $32 = ($31>>>0)>($2>>>0);
        if (!($32)) {
         break;
        }
        $33 = ((($31)) + -1|0);
        HEAP32[$3>>2] = $33;
        $34 = HEAP8[$33>>0]|0;
        $35 = $34 << 24 >> 24;
        $36 = HEAP32[$30>>2]|0;
        $37 = (_ungetc($35,$36)|0);
        $38 = ($37|0)==(-1);
        if ($38) {
         break L9;
        }
       }
       $$pre$phiZ2D = $14;
       break L5;
      }
     } while(0);
     $$1 = -1;
     break L1;
    } else {
     $$pre = ((($0)) + 48|0);
     $$pre$phiZ2D = $$pre;
    }
   } while(0);
   HEAP32[$$pre$phiZ2D>>2] = $1;
   HEAP8[$7>>0] = 1;
   $$1 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__210__stdinbufIcE9__getcharEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$pre = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 52|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = ((($0)) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(1);
  $$sroa$speculated = $13 ? $12 : 1;
  $14 = ((($0)) + 32|0);
  $$052 = 0;
  while(1) {
   $15 = ($$052|0)<($$sroa$speculated|0);
   if (!($15)) {
    label = 8;
    break;
   }
   $16 = HEAP32[$14>>2]|0;
   $17 = (_getc($16)|0);
   $18 = ($17|0)==(-1);
   if ($18) {
    $$10 = -1;
    break;
   }
   $19 = $17&255;
   $20 = (($2) + ($$052)|0);
   HEAP8[$20>>0] = $19;
   $21 = (($$052) + 1)|0;
   $$052 = $21;
  }
  if ((label|0) == 8) {
   $22 = ((($0)) + 53|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   do {
    if ($24) {
     $26 = ((($0)) + 40|0);
     $27 = ((($0)) + 36|0);
     $28 = ((($3)) + 1|0);
     $$048 = $$sroa$speculated;
     L11: while(1) {
      $29 = HEAP32[$26>>2]|0;
      $30 = $29;
      $31 = $30;
      $32 = HEAP32[$31>>2]|0;
      $33 = (($30) + 4)|0;
      $34 = $33;
      $35 = HEAP32[$34>>2]|0;
      $36 = HEAP32[$27>>2]|0;
      $37 = (($2) + ($$048)|0);
      $38 = HEAP32[$36>>2]|0;
      $39 = ((($38)) + 16|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (FUNCTION_TABLE_iiiiiiiii[$40 & 15]($36,$29,$2,$37,$4,$3,$28,$5)|0);
      switch ($41|0) {
      case 3:  {
       label = 15;
       break L11;
       break;
      }
      case 2:  {
       label = 17;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $42 = HEAP32[$26>>2]|0;
      $43 = $42;
      $44 = $43;
      HEAP32[$44>>2] = $32;
      $45 = (($43) + 4)|0;
      $46 = $45;
      HEAP32[$46>>2] = $35;
      $47 = ($$048|0)==(8);
      if ($47) {
       label = 17;
       break;
      }
      $48 = HEAP32[$14>>2]|0;
      $49 = (_getc($48)|0);
      $50 = ($49|0)==(-1);
      if ($50) {
       label = 17;
       break;
      }
      $51 = $49&255;
      HEAP8[$37>>0] = $51;
      $52 = (($$048) + 1)|0;
      $$048 = $52;
     }
     if ((label|0) == 15) {
      $53 = HEAP8[$2>>0]|0;
      HEAP8[$3>>0] = $53;
     }
     else if ((label|0) == 17) {
      $$9 = -1;
      break;
     }
     $$351 = $$048;
     label = 18;
    } else {
     $25 = HEAP8[$2>>0]|0;
     HEAP8[$3>>0] = $25;
     $$351 = $$sroa$speculated;
     label = 18;
    }
   } while(0);
   L21: do {
    if ((label|0) == 18) {
     if ($1) {
      $62 = HEAP8[$3>>0]|0;
      $63 = $62&255;
      $64 = ((($0)) + 48|0);
      HEAP32[$64>>2] = $63;
      $66 = $62;
     } else {
      $$0 = $$351;
      while(1) {
       $54 = ($$0|0)>(0);
       if (!($54)) {
        break;
       }
       $55 = (($$0) + -1)|0;
       $56 = (($2) + ($55)|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = $57&255;
       $59 = HEAP32[$14>>2]|0;
       $60 = (_ungetc($58,$59)|0);
       $61 = ($60|0)==(-1);
       if ($61) {
        $$9 = -1;
        break L21;
       } else {
        $$0 = $55;
       }
      }
      $$pre = HEAP8[$3>>0]|0;
      $66 = $$pre;
     }
     $65 = $66&255;
     $$9 = $65;
    }
   } while(0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = ((($0)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  if ($1) {
   HEAP32[$9>>2] = -1;
   HEAP8[$6>>0] = 0;
   $$11 = $10;
  } else {
   $$11 = $10;
  }
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZNSt3__27collateIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27collateIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__26locale5facet16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vi[$4 & 255]($0);
 }
 return;
}
function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP8[$$012>>0]|0;
  $8 = HEAP8[$$011>>0]|0;
  $9 = ($7<<24>>24)<($8<<24>>24);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8<<24>>24)<($7<<24>>24);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 1|0);
  $12 = ((($$011)) + 1|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIcE12do_transformEPKcS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$2,$3);
 return;
}
function __ZNKSt3__27collateIcE7do_hashEPKcS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP8[$$020>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = (($6) + ($4))|0;
  $8 = $7 & -268435456;
  $9 = $8 >>> 24;
  $10 = $9 | $8;
  $11 = $10 ^ $7;
  $12 = ((($$020)) + 1|0);
  $$0 = $11;$$020 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$021$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $2;
 $5 = (($4) - ($3))|0;
 $6 = ($5>>>0)>(4294967279);
 if ($6) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $7 = ($5>>>0)<(11);
 if ($7) {
  $8 = $5&255;
  $9 = ((($0)) + 11|0);
  HEAP8[$9>>0] = $8;
  $$021$ph = $0;
 } else {
  $10 = (($5) + 16)|0;
  $11 = $10 & -16;
  $12 = (__Znwj($11)|0);
  HEAP32[$0>>2] = $12;
  $13 = $11 | -2147483648;
  $14 = ((($0)) + 8|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($0)) + 4|0);
  HEAP32[$15>>2] = $5;
  $$021$ph = $12;
 }
 $16 = $2;
 $17 = (($16) - ($3))|0;
 $$0 = $1;$$021 = $$021$ph;
 while(1) {
  $18 = ($$0|0)==($2|0);
  if ($18) {
   break;
  }
  $19 = HEAP8[$$0>>0]|0;
  HEAP8[$$021>>0] = $19;
  $20 = ((($$0)) + 1|0);
  $21 = ((($$021)) + 1|0);
  $$0 = $20;$$021 = $21;
 }
 $scevgep23 = (($$021$ph) + ($17)|0);
 HEAP8[$scevgep23>>0] = 0;
 return;
}
function __ZNSt3__27collateIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27collateIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP32[$$012>>2]|0;
  $8 = HEAP32[$$011>>2]|0;
  $9 = ($7|0)<($8|0);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8|0)<($7|0);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 4|0);
  $12 = ((($$011)) + 4|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIwE12do_transformEPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$2,$3);
 return;
}
function __ZNKSt3__27collateIwE7do_hashEPKwS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP32[$$020>>2]|0;
  $6 = (($5) + ($4))|0;
  $7 = $6 & -268435456;
  $8 = $7 >>> 24;
  $9 = $8 | $7;
  $10 = $9 ^ $6;
  $11 = ((($$020)) + 4|0);
  $$0 = $10;$$020 = $11;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$021$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $2;
 $5 = (($4) - ($3))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)>(1073741807);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $8 = ($6>>>0)<(2);
 do {
  if ($8) {
   $9 = $6&255;
   $10 = ((($0)) + 8|0);
   $11 = ((($10)) + 3|0);
   HEAP8[$11>>0] = $9;
   $$021$ph = $0;
  } else {
   $12 = (($6) + 4)|0;
   $13 = $12 & -4;
   $14 = ($13>>>0)>(1073741823);
   if ($14) {
    ___assert_fail((30970|0),(31007|0),1734,(31093|0));
    // unreachable;
   } else {
    $15 = $13 << 2;
    $16 = (__Znwj($15)|0);
    HEAP32[$0>>2] = $16;
    $17 = $13 | -2147483648;
    $18 = ((($0)) + 8|0);
    HEAP32[$18>>2] = $17;
    $19 = ((($0)) + 4|0);
    HEAP32[$19>>2] = $6;
    $$021$ph = $16;
    break;
   }
  }
 } while(0);
 $20 = $2;
 $21 = (($20) - ($3))|0;
 $22 = $21 >>> 2;
 $$0 = $1;$$021 = $$021$ph;
 while(1) {
  $23 = ($$0|0)==($2|0);
  if ($23) {
   break;
  }
  $24 = HEAP32[$$0>>2]|0;
  HEAP32[$$021>>2] = $24;
  $25 = ((($$0)) + 4|0);
  $26 = ((($$021)) + 4|0);
  $$0 = $25;$$021 = $26;
 }
 $scevgep = (($$021$ph) + ($22<<2)|0);
 HEAP32[$scevgep>>2] = 0;
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$sroa$022$0 = 0, $$sroa$022$0$copyload = 0, $$sroa$022$0$copyload24 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy2 = sp + 40|0;
 $$byval_copy = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp + 12|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1;
 $13 = ($12|0)==(0);
 if ($13) {
  HEAP32[$6>>2] = -1;
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$1>>2]|0;
  HEAP32[$7>>2] = $17;
  $18 = HEAP32[$2>>2]|0;
  HEAP32[$8>>2] = $18;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$8>>2]|0;
  $19 = (FUNCTION_TABLE_iiiiiii[$16 & 63]($0,$$byval_copy,$$byval_copy2,$3,$4,$6)|0);
  HEAP32[$1>>2] = $19;
  $20 = HEAP32[$6>>2]|0;
  switch ($20|0) {
  case 0:  {
   HEAP8[$5>>0] = 0;
   break;
  }
  case 1:  {
   HEAP8[$5>>0] = 1;
   break;
  }
  default: {
   HEAP8[$5>>0] = 1;
   HEAP32[$4>>2] = 4;
  }
  }
  $$sroa$022$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$022$0 = $$sroa$022$0$copyload;
 } else {
  $21 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
  HEAP32[$$byval_copy2>>2] = $21;
  $22 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy2,38408)|0);
  (__ZNSt3__214__shared_count16__release_sharedEv($21)|0);
  $23 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
  HEAP32[$$byval_copy2>>2] = $23;
  $24 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy2,38424)|0);
  (__ZNSt3__214__shared_count16__release_sharedEv($23)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 127]($$byval_copy,$24);
  $28 = ((($$byval_copy)) + 12|0);
  $29 = HEAP32[$24>>2]|0;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vii[$31 & 127]($28,$24);
  $32 = HEAP32[$2>>2]|0;
  HEAP32[$9>>2] = $32;
  $33 = ((($$byval_copy)) + 24|0);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$9>>2]|0;
  $34 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($1,$$byval_copy2,$$byval_copy,$33,$22,$4,1)|0);
  $35 = ($34|0)==($$byval_copy|0);
  $36 = $35&1;
  HEAP8[$5>>0] = $36;
  $$sroa$022$0$copyload24 = HEAP32[$1>>2]|0;
  $38 = $33;
  while(1) {
   $37 = ((($38)) + -12|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($37);
   $39 = ($37|0)==($$byval_copy|0);
   if ($39) {
    break;
   } else {
    $38 = $37;
   }
  }
  $$sroa$022$0 = $$sroa$022$0$copyload24;
 }
 STACKTOP = sp;return ($$sroa$022$0|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i17 = 0, $$0$i$i33 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i3$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond$i$i = 0, $exitcond$i$i18 = 0, $phitmp$i = 0, $phitmp$i30 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer = sp;
 $6 = sp + 204|0;
 $7 = sp + 192|0;
 $8 = sp + 180|0;
 $9 = sp + 176|0;
 $10 = sp + 16|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $13 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$13>>2] = 0;
  $14 = (($$0$i$i) + 1)|0;
  $$0$i$i = $14;
 }
 $15 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$8>>2] = $15;
 $16 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,38408)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 (FUNCTION_TABLE_iiiii[$19 & 7]($16,28483,(28509),$6)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($15)|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
 $$0$i$i17 = 0;
 while(1) {
  $exitcond$i$i18 = ($$0$i$i17|0)==(3);
  if ($exitcond$i$i18) {
   break;
  }
  $20 = (($8) + ($$0$i$i17<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = (($$0$i$i17) + 1)|0;
  $$0$i$i17 = $21;
 }
 $22 = ((($8)) + 11|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)<(0);
 $25 = ((($8)) + 8|0);
 if ($24) {
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 2147483647;
  $phitmp$i = (($27) + -1)|0;
  $28 = $phitmp$i;
 } else {
  $28 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($8,$28,0);
 $29 = HEAP8[$22>>0]|0;
 $30 = ($29<<24>>24)<(0);
 $31 = HEAP32[$8>>2]|0;
 $32 = $30 ? $31 : $8;
 HEAP32[$9>>2] = $32;
 HEAP32[$11>>2] = $10;
 HEAP32[$12>>2] = 0;
 $33 = ((($8)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $32;$$pre$i$i$i21 = $$pre;
 L12: while(1) {
  $34 = ($$pre$i$i$i21|0)==(0|0);
  if ($34) {
   $$pre$i$i$i = 0;
  } else {
   $35 = ((($$pre$i$i$i21)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($$pre$i$i$i21)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36|0)==($38|0);
   if ($39) {
    $40 = HEAP32[$$pre$i$i$i21>>2]|0;
    $41 = ((($40)) + 36|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_ii[$42 & 127]($$pre$i$i$i21)|0);
    $44 = ($43|0)==(-1);
    if ($44) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;
    } else {
     $$pre$i$i$i = $$pre$i$i$i21;
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;
   }
  }
  $45 = ($$pre$i$i$i|0)==(0|0);
  $46 = HEAP32[$2>>2]|0;
  $47 = ($46|0)==(0|0);
  do {
   if ($47) {
    label = 19;
   } else {
    $48 = ((($46)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($46)) + 16|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($49|0)==($51|0);
    if (!($52)) {
     if ($45) {
      $134 = $46;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $46;
      break L12;
     }
    }
    $53 = HEAP32[$46>>2]|0;
    $54 = ((($53)) + 36|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (FUNCTION_TABLE_ii[$55 & 127]($46)|0);
    $57 = ($56|0)==(-1);
    if ($57) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($45) {
      $134 = $46;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $46;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($45) {
    $$2 = $$0;$$pre$i3$i$i = 0;
    break;
   } else {
    $134 = 0;
   }
  }
  $58 = HEAP32[$9>>2]|0;
  $59 = HEAP8[$22>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$33>>2]|0;
  $62 = $59&255;
  $63 = $60 ? $61 : $62;
  $64 = (($$0) + ($63)|0);
  $65 = ($58|0)==($64|0);
  if ($65) {
   $66 = $63 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($8,$66,0);
   $67 = HEAP8[$22>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$25>>2]|0;
    $70 = $69 & 2147483647;
    $phitmp$i30 = (($70) + -1)|0;
    $71 = $phitmp$i30;
   } else {
    $71 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($8,$71,0);
   $72 = HEAP8[$22>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = HEAP32[$8>>2]|0;
   $75 = $73 ? $74 : $8;
   $76 = (($75) + ($63)|0);
   HEAP32[$9>>2] = $76;
   $$1 = $75;
  } else {
   $$1 = $$0;
  }
  $77 = ((($$pre$i$i$i)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($$pre$i$i$i)) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)==($80|0);
  if ($81) {
   $82 = HEAP32[$$pre$i$i$i>>2]|0;
   $83 = ((($82)) + 36|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (FUNCTION_TABLE_ii[$84 & 127]($$pre$i$i$i)|0);
   $$0$i$i33 = $85;
  } else {
   $86 = HEAP8[$78>>0]|0;
   $87 = $86&255;
   $$0$i$i33 = $87;
  }
  $88 = $$0$i$i33&255;
  $89 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($88,16,$$1,$9,$12,0,$7,$10,$11,$6)|0);
  $90 = ($89|0)==(0);
  if (!($90)) {
   $$2 = $$1;$$pre$i3$i$i = $134;
   break;
  }
  $91 = HEAP32[$77>>2]|0;
  $92 = HEAP32[$79>>2]|0;
  $93 = ($91|0)==($92|0);
  if ($93) {
   $94 = HEAP32[$$pre$i$i$i>>2]|0;
   $95 = ((($94)) + 40|0);
   $96 = HEAP32[$95>>2]|0;
   (FUNCTION_TABLE_ii[$96 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  } else {
   $97 = ((($91)) + 1|0);
   HEAP32[$77>>2] = $97;
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  }
 }
 $98 = HEAP32[$9>>2]|0;
 $99 = $$2;
 $100 = (($98) - ($99))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($8,$100,0);
 $101 = HEAP8[$22>>0]|0;
 $102 = ($101<<24>>24)<(0);
 $103 = HEAP32[$8>>2]|0;
 $104 = $102 ? $103 : $8;
 $105 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $5;
 $106 = (__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($104,$105,28516,$vararg_buffer)|0);
 $107 = ($106|0)==(1);
 if (!($107)) {
  HEAP32[$4>>2] = 4;
 }
 $108 = ($$pre$i$i$i|0)==(0|0);
 if ($108) {
  $120 = 0;
 } else {
  $109 = ((($$pre$i$i$i)) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($$pre$i$i$i)) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110|0)==($112|0);
  if ($113) {
   $114 = HEAP32[$$pre$i$i$i>>2]|0;
   $115 = ((($114)) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 127]($$pre$i$i$i)|0);
   $118 = ($117|0)==(-1);
   if ($118) {
    HEAP32[$1>>2] = 0;
    $120 = 0;
   } else {
    $120 = $$pre$i$i$i;
   }
  } else {
   $120 = $$pre$i$i$i;
  }
 }
 $119 = ($120|0)==(0|0);
 $121 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($121) {
   label = 43;
  } else {
   $122 = ((($$pre$i3$i$i)) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ((($$pre$i3$i$i)) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)==($125|0);
   if ($126) {
    $127 = HEAP32[$$pre$i3$i$i>>2]|0;
    $128 = ((($127)) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (FUNCTION_TABLE_ii[$129 & 127]($$pre$i3$i$i)|0);
    $131 = ($130|0)==(-1);
    if ($131) {
     HEAP32[$2>>2] = 0;
     label = 43;
     break;
    }
   }
   if (!($119)) {
    label = 44;
   }
  }
 } while(0);
 if ((label|0) == 43) {
  if ($119) {
   label = 44;
  }
 }
 if ((label|0) == 44) {
  $132 = HEAP32[$4>>2]|0;
  $133 = $132 | 2;
  HEAP32[$4>>2] = $133;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__26locale9use_facetERNS0_2idE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZNSt3__26locale2id5__getEv($1)|0);
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 return ($7|0);
}
function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 24|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==($0<<24>>24);
   if (!($14)) {
    $15 = ((($9)) + 25|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==($0<<24>>24);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0<<24>>24)==($5<<24>>24);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 26|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP8[$$0$i$ptr>>0]|0;
    $39 = ($38<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = ($42|0)>(23);
   if ($43) {
    $$1 = -1;
   } else {
    switch ($1|0) {
    case 10: case 8:  {
     $44 = ($42|0)<($1|0);
     if (!($44)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $45 = ($42|0)<(22);
     if (!($45)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $46 = $10;
      $47 = $2;
      $48 = (($46) - ($47))|0;
      $49 = ($48|0)<(3);
      if (!($49)) {
       $$1 = -1;
       break L6;
      }
      $50 = ((($10)) + -1|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = ($51<<24>>24)==(48);
      if (!($52)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4>>2] = 0;
      $53 = (28483 + ($42)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = ((($10)) + 1|0);
      HEAP32[$3>>2] = $55;
      HEAP8[$10>>0] = $54;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $56 = (28483 + ($42)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $58;
    HEAP8[$10>>0] = $57;
    $59 = HEAP32[$4>>2]|0;
    $60 = (($59) + 1)|0;
    HEAP32[$4>>2] = $60;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__26__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[31808]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(31808)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (_newlocale(2147483647,28519,0)|0);
   HEAP32[9604] = $4;
  }
 }
 $5 = HEAP32[9604]|0;
 return ($5|0);
}
function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_uselocale($1)|0);
 $5 = (_vsscanf($0,$2,$3)|0);
 $6 = ($4|0)==(0|0);
 if (!($6)) {
  (_uselocale($4)|0);
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__26locale2id5__getEv($0) {
 $0 = $0|0;
 var $$repack$i = 0, $$repack7$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp;
 HEAP32[$3>>2] = $0;
 $$repack$i = ((($3)) + 4|0);
 HEAP32[$$repack$i>>2] = (146);
 $$repack7$i = ((($3)) + 8|0);
 HEAP32[$$repack7$i>>2] = 0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  HEAP32[$1>>2] = $3;
  HEAP32[$2>>2] = $1;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$2,147);
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNSt3__26locale2id6__initEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[9605]|0;HEAP32[9605] = (($1+1)|0);
 $2 = (($1) + 1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 return;
}
function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($0) {
 $0 = $0|0;
 var $$elt$i$i$i$i = 0, $$elt1$i$i$i$i = 0, $$unpack$i$i$i$i = 0, $$unpack2$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $$elt$i$i$i$i = ((($2)) + 4|0);
 $$unpack$i$i$i$i = HEAP32[$$elt$i$i$i$i>>2]|0;
 $$elt1$i$i$i$i = ((($2)) + 8|0);
 $$unpack2$i$i$i$i = HEAP32[$$elt1$i$i$i$i>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $$unpack2$i$i$i$i >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack2$i$i$i$i & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack$i$i$i$i;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack$i$i$i$i)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 FUNCTION_TABLE_vi[$12 & 255]($5);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i29 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i3$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i16 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i16|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;
  } else {
   $32 = ((($$pre$i$i$i16)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i16)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i16>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 127]($$pre$i$i$i16)|0);
    $41 = ($40|0)==(-1);
    if ($41) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;
    } else {
     $$pre$i$i$i = $$pre$i$i$i16;
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i16;
   }
  }
  $42 = ($$pre$i$i$i|0)==(0|0);
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 16;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if (!($49)) {
     if ($42) {
      $143 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $43;
      break L8;
     }
    }
    $50 = HEAP32[$43>>2]|0;
    $51 = ((($50)) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (FUNCTION_TABLE_ii[$52 & 127]($43)|0);
    $54 = ($53|0)==(-1);
    if ($54) {
     HEAP32[$2>>2] = 0;
     label = 16;
     break;
    } else {
     if ($42) {
      $143 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   if ($42) {
    $$2 = $$0;$$pre$i3$i$i = 0;
    break;
   } else {
    $143 = 0;
   }
  }
  $55 = HEAP32[$11>>2]|0;
  $56 = HEAP8[$19>>0]|0;
  $57 = ($56<<24>>24)<(0);
  $58 = HEAP32[$30>>2]|0;
  $59 = $56&255;
  $60 = $57 ? $58 : $59;
  $61 = (($$0) + ($60)|0);
  $62 = ($55|0)==($61|0);
  if ($62) {
   $63 = $60 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$63,0);
   $64 = HEAP8[$19>>0]|0;
   $65 = ($64<<24>>24)<(0);
   if ($65) {
    $66 = HEAP32[$22>>2]|0;
    $67 = $66 & 2147483647;
    $phitmp$i26 = (($67) + -1)|0;
    $68 = $phitmp$i26;
   } else {
    $68 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$68,0);
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   $71 = HEAP32[$10>>2]|0;
   $72 = $70 ? $71 : $10;
   $73 = (($72) + ($60)|0);
   HEAP32[$11>>2] = $73;
   $$1 = $72;
  } else {
   $$1 = $$0;
  }
  $74 = ((($$pre$i$i$i)) + 12|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($$pre$i$i$i)) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$$pre$i$i$i>>2]|0;
   $80 = ((($79)) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 127]($$pre$i$i$i)|0);
   $$0$i$i29 = $82;
  } else {
   $83 = HEAP8[$75>>0]|0;
   $84 = $83&255;
   $$0$i$i29 = $84;
  }
  $85 = $$0$i$i29&255;
  $86 = HEAP8[$7>>0]|0;
  $87 = HEAP8[$8>>0]|0;
  $88 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($85,$15,$16,$$1,$11,$86,$87,$9,$12,$13,$14,$6)|0);
  $89 = ($88|0)==(0);
  if (!($89)) {
   $$2 = $$1;$$pre$i3$i$i = $143;
   break;
  }
  $90 = HEAP32[$74>>2]|0;
  $91 = HEAP32[$76>>2]|0;
  $92 = ($90|0)==($91|0);
  if ($92) {
   $93 = HEAP32[$$pre$i$i$i>>2]|0;
   $94 = ((($93)) + 40|0);
   $95 = HEAP32[$94>>2]|0;
   (FUNCTION_TABLE_ii[$95 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i16 = $$pre$i$i$i;
   continue;
  } else {
   $96 = ((($90)) + 1|0);
   HEAP32[$74>>2] = $96;
   $$0 = $$1;$$pre$i$i$i16 = $$pre$i$i$i;
   continue;
  }
 }
 $97 = ((($9)) + 11|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = ($98<<24>>24)<(0);
 $100 = ((($9)) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $98&255;
 $103 = $99 ? $101 : $102;
 $104 = ($103|0)==(0);
 $105 = HEAP8[$15>>0]|0;
 $106 = ($105<<24>>24)==(0);
 $or$cond = $104 | $106;
 if (!($or$cond)) {
  $107 = HEAP32[$13>>2]|0;
  $108 = $107;
  $109 = $12;
  $110 = (($108) - ($109))|0;
  $111 = ($110|0)<(160);
  if ($111) {
   $112 = HEAP32[$14>>2]|0;
   $113 = ((($107)) + 4|0);
   HEAP32[$13>>2] = $113;
   HEAP32[$107>>2] = $112;
  }
 }
 $114 = HEAP32[$11>>2]|0;
 $115 = (+__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($$2,$114,$4));
 HEAPF64[$5>>3] = $115;
 $116 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$116,$4);
 $117 = ($$pre$i$i$i|0)==(0|0);
 if ($117) {
  $129 = 0;
 } else {
  $118 = ((($$pre$i$i$i)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($$pre$i$i$i)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119|0)==($121|0);
  if ($122) {
   $123 = HEAP32[$$pre$i$i$i>>2]|0;
   $124 = ((($123)) + 36|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 127]($$pre$i$i$i)|0);
   $127 = ($126|0)==(-1);
   if ($127) {
    HEAP32[$1>>2] = 0;
    $129 = 0;
   } else {
    $129 = $$pre$i$i$i;
   }
  } else {
   $129 = $$pre$i$i$i;
  }
 }
 $128 = ($129|0)==(0|0);
 $130 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($130) {
   label = 41;
  } else {
   $131 = ((($$pre$i3$i$i)) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($$pre$i3$i$i)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($132|0)==($134|0);
   if ($135) {
    $136 = HEAP32[$$pre$i3$i$i>>2]|0;
    $137 = ((($136)) + 36|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (FUNCTION_TABLE_ii[$138 & 127]($$pre$i3$i$i)|0);
    $140 = ($139|0)==(-1);
    if ($140) {
     HEAP32[$2>>2] = 0;
     label = 41;
     break;
    }
   }
   if (!($128)) {
    label = 42;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($128) {
   label = 42;
  }
 }
 if ((label|0) == 42) {
  $141 = HEAP32[$4>>2]|0;
  $142 = $141 | 2;
  HEAP32[$4>>2] = $142;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZNKSt3__28ios_base6getlocEv($1)|0);
 HEAP32[$5>>2] = $6;
 $7 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,38408)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 (FUNCTION_TABLE_iiiii[$10 & 7]($7,28483,(28515),$2)|0);
 $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,38424)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($11)|0);
 HEAP8[$3>>0] = $15;
 $16 = HEAP32[$11>>2]|0;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 127]($11)|0);
 HEAP8[$4>>0] = $19;
 $20 = HEAP32[$11>>2]|0;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_vii[$22 & 127]($0,$11);
 (__ZNSt3__214__shared_count16__release_sharedEv($6)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $100 = 0, $101 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0<<24>>24)==($5<<24>>24);
 L1: do {
  if ($12) {
   $13 = HEAP8[$1>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $15 = HEAP32[$4>>2]|0;
    $16 = ((($15)) + 1|0);
    HEAP32[$4>>2] = $16;
    HEAP8[$15>>0] = 46;
    $17 = ((($7)) + 11|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)<(0);
    $20 = ((($7)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $18&255;
    $23 = $19 ? $21 : $22;
    $24 = ($23|0)==(0);
    if ($24) {
     $$2 = 0;
    } else {
     $25 = HEAP32[$9>>2]|0;
     $26 = $25;
     $27 = $8;
     $28 = (($26) - ($27))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($25)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$25>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0<<24>>24)==($6<<24>>24);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = $8;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)<(160);
     if (!($47)) {
      $$2 = 0;
      break;
     }
     $48 = HEAP32[$10>>2]|0;
     $49 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $49;
     HEAP32[$43>>2] = $48;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $50 = ((($11)) + 32|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx)|0);
    $51 = ($$0$i$idx|0)==(32);
    if ($51) {
     $$0$lcssa$i = $50;
     break;
    }
    $52 = HEAP8[$$0$i$ptr>>0]|0;
    $53 = ($52<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($53) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $54 = $$0$lcssa$i;
   $55 = $11;
   $56 = (($54) - ($55))|0;
   $57 = ($56|0)>(31);
   if ($57) {
    $$2 = -1;
   } else {
    $58 = (28483 + ($56)|0);
    $59 = HEAP8[$58>>0]|0;
    switch ($56|0) {
    case 24: case 25:  {
     $60 = HEAP32[$4>>2]|0;
     $61 = ($60|0)==($3|0);
     if (!($61)) {
      $62 = ((($60)) + -1|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63&255;
      $65 = $64 & 95;
      $66 = HEAP8[$2>>0]|0;
      $67 = $66&255;
      $68 = $67 & 127;
      $69 = ($65|0)==($68|0);
      if (!($69)) {
       $$2 = -1;
       break L1;
      }
     }
     $70 = ((($60)) + 1|0);
     HEAP32[$4>>2] = $70;
     HEAP8[$60>>0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$2>>0] = 80;
     $71 = HEAP32[$4>>2]|0;
     $72 = ((($71)) + 1|0);
     HEAP32[$4>>2] = $72;
     HEAP8[$71>>0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
    default: {
     $73 = $59&255;
     $74 = $73 & 95;
     $75 = HEAP8[$2>>0]|0;
     $76 = $75 << 24 >> 24;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = $74 | 128;
      $79 = $78&255;
      HEAP8[$2>>0] = $79;
      $80 = HEAP8[$1>>0]|0;
      $81 = ($80<<24>>24)==(0);
      if (!($81)) {
       HEAP8[$1>>0] = 0;
       $82 = ((($7)) + 11|0);
       $83 = HEAP8[$82>>0]|0;
       $84 = ($83<<24>>24)<(0);
       $85 = ((($7)) + 4|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = $83&255;
       $88 = $84 ? $86 : $87;
       $89 = ($88|0)==(0);
       if (!($89)) {
        $90 = HEAP32[$9>>2]|0;
        $91 = $90;
        $92 = $8;
        $93 = (($91) - ($92))|0;
        $94 = ($93|0)<(160);
        if ($94) {
         $95 = HEAP32[$10>>2]|0;
         $96 = ((($90)) + 4|0);
         HEAP32[$9>>2] = $96;
         HEAP32[$90>>2] = $95;
        }
       }
      }
     }
     $97 = HEAP32[$4>>2]|0;
     $98 = ((($97)) + 1|0);
     HEAP32[$4>>2] = $98;
     HEAP8[$97>>0] = $59;
     $99 = ($56|0)>(21);
     if ($99) {
      $$2 = 0;
      break L1;
     }
     $100 = HEAP32[$10>>2]|0;
     $101 = (($100) + 1)|0;
     HEAP32[$10>>2] = $101;
     $$2 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$5>>2] = 0;
  $7 = (__ZNSt3__26__clocEv()|0);
  $8 = (+_strtold_l($0,$3,$7));
  $9 = HEAP32[$5>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   HEAP32[$5>>2] = $6;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = ($11|0)==($1|0);
  if ($12) {
   $13 = ($9|0)==(34);
   if ($13) {
    HEAP32[$2>>2] = 4;
    $$0 = $8;
   } else {
    $$0 = $8;
   }
  } else {
   HEAP32[$2>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$030 = 0, $$0$i$i = 0, $$029 = 0, $$030 = 0, $$07$i$i = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5&255;
 $10 = $6 ? $8 : $9;
 $11 = ($10|0)==(0);
 do {
  if (!($11)) {
   $12 = ($1|0)==($2|0);
   if ($12) {
    $21 = $8;
   } else {
    $$0$i$i = $2;$$07$i$i = $1;
    while(1) {
     $13 = ((($$0$i$i)) + -4|0);
     $14 = ($$07$i$i>>>0)<($13>>>0);
     if (!($14)) {
      break;
     }
     $15 = HEAP32[$$07$i$i>>2]|0;
     $16 = HEAP32[$13>>2]|0;
     HEAP32[$$07$i$i>>2] = $16;
     HEAP32[$13>>2] = $15;
     $17 = ((($$07$i$i)) + 4|0);
     $$0$i$i = $13;$$07$i$i = $17;
    }
    $$pre = HEAP32[$7>>2]|0;
    $21 = $$pre;
   }
   $18 = HEAP32[$0>>2]|0;
   $19 = $6 ? $18 : $0;
   $20 = $6 ? $21 : $9;
   $22 = (($19) + ($20)|0);
   $23 = ((($2)) + -4|0);
   $24 = $22;
   $$029 = $1;$$030 = $19;
   while(1) {
    $25 = ($$029>>>0)<($23>>>0);
    $26 = HEAP8[$$030>>0]|0;
    $27 = ($26<<24>>24)>(0);
    $28 = ($26<<24>>24)!=(127);
    $or$cond32 = $27 & $28;
    if (!($25)) {
     break;
    }
    if ($or$cond32) {
     $29 = $26 << 24 >> 24;
     $30 = HEAP32[$$029>>2]|0;
     $31 = ($29|0)==($30|0);
     if (!($31)) {
      label = 10;
      break;
     }
    }
    $32 = $$030;
    $33 = (($24) - ($32))|0;
    $34 = ($33|0)>(1);
    $35 = ((($$030)) + 1|0);
    $$$030 = $34 ? $35 : $$030;
    $36 = ((($$029)) + 4|0);
    $$029 = $36;$$030 = $$$030;
   }
   if ((label|0) == 10) {
    HEAP32[$3>>2] = 4;
    break;
   }
   if ($or$cond32) {
    $37 = $26 << 24 >> 24;
    $38 = HEAP32[$23>>2]|0;
    $39 = (($38) + -1)|0;
    $40 = ($39>>>0)<($37>>>0);
    if (!($40)) {
     HEAP32[$3>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i29 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i3$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i16 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i16|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;
  } else {
   $32 = ((($$pre$i$i$i16)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i16)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i16>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 127]($$pre$i$i$i16)|0);
    $41 = ($40|0)==(-1);
    if ($41) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;
    } else {
     $$pre$i$i$i = $$pre$i$i$i16;
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i16;
   }
  }
  $42 = ($$pre$i$i$i|0)==(0|0);
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 16;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if (!($49)) {
     if ($42) {
      $143 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $43;
      break L8;
     }
    }
    $50 = HEAP32[$43>>2]|0;
    $51 = ((($50)) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (FUNCTION_TABLE_ii[$52 & 127]($43)|0);
    $54 = ($53|0)==(-1);
    if ($54) {
     HEAP32[$2>>2] = 0;
     label = 16;
     break;
    } else {
     if ($42) {
      $143 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   if ($42) {
    $$2 = $$0;$$pre$i3$i$i = 0;
    break;
   } else {
    $143 = 0;
   }
  }
  $55 = HEAP32[$11>>2]|0;
  $56 = HEAP8[$19>>0]|0;
  $57 = ($56<<24>>24)<(0);
  $58 = HEAP32[$30>>2]|0;
  $59 = $56&255;
  $60 = $57 ? $58 : $59;
  $61 = (($$0) + ($60)|0);
  $62 = ($55|0)==($61|0);
  if ($62) {
   $63 = $60 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$63,0);
   $64 = HEAP8[$19>>0]|0;
   $65 = ($64<<24>>24)<(0);
   if ($65) {
    $66 = HEAP32[$22>>2]|0;
    $67 = $66 & 2147483647;
    $phitmp$i26 = (($67) + -1)|0;
    $68 = $phitmp$i26;
   } else {
    $68 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$68,0);
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   $71 = HEAP32[$10>>2]|0;
   $72 = $70 ? $71 : $10;
   $73 = (($72) + ($60)|0);
   HEAP32[$11>>2] = $73;
   $$1 = $72;
  } else {
   $$1 = $$0;
  }
  $74 = ((($$pre$i$i$i)) + 12|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($$pre$i$i$i)) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$$pre$i$i$i>>2]|0;
   $80 = ((($79)) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 127]($$pre$i$i$i)|0);
   $$0$i$i29 = $82;
  } else {
   $83 = HEAP8[$75>>0]|0;
   $84 = $83&255;
   $$0$i$i29 = $84;
  }
  $85 = $$0$i$i29&255;
  $86 = HEAP8[$7>>0]|0;
  $87 = HEAP8[$8>>0]|0;
  $88 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($85,$15,$16,$$1,$11,$86,$87,$9,$12,$13,$14,$6)|0);
  $89 = ($88|0)==(0);
  if (!($89)) {
   $$2 = $$1;$$pre$i3$i$i = $143;
   break;
  }
  $90 = HEAP32[$74>>2]|0;
  $91 = HEAP32[$76>>2]|0;
  $92 = ($90|0)==($91|0);
  if ($92) {
   $93 = HEAP32[$$pre$i$i$i>>2]|0;
   $94 = ((($93)) + 40|0);
   $95 = HEAP32[$94>>2]|0;
   (FUNCTION_TABLE_ii[$95 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i16 = $$pre$i$i$i;
   continue;
  } else {
   $96 = ((($90)) + 1|0);
   HEAP32[$74>>2] = $96;
   $$0 = $$1;$$pre$i$i$i16 = $$pre$i$i$i;
   continue;
  }
 }
 $97 = ((($9)) + 11|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = ($98<<24>>24)<(0);
 $100 = ((($9)) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $98&255;
 $103 = $99 ? $101 : $102;
 $104 = ($103|0)==(0);
 $105 = HEAP8[$15>>0]|0;
 $106 = ($105<<24>>24)==(0);
 $or$cond = $104 | $106;
 if (!($or$cond)) {
  $107 = HEAP32[$13>>2]|0;
  $108 = $107;
  $109 = $12;
  $110 = (($108) - ($109))|0;
  $111 = ($110|0)<(160);
  if ($111) {
   $112 = HEAP32[$14>>2]|0;
   $113 = ((($107)) + 4|0);
   HEAP32[$13>>2] = $113;
   HEAP32[$107>>2] = $112;
  }
 }
 $114 = HEAP32[$11>>2]|0;
 $115 = (+__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($$2,$114,$4));
 HEAPF64[$5>>3] = $115;
 $116 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$116,$4);
 $117 = ($$pre$i$i$i|0)==(0|0);
 if ($117) {
  $129 = 0;
 } else {
  $118 = ((($$pre$i$i$i)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($$pre$i$i$i)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119|0)==($121|0);
  if ($122) {
   $123 = HEAP32[$$pre$i$i$i>>2]|0;
   $124 = ((($123)) + 36|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 127]($$pre$i$i$i)|0);
   $127 = ($126|0)==(-1);
   if ($127) {
    HEAP32[$1>>2] = 0;
    $129 = 0;
   } else {
    $129 = $$pre$i$i$i;
   }
  } else {
   $129 = $$pre$i$i$i;
  }
 }
 $128 = ($129|0)==(0|0);
 $130 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($130) {
   label = 41;
  } else {
   $131 = ((($$pre$i3$i$i)) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($$pre$i3$i$i)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($132|0)==($134|0);
   if ($135) {
    $136 = HEAP32[$$pre$i3$i$i>>2]|0;
    $137 = ((($136)) + 36|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (FUNCTION_TABLE_ii[$138 & 127]($$pre$i3$i$i)|0);
    $140 = ($139|0)==(-1);
    if ($140) {
     HEAP32[$2>>2] = 0;
     label = 41;
     break;
    }
   }
   if (!($128)) {
    label = 42;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($128) {
   label = 42;
  }
 }
 if ((label|0) == 42) {
  $141 = HEAP32[$4>>2]|0;
  $142 = $141 | 2;
  HEAP32[$4>>2] = $142;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$5>>2] = 0;
  $7 = (__ZNSt3__26__clocEv()|0);
  $8 = (+_strtold_l($0,$3,$7));
  $9 = HEAP32[$5>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   HEAP32[$5>>2] = $6;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = ($11|0)==($1|0);
  if ($12) {
   $13 = ($9|0)==(34);
   if ($13) {
    HEAP32[$2>>2] = 4;
    $$0 = $8;
   } else {
    $$0 = $8;
   }
  } else {
   HEAP32[$2>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i29 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i3$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i16 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i16|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;
  } else {
   $32 = ((($$pre$i$i$i16)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i16)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i16>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 127]($$pre$i$i$i16)|0);
    $41 = ($40|0)==(-1);
    if ($41) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;
    } else {
     $$pre$i$i$i = $$pre$i$i$i16;
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i16;
   }
  }
  $42 = ($$pre$i$i$i|0)==(0|0);
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 16;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if (!($49)) {
     if ($42) {
      $143 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $43;
      break L8;
     }
    }
    $50 = HEAP32[$43>>2]|0;
    $51 = ((($50)) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (FUNCTION_TABLE_ii[$52 & 127]($43)|0);
    $54 = ($53|0)==(-1);
    if ($54) {
     HEAP32[$2>>2] = 0;
     label = 16;
     break;
    } else {
     if ($42) {
      $143 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   if ($42) {
    $$2 = $$0;$$pre$i3$i$i = 0;
    break;
   } else {
    $143 = 0;
   }
  }
  $55 = HEAP32[$11>>2]|0;
  $56 = HEAP8[$19>>0]|0;
  $57 = ($56<<24>>24)<(0);
  $58 = HEAP32[$30>>2]|0;
  $59 = $56&255;
  $60 = $57 ? $58 : $59;
  $61 = (($$0) + ($60)|0);
  $62 = ($55|0)==($61|0);
  if ($62) {
   $63 = $60 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$63,0);
   $64 = HEAP8[$19>>0]|0;
   $65 = ($64<<24>>24)<(0);
   if ($65) {
    $66 = HEAP32[$22>>2]|0;
    $67 = $66 & 2147483647;
    $phitmp$i26 = (($67) + -1)|0;
    $68 = $phitmp$i26;
   } else {
    $68 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$68,0);
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   $71 = HEAP32[$10>>2]|0;
   $72 = $70 ? $71 : $10;
   $73 = (($72) + ($60)|0);
   HEAP32[$11>>2] = $73;
   $$1 = $72;
  } else {
   $$1 = $$0;
  }
  $74 = ((($$pre$i$i$i)) + 12|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($$pre$i$i$i)) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$$pre$i$i$i>>2]|0;
   $80 = ((($79)) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 127]($$pre$i$i$i)|0);
   $$0$i$i29 = $82;
  } else {
   $83 = HEAP8[$75>>0]|0;
   $84 = $83&255;
   $$0$i$i29 = $84;
  }
  $85 = $$0$i$i29&255;
  $86 = HEAP8[$7>>0]|0;
  $87 = HEAP8[$8>>0]|0;
  $88 = (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($85,$15,$16,$$1,$11,$86,$87,$9,$12,$13,$14,$6)|0);
  $89 = ($88|0)==(0);
  if (!($89)) {
   $$2 = $$1;$$pre$i3$i$i = $143;
   break;
  }
  $90 = HEAP32[$74>>2]|0;
  $91 = HEAP32[$76>>2]|0;
  $92 = ($90|0)==($91|0);
  if ($92) {
   $93 = HEAP32[$$pre$i$i$i>>2]|0;
   $94 = ((($93)) + 40|0);
   $95 = HEAP32[$94>>2]|0;
   (FUNCTION_TABLE_ii[$95 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i16 = $$pre$i$i$i;
   continue;
  } else {
   $96 = ((($90)) + 1|0);
   HEAP32[$74>>2] = $96;
   $$0 = $$1;$$pre$i$i$i16 = $$pre$i$i$i;
   continue;
  }
 }
 $97 = ((($9)) + 11|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = ($98<<24>>24)<(0);
 $100 = ((($9)) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $98&255;
 $103 = $99 ? $101 : $102;
 $104 = ($103|0)==(0);
 $105 = HEAP8[$15>>0]|0;
 $106 = ($105<<24>>24)==(0);
 $or$cond = $104 | $106;
 if (!($or$cond)) {
  $107 = HEAP32[$13>>2]|0;
  $108 = $107;
  $109 = $12;
  $110 = (($108) - ($109))|0;
  $111 = ($110|0)<(160);
  if ($111) {
   $112 = HEAP32[$14>>2]|0;
   $113 = ((($107)) + 4|0);
   HEAP32[$13>>2] = $113;
   HEAP32[$107>>2] = $112;
  }
 }
 $114 = HEAP32[$11>>2]|0;
 $115 = (+__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($$2,$114,$4));
 HEAPF32[$5>>2] = $115;
 $116 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$116,$4);
 $117 = ($$pre$i$i$i|0)==(0|0);
 if ($117) {
  $129 = 0;
 } else {
  $118 = ((($$pre$i$i$i)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($$pre$i$i$i)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119|0)==($121|0);
  if ($122) {
   $123 = HEAP32[$$pre$i$i$i>>2]|0;
   $124 = ((($123)) + 36|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 127]($$pre$i$i$i)|0);
   $127 = ($126|0)==(-1);
   if ($127) {
    HEAP32[$1>>2] = 0;
    $129 = 0;
   } else {
    $129 = $$pre$i$i$i;
   }
  } else {
   $129 = $$pre$i$i$i;
  }
 }
 $128 = ($129|0)==(0|0);
 $130 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($130) {
   label = 41;
  } else {
   $131 = ((($$pre$i3$i$i)) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($$pre$i3$i$i)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($132|0)==($134|0);
   if ($135) {
    $136 = HEAP32[$$pre$i3$i$i>>2]|0;
    $137 = ((($136)) + 36|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (FUNCTION_TABLE_ii[$138 & 127]($$pre$i3$i$i)|0);
    $140 = ($139|0)==(-1);
    if ($140) {
     HEAP32[$2>>2] = 0;
     label = 41;
     break;
    }
   }
   if (!($128)) {
    label = 42;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($128) {
   label = 42;
  }
 }
 if ((label|0) == 42) {
  $141 = HEAP32[$4>>2]|0;
  $142 = $141 | 2;
  HEAP32[$4>>2] = $142;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$5>>2] = 0;
  $7 = (__ZNSt3__26__clocEv()|0);
  $8 = (+_strtold_l($0,$3,$7));
  $9 = HEAP32[$5>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   HEAP32[$5>>2] = $6;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = ($11|0)==($1|0);
  if ($12) {
   $13 = ($9|0)==(34);
   if ($13) {
    HEAP32[$2>>2] = 4;
   }
   $14 = $8;
   $$0 = $14;
  } else {
   HEAP32[$2>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i33 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i20 = 0, $$pre$i3$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i20 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i20|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;
  } else {
   $30 = ((($$pre$i$i$i20)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i20)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i20>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i20)|0);
    $39 = ($38|0)==(-1);
    if ($39) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;
    } else {
     $$pre$i$i$i = $$pre$i$i$i20;
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i20;
   }
  }
  $40 = ($$pre$i$i$i|0)==(0|0);
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 16;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if (!($47)) {
     if ($40) {
      $143 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
    $48 = HEAP32[$41>>2]|0;
    $49 = ((($48)) + 36|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
    $52 = ($51|0)==(-1);
    if ($52) {
     HEAP32[$2>>2] = 0;
     label = 16;
     break;
    } else {
     if ($40) {
      $143 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   if ($40) {
    $$2 = $$0;$$pre$i3$i$i = 0;
    break;
   } else {
    $143 = 0;
   }
  }
  $53 = HEAP32[$10>>2]|0;
  $54 = HEAP8[$17>>0]|0;
  $55 = ($54<<24>>24)<(0);
  $56 = HEAP32[$28>>2]|0;
  $57 = $54&255;
  $58 = $55 ? $56 : $57;
  $59 = (($$0) + ($58)|0);
  $60 = ($53|0)==($59|0);
  if ($60) {
   $61 = $58 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$61,0);
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   if ($63) {
    $64 = HEAP32[$20>>2]|0;
    $65 = $64 & 2147483647;
    $phitmp$i30 = (($65) + -1)|0;
    $66 = $phitmp$i30;
   } else {
    $66 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   $69 = HEAP32[$9>>2]|0;
   $70 = $68 ? $69 : $9;
   $71 = (($70) + ($58)|0);
   HEAP32[$10>>2] = $71;
   $$1 = $70;
  } else {
   $$1 = $$0;
  }
  $72 = ((($$pre$i$i$i)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($$pre$i$i$i)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$$pre$i$i$i>>2]|0;
   $78 = ((($77)) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (FUNCTION_TABLE_ii[$79 & 127]($$pre$i$i$i)|0);
   $$0$i$i33 = $80;
  } else {
   $81 = HEAP8[$73>>0]|0;
   $82 = $81&255;
   $$0$i$i33 = $82;
  }
  $83 = $$0$i$i33&255;
  $84 = HEAP8[$7>>0]|0;
  $85 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($83,$14,$$1,$10,$13,$84,$8,$11,$12,$6)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$2 = $$1;$$pre$i3$i$i = $143;
   break;
  }
  $87 = HEAP32[$72>>2]|0;
  $88 = HEAP32[$74>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$$pre$i$i$i>>2]|0;
   $91 = ((($90)) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  } else {
   $93 = ((($87)) + 1|0);
   HEAP32[$72>>2] = $93;
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  }
 }
 $94 = ((($8)) + 11|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = ($95<<24>>24)<(0);
 $97 = ((($8)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $95&255;
 $100 = $96 ? $98 : $99;
 $101 = ($100|0)==(0);
 if (!($101)) {
  $102 = HEAP32[$12>>2]|0;
  $103 = $102;
  $104 = $11;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$13>>2]|0;
   $108 = ((($102)) + 4|0);
   HEAP32[$12>>2] = $108;
   HEAP32[$102>>2] = $107;
  }
 }
 $109 = HEAP32[$10>>2]|0;
 $110 = (__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($$2,$109,$4,$14)|0);
 $111 = tempRet0;
 $112 = $5;
 $113 = $112;
 HEAP32[$113>>2] = $110;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = $111;
 $116 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$116,$4);
 $117 = ($$pre$i$i$i|0)==(0|0);
 if ($117) {
  $129 = 0;
 } else {
  $118 = ((($$pre$i$i$i)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($$pre$i$i$i)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119|0)==($121|0);
  if ($122) {
   $123 = HEAP32[$$pre$i$i$i>>2]|0;
   $124 = ((($123)) + 36|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 127]($$pre$i$i$i)|0);
   $127 = ($126|0)==(-1);
   if ($127) {
    HEAP32[$1>>2] = 0;
    $129 = 0;
   } else {
    $129 = $$pre$i$i$i;
   }
  } else {
   $129 = $$pre$i$i$i;
  }
 }
 $128 = ($129|0)==(0|0);
 $130 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($130) {
   label = 41;
  } else {
   $131 = ((($$pre$i3$i$i)) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($$pre$i3$i$i)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($132|0)==($134|0);
   if ($135) {
    $136 = HEAP32[$$pre$i3$i$i>>2]|0;
    $137 = ((($136)) + 36|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (FUNCTION_TABLE_ii[$138 & 127]($$pre$i3$i$i)|0);
    $140 = ($139|0)==(-1);
    if ($140) {
     HEAP32[$2>>2] = 0;
     label = 41;
     break;
    }
   }
   if (!($128)) {
    label = 42;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($128) {
   label = 42;
  }
 }
 if ((label|0) == 42) {
  $141 = HEAP32[$4>>2]|0;
  $142 = $141 | 2;
  HEAP32[$4>>2] = $142;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 $trunc = $3&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$0 = 8;
  break;
 }
 case 8:  {
  $$0 = 16;
  break;
 }
 case 0:  {
  $$0 = 0;
  break;
 }
 default: {
  $$0 = 10;
 }
 }
 return ($$0|0);
}
function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZNKSt3__28ios_base6getlocEv($1)|0);
 HEAP32[$4>>2] = $5;
 $6 = (__ZNKSt3__26locale9use_facetERNS0_2idE($4,38408)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iiiii[$9 & 7]($6,28483,(28509),$2)|0);
 $10 = (__ZNKSt3__26locale9use_facetERNS0_2idE($4,38424)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 127]($10)|0);
 HEAP8[$3>>0] = $14;
 $15 = HEAP32[$10>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_vii[$17 & 127]($0,$10);
 (__ZNSt3__214__shared_count16__release_sharedEv($5)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $18 = 0;$19 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $18 = 0;$19 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$8>>2] = 0;
   $10 = (__ZNSt3__26__clocEv()|0);
   $11 = (_strtoull_l($0,$4,$3,$10)|0);
   $12 = tempRet0;
   $13 = HEAP32[$8>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    HEAP32[$8>>2] = $9;
   }
   $15 = HEAP32[$4>>2]|0;
   $16 = ($15|0)==($1|0);
   if ($16) {
    $17 = ($13|0)==(34);
    if ($17) {
     HEAP32[$2>>2] = 4;
     $20 = -1;$21 = -1;
    } else {
     $20 = $11;$21 = $12;
    }
   } else {
    HEAP32[$2>>2] = 4;
    $20 = 0;$21 = 0;
   }
   $18 = $21;$19 = $20;
  }
 } while(0);
 tempRet0 = ($18);
 STACKTOP = sp;return ($19|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i33 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i20 = 0, $$pre$i3$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i20 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i20|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;
  } else {
   $30 = ((($$pre$i$i$i20)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i20)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i20>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i20)|0);
    $39 = ($38|0)==(-1);
    if ($39) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;
    } else {
     $$pre$i$i$i = $$pre$i$i$i20;
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i20;
   }
  }
  $40 = ($$pre$i$i$i|0)==(0|0);
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 16;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if (!($47)) {
     if ($40) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
    $48 = HEAP32[$41>>2]|0;
    $49 = ((($48)) + 36|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
    $52 = ($51|0)==(-1);
    if ($52) {
     HEAP32[$2>>2] = 0;
     label = 16;
     break;
    } else {
     if ($40) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   if ($40) {
    $$2 = $$0;$$pre$i3$i$i = 0;
    break;
   } else {
    $138 = 0;
   }
  }
  $53 = HEAP32[$10>>2]|0;
  $54 = HEAP8[$17>>0]|0;
  $55 = ($54<<24>>24)<(0);
  $56 = HEAP32[$28>>2]|0;
  $57 = $54&255;
  $58 = $55 ? $56 : $57;
  $59 = (($$0) + ($58)|0);
  $60 = ($53|0)==($59|0);
  if ($60) {
   $61 = $58 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$61,0);
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   if ($63) {
    $64 = HEAP32[$20>>2]|0;
    $65 = $64 & 2147483647;
    $phitmp$i30 = (($65) + -1)|0;
    $66 = $phitmp$i30;
   } else {
    $66 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   $69 = HEAP32[$9>>2]|0;
   $70 = $68 ? $69 : $9;
   $71 = (($70) + ($58)|0);
   HEAP32[$10>>2] = $71;
   $$1 = $70;
  } else {
   $$1 = $$0;
  }
  $72 = ((($$pre$i$i$i)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($$pre$i$i$i)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$$pre$i$i$i>>2]|0;
   $78 = ((($77)) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (FUNCTION_TABLE_ii[$79 & 127]($$pre$i$i$i)|0);
   $$0$i$i33 = $80;
  } else {
   $81 = HEAP8[$73>>0]|0;
   $82 = $81&255;
   $$0$i$i33 = $82;
  }
  $83 = $$0$i$i33&255;
  $84 = HEAP8[$7>>0]|0;
  $85 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($83,$14,$$1,$10,$13,$84,$8,$11,$12,$6)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$2 = $$1;$$pre$i3$i$i = $138;
   break;
  }
  $87 = HEAP32[$72>>2]|0;
  $88 = HEAP32[$74>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$$pre$i$i$i>>2]|0;
   $91 = ((($90)) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  } else {
   $93 = ((($87)) + 1|0);
   HEAP32[$72>>2] = $93;
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  }
 }
 $94 = ((($8)) + 11|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = ($95<<24>>24)<(0);
 $97 = ((($8)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $95&255;
 $100 = $96 ? $98 : $99;
 $101 = ($100|0)==(0);
 if (!($101)) {
  $102 = HEAP32[$12>>2]|0;
  $103 = $102;
  $104 = $11;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$13>>2]|0;
   $108 = ((($102)) + 4|0);
   HEAP32[$12>>2] = $108;
   HEAP32[$102>>2] = $107;
  }
 }
 $109 = HEAP32[$10>>2]|0;
 $110 = (__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($$2,$109,$4,$14)|0);
 HEAP32[$5>>2] = $110;
 $111 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$111,$4);
 $112 = ($$pre$i$i$i|0)==(0|0);
 if ($112) {
  $124 = 0;
 } else {
  $113 = ((($$pre$i$i$i)) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($$pre$i$i$i)) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)==($116|0);
  if ($117) {
   $118 = HEAP32[$$pre$i$i$i>>2]|0;
   $119 = ((($118)) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (FUNCTION_TABLE_ii[$120 & 127]($$pre$i$i$i)|0);
   $122 = ($121|0)==(-1);
   if ($122) {
    HEAP32[$1>>2] = 0;
    $124 = 0;
   } else {
    $124 = $$pre$i$i$i;
   }
  } else {
   $124 = $$pre$i$i$i;
  }
 }
 $123 = ($124|0)==(0|0);
 $125 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 41;
  } else {
   $126 = ((($$pre$i3$i$i)) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ((($$pre$i3$i$i)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i3$i$i>>2]|0;
    $132 = ((($131)) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 127]($$pre$i3$i$i)|0);
    $135 = ($134|0)==(-1);
    if ($135) {
     HEAP32[$2>>2] = 0;
     label = 41;
     break;
    }
   }
   if (!($123)) {
    label = 42;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($123) {
   label = 42;
  }
 }
 if ((label|0) == 42) {
  $136 = HEAP32[$4>>2]|0;
  $137 = $136 | 2;
  HEAP32[$4>>2] = $137;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$8>>2] = 0;
   $10 = (__ZNSt3__26__clocEv()|0);
   $11 = (_strtoull_l($0,$4,$3,$10)|0);
   $12 = tempRet0;
   $13 = HEAP32[$8>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    HEAP32[$8>>2] = $9;
   }
   $15 = HEAP32[$4>>2]|0;
   $16 = ($15|0)==($1|0);
   do {
    if ($16) {
     $17 = ($13|0)==(34);
     $18 = ($12>>>0)>(0);
     $19 = ($11>>>0)>(4294967295);
     $20 = ($12|0)==(0);
     $21 = $20 & $19;
     $22 = $18 | $21;
     $or$cond = $22 | $17;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $11;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i33 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i20 = 0, $$pre$i3$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i20 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i20|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;
  } else {
   $30 = ((($$pre$i$i$i20)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i20)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i20>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i20)|0);
    $39 = ($38|0)==(-1);
    if ($39) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;
    } else {
     $$pre$i$i$i = $$pre$i$i$i20;
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i20;
   }
  }
  $40 = ($$pre$i$i$i|0)==(0|0);
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 16;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if (!($47)) {
     if ($40) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
    $48 = HEAP32[$41>>2]|0;
    $49 = ((($48)) + 36|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
    $52 = ($51|0)==(-1);
    if ($52) {
     HEAP32[$2>>2] = 0;
     label = 16;
     break;
    } else {
     if ($40) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   if ($40) {
    $$2 = $$0;$$pre$i3$i$i = 0;
    break;
   } else {
    $138 = 0;
   }
  }
  $53 = HEAP32[$10>>2]|0;
  $54 = HEAP8[$17>>0]|0;
  $55 = ($54<<24>>24)<(0);
  $56 = HEAP32[$28>>2]|0;
  $57 = $54&255;
  $58 = $55 ? $56 : $57;
  $59 = (($$0) + ($58)|0);
  $60 = ($53|0)==($59|0);
  if ($60) {
   $61 = $58 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$61,0);
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   if ($63) {
    $64 = HEAP32[$20>>2]|0;
    $65 = $64 & 2147483647;
    $phitmp$i30 = (($65) + -1)|0;
    $66 = $phitmp$i30;
   } else {
    $66 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   $69 = HEAP32[$9>>2]|0;
   $70 = $68 ? $69 : $9;
   $71 = (($70) + ($58)|0);
   HEAP32[$10>>2] = $71;
   $$1 = $70;
  } else {
   $$1 = $$0;
  }
  $72 = ((($$pre$i$i$i)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($$pre$i$i$i)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$$pre$i$i$i>>2]|0;
   $78 = ((($77)) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (FUNCTION_TABLE_ii[$79 & 127]($$pre$i$i$i)|0);
   $$0$i$i33 = $80;
  } else {
   $81 = HEAP8[$73>>0]|0;
   $82 = $81&255;
   $$0$i$i33 = $82;
  }
  $83 = $$0$i$i33&255;
  $84 = HEAP8[$7>>0]|0;
  $85 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($83,$14,$$1,$10,$13,$84,$8,$11,$12,$6)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$2 = $$1;$$pre$i3$i$i = $138;
   break;
  }
  $87 = HEAP32[$72>>2]|0;
  $88 = HEAP32[$74>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$$pre$i$i$i>>2]|0;
   $91 = ((($90)) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  } else {
   $93 = ((($87)) + 1|0);
   HEAP32[$72>>2] = $93;
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  }
 }
 $94 = ((($8)) + 11|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = ($95<<24>>24)<(0);
 $97 = ((($8)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $95&255;
 $100 = $96 ? $98 : $99;
 $101 = ($100|0)==(0);
 if (!($101)) {
  $102 = HEAP32[$12>>2]|0;
  $103 = $102;
  $104 = $11;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$13>>2]|0;
   $108 = ((($102)) + 4|0);
   HEAP32[$12>>2] = $108;
   HEAP32[$102>>2] = $107;
  }
 }
 $109 = HEAP32[$10>>2]|0;
 $110 = (__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($$2,$109,$4,$14)|0);
 HEAP32[$5>>2] = $110;
 $111 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$111,$4);
 $112 = ($$pre$i$i$i|0)==(0|0);
 if ($112) {
  $124 = 0;
 } else {
  $113 = ((($$pre$i$i$i)) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($$pre$i$i$i)) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)==($116|0);
  if ($117) {
   $118 = HEAP32[$$pre$i$i$i>>2]|0;
   $119 = ((($118)) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (FUNCTION_TABLE_ii[$120 & 127]($$pre$i$i$i)|0);
   $122 = ($121|0)==(-1);
   if ($122) {
    HEAP32[$1>>2] = 0;
    $124 = 0;
   } else {
    $124 = $$pre$i$i$i;
   }
  } else {
   $124 = $$pre$i$i$i;
  }
 }
 $123 = ($124|0)==(0|0);
 $125 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 41;
  } else {
   $126 = ((($$pre$i3$i$i)) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ((($$pre$i3$i$i)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i3$i$i>>2]|0;
    $132 = ((($131)) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 127]($$pre$i3$i$i)|0);
    $135 = ($134|0)==(-1);
    if ($135) {
     HEAP32[$2>>2] = 0;
     label = 41;
     break;
    }
   }
   if (!($123)) {
    label = 42;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($123) {
   label = 42;
  }
 }
 if ((label|0) == 42) {
  $136 = HEAP32[$4>>2]|0;
  $137 = $136 | 2;
  HEAP32[$4>>2] = $137;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$8>>2] = 0;
   $10 = (__ZNSt3__26__clocEv()|0);
   $11 = (_strtoull_l($0,$4,$3,$10)|0);
   $12 = tempRet0;
   $13 = HEAP32[$8>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    HEAP32[$8>>2] = $9;
   }
   $15 = HEAP32[$4>>2]|0;
   $16 = ($15|0)==($1|0);
   do {
    if ($16) {
     $17 = ($13|0)==(34);
     $18 = ($12>>>0)>(0);
     $19 = ($11>>>0)>(4294967295);
     $20 = ($12|0)==(0);
     $21 = $20 & $19;
     $22 = $18 | $21;
     $or$cond = $22 | $17;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $11;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i33 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i20 = 0, $$pre$i3$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i20 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i20|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;
  } else {
   $30 = ((($$pre$i$i$i20)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i20)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i20>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i20)|0);
    $39 = ($38|0)==(-1);
    if ($39) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;
    } else {
     $$pre$i$i$i = $$pre$i$i$i20;
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i20;
   }
  }
  $40 = ($$pre$i$i$i|0)==(0|0);
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 16;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if (!($47)) {
     if ($40) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
    $48 = HEAP32[$41>>2]|0;
    $49 = ((($48)) + 36|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
    $52 = ($51|0)==(-1);
    if ($52) {
     HEAP32[$2>>2] = 0;
     label = 16;
     break;
    } else {
     if ($40) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   if ($40) {
    $$2 = $$0;$$pre$i3$i$i = 0;
    break;
   } else {
    $138 = 0;
   }
  }
  $53 = HEAP32[$10>>2]|0;
  $54 = HEAP8[$17>>0]|0;
  $55 = ($54<<24>>24)<(0);
  $56 = HEAP32[$28>>2]|0;
  $57 = $54&255;
  $58 = $55 ? $56 : $57;
  $59 = (($$0) + ($58)|0);
  $60 = ($53|0)==($59|0);
  if ($60) {
   $61 = $58 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$61,0);
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   if ($63) {
    $64 = HEAP32[$20>>2]|0;
    $65 = $64 & 2147483647;
    $phitmp$i30 = (($65) + -1)|0;
    $66 = $phitmp$i30;
   } else {
    $66 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   $69 = HEAP32[$9>>2]|0;
   $70 = $68 ? $69 : $9;
   $71 = (($70) + ($58)|0);
   HEAP32[$10>>2] = $71;
   $$1 = $70;
  } else {
   $$1 = $$0;
  }
  $72 = ((($$pre$i$i$i)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($$pre$i$i$i)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$$pre$i$i$i>>2]|0;
   $78 = ((($77)) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (FUNCTION_TABLE_ii[$79 & 127]($$pre$i$i$i)|0);
   $$0$i$i33 = $80;
  } else {
   $81 = HEAP8[$73>>0]|0;
   $82 = $81&255;
   $$0$i$i33 = $82;
  }
  $83 = $$0$i$i33&255;
  $84 = HEAP8[$7>>0]|0;
  $85 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($83,$14,$$1,$10,$13,$84,$8,$11,$12,$6)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$2 = $$1;$$pre$i3$i$i = $138;
   break;
  }
  $87 = HEAP32[$72>>2]|0;
  $88 = HEAP32[$74>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$$pre$i$i$i>>2]|0;
   $91 = ((($90)) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  } else {
   $93 = ((($87)) + 1|0);
   HEAP32[$72>>2] = $93;
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  }
 }
 $94 = ((($8)) + 11|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = ($95<<24>>24)<(0);
 $97 = ((($8)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $95&255;
 $100 = $96 ? $98 : $99;
 $101 = ($100|0)==(0);
 if (!($101)) {
  $102 = HEAP32[$12>>2]|0;
  $103 = $102;
  $104 = $11;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$13>>2]|0;
   $108 = ((($102)) + 4|0);
   HEAP32[$12>>2] = $108;
   HEAP32[$102>>2] = $107;
  }
 }
 $109 = HEAP32[$10>>2]|0;
 $110 = (__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($$2,$109,$4,$14)|0);
 HEAP16[$5>>1] = $110;
 $111 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$111,$4);
 $112 = ($$pre$i$i$i|0)==(0|0);
 if ($112) {
  $124 = 0;
 } else {
  $113 = ((($$pre$i$i$i)) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($$pre$i$i$i)) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)==($116|0);
  if ($117) {
   $118 = HEAP32[$$pre$i$i$i>>2]|0;
   $119 = ((($118)) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (FUNCTION_TABLE_ii[$120 & 127]($$pre$i$i$i)|0);
   $122 = ($121|0)==(-1);
   if ($122) {
    HEAP32[$1>>2] = 0;
    $124 = 0;
   } else {
    $124 = $$pre$i$i$i;
   }
  } else {
   $124 = $$pre$i$i$i;
  }
 }
 $123 = ($124|0)==(0|0);
 $125 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 41;
  } else {
   $126 = ((($$pre$i3$i$i)) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ((($$pre$i3$i$i)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i3$i$i>>2]|0;
    $132 = ((($131)) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 127]($$pre$i3$i$i)|0);
    $135 = ($134|0)==(-1);
    if ($135) {
     HEAP32[$2>>2] = 0;
     label = 41;
     break;
    }
   }
   if (!($123)) {
    label = 42;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($123) {
   label = 42;
  }
 }
 if ((label|0) == 42) {
  $136 = HEAP32[$4>>2]|0;
  $137 = $136 | 2;
  HEAP32[$4>>2] = $137;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$8>>2] = 0;
   $10 = (__ZNSt3__26__clocEv()|0);
   $11 = (_strtoull_l($0,$4,$3,$10)|0);
   $12 = tempRet0;
   $13 = HEAP32[$8>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    HEAP32[$8>>2] = $9;
   }
   $15 = HEAP32[$4>>2]|0;
   $16 = ($15|0)==($1|0);
   do {
    if ($16) {
     $17 = ($13|0)==(34);
     $18 = ($12>>>0)>(0);
     $19 = ($11>>>0)>(65535);
     $20 = ($12|0)==(0);
     $21 = $20 & $19;
     $22 = $18 | $21;
     $or$cond = $22 | $17;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $23 = $11&65535;
      $$0 = $23;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i33 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i20 = 0, $$pre$i3$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i20 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i20|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;
  } else {
   $30 = ((($$pre$i$i$i20)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i20)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i20>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i20)|0);
    $39 = ($38|0)==(-1);
    if ($39) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;
    } else {
     $$pre$i$i$i = $$pre$i$i$i20;
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i20;
   }
  }
  $40 = ($$pre$i$i$i|0)==(0|0);
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 16;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if (!($47)) {
     if ($40) {
      $143 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
    $48 = HEAP32[$41>>2]|0;
    $49 = ((($48)) + 36|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
    $52 = ($51|0)==(-1);
    if ($52) {
     HEAP32[$2>>2] = 0;
     label = 16;
     break;
    } else {
     if ($40) {
      $143 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   if ($40) {
    $$2 = $$0;$$pre$i3$i$i = 0;
    break;
   } else {
    $143 = 0;
   }
  }
  $53 = HEAP32[$10>>2]|0;
  $54 = HEAP8[$17>>0]|0;
  $55 = ($54<<24>>24)<(0);
  $56 = HEAP32[$28>>2]|0;
  $57 = $54&255;
  $58 = $55 ? $56 : $57;
  $59 = (($$0) + ($58)|0);
  $60 = ($53|0)==($59|0);
  if ($60) {
   $61 = $58 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$61,0);
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   if ($63) {
    $64 = HEAP32[$20>>2]|0;
    $65 = $64 & 2147483647;
    $phitmp$i30 = (($65) + -1)|0;
    $66 = $phitmp$i30;
   } else {
    $66 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   $69 = HEAP32[$9>>2]|0;
   $70 = $68 ? $69 : $9;
   $71 = (($70) + ($58)|0);
   HEAP32[$10>>2] = $71;
   $$1 = $70;
  } else {
   $$1 = $$0;
  }
  $72 = ((($$pre$i$i$i)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($$pre$i$i$i)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$$pre$i$i$i>>2]|0;
   $78 = ((($77)) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (FUNCTION_TABLE_ii[$79 & 127]($$pre$i$i$i)|0);
   $$0$i$i33 = $80;
  } else {
   $81 = HEAP8[$73>>0]|0;
   $82 = $81&255;
   $$0$i$i33 = $82;
  }
  $83 = $$0$i$i33&255;
  $84 = HEAP8[$7>>0]|0;
  $85 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($83,$14,$$1,$10,$13,$84,$8,$11,$12,$6)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$2 = $$1;$$pre$i3$i$i = $143;
   break;
  }
  $87 = HEAP32[$72>>2]|0;
  $88 = HEAP32[$74>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$$pre$i$i$i>>2]|0;
   $91 = ((($90)) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  } else {
   $93 = ((($87)) + 1|0);
   HEAP32[$72>>2] = $93;
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  }
 }
 $94 = ((($8)) + 11|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = ($95<<24>>24)<(0);
 $97 = ((($8)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $95&255;
 $100 = $96 ? $98 : $99;
 $101 = ($100|0)==(0);
 if (!($101)) {
  $102 = HEAP32[$12>>2]|0;
  $103 = $102;
  $104 = $11;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$13>>2]|0;
   $108 = ((($102)) + 4|0);
   HEAP32[$12>>2] = $108;
   HEAP32[$102>>2] = $107;
  }
 }
 $109 = HEAP32[$10>>2]|0;
 $110 = (__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($$2,$109,$4,$14)|0);
 $111 = tempRet0;
 $112 = $5;
 $113 = $112;
 HEAP32[$113>>2] = $110;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = $111;
 $116 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$116,$4);
 $117 = ($$pre$i$i$i|0)==(0|0);
 if ($117) {
  $129 = 0;
 } else {
  $118 = ((($$pre$i$i$i)) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($$pre$i$i$i)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119|0)==($121|0);
  if ($122) {
   $123 = HEAP32[$$pre$i$i$i>>2]|0;
   $124 = ((($123)) + 36|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 127]($$pre$i$i$i)|0);
   $127 = ($126|0)==(-1);
   if ($127) {
    HEAP32[$1>>2] = 0;
    $129 = 0;
   } else {
    $129 = $$pre$i$i$i;
   }
  } else {
   $129 = $$pre$i$i$i;
  }
 }
 $128 = ($129|0)==(0|0);
 $130 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($130) {
   label = 41;
  } else {
   $131 = ((($$pre$i3$i$i)) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($$pre$i3$i$i)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($132|0)==($134|0);
   if ($135) {
    $136 = HEAP32[$$pre$i3$i$i>>2]|0;
    $137 = ((($136)) + 36|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (FUNCTION_TABLE_ii[$138 & 127]($$pre$i3$i$i)|0);
    $140 = ($139|0)==(-1);
    if ($140) {
     HEAP32[$2>>2] = 0;
     label = 41;
     break;
    }
   }
   if (!($128)) {
    label = 42;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($128) {
   label = 42;
  }
 }
 if ((label|0) == 42) {
  $141 = HEAP32[$4>>2]|0;
  $142 = $141 | 2;
  HEAP32[$4>>2] = $142;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $23 = 0;$24 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (_strtoll_l($0,$4,$3,$8)|0);
  $10 = tempRet0;
  $11 = HEAP32[$6>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   HEAP32[$6>>2] = $7;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==($1|0);
  if ($14) {
   $15 = ($11|0)==(34);
   if ($15) {
    HEAP32[$2>>2] = 4;
    $16 = ($10|0)>(0);
    $17 = ($9>>>0)>(0);
    $18 = ($10|0)==(0);
    $19 = $18 & $17;
    $20 = $16 | $19;
    $21 = $20 ? -1 : 0;
    $22 = $20 ? 2147483647 : -2147483648;
    $25 = $21;$26 = $22;
   } else {
    $25 = $9;$26 = $10;
   }
  } else {
   HEAP32[$2>>2] = 4;
   $25 = 0;$26 = 0;
  }
  $23 = $26;$24 = $25;
 }
 tempRet0 = ($23);
 STACKTOP = sp;return ($24|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i33 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i20 = 0, $$pre$i3$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i20 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i20|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;
  } else {
   $30 = ((($$pre$i$i$i20)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i20)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i20>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i20)|0);
    $39 = ($38|0)==(-1);
    if ($39) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;
    } else {
     $$pre$i$i$i = $$pre$i$i$i20;
    }
   } else {
    $$pre$i$i$i = $$pre$i$i$i20;
   }
  }
  $40 = ($$pre$i$i$i|0)==(0|0);
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 16;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if (!($47)) {
     if ($40) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
    $48 = HEAP32[$41>>2]|0;
    $49 = ((($48)) + 36|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
    $52 = ($51|0)==(-1);
    if ($52) {
     HEAP32[$2>>2] = 0;
     label = 16;
     break;
    } else {
     if ($40) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i3$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   if ($40) {
    $$2 = $$0;$$pre$i3$i$i = 0;
    break;
   } else {
    $138 = 0;
   }
  }
  $53 = HEAP32[$10>>2]|0;
  $54 = HEAP8[$17>>0]|0;
  $55 = ($54<<24>>24)<(0);
  $56 = HEAP32[$28>>2]|0;
  $57 = $54&255;
  $58 = $55 ? $56 : $57;
  $59 = (($$0) + ($58)|0);
  $60 = ($53|0)==($59|0);
  if ($60) {
   $61 = $58 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$61,0);
   $62 = HEAP8[$17>>0]|0;
   $63 = ($62<<24>>24)<(0);
   if ($63) {
    $64 = HEAP32[$20>>2]|0;
    $65 = $64 & 2147483647;
    $phitmp$i30 = (($65) + -1)|0;
    $66 = $phitmp$i30;
   } else {
    $66 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$66,0);
   $67 = HEAP8[$17>>0]|0;
   $68 = ($67<<24>>24)<(0);
   $69 = HEAP32[$9>>2]|0;
   $70 = $68 ? $69 : $9;
   $71 = (($70) + ($58)|0);
   HEAP32[$10>>2] = $71;
   $$1 = $70;
  } else {
   $$1 = $$0;
  }
  $72 = ((($$pre$i$i$i)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($$pre$i$i$i)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$$pre$i$i$i>>2]|0;
   $78 = ((($77)) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (FUNCTION_TABLE_ii[$79 & 127]($$pre$i$i$i)|0);
   $$0$i$i33 = $80;
  } else {
   $81 = HEAP8[$73>>0]|0;
   $82 = $81&255;
   $$0$i$i33 = $82;
  }
  $83 = $$0$i$i33&255;
  $84 = HEAP8[$7>>0]|0;
  $85 = (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($83,$14,$$1,$10,$13,$84,$8,$11,$12,$6)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$2 = $$1;$$pre$i3$i$i = $138;
   break;
  }
  $87 = HEAP32[$72>>2]|0;
  $88 = HEAP32[$74>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$$pre$i$i$i>>2]|0;
   $91 = ((($90)) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  } else {
   $93 = ((($87)) + 1|0);
   HEAP32[$72>>2] = $93;
   $$0 = $$1;$$pre$i$i$i20 = $$pre$i$i$i;
   continue;
  }
 }
 $94 = ((($8)) + 11|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = ($95<<24>>24)<(0);
 $97 = ((($8)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $95&255;
 $100 = $96 ? $98 : $99;
 $101 = ($100|0)==(0);
 if (!($101)) {
  $102 = HEAP32[$12>>2]|0;
  $103 = $102;
  $104 = $11;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$13>>2]|0;
   $108 = ((($102)) + 4|0);
   HEAP32[$12>>2] = $108;
   HEAP32[$102>>2] = $107;
  }
 }
 $109 = HEAP32[$10>>2]|0;
 $110 = (__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($$2,$109,$4,$14)|0);
 HEAP32[$5>>2] = $110;
 $111 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$111,$4);
 $112 = ($$pre$i$i$i|0)==(0|0);
 if ($112) {
  $124 = 0;
 } else {
  $113 = ((($$pre$i$i$i)) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($$pre$i$i$i)) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)==($116|0);
  if ($117) {
   $118 = HEAP32[$$pre$i$i$i>>2]|0;
   $119 = ((($118)) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (FUNCTION_TABLE_ii[$120 & 127]($$pre$i$i$i)|0);
   $122 = ($121|0)==(-1);
   if ($122) {
    HEAP32[$1>>2] = 0;
    $124 = 0;
   } else {
    $124 = $$pre$i$i$i;
   }
  } else {
   $124 = $$pre$i$i$i;
  }
 }
 $123 = ($124|0)==(0|0);
 $125 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 41;
  } else {
   $126 = ((($$pre$i3$i$i)) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ((($$pre$i3$i$i)) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i3$i$i>>2]|0;
    $132 = ((($131)) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 127]($$pre$i3$i$i)|0);
    $135 = ($134|0)==(-1);
    if ($135) {
     HEAP32[$2>>2] = 0;
     label = 41;
     break;
    }
   }
   if (!($123)) {
    label = 42;
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($123) {
   label = 42;
  }
 }
 if ((label|0) == 42) {
  $136 = HEAP32[$4>>2]|0;
  $137 = $136 | 2;
  HEAP32[$4>>2] = $137;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $$1 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (_strtoll_l($0,$4,$3,$8)|0);
  $10 = tempRet0;
  $11 = HEAP32[$6>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   HEAP32[$6>>2] = $7;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==($1|0);
  L7: do {
   if ($14) {
    $15 = ($11|0)==(34);
    do {
     if ($15) {
      HEAP32[$2>>2] = 4;
      $26 = ($10|0)>(0);
      $27 = ($9>>>0)>(0);
      $28 = ($10|0)==(0);
      $29 = $28 & $27;
      $30 = $26 | $29;
      if ($30) {
       $$0 = 2147483647;
       break L7;
      }
     } else {
      $16 = ($10|0)<(-1);
      $17 = ($9>>>0)<(2147483648);
      $18 = ($10|0)==(-1);
      $19 = $18 & $17;
      $20 = $16 | $19;
      if ($20) {
       HEAP32[$2>>2] = 4;
       break;
      }
      $21 = ($10|0)>(0);
      $22 = ($9>>>0)>(2147483647);
      $23 = ($10|0)==(0);
      $24 = $23 & $22;
      $25 = $21 | $24;
      if ($25) {
       HEAP32[$2>>2] = 4;
       $$0 = 2147483647;
       break L7;
      } else {
       $$0 = $9;
       break L7;
      }
     }
    } while(0);
    $$0 = -2147483648;
   } else {
    HEAP32[$2>>2] = 4;
    $$0 = 0;
   }
  } while(0);
  $$1 = $$0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0101 = 0, $$0107 = 0, $$0108 = 0, $$0108136 = 0, $$088 = 0, $$089 = 0, $$090$off0 = 0, $$091 = 0, $$092 = 0, $$093 = 0, $$094 = 0, $$097 = 0, $$1102 = 0, $$195 = 0, $$198 = 0, $$2$off0 = 0, $$2103 = 0, $$296 = 0;
 var $$299 = 0, $$3 = 0, $$3100 = 0, $$3104 = 0, $$5 = 0, $$5106 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i114 = 0, $$pre$i3$i$i118 = 0, $$sroa$0122$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 if ($12) {
  $13 = (_malloc($11)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$0107 = 0;$$sroa$0122$0 = 0;
  } else {
   $$0107 = $13;$$sroa$0122$0 = $13;
  }
 } else {
  $$0107 = $7;$$sroa$0122$0 = 0;
 }
 $$0101 = $11;$$093 = $2;$$094 = $$0107;$$097 = 0;
 while(1) {
  $15 = ($$093|0)==($3|0);
  if ($15) {
   break;
  }
  $16 = ((($$093)) + 11|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)<(0);
  if ($18) {
   $19 = ((($$093)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $23 = $20;
  } else {
   $21 = $17&255;
   $23 = $21;
  }
  $22 = ($23|0)==(0);
  if ($22) {
   HEAP8[$$094>>0] = 2;
   $24 = (($$0101) + -1)|0;
   $25 = (($$097) + 1)|0;
   $$1102 = $24;$$198 = $25;
  } else {
   HEAP8[$$094>>0] = 1;
   $$1102 = $$0101;$$198 = $$097;
  }
  $26 = ((($$093)) + 12|0);
  $27 = ((($$094)) + 1|0);
  $$0101 = $$1102;$$093 = $26;$$094 = $27;$$097 = $$198;
 }
 $$092 = 0;$$2103 = $$0101;$$299 = $$097;
 L17: while(1) {
  $28 = HEAP32[$0>>2]|0;
  $29 = ($28|0)==(0|0);
  do {
   if ($29) {
    $41 = 0;
   } else {
    $30 = ((($28)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($28)) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($31|0)==($33|0);
    if ($34) {
     $35 = HEAP32[$28>>2]|0;
     $36 = ((($35)) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (FUNCTION_TABLE_ii[$37 & 127]($28)|0);
     $39 = ($38|0)==(-1);
     if ($39) {
      HEAP32[$0>>2] = 0;
      $41 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$0>>2]|0;
      $41 = $$pre$i$i$i;
      break;
     }
    } else {
     $41 = $28;
    }
   }
  } while(0);
  $40 = ($41|0)==(0|0);
  $42 = HEAP32[$1>>2]|0;
  $43 = ($42|0)==(0|0);
  if ($43) {
   $$pre$i3$i$i118 = 0;
  } else {
   $44 = ((($42)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($42)) + 16|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($45|0)==($47|0);
   if ($48) {
    $49 = HEAP32[$42>>2]|0;
    $50 = ((($49)) + 36|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (FUNCTION_TABLE_ii[$51 & 127]($42)|0);
    $53 = ($52|0)==(-1);
    if ($53) {
     HEAP32[$1>>2] = 0;
     $$pre$i3$i$i118 = 0;
    } else {
     $$pre$i3$i$i118 = $42;
    }
   } else {
    $$pre$i3$i$i118 = $42;
   }
  }
  $54 = ($$pre$i3$i$i118|0)==(0|0);
  $tmp$i$i = $40 ^ $54;
  $55 = ($$2103|0)!=(0);
  $56 = $55 & $tmp$i$i;
  $57 = HEAP32[$0>>2]|0;
  if (!($56)) {
   break;
  }
  $81 = ((($57)) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($57)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($82|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$57>>2]|0;
   $87 = ((($86)) + 36|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (FUNCTION_TABLE_ii[$88 & 127]($57)|0);
   $$0$i$i = $89;
  } else {
   $90 = HEAP8[$82>>0]|0;
   $91 = $90&255;
   $$0$i$i = $91;
  }
  $92 = $$0$i$i&255;
  if ($6) {
   $$091 = $92;
  } else {
   $93 = HEAP32[$4>>2]|0;
   $94 = ((($93)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (FUNCTION_TABLE_iii[$95 & 31]($4,$92)|0);
   $$091 = $96;
  }
  $97 = (($$092) + 1)|0;
  $$089 = $2;$$090$off0 = 0;$$195 = $$0107;$$3100 = $$299;$$3104 = $$2103;
  while(1) {
   $98 = ($$089|0)==($3|0);
   if ($98) {
    break;
   }
   $99 = HEAP8[$$195>>0]|0;
   $100 = ($99<<24>>24)==(1);
   do {
    if ($100) {
     $101 = ((($$089)) + 11|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = ($102<<24>>24)<(0);
     if ($103) {
      $104 = HEAP32[$$089>>2]|0;
      $106 = $104;
     } else {
      $106 = $$089;
     }
     $105 = (($106) + ($$092)|0);
     $107 = HEAP8[$105>>0]|0;
     if ($6) {
      $$088 = $107;
     } else {
      $108 = HEAP32[$4>>2]|0;
      $109 = ((($108)) + 12|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (FUNCTION_TABLE_iii[$110 & 31]($4,$107)|0);
      $$088 = $111;
     }
     $112 = ($$091<<24>>24)==($$088<<24>>24);
     if (!($112)) {
      HEAP8[$$195>>0] = 0;
      $122 = (($$3104) + -1)|0;
      $$2$off0 = $$090$off0;$$5 = $$3100;$$5106 = $122;
      break;
     }
     $113 = HEAP8[$101>>0]|0;
     $114 = ($113<<24>>24)<(0);
     if ($114) {
      $115 = ((($$089)) + 4|0);
      $116 = HEAP32[$115>>2]|0;
      $119 = $116;
     } else {
      $117 = $113&255;
      $119 = $117;
     }
     $118 = ($119|0)==($97|0);
     if ($118) {
      $120 = (($$3104) + -1)|0;
      $121 = (($$3100) + 1)|0;
      HEAP8[$$195>>0] = 2;
      $$2$off0 = 1;$$5 = $121;$$5106 = $120;
     } else {
      $$2$off0 = 1;$$5 = $$3100;$$5106 = $$3104;
     }
    } else {
     $$2$off0 = $$090$off0;$$5 = $$3100;$$5106 = $$3104;
    }
   } while(0);
   $123 = ((($$089)) + 12|0);
   $124 = ((($$195)) + 1|0);
   $$089 = $123;$$090$off0 = $$2$off0;$$195 = $124;$$3100 = $$5;$$3104 = $$5106;
  }
  if (!($$090$off0)) {
   $$092 = $97;$$2103 = $$3104;$$299 = $$3100;
   continue;
  }
  $125 = HEAP32[$0>>2]|0;
  $126 = ((($125)) + 12|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ((($125)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($127|0)==($129|0);
  if ($130) {
   $131 = HEAP32[$125>>2]|0;
   $132 = ((($131)) + 40|0);
   $133 = HEAP32[$132>>2]|0;
   (FUNCTION_TABLE_ii[$133 & 127]($125)|0);
  } else {
   $134 = ((($127)) + 1|0);
   HEAP32[$126>>2] = $134;
  }
  $135 = (($$3100) + ($$3104))|0;
  $136 = ($135>>>0)>(1);
  if ($136) {
   $$0 = $2;$$296 = $$0107;$$6 = $$3100;
  } else {
   $$092 = $97;$$2103 = $$3104;$$299 = $$3100;
   continue;
  }
  while(1) {
   $137 = ($$0|0)==($3|0);
   if ($137) {
    $$092 = $97;$$2103 = $$3104;$$299 = $$6;
    continue L17;
   }
   $138 = HEAP8[$$296>>0]|0;
   $139 = ($138<<24>>24)==(2);
   if ($139) {
    $140 = ((($$0)) + 11|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = ($141<<24>>24)<(0);
    if ($142) {
     $143 = ((($$0)) + 4|0);
     $144 = HEAP32[$143>>2]|0;
     $147 = $144;
    } else {
     $145 = $141&255;
     $147 = $145;
    }
    $146 = ($147|0)==($97|0);
    if ($146) {
     $$7 = $$6;
    } else {
     $148 = (($$6) + -1)|0;
     HEAP8[$$296>>0] = 0;
     $$7 = $148;
    }
   } else {
    $$7 = $$6;
   }
   $149 = ((($$0)) + 12|0);
   $150 = ((($$296)) + 1|0);
   $$0 = $149;$$296 = $150;$$6 = $$7;
  }
 }
 $58 = ($57|0)==(0|0);
 do {
  if ($58) {
   $70 = 0;
  } else {
   $59 = ((($57)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($57)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($60|0)==($62|0);
   if ($63) {
    $64 = HEAP32[$57>>2]|0;
    $65 = ((($64)) + 36|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (FUNCTION_TABLE_ii[$66 & 127]($57)|0);
    $68 = ($67|0)==(-1);
    if ($68) {
     HEAP32[$0>>2] = 0;
     $70 = 0;
     break;
    } else {
     $$pre$i$i$i114 = HEAP32[$0>>2]|0;
     $70 = $$pre$i$i$i114;
     break;
    }
   } else {
    $70 = $57;
   }
  }
 } while(0);
 $69 = ($70|0)==(0|0);
 do {
  if ($54) {
   label = 34;
  } else {
   $71 = ((($$pre$i3$i$i118)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($$pre$i3$i$i118)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i3$i$i118>>2]|0;
    $77 = ((($76)) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 127]($$pre$i3$i$i118)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$1>>2] = 0;
     label = 34;
     break;
    }
   }
   if ($69) {
    $$0108 = $2;$$3 = $$0107;
   } else {
    label = 69;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  if ($69) {
   label = 69;
  } else {
   $$0108 = $2;$$3 = $$0107;
  }
 }
 if ((label|0) == 69) {
  $151 = HEAP32[$5>>2]|0;
  $152 = $151 | 2;
  HEAP32[$5>>2] = $152;
  $$0108 = $2;$$3 = $$0107;
 }
 while(1) {
  $153 = ($$0108|0)==($3|0);
  if ($153) {
   label = 73;
   break;
  }
  $154 = HEAP8[$$3>>0]|0;
  $155 = ($154<<24>>24)==(2);
  if ($155) {
   $$0108136 = $$0108;
   break;
  }
  $156 = ((($$0108)) + 12|0);
  $157 = ((($$3)) + 1|0);
  $$0108 = $156;$$3 = $157;
 }
 if ((label|0) == 73) {
  $158 = HEAP32[$5>>2]|0;
  $159 = $158 | 4;
  HEAP32[$5>>2] = $159;
  $$0108136 = $3;
 }
 _free($$sroa$0122$0);
 STACKTOP = sp;return ($$0108136|0);
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$sroa$022$0 = 0, $$sroa$022$0$copyload = 0, $$sroa$022$0$copyload24 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy2 = sp + 40|0;
 $$byval_copy = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp + 12|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1;
 $13 = ($12|0)==(0);
 if ($13) {
  HEAP32[$6>>2] = -1;
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$1>>2]|0;
  HEAP32[$7>>2] = $17;
  $18 = HEAP32[$2>>2]|0;
  HEAP32[$8>>2] = $18;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$8>>2]|0;
  $19 = (FUNCTION_TABLE_iiiiiii[$16 & 63]($0,$$byval_copy,$$byval_copy2,$3,$4,$6)|0);
  HEAP32[$1>>2] = $19;
  $20 = HEAP32[$6>>2]|0;
  switch ($20|0) {
  case 0:  {
   HEAP8[$5>>0] = 0;
   break;
  }
  case 1:  {
   HEAP8[$5>>0] = 1;
   break;
  }
  default: {
   HEAP8[$5>>0] = 1;
   HEAP32[$4>>2] = 4;
  }
  }
  $$sroa$022$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$022$0 = $$sroa$022$0$copyload;
 } else {
  $21 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
  HEAP32[$$byval_copy2>>2] = $21;
  $22 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy2,38440)|0);
  (__ZNSt3__214__shared_count16__release_sharedEv($21)|0);
  $23 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
  HEAP32[$$byval_copy2>>2] = $23;
  $24 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy2,38448)|0);
  (__ZNSt3__214__shared_count16__release_sharedEv($23)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 127]($$byval_copy,$24);
  $28 = ((($$byval_copy)) + 12|0);
  $29 = HEAP32[$24>>2]|0;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vii[$31 & 127]($28,$24);
  $32 = HEAP32[$2>>2]|0;
  HEAP32[$9>>2] = $32;
  $33 = ((($$byval_copy)) + 24|0);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$9>>2]|0;
  $34 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($1,$$byval_copy2,$$byval_copy,$33,$22,$4,1)|0);
  $35 = ($34|0)==($$byval_copy|0);
  $36 = $35&1;
  HEAP8[$5>>0] = $36;
  $$sroa$022$0$copyload24 = HEAP32[$1>>2]|0;
  $38 = $33;
  while(1) {
   $37 = ((($38)) + -12|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($37);
   $39 = ($37|0)==($$byval_copy|0);
   if ($39) {
    break;
   } else {
    $38 = $37;
   }
  }
  $$sroa$022$0 = $$sroa$022$0$copyload24;
 }
 STACKTOP = sp;return ($$sroa$022$0|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i22 = 0, $$0$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i28 = 0, $$0$i$i39 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i24 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i20 = 0, $phitmp$i = 0, $phitmp$i36 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp;
 $6 = sp + 208|0;
 $7 = sp + 192|0;
 $8 = sp + 180|0;
 $9 = sp + 176|0;
 $10 = sp + 16|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $13 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$13>>2] = 0;
  $14 = (($$0$i$i) + 1)|0;
  $$0$i$i = $14;
 }
 $15 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$8>>2] = $15;
 $16 = (__ZNKSt3__26locale9use_facetERNS0_2idE($8,38440)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 (FUNCTION_TABLE_iiiii[$19 & 7]($16,28483,(28509),$6)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($15)|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
 $$0$i$i19 = 0;
 while(1) {
  $exitcond$i$i20 = ($$0$i$i19|0)==(3);
  if ($exitcond$i$i20) {
   break;
  }
  $20 = (($8) + ($$0$i$i19<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = (($$0$i$i19) + 1)|0;
  $$0$i$i19 = $21;
 }
 $22 = ((($8)) + 11|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)<(0);
 $25 = ((($8)) + 8|0);
 if ($24) {
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 2147483647;
  $phitmp$i = (($27) + -1)|0;
  $28 = $phitmp$i;
 } else {
  $28 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($8,$28,0);
 $29 = HEAP8[$22>>0]|0;
 $30 = ($29<<24>>24)<(0);
 $31 = HEAP32[$8>>2]|0;
 $32 = $30 ? $31 : $8;
 HEAP32[$9>>2] = $32;
 HEAP32[$11>>2] = $10;
 HEAP32[$12>>2] = 0;
 $33 = ((($8)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $32;$$pre$i$i$i24 = $$pre;
 L12: while(1) {
  $34 = ($$pre$i$i$i24|0)==(0|0);
  if ($34) {
   $$pre$i$i$i = 0;$133 = 1;
  } else {
   $35 = ((($$pre$i$i$i24)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($$pre$i$i$i24)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36|0)==($38|0);
   if ($39) {
    $40 = HEAP32[$$pre$i$i$i24>>2]|0;
    $41 = ((($40)) + 36|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_ii[$42 & 127]($$pre$i$i$i24)|0);
    $$0$i$i$i$i22 = $43;
   } else {
    $44 = HEAP32[$36>>2]|0;
    $$0$i$i$i$i22 = $44;
   }
   $45 = ($$0$i$i$i$i22|0)==(-1);
   if ($45) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$133 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i24;$133 = 0;
   }
  }
  $46 = HEAP32[$2>>2]|0;
  $47 = ($46|0)==(0|0);
  do {
   if ($47) {
    label = 22;
   } else {
    $48 = ((($46)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($46)) + 16|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($49|0)==($51|0);
    if ($52) {
     $53 = HEAP32[$46>>2]|0;
     $54 = ((($53)) + 36|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (FUNCTION_TABLE_ii[$55 & 127]($46)|0);
     $$0$i$i2$i$i28 = $56;
    } else {
     $57 = HEAP32[$49>>2]|0;
     $$0$i$i2$i$i28 = $57;
    }
    $58 = ($$0$i$i2$i$i28|0)==(-1);
    if ($58) {
     HEAP32[$2>>2] = 0;
     label = 22;
     break;
    } else {
     if ($133) {
      $134 = $46;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $46;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($133) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $134 = 0;
   }
  }
  $59 = HEAP32[$9>>2]|0;
  $60 = HEAP8[$22>>0]|0;
  $61 = ($60<<24>>24)<(0);
  $62 = HEAP32[$33>>2]|0;
  $63 = $60&255;
  $64 = $61 ? $62 : $63;
  $65 = (($$0) + ($64)|0);
  $66 = ($59|0)==($65|0);
  if ($66) {
   $67 = $64 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($8,$67,0);
   $68 = HEAP8[$22>>0]|0;
   $69 = ($68<<24>>24)<(0);
   if ($69) {
    $70 = HEAP32[$25>>2]|0;
    $71 = $70 & 2147483647;
    $phitmp$i36 = (($71) + -1)|0;
    $72 = $phitmp$i36;
   } else {
    $72 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($8,$72,0);
   $73 = HEAP8[$22>>0]|0;
   $74 = ($73<<24>>24)<(0);
   $75 = HEAP32[$8>>2]|0;
   $76 = $74 ? $75 : $8;
   $77 = (($76) + ($64)|0);
   HEAP32[$9>>2] = $77;
   $$1 = $76;
  } else {
   $$1 = $$0;
  }
  $78 = ((($$pre$i$i$i)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($$pre$i$i$i)) + 16|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($79|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$$pre$i$i$i>>2]|0;
   $84 = ((($83)) + 36|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (FUNCTION_TABLE_ii[$85 & 127]($$pre$i$i$i)|0);
   $$0$i$i39 = $86;
  } else {
   $87 = HEAP32[$79>>2]|0;
   $$0$i$i39 = $87;
  }
  $88 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i39,16,$$1,$9,$12,0,$7,$10,$11,$6)|0);
  $89 = ($88|0)==(0);
  if (!($89)) {
   $$2 = $$1;$$pre$i4$i$i = $134;
   break;
  }
  $90 = HEAP32[$78>>2]|0;
  $91 = HEAP32[$80>>2]|0;
  $92 = ($90|0)==($91|0);
  if ($92) {
   $93 = HEAP32[$$pre$i$i$i>>2]|0;
   $94 = ((($93)) + 40|0);
   $95 = HEAP32[$94>>2]|0;
   (FUNCTION_TABLE_ii[$95 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i24 = $$pre$i$i$i;
   continue;
  } else {
   $96 = ((($90)) + 4|0);
   HEAP32[$78>>2] = $96;
   $$0 = $$1;$$pre$i$i$i24 = $$pre$i$i$i;
   continue;
  }
 }
 $97 = HEAP32[$9>>2]|0;
 $98 = $$2;
 $99 = (($97) - ($98))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($8,$99,0);
 $100 = HEAP8[$22>>0]|0;
 $101 = ($100<<24>>24)<(0);
 $102 = HEAP32[$8>>2]|0;
 $103 = $101 ? $102 : $8;
 $104 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $5;
 $105 = (__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($103,$104,28516,$vararg_buffer)|0);
 $106 = ($105|0)==(1);
 if (!($106)) {
  HEAP32[$4>>2] = 4;
 }
 $107 = ($$pre$i$i$i|0)==(0|0);
 if ($107) {
  $135 = 1;
 } else {
  $108 = ((($$pre$i$i$i)) + 12|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($$pre$i$i$i)) + 16|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($109|0)==($111|0);
  if ($112) {
   $113 = HEAP32[$$pre$i$i$i>>2]|0;
   $114 = ((($113)) + 36|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (FUNCTION_TABLE_ii[$115 & 127]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $116;
  } else {
   $117 = HEAP32[$109>>2]|0;
   $$0$i$i$i$i = $117;
  }
  $118 = ($$0$i$i$i$i|0)==(-1);
  if ($118) {
   HEAP32[$1>>2] = 0;
   $135 = 1;
  } else {
   $135 = 0;
  }
 }
 $119 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($119) {
   label = 49;
  } else {
   $120 = ((($$pre$i4$i$i)) + 12|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ((($$pre$i4$i$i)) + 16|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ($121|0)==($123|0);
   if ($124) {
    $125 = HEAP32[$$pre$i4$i$i>>2]|0;
    $126 = ((($125)) + 36|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (FUNCTION_TABLE_ii[$127 & 127]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $128;
   } else {
    $129 = HEAP32[$121>>2]|0;
    $$0$i$i2$i$i = $129;
   }
   $130 = ($$0$i$i2$i$i|0)==(-1);
   if ($130) {
    HEAP32[$2>>2] = 0;
    label = 49;
    break;
   } else {
    if ($135) {
     break;
    } else {
     label = 51;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 49) {
  if ($135) {
   label = 51;
  }
 }
 if ((label|0) == 51) {
  $131 = HEAP32[$4>>2]|0;
  $132 = $131 | 2;
  HEAP32[$4>>2] = $132;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 96|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==($0|0);
   if (!($14)) {
    $15 = ((($9)) + 100|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($0|0);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0|0)==($5|0);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 104|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx<<2)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP32[$$0$i$ptr>>2]|0;
    $39 = ($38|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = $42 >> 2;
   $44 = ($42|0)>(92);
   if ($44) {
    $$1 = -1;
   } else {
    switch ($1|0) {
    case 10: case 8:  {
     $45 = ($43|0)<($1|0);
     if (!($45)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $46 = ($42|0)<(88);
     if (!($46)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $47 = $10;
      $48 = $2;
      $49 = (($47) - ($48))|0;
      $50 = ($49|0)<(3);
      if (!($50)) {
       $$1 = -1;
       break L6;
      }
      $51 = ((($10)) + -1|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = ($52<<24>>24)==(48);
      if (!($53)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4>>2] = 0;
      $54 = (28483 + ($43)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = ((($10)) + 1|0);
      HEAP32[$3>>2] = $56;
      HEAP8[$10>>0] = $55;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $57 = (28483 + ($43)|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $59;
    HEAP8[$10>>0] = $58;
    $60 = HEAP32[$4>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[$4>>2] = $61;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i33 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i17 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i17|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;$142 = 1;
  } else {
   $32 = ((($$pre$i$i$i17)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i17)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i17>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 127]($$pre$i$i$i17)|0);
    $$0$i$i$i$i15 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $$0$i$i$i$i15 = $41;
   }
   $42 = ($$0$i$i$i$i15|0)==(-1);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$142 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i17;$142 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 127]($43)|0);
     $$0$i$i2$i$i21 = $53;
    } else {
     $54 = HEAP32[$46>>2]|0;
     $$0$i$i2$i$i21 = $54;
    }
    $55 = ($$0$i$i2$i$i21|0)==(-1);
    if ($55) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($142) {
      $143 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($142) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $143 = 0;
   }
  }
  $56 = HEAP32[$11>>2]|0;
  $57 = HEAP8[$19>>0]|0;
  $58 = ($57<<24>>24)<(0);
  $59 = HEAP32[$30>>2]|0;
  $60 = $57&255;
  $61 = $58 ? $59 : $60;
  $62 = (($$0) + ($61)|0);
  $63 = ($56|0)==($62|0);
  if ($63) {
   $64 = $61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$64,0);
   $65 = HEAP8[$19>>0]|0;
   $66 = ($65<<24>>24)<(0);
   if ($66) {
    $67 = HEAP32[$22>>2]|0;
    $68 = $67 & 2147483647;
    $phitmp$i30 = (($68) + -1)|0;
    $69 = $phitmp$i30;
   } else {
    $69 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$69,0);
   $70 = HEAP8[$19>>0]|0;
   $71 = ($70<<24>>24)<(0);
   $72 = HEAP32[$10>>2]|0;
   $73 = $71 ? $72 : $10;
   $74 = (($73) + ($61)|0);
   HEAP32[$11>>2] = $74;
   $$1 = $73;
  } else {
   $$1 = $$0;
  }
  $75 = ((($$pre$i$i$i)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($$pre$i$i$i)) + 16|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($76|0)==($78|0);
  if ($79) {
   $80 = HEAP32[$$pre$i$i$i>>2]|0;
   $81 = ((($80)) + 36|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (FUNCTION_TABLE_ii[$82 & 127]($$pre$i$i$i)|0);
   $$0$i$i33 = $83;
  } else {
   $84 = HEAP32[$76>>2]|0;
   $$0$i$i33 = $84;
  }
  $85 = HEAP32[$7>>2]|0;
  $86 = HEAP32[$8>>2]|0;
  $87 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i33,$15,$16,$$1,$11,$85,$86,$9,$12,$13,$14,$6)|0);
  $88 = ($87|0)==(0);
  if (!($88)) {
   $$2 = $$1;$$pre$i4$i$i = $143;
   break;
  }
  $89 = HEAP32[$75>>2]|0;
  $90 = HEAP32[$77>>2]|0;
  $91 = ($89|0)==($90|0);
  if ($91) {
   $92 = HEAP32[$$pre$i$i$i>>2]|0;
   $93 = ((($92)) + 40|0);
   $94 = HEAP32[$93>>2]|0;
   (FUNCTION_TABLE_ii[$94 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;
   continue;
  } else {
   $95 = ((($89)) + 4|0);
   HEAP32[$75>>2] = $95;
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;
   continue;
  }
 }
 $96 = ((($9)) + 11|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = ($97<<24>>24)<(0);
 $99 = ((($9)) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $97&255;
 $102 = $98 ? $100 : $101;
 $103 = ($102|0)==(0);
 $104 = HEAP8[$15>>0]|0;
 $105 = ($104<<24>>24)==(0);
 $or$cond = $103 | $105;
 if (!($or$cond)) {
  $106 = HEAP32[$13>>2]|0;
  $107 = $106;
  $108 = $12;
  $109 = (($107) - ($108))|0;
  $110 = ($109|0)<(160);
  if ($110) {
   $111 = HEAP32[$14>>2]|0;
   $112 = ((($106)) + 4|0);
   HEAP32[$13>>2] = $112;
   HEAP32[$106>>2] = $111;
  }
 }
 $113 = HEAP32[$11>>2]|0;
 $114 = (+__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($$2,$113,$4));
 HEAPF64[$5>>3] = $114;
 $115 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$115,$4);
 $116 = ($$pre$i$i$i|0)==(0|0);
 if ($116) {
  $144 = 1;
 } else {
  $117 = ((($$pre$i$i$i)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($$pre$i$i$i)) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($118|0)==($120|0);
  if ($121) {
   $122 = HEAP32[$$pre$i$i$i>>2]|0;
   $123 = ((($122)) + 36|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (FUNCTION_TABLE_ii[$124 & 127]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $125;
  } else {
   $126 = HEAP32[$118>>2]|0;
   $$0$i$i$i$i = $126;
  }
  $127 = ($$0$i$i$i$i|0)==(-1);
  if ($127) {
   HEAP32[$1>>2] = 0;
   $144 = 1;
  } else {
   $144 = 0;
  }
 }
 $128 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($128) {
   label = 47;
  } else {
   $129 = ((($$pre$i4$i$i)) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ((($$pre$i4$i$i)) + 16|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($130|0)==($132|0);
   if ($133) {
    $134 = HEAP32[$$pre$i4$i$i>>2]|0;
    $135 = ((($134)) + 36|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (FUNCTION_TABLE_ii[$136 & 127]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $137;
   } else {
    $138 = HEAP32[$130>>2]|0;
    $$0$i$i2$i$i = $138;
   }
   $139 = ($$0$i$i2$i$i|0)==(-1);
   if ($139) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($144) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($144) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $140 = HEAP32[$4>>2]|0;
  $141 = $140 | 2;
  HEAP32[$4>>2] = $141;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZNKSt3__28ios_base6getlocEv($1)|0);
 HEAP32[$5>>2] = $6;
 $7 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,38440)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 (FUNCTION_TABLE_iiiii[$10 & 7]($7,28483,(28515),$2)|0);
 $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($5,38448)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($11)|0);
 HEAP32[$3>>2] = $15;
 $16 = HEAP32[$11>>2]|0;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 127]($11)|0);
 HEAP32[$4>>2] = $19;
 $20 = HEAP32[$11>>2]|0;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_vii[$22 & 127]($0,$11);
 (__ZNSt3__214__shared_count16__release_sharedEv($6)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $100 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0|0)==($5|0);
 L1: do {
  if ($12) {
   $13 = HEAP8[$1>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $15 = HEAP32[$4>>2]|0;
    $16 = ((($15)) + 1|0);
    HEAP32[$4>>2] = $16;
    HEAP8[$15>>0] = 46;
    $17 = ((($7)) + 11|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)<(0);
    $20 = ((($7)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $18&255;
    $23 = $19 ? $21 : $22;
    $24 = ($23|0)==(0);
    if ($24) {
     $$2 = 0;
    } else {
     $25 = HEAP32[$9>>2]|0;
     $26 = $25;
     $27 = $8;
     $28 = (($26) - ($27))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($25)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$25>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0|0)==($6|0);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = $8;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)<(160);
     if (!($47)) {
      $$2 = 0;
      break;
     }
     $48 = HEAP32[$10>>2]|0;
     $49 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $49;
     HEAP32[$43>>2] = $48;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $50 = ((($11)) + 128|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx<<2)|0);
    $51 = ($$0$i$idx|0)==(32);
    if ($51) {
     $$0$lcssa$i = $50;
     break;
    }
    $52 = HEAP32[$$0$i$ptr>>2]|0;
    $53 = ($52|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($53) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $54 = $$0$lcssa$i;
   $55 = $11;
   $56 = (($54) - ($55))|0;
   $57 = $56 >> 2;
   $58 = ($56|0)>(124);
   if ($58) {
    $$2 = -1;
   } else {
    $59 = (28483 + ($57)|0);
    $60 = HEAP8[$59>>0]|0;
    switch ($57|0) {
    case 24: case 25:  {
     $61 = HEAP32[$4>>2]|0;
     $62 = ($61|0)==($3|0);
     if (!($62)) {
      $63 = ((($61)) + -1|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64&255;
      $66 = $65 & 95;
      $67 = HEAP8[$2>>0]|0;
      $68 = $67&255;
      $69 = $68 & 127;
      $70 = ($66|0)==($69|0);
      if (!($70)) {
       $$2 = -1;
       break L1;
      }
     }
     $71 = ((($61)) + 1|0);
     HEAP32[$4>>2] = $71;
     HEAP8[$61>>0] = $60;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$2>>0] = 80;
     break;
    }
    default: {
     $72 = $60&255;
     $73 = $72 & 95;
     $74 = HEAP8[$2>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = ($73|0)==($75|0);
     if ($76) {
      $77 = $73 | 128;
      $78 = $77&255;
      HEAP8[$2>>0] = $78;
      $79 = HEAP8[$1>>0]|0;
      $80 = ($79<<24>>24)==(0);
      if (!($80)) {
       HEAP8[$1>>0] = 0;
       $81 = ((($7)) + 11|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = ($82<<24>>24)<(0);
       $84 = ((($7)) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = $82&255;
       $87 = $83 ? $85 : $86;
       $88 = ($87|0)==(0);
       if (!($88)) {
        $89 = HEAP32[$9>>2]|0;
        $90 = $89;
        $91 = $8;
        $92 = (($90) - ($91))|0;
        $93 = ($92|0)<(160);
        if ($93) {
         $94 = HEAP32[$10>>2]|0;
         $95 = ((($89)) + 4|0);
         HEAP32[$9>>2] = $95;
         HEAP32[$89>>2] = $94;
        }
       }
      }
     }
    }
    }
    $96 = HEAP32[$4>>2]|0;
    $97 = ((($96)) + 1|0);
    HEAP32[$4>>2] = $97;
    HEAP8[$96>>0] = $60;
    $98 = ($56|0)>(84);
    if ($98) {
     $$2 = 0;
    } else {
     $99 = HEAP32[$10>>2]|0;
     $100 = (($99) + 1)|0;
     HEAP32[$10>>2] = $100;
     $$2 = 0;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i33 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i17 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i17|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;$142 = 1;
  } else {
   $32 = ((($$pre$i$i$i17)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i17)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i17>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 127]($$pre$i$i$i17)|0);
    $$0$i$i$i$i15 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $$0$i$i$i$i15 = $41;
   }
   $42 = ($$0$i$i$i$i15|0)==(-1);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$142 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i17;$142 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 127]($43)|0);
     $$0$i$i2$i$i21 = $53;
    } else {
     $54 = HEAP32[$46>>2]|0;
     $$0$i$i2$i$i21 = $54;
    }
    $55 = ($$0$i$i2$i$i21|0)==(-1);
    if ($55) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($142) {
      $143 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($142) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $143 = 0;
   }
  }
  $56 = HEAP32[$11>>2]|0;
  $57 = HEAP8[$19>>0]|0;
  $58 = ($57<<24>>24)<(0);
  $59 = HEAP32[$30>>2]|0;
  $60 = $57&255;
  $61 = $58 ? $59 : $60;
  $62 = (($$0) + ($61)|0);
  $63 = ($56|0)==($62|0);
  if ($63) {
   $64 = $61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$64,0);
   $65 = HEAP8[$19>>0]|0;
   $66 = ($65<<24>>24)<(0);
   if ($66) {
    $67 = HEAP32[$22>>2]|0;
    $68 = $67 & 2147483647;
    $phitmp$i30 = (($68) + -1)|0;
    $69 = $phitmp$i30;
   } else {
    $69 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$69,0);
   $70 = HEAP8[$19>>0]|0;
   $71 = ($70<<24>>24)<(0);
   $72 = HEAP32[$10>>2]|0;
   $73 = $71 ? $72 : $10;
   $74 = (($73) + ($61)|0);
   HEAP32[$11>>2] = $74;
   $$1 = $73;
  } else {
   $$1 = $$0;
  }
  $75 = ((($$pre$i$i$i)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($$pre$i$i$i)) + 16|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($76|0)==($78|0);
  if ($79) {
   $80 = HEAP32[$$pre$i$i$i>>2]|0;
   $81 = ((($80)) + 36|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (FUNCTION_TABLE_ii[$82 & 127]($$pre$i$i$i)|0);
   $$0$i$i33 = $83;
  } else {
   $84 = HEAP32[$76>>2]|0;
   $$0$i$i33 = $84;
  }
  $85 = HEAP32[$7>>2]|0;
  $86 = HEAP32[$8>>2]|0;
  $87 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i33,$15,$16,$$1,$11,$85,$86,$9,$12,$13,$14,$6)|0);
  $88 = ($87|0)==(0);
  if (!($88)) {
   $$2 = $$1;$$pre$i4$i$i = $143;
   break;
  }
  $89 = HEAP32[$75>>2]|0;
  $90 = HEAP32[$77>>2]|0;
  $91 = ($89|0)==($90|0);
  if ($91) {
   $92 = HEAP32[$$pre$i$i$i>>2]|0;
   $93 = ((($92)) + 40|0);
   $94 = HEAP32[$93>>2]|0;
   (FUNCTION_TABLE_ii[$94 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;
   continue;
  } else {
   $95 = ((($89)) + 4|0);
   HEAP32[$75>>2] = $95;
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;
   continue;
  }
 }
 $96 = ((($9)) + 11|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = ($97<<24>>24)<(0);
 $99 = ((($9)) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $97&255;
 $102 = $98 ? $100 : $101;
 $103 = ($102|0)==(0);
 $104 = HEAP8[$15>>0]|0;
 $105 = ($104<<24>>24)==(0);
 $or$cond = $103 | $105;
 if (!($or$cond)) {
  $106 = HEAP32[$13>>2]|0;
  $107 = $106;
  $108 = $12;
  $109 = (($107) - ($108))|0;
  $110 = ($109|0)<(160);
  if ($110) {
   $111 = HEAP32[$14>>2]|0;
   $112 = ((($106)) + 4|0);
   HEAP32[$13>>2] = $112;
   HEAP32[$106>>2] = $111;
  }
 }
 $113 = HEAP32[$11>>2]|0;
 $114 = (+__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($$2,$113,$4));
 HEAPF64[$5>>3] = $114;
 $115 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$115,$4);
 $116 = ($$pre$i$i$i|0)==(0|0);
 if ($116) {
  $144 = 1;
 } else {
  $117 = ((($$pre$i$i$i)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($$pre$i$i$i)) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($118|0)==($120|0);
  if ($121) {
   $122 = HEAP32[$$pre$i$i$i>>2]|0;
   $123 = ((($122)) + 36|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (FUNCTION_TABLE_ii[$124 & 127]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $125;
  } else {
   $126 = HEAP32[$118>>2]|0;
   $$0$i$i$i$i = $126;
  }
  $127 = ($$0$i$i$i$i|0)==(-1);
  if ($127) {
   HEAP32[$1>>2] = 0;
   $144 = 1;
  } else {
   $144 = 0;
  }
 }
 $128 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($128) {
   label = 47;
  } else {
   $129 = ((($$pre$i4$i$i)) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ((($$pre$i4$i$i)) + 16|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($130|0)==($132|0);
   if ($133) {
    $134 = HEAP32[$$pre$i4$i$i>>2]|0;
    $135 = ((($134)) + 36|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (FUNCTION_TABLE_ii[$136 & 127]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $137;
   } else {
    $138 = HEAP32[$130>>2]|0;
    $$0$i$i2$i$i = $138;
   }
   $139 = ($$0$i$i2$i$i|0)==(-1);
   if ($139) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($144) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($144) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $140 = HEAP32[$4>>2]|0;
  $141 = $140 | 2;
  HEAP32[$4>>2] = $141;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i21 = 0, $$0$i$i33 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 $22 = ((($10)) + 8|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$25,0);
 $26 = HEAP8[$19>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$10>>2]|0;
 $29 = $27 ? $28 : $10;
 HEAP32[$11>>2] = $29;
 HEAP32[$13>>2] = $12;
 HEAP32[$14>>2] = 0;
 HEAP8[$15>>0] = 1;
 HEAP8[$16>>0] = 69;
 $30 = ((($10)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $29;$$pre$i$i$i17 = $$pre;
 L8: while(1) {
  $31 = ($$pre$i$i$i17|0)==(0|0);
  if ($31) {
   $$pre$i$i$i = 0;$142 = 1;
  } else {
   $32 = ((($$pre$i$i$i17)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($$pre$i$i$i17)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP32[$$pre$i$i$i17>>2]|0;
    $38 = ((($37)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_ii[$39 & 127]($$pre$i$i$i17)|0);
    $$0$i$i$i$i15 = $40;
   } else {
    $41 = HEAP32[$33>>2]|0;
    $$0$i$i$i$i15 = $41;
   }
   $42 = ($$0$i$i$i$i15|0)==(-1);
   if ($42) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$142 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i17;$142 = 0;
   }
  }
  $43 = HEAP32[$2>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    label = 19;
   } else {
    $45 = ((($43)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($43)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($50)) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 127]($43)|0);
     $$0$i$i2$i$i21 = $53;
    } else {
     $54 = HEAP32[$46>>2]|0;
     $$0$i$i2$i$i21 = $54;
    }
    $55 = ($$0$i$i2$i$i21|0)==(-1);
    if ($55) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($142) {
      $143 = $43;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $43;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($142) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $143 = 0;
   }
  }
  $56 = HEAP32[$11>>2]|0;
  $57 = HEAP8[$19>>0]|0;
  $58 = ($57<<24>>24)<(0);
  $59 = HEAP32[$30>>2]|0;
  $60 = $57&255;
  $61 = $58 ? $59 : $60;
  $62 = (($$0) + ($61)|0);
  $63 = ($56|0)==($62|0);
  if ($63) {
   $64 = $61 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$64,0);
   $65 = HEAP8[$19>>0]|0;
   $66 = ($65<<24>>24)<(0);
   if ($66) {
    $67 = HEAP32[$22>>2]|0;
    $68 = $67 & 2147483647;
    $phitmp$i30 = (($68) + -1)|0;
    $69 = $phitmp$i30;
   } else {
    $69 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($10,$69,0);
   $70 = HEAP8[$19>>0]|0;
   $71 = ($70<<24>>24)<(0);
   $72 = HEAP32[$10>>2]|0;
   $73 = $71 ? $72 : $10;
   $74 = (($73) + ($61)|0);
   HEAP32[$11>>2] = $74;
   $$1 = $73;
  } else {
   $$1 = $$0;
  }
  $75 = ((($$pre$i$i$i)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($$pre$i$i$i)) + 16|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($76|0)==($78|0);
  if ($79) {
   $80 = HEAP32[$$pre$i$i$i>>2]|0;
   $81 = ((($80)) + 36|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (FUNCTION_TABLE_ii[$82 & 127]($$pre$i$i$i)|0);
   $$0$i$i33 = $83;
  } else {
   $84 = HEAP32[$76>>2]|0;
   $$0$i$i33 = $84;
  }
  $85 = HEAP32[$7>>2]|0;
  $86 = HEAP32[$8>>2]|0;
  $87 = (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i33,$15,$16,$$1,$11,$85,$86,$9,$12,$13,$14,$6)|0);
  $88 = ($87|0)==(0);
  if (!($88)) {
   $$2 = $$1;$$pre$i4$i$i = $143;
   break;
  }
  $89 = HEAP32[$75>>2]|0;
  $90 = HEAP32[$77>>2]|0;
  $91 = ($89|0)==($90|0);
  if ($91) {
   $92 = HEAP32[$$pre$i$i$i>>2]|0;
   $93 = ((($92)) + 40|0);
   $94 = HEAP32[$93>>2]|0;
   (FUNCTION_TABLE_ii[$94 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;
   continue;
  } else {
   $95 = ((($89)) + 4|0);
   HEAP32[$75>>2] = $95;
   $$0 = $$1;$$pre$i$i$i17 = $$pre$i$i$i;
   continue;
  }
 }
 $96 = ((($9)) + 11|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = ($97<<24>>24)<(0);
 $99 = ((($9)) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $97&255;
 $102 = $98 ? $100 : $101;
 $103 = ($102|0)==(0);
 $104 = HEAP8[$15>>0]|0;
 $105 = ($104<<24>>24)==(0);
 $or$cond = $103 | $105;
 if (!($or$cond)) {
  $106 = HEAP32[$13>>2]|0;
  $107 = $106;
  $108 = $12;
  $109 = (($107) - ($108))|0;
  $110 = ($109|0)<(160);
  if ($110) {
   $111 = HEAP32[$14>>2]|0;
   $112 = ((($106)) + 4|0);
   HEAP32[$13>>2] = $112;
   HEAP32[$106>>2] = $111;
  }
 }
 $113 = HEAP32[$11>>2]|0;
 $114 = (+__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($$2,$113,$4));
 HEAPF32[$5>>2] = $114;
 $115 = HEAP32[$13>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($9,$12,$115,$4);
 $116 = ($$pre$i$i$i|0)==(0|0);
 if ($116) {
  $144 = 1;
 } else {
  $117 = ((($$pre$i$i$i)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($$pre$i$i$i)) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($118|0)==($120|0);
  if ($121) {
   $122 = HEAP32[$$pre$i$i$i>>2]|0;
   $123 = ((($122)) + 36|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (FUNCTION_TABLE_ii[$124 & 127]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $125;
  } else {
   $126 = HEAP32[$118>>2]|0;
   $$0$i$i$i$i = $126;
  }
  $127 = ($$0$i$i$i$i|0)==(-1);
  if ($127) {
   HEAP32[$1>>2] = 0;
   $144 = 1;
  } else {
   $144 = 0;
  }
 }
 $128 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($128) {
   label = 47;
  } else {
   $129 = ((($$pre$i4$i$i)) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ((($$pre$i4$i$i)) + 16|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($130|0)==($132|0);
   if ($133) {
    $134 = HEAP32[$$pre$i4$i$i>>2]|0;
    $135 = ((($134)) + 36|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (FUNCTION_TABLE_ii[$136 & 127]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $137;
   } else {
    $138 = HEAP32[$130>>2]|0;
    $$0$i$i2$i$i = $138;
   }
   $139 = ($$0$i$i2$i$i|0)==(-1);
   if ($139) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($144) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($144) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $140 = HEAP32[$4>>2]|0;
  $141 = $140 | 2;
  HEAP32[$4>>2] = $141;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i37 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$142 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $$0$i$i$i$i19 = $39;
   }
   $40 = ($$0$i$i$i$i19|0)==(-1);
   if ($40) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$142 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$142 = 0;
   }
  }
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 19;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if ($47) {
     $48 = HEAP32[$41>>2]|0;
     $49 = ((($48)) + 36|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
     $$0$i$i2$i$i25 = $51;
    } else {
     $52 = HEAP32[$44>>2]|0;
     $$0$i$i2$i$i25 = $52;
    }
    $53 = ($$0$i$i2$i$i25|0)==(-1);
    if ($53) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($142) {
      $143 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($142) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $143 = 0;
   }
  }
  $54 = HEAP32[$10>>2]|0;
  $55 = HEAP8[$17>>0]|0;
  $56 = ($55<<24>>24)<(0);
  $57 = HEAP32[$28>>2]|0;
  $58 = $55&255;
  $59 = $56 ? $57 : $58;
  $60 = (($$0) + ($59)|0);
  $61 = ($54|0)==($60|0);
  if ($61) {
   $62 = $59 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$62,0);
   $63 = HEAP8[$17>>0]|0;
   $64 = ($63<<24>>24)<(0);
   if ($64) {
    $65 = HEAP32[$20>>2]|0;
    $66 = $65 & 2147483647;
    $phitmp$i34 = (($66) + -1)|0;
    $67 = $phitmp$i34;
   } else {
    $67 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$67,0);
   $68 = HEAP8[$17>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$9>>2]|0;
   $71 = $69 ? $70 : $9;
   $72 = (($71) + ($59)|0);
   HEAP32[$10>>2] = $72;
   $$1 = $71;
  } else {
   $$1 = $$0;
  }
  $73 = ((($$pre$i$i$i)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($$pre$i$i$i)) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$$pre$i$i$i>>2]|0;
   $79 = ((($78)) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 127]($$pre$i$i$i)|0);
   $$0$i$i37 = $81;
  } else {
   $82 = HEAP32[$74>>2]|0;
   $$0$i$i37 = $82;
  }
  $83 = HEAP32[$7>>2]|0;
  $84 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i37,$14,$$1,$10,$13,$83,$8,$11,$12,$6)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$2 = $$1;$$pre$i4$i$i = $143;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$75>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$$pre$i$i$i>>2]|0;
   $90 = ((($89)) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  } else {
   $92 = ((($86)) + 4|0);
   HEAP32[$73>>2] = $92;
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  }
 }
 $93 = ((($8)) + 11|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = ($94<<24>>24)<(0);
 $96 = ((($8)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $94&255;
 $99 = $95 ? $97 : $98;
 $100 = ($99|0)==(0);
 if (!($100)) {
  $101 = HEAP32[$12>>2]|0;
  $102 = $101;
  $103 = $11;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$13>>2]|0;
   $107 = ((($101)) + 4|0);
   HEAP32[$12>>2] = $107;
   HEAP32[$101>>2] = $106;
  }
 }
 $108 = HEAP32[$10>>2]|0;
 $109 = (__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($$2,$108,$4,$14)|0);
 $110 = tempRet0;
 $111 = $5;
 $112 = $111;
 HEAP32[$112>>2] = $109;
 $113 = (($111) + 4)|0;
 $114 = $113;
 HEAP32[$114>>2] = $110;
 $115 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$115,$4);
 $116 = ($$pre$i$i$i|0)==(0|0);
 if ($116) {
  $144 = 1;
 } else {
  $117 = ((($$pre$i$i$i)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($$pre$i$i$i)) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($118|0)==($120|0);
  if ($121) {
   $122 = HEAP32[$$pre$i$i$i>>2]|0;
   $123 = ((($122)) + 36|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (FUNCTION_TABLE_ii[$124 & 127]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $125;
  } else {
   $126 = HEAP32[$118>>2]|0;
   $$0$i$i$i$i = $126;
  }
  $127 = ($$0$i$i$i$i|0)==(-1);
  if ($127) {
   HEAP32[$1>>2] = 0;
   $144 = 1;
  } else {
   $144 = 0;
  }
 }
 $128 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($128) {
   label = 47;
  } else {
   $129 = ((($$pre$i4$i$i)) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ((($$pre$i4$i$i)) + 16|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($130|0)==($132|0);
   if ($133) {
    $134 = HEAP32[$$pre$i4$i$i>>2]|0;
    $135 = ((($134)) + 36|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (FUNCTION_TABLE_ii[$136 & 127]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $137;
   } else {
    $138 = HEAP32[$130>>2]|0;
    $$0$i$i2$i$i = $138;
   }
   $139 = ($$0$i$i2$i$i|0)==(-1);
   if ($139) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($144) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($144) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $140 = HEAP32[$4>>2]|0;
  $141 = $140 | 2;
  HEAP32[$4>>2] = $141;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZNKSt3__28ios_base6getlocEv($1)|0);
 HEAP32[$4>>2] = $5;
 $6 = (__ZNKSt3__26locale9use_facetERNS0_2idE($4,38440)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iiiii[$9 & 7]($6,28483,(28509),$2)|0);
 $10 = (__ZNKSt3__26locale9use_facetERNS0_2idE($4,38448)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 127]($10)|0);
 HEAP32[$3>>2] = $14;
 $15 = HEAP32[$10>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_vii[$17 & 127]($0,$10);
 (__ZNSt3__214__shared_count16__release_sharedEv($5)|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i37 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$137 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $$0$i$i$i$i19 = $39;
   }
   $40 = ($$0$i$i$i$i19|0)==(-1);
   if ($40) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$137 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$137 = 0;
   }
  }
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 19;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if ($47) {
     $48 = HEAP32[$41>>2]|0;
     $49 = ((($48)) + 36|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
     $$0$i$i2$i$i25 = $51;
    } else {
     $52 = HEAP32[$44>>2]|0;
     $$0$i$i2$i$i25 = $52;
    }
    $53 = ($$0$i$i2$i$i25|0)==(-1);
    if ($53) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($137) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($137) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $138 = 0;
   }
  }
  $54 = HEAP32[$10>>2]|0;
  $55 = HEAP8[$17>>0]|0;
  $56 = ($55<<24>>24)<(0);
  $57 = HEAP32[$28>>2]|0;
  $58 = $55&255;
  $59 = $56 ? $57 : $58;
  $60 = (($$0) + ($59)|0);
  $61 = ($54|0)==($60|0);
  if ($61) {
   $62 = $59 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$62,0);
   $63 = HEAP8[$17>>0]|0;
   $64 = ($63<<24>>24)<(0);
   if ($64) {
    $65 = HEAP32[$20>>2]|0;
    $66 = $65 & 2147483647;
    $phitmp$i34 = (($66) + -1)|0;
    $67 = $phitmp$i34;
   } else {
    $67 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$67,0);
   $68 = HEAP8[$17>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$9>>2]|0;
   $71 = $69 ? $70 : $9;
   $72 = (($71) + ($59)|0);
   HEAP32[$10>>2] = $72;
   $$1 = $71;
  } else {
   $$1 = $$0;
  }
  $73 = ((($$pre$i$i$i)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($$pre$i$i$i)) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$$pre$i$i$i>>2]|0;
   $79 = ((($78)) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 127]($$pre$i$i$i)|0);
   $$0$i$i37 = $81;
  } else {
   $82 = HEAP32[$74>>2]|0;
   $$0$i$i37 = $82;
  }
  $83 = HEAP32[$7>>2]|0;
  $84 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i37,$14,$$1,$10,$13,$83,$8,$11,$12,$6)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$2 = $$1;$$pre$i4$i$i = $138;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$75>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$$pre$i$i$i>>2]|0;
   $90 = ((($89)) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  } else {
   $92 = ((($86)) + 4|0);
   HEAP32[$73>>2] = $92;
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  }
 }
 $93 = ((($8)) + 11|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = ($94<<24>>24)<(0);
 $96 = ((($8)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $94&255;
 $99 = $95 ? $97 : $98;
 $100 = ($99|0)==(0);
 if (!($100)) {
  $101 = HEAP32[$12>>2]|0;
  $102 = $101;
  $103 = $11;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$13>>2]|0;
   $107 = ((($101)) + 4|0);
   HEAP32[$12>>2] = $107;
   HEAP32[$101>>2] = $106;
  }
 }
 $108 = HEAP32[$10>>2]|0;
 $109 = (__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($$2,$108,$4,$14)|0);
 HEAP32[$5>>2] = $109;
 $110 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$110,$4);
 $111 = ($$pre$i$i$i|0)==(0|0);
 if ($111) {
  $139 = 1;
 } else {
  $112 = ((($$pre$i$i$i)) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ((($$pre$i$i$i)) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$$pre$i$i$i>>2]|0;
   $118 = ((($117)) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 127]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $120;
  } else {
   $121 = HEAP32[$113>>2]|0;
   $$0$i$i$i$i = $121;
  }
  $122 = ($$0$i$i$i$i|0)==(-1);
  if ($122) {
   HEAP32[$1>>2] = 0;
   $139 = 1;
  } else {
   $139 = 0;
  }
 }
 $123 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($123) {
   label = 47;
  } else {
   $124 = ((($$pre$i4$i$i)) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ((($$pre$i4$i$i)) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$$pre$i4$i$i>>2]|0;
    $130 = ((($129)) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 127]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i2$i$i = $133;
   }
   $134 = ($$0$i$i2$i$i|0)==(-1);
   if ($134) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($139) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($139) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $135 = HEAP32[$4>>2]|0;
  $136 = $135 | 2;
  HEAP32[$4>>2] = $136;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i37 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$137 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $$0$i$i$i$i19 = $39;
   }
   $40 = ($$0$i$i$i$i19|0)==(-1);
   if ($40) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$137 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$137 = 0;
   }
  }
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 19;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if ($47) {
     $48 = HEAP32[$41>>2]|0;
     $49 = ((($48)) + 36|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
     $$0$i$i2$i$i25 = $51;
    } else {
     $52 = HEAP32[$44>>2]|0;
     $$0$i$i2$i$i25 = $52;
    }
    $53 = ($$0$i$i2$i$i25|0)==(-1);
    if ($53) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($137) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($137) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $138 = 0;
   }
  }
  $54 = HEAP32[$10>>2]|0;
  $55 = HEAP8[$17>>0]|0;
  $56 = ($55<<24>>24)<(0);
  $57 = HEAP32[$28>>2]|0;
  $58 = $55&255;
  $59 = $56 ? $57 : $58;
  $60 = (($$0) + ($59)|0);
  $61 = ($54|0)==($60|0);
  if ($61) {
   $62 = $59 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$62,0);
   $63 = HEAP8[$17>>0]|0;
   $64 = ($63<<24>>24)<(0);
   if ($64) {
    $65 = HEAP32[$20>>2]|0;
    $66 = $65 & 2147483647;
    $phitmp$i34 = (($66) + -1)|0;
    $67 = $phitmp$i34;
   } else {
    $67 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$67,0);
   $68 = HEAP8[$17>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$9>>2]|0;
   $71 = $69 ? $70 : $9;
   $72 = (($71) + ($59)|0);
   HEAP32[$10>>2] = $72;
   $$1 = $71;
  } else {
   $$1 = $$0;
  }
  $73 = ((($$pre$i$i$i)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($$pre$i$i$i)) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$$pre$i$i$i>>2]|0;
   $79 = ((($78)) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 127]($$pre$i$i$i)|0);
   $$0$i$i37 = $81;
  } else {
   $82 = HEAP32[$74>>2]|0;
   $$0$i$i37 = $82;
  }
  $83 = HEAP32[$7>>2]|0;
  $84 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i37,$14,$$1,$10,$13,$83,$8,$11,$12,$6)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$2 = $$1;$$pre$i4$i$i = $138;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$75>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$$pre$i$i$i>>2]|0;
   $90 = ((($89)) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  } else {
   $92 = ((($86)) + 4|0);
   HEAP32[$73>>2] = $92;
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  }
 }
 $93 = ((($8)) + 11|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = ($94<<24>>24)<(0);
 $96 = ((($8)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $94&255;
 $99 = $95 ? $97 : $98;
 $100 = ($99|0)==(0);
 if (!($100)) {
  $101 = HEAP32[$12>>2]|0;
  $102 = $101;
  $103 = $11;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$13>>2]|0;
   $107 = ((($101)) + 4|0);
   HEAP32[$12>>2] = $107;
   HEAP32[$101>>2] = $106;
  }
 }
 $108 = HEAP32[$10>>2]|0;
 $109 = (__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($$2,$108,$4,$14)|0);
 HEAP32[$5>>2] = $109;
 $110 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$110,$4);
 $111 = ($$pre$i$i$i|0)==(0|0);
 if ($111) {
  $139 = 1;
 } else {
  $112 = ((($$pre$i$i$i)) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ((($$pre$i$i$i)) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$$pre$i$i$i>>2]|0;
   $118 = ((($117)) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 127]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $120;
  } else {
   $121 = HEAP32[$113>>2]|0;
   $$0$i$i$i$i = $121;
  }
  $122 = ($$0$i$i$i$i|0)==(-1);
  if ($122) {
   HEAP32[$1>>2] = 0;
   $139 = 1;
  } else {
   $139 = 0;
  }
 }
 $123 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($123) {
   label = 47;
  } else {
   $124 = ((($$pre$i4$i$i)) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ((($$pre$i4$i$i)) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$$pre$i4$i$i>>2]|0;
    $130 = ((($129)) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 127]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i2$i$i = $133;
   }
   $134 = ($$0$i$i2$i$i|0)==(-1);
   if ($134) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($139) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($139) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $135 = HEAP32[$4>>2]|0;
  $136 = $135 | 2;
  HEAP32[$4>>2] = $136;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i37 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$137 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $$0$i$i$i$i19 = $39;
   }
   $40 = ($$0$i$i$i$i19|0)==(-1);
   if ($40) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$137 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$137 = 0;
   }
  }
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 19;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if ($47) {
     $48 = HEAP32[$41>>2]|0;
     $49 = ((($48)) + 36|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
     $$0$i$i2$i$i25 = $51;
    } else {
     $52 = HEAP32[$44>>2]|0;
     $$0$i$i2$i$i25 = $52;
    }
    $53 = ($$0$i$i2$i$i25|0)==(-1);
    if ($53) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($137) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($137) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $138 = 0;
   }
  }
  $54 = HEAP32[$10>>2]|0;
  $55 = HEAP8[$17>>0]|0;
  $56 = ($55<<24>>24)<(0);
  $57 = HEAP32[$28>>2]|0;
  $58 = $55&255;
  $59 = $56 ? $57 : $58;
  $60 = (($$0) + ($59)|0);
  $61 = ($54|0)==($60|0);
  if ($61) {
   $62 = $59 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$62,0);
   $63 = HEAP8[$17>>0]|0;
   $64 = ($63<<24>>24)<(0);
   if ($64) {
    $65 = HEAP32[$20>>2]|0;
    $66 = $65 & 2147483647;
    $phitmp$i34 = (($66) + -1)|0;
    $67 = $phitmp$i34;
   } else {
    $67 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$67,0);
   $68 = HEAP8[$17>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$9>>2]|0;
   $71 = $69 ? $70 : $9;
   $72 = (($71) + ($59)|0);
   HEAP32[$10>>2] = $72;
   $$1 = $71;
  } else {
   $$1 = $$0;
  }
  $73 = ((($$pre$i$i$i)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($$pre$i$i$i)) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$$pre$i$i$i>>2]|0;
   $79 = ((($78)) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 127]($$pre$i$i$i)|0);
   $$0$i$i37 = $81;
  } else {
   $82 = HEAP32[$74>>2]|0;
   $$0$i$i37 = $82;
  }
  $83 = HEAP32[$7>>2]|0;
  $84 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i37,$14,$$1,$10,$13,$83,$8,$11,$12,$6)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$2 = $$1;$$pre$i4$i$i = $138;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$75>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$$pre$i$i$i>>2]|0;
   $90 = ((($89)) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  } else {
   $92 = ((($86)) + 4|0);
   HEAP32[$73>>2] = $92;
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  }
 }
 $93 = ((($8)) + 11|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = ($94<<24>>24)<(0);
 $96 = ((($8)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $94&255;
 $99 = $95 ? $97 : $98;
 $100 = ($99|0)==(0);
 if (!($100)) {
  $101 = HEAP32[$12>>2]|0;
  $102 = $101;
  $103 = $11;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$13>>2]|0;
   $107 = ((($101)) + 4|0);
   HEAP32[$12>>2] = $107;
   HEAP32[$101>>2] = $106;
  }
 }
 $108 = HEAP32[$10>>2]|0;
 $109 = (__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($$2,$108,$4,$14)|0);
 HEAP16[$5>>1] = $109;
 $110 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$110,$4);
 $111 = ($$pre$i$i$i|0)==(0|0);
 if ($111) {
  $139 = 1;
 } else {
  $112 = ((($$pre$i$i$i)) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ((($$pre$i$i$i)) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$$pre$i$i$i>>2]|0;
   $118 = ((($117)) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 127]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $120;
  } else {
   $121 = HEAP32[$113>>2]|0;
   $$0$i$i$i$i = $121;
  }
  $122 = ($$0$i$i$i$i|0)==(-1);
  if ($122) {
   HEAP32[$1>>2] = 0;
   $139 = 1;
  } else {
   $139 = 0;
  }
 }
 $123 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($123) {
   label = 47;
  } else {
   $124 = ((($$pre$i4$i$i)) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ((($$pre$i4$i$i)) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$$pre$i4$i$i>>2]|0;
    $130 = ((($129)) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 127]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i2$i$i = $133;
   }
   $134 = ($$0$i$i2$i$i|0)==(-1);
   if ($134) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($139) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($139) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $135 = HEAP32[$4>>2]|0;
  $136 = $135 | 2;
  HEAP32[$4>>2] = $136;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i37 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$142 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $$0$i$i$i$i19 = $39;
   }
   $40 = ($$0$i$i$i$i19|0)==(-1);
   if ($40) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$142 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$142 = 0;
   }
  }
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 19;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if ($47) {
     $48 = HEAP32[$41>>2]|0;
     $49 = ((($48)) + 36|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
     $$0$i$i2$i$i25 = $51;
    } else {
     $52 = HEAP32[$44>>2]|0;
     $$0$i$i2$i$i25 = $52;
    }
    $53 = ($$0$i$i2$i$i25|0)==(-1);
    if ($53) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($142) {
      $143 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($142) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $143 = 0;
   }
  }
  $54 = HEAP32[$10>>2]|0;
  $55 = HEAP8[$17>>0]|0;
  $56 = ($55<<24>>24)<(0);
  $57 = HEAP32[$28>>2]|0;
  $58 = $55&255;
  $59 = $56 ? $57 : $58;
  $60 = (($$0) + ($59)|0);
  $61 = ($54|0)==($60|0);
  if ($61) {
   $62 = $59 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$62,0);
   $63 = HEAP8[$17>>0]|0;
   $64 = ($63<<24>>24)<(0);
   if ($64) {
    $65 = HEAP32[$20>>2]|0;
    $66 = $65 & 2147483647;
    $phitmp$i34 = (($66) + -1)|0;
    $67 = $phitmp$i34;
   } else {
    $67 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$67,0);
   $68 = HEAP8[$17>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$9>>2]|0;
   $71 = $69 ? $70 : $9;
   $72 = (($71) + ($59)|0);
   HEAP32[$10>>2] = $72;
   $$1 = $71;
  } else {
   $$1 = $$0;
  }
  $73 = ((($$pre$i$i$i)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($$pre$i$i$i)) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$$pre$i$i$i>>2]|0;
   $79 = ((($78)) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 127]($$pre$i$i$i)|0);
   $$0$i$i37 = $81;
  } else {
   $82 = HEAP32[$74>>2]|0;
   $$0$i$i37 = $82;
  }
  $83 = HEAP32[$7>>2]|0;
  $84 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i37,$14,$$1,$10,$13,$83,$8,$11,$12,$6)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$2 = $$1;$$pre$i4$i$i = $143;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$75>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$$pre$i$i$i>>2]|0;
   $90 = ((($89)) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  } else {
   $92 = ((($86)) + 4|0);
   HEAP32[$73>>2] = $92;
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  }
 }
 $93 = ((($8)) + 11|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = ($94<<24>>24)<(0);
 $96 = ((($8)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $94&255;
 $99 = $95 ? $97 : $98;
 $100 = ($99|0)==(0);
 if (!($100)) {
  $101 = HEAP32[$12>>2]|0;
  $102 = $101;
  $103 = $11;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$13>>2]|0;
   $107 = ((($101)) + 4|0);
   HEAP32[$12>>2] = $107;
   HEAP32[$101>>2] = $106;
  }
 }
 $108 = HEAP32[$10>>2]|0;
 $109 = (__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($$2,$108,$4,$14)|0);
 $110 = tempRet0;
 $111 = $5;
 $112 = $111;
 HEAP32[$112>>2] = $109;
 $113 = (($111) + 4)|0;
 $114 = $113;
 HEAP32[$114>>2] = $110;
 $115 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$115,$4);
 $116 = ($$pre$i$i$i|0)==(0|0);
 if ($116) {
  $144 = 1;
 } else {
  $117 = ((($$pre$i$i$i)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($$pre$i$i$i)) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($118|0)==($120|0);
  if ($121) {
   $122 = HEAP32[$$pre$i$i$i>>2]|0;
   $123 = ((($122)) + 36|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (FUNCTION_TABLE_ii[$124 & 127]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $125;
  } else {
   $126 = HEAP32[$118>>2]|0;
   $$0$i$i$i$i = $126;
  }
  $127 = ($$0$i$i$i$i|0)==(-1);
  if ($127) {
   HEAP32[$1>>2] = 0;
   $144 = 1;
  } else {
   $144 = 0;
  }
 }
 $128 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($128) {
   label = 47;
  } else {
   $129 = ((($$pre$i4$i$i)) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ((($$pre$i4$i$i)) + 16|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($130|0)==($132|0);
   if ($133) {
    $134 = HEAP32[$$pre$i4$i$i>>2]|0;
    $135 = ((($134)) + 36|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (FUNCTION_TABLE_ii[$136 & 127]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $137;
   } else {
    $138 = HEAP32[$130>>2]|0;
    $$0$i$i2$i$i = $138;
   }
   $139 = ($$0$i$i2$i$i|0)==(-1);
   if ($139) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($144) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($144) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $140 = HEAP32[$4>>2]|0;
  $141 = $140 | 2;
  HEAP32[$4>>2] = $141;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i25 = 0, $$0$i$i37 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = ((($9)) + 8|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$23,0);
 $24 = HEAP8[$17>>0]|0;
 $25 = ($24<<24>>24)<(0);
 $26 = HEAP32[$9>>2]|0;
 $27 = $25 ? $26 : $9;
 HEAP32[$10>>2] = $27;
 HEAP32[$12>>2] = $11;
 HEAP32[$13>>2] = 0;
 $28 = ((($9)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$0 = $27;$$pre$i$i$i21 = $$pre;
 L8: while(1) {
  $29 = ($$pre$i$i$i21|0)==(0|0);
  if ($29) {
   $$pre$i$i$i = 0;$137 = 1;
  } else {
   $30 = ((($$pre$i$i$i21)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($$pre$i$i$i21)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==($33|0);
   if ($34) {
    $35 = HEAP32[$$pre$i$i$i21>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_ii[$37 & 127]($$pre$i$i$i21)|0);
    $$0$i$i$i$i19 = $38;
   } else {
    $39 = HEAP32[$31>>2]|0;
    $$0$i$i$i$i19 = $39;
   }
   $40 = ($$0$i$i$i$i19|0)==(-1);
   if ($40) {
    HEAP32[$1>>2] = 0;
    $$pre$i$i$i = 0;$137 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i21;$137 = 0;
   }
  }
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  do {
   if ($42) {
    label = 19;
   } else {
    $43 = ((($41)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($44|0)==($46|0);
    if ($47) {
     $48 = HEAP32[$41>>2]|0;
     $49 = ((($48)) + 36|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
     $$0$i$i2$i$i25 = $51;
    } else {
     $52 = HEAP32[$44>>2]|0;
     $$0$i$i2$i$i25 = $52;
    }
    $53 = ($$0$i$i2$i$i25|0)==(-1);
    if ($53) {
     HEAP32[$2>>2] = 0;
     label = 19;
     break;
    } else {
     if ($137) {
      $138 = $41;
      break;
     } else {
      $$2 = $$0;$$pre$i4$i$i = $41;
      break L8;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($137) {
    $$2 = $$0;$$pre$i4$i$i = 0;
    break;
   } else {
    $138 = 0;
   }
  }
  $54 = HEAP32[$10>>2]|0;
  $55 = HEAP8[$17>>0]|0;
  $56 = ($55<<24>>24)<(0);
  $57 = HEAP32[$28>>2]|0;
  $58 = $55&255;
  $59 = $56 ? $57 : $58;
  $60 = (($$0) + ($59)|0);
  $61 = ($54|0)==($60|0);
  if ($61) {
   $62 = $59 << 1;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$62,0);
   $63 = HEAP8[$17>>0]|0;
   $64 = ($63<<24>>24)<(0);
   if ($64) {
    $65 = HEAP32[$20>>2]|0;
    $66 = $65 & 2147483647;
    $phitmp$i34 = (($66) + -1)|0;
    $67 = $phitmp$i34;
   } else {
    $67 = 10;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($9,$67,0);
   $68 = HEAP8[$17>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$9>>2]|0;
   $71 = $69 ? $70 : $9;
   $72 = (($71) + ($59)|0);
   HEAP32[$10>>2] = $72;
   $$1 = $71;
  } else {
   $$1 = $$0;
  }
  $73 = ((($$pre$i$i$i)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($$pre$i$i$i)) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$$pre$i$i$i>>2]|0;
   $79 = ((($78)) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 127]($$pre$i$i$i)|0);
   $$0$i$i37 = $81;
  } else {
   $82 = HEAP32[$74>>2]|0;
   $$0$i$i37 = $82;
  }
  $83 = HEAP32[$7>>2]|0;
  $84 = (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i37,$14,$$1,$10,$13,$83,$8,$11,$12,$6)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$2 = $$1;$$pre$i4$i$i = $138;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$75>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$$pre$i$i$i>>2]|0;
   $90 = ((($89)) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 127]($$pre$i$i$i)|0);
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  } else {
   $92 = ((($86)) + 4|0);
   HEAP32[$73>>2] = $92;
   $$0 = $$1;$$pre$i$i$i21 = $$pre$i$i$i;
   continue;
  }
 }
 $93 = ((($8)) + 11|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = ($94<<24>>24)<(0);
 $96 = ((($8)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $94&255;
 $99 = $95 ? $97 : $98;
 $100 = ($99|0)==(0);
 if (!($100)) {
  $101 = HEAP32[$12>>2]|0;
  $102 = $101;
  $103 = $11;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$13>>2]|0;
   $107 = ((($101)) + 4|0);
   HEAP32[$12>>2] = $107;
   HEAP32[$101>>2] = $106;
  }
 }
 $108 = HEAP32[$10>>2]|0;
 $109 = (__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($$2,$108,$4,$14)|0);
 HEAP32[$5>>2] = $109;
 $110 = HEAP32[$12>>2]|0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($8,$11,$110,$4);
 $111 = ($$pre$i$i$i|0)==(0|0);
 if ($111) {
  $139 = 1;
 } else {
  $112 = ((($$pre$i$i$i)) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ((($$pre$i$i$i)) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$$pre$i$i$i>>2]|0;
   $118 = ((($117)) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 127]($$pre$i$i$i)|0);
   $$0$i$i$i$i = $120;
  } else {
   $121 = HEAP32[$113>>2]|0;
   $$0$i$i$i$i = $121;
  }
  $122 = ($$0$i$i$i$i|0)==(-1);
  if ($122) {
   HEAP32[$1>>2] = 0;
   $139 = 1;
  } else {
   $139 = 0;
  }
 }
 $123 = ($$pre$i4$i$i|0)==(0|0);
 do {
  if ($123) {
   label = 47;
  } else {
   $124 = ((($$pre$i4$i$i)) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ((($$pre$i4$i$i)) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$$pre$i4$i$i>>2]|0;
    $130 = ((($129)) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 127]($$pre$i4$i$i)|0);
    $$0$i$i2$i$i = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i2$i$i = $133;
   }
   $134 = ($$0$i$i2$i$i|0)==(-1);
   if ($134) {
    HEAP32[$2>>2] = 0;
    label = 47;
    break;
   } else {
    if ($139) {
     break;
    } else {
     label = 49;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  if ($139) {
   label = 49;
  }
 }
 if ((label|0) == 49) {
  $135 = HEAP32[$4>>2]|0;
  $136 = $135 | 2;
  HEAP32[$4>>2] = $136;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i117 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i123 = 0, $$0101 = 0, $$0105 = 0, $$0111 = 0, $$0112 = 0, $$0112144 = 0, $$092 = 0, $$093 = 0, $$094$off0 = 0, $$095 = 0, $$096 = 0, $$097 = 0, $$098 = 0, $$1102 = 0, $$1106 = 0;
 var $$199 = 0, $$2$off0 = 0, $$2100 = 0, $$2103 = 0, $$2107 = 0, $$3 = 0, $$3104 = 0, $$3108 = 0, $$5 = 0, $$5110 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i119 = 0, $$pre$i4$i$i125 = 0, $$sroa$0130$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i120 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 if ($12) {
  $13 = (_malloc($11)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$0111 = 0;$$sroa$0130$0 = 0;
  } else {
   $$0111 = $13;$$sroa$0130$0 = $13;
  }
 } else {
  $$0111 = $7;$$sroa$0130$0 = 0;
 }
 $$0101 = 0;$$0105 = $11;$$097 = $2;$$098 = $$0111;
 while(1) {
  $15 = ($$097|0)==($3|0);
  if ($15) {
   break;
  }
  $16 = ((($$097)) + 8|0);
  $17 = ((($16)) + 3|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(0);
  if ($19) {
   $20 = ((($$097)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $24 = $21;
  } else {
   $22 = $18&255;
   $24 = $22;
  }
  $23 = ($24|0)==(0);
  if ($23) {
   HEAP8[$$098>>0] = 2;
   $25 = (($$0105) + -1)|0;
   $26 = (($$0101) + 1)|0;
   $$1102 = $26;$$1106 = $25;
  } else {
   HEAP8[$$098>>0] = 1;
   $$1102 = $$0101;$$1106 = $$0105;
  }
  $27 = ((($$097)) + 12|0);
  $28 = ((($$098)) + 1|0);
  $$0101 = $$1102;$$0105 = $$1106;$$097 = $27;$$098 = $28;
 }
 $$096 = 0;$$2103 = $$0101;$$2107 = $$0105;
 L17: while(1) {
  $29 = HEAP32[$0>>2]|0;
  $30 = ($29|0)==(0|0);
  do {
   if ($30) {
    $55 = 1;
   } else {
    $31 = ((($29)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($29)) + 16|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($32|0)==($34|0);
    if ($35) {
     $36 = HEAP32[$29>>2]|0;
     $37 = ((($36)) + 36|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (FUNCTION_TABLE_ii[$38 & 127]($29)|0);
     $$0$i$i$i$i = $39;
    } else {
     $40 = HEAP32[$32>>2]|0;
     $$0$i$i$i$i = $40;
    }
    $41 = ($$0$i$i$i$i|0)==(-1);
    if ($41) {
     HEAP32[$0>>2] = 0;
     $55 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$0>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $55 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $42 = HEAP32[$1>>2]|0;
  $43 = ($42|0)==(0|0);
  if ($43) {
   $$pre$i4$i$i125 = 0;$56 = 1;
  } else {
   $44 = ((($42)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($42)) + 16|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($45|0)==($47|0);
   if ($48) {
    $49 = HEAP32[$42>>2]|0;
    $50 = ((($49)) + 36|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (FUNCTION_TABLE_ii[$51 & 127]($42)|0);
    $$0$i$i2$i$i = $52;
   } else {
    $53 = HEAP32[$45>>2]|0;
    $$0$i$i2$i$i = $53;
   }
   $54 = ($$0$i$i2$i$i|0)==(-1);
   if ($54) {
    HEAP32[$1>>2] = 0;
    $$pre$i4$i$i125 = 0;$56 = 1;
   } else {
    $$pre$i4$i$i125 = $42;$56 = 0;
   }
  }
  $tmp$i$i = $55 ^ $56;
  $57 = ($$2107|0)!=(0);
  $58 = $57 & $tmp$i$i;
  $59 = HEAP32[$0>>2]|0;
  if (!($58)) {
   break;
  }
  $84 = ((($59)) + 12|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ((($59)) + 16|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($85|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$59>>2]|0;
   $90 = ((($89)) + 36|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (FUNCTION_TABLE_ii[$91 & 127]($59)|0);
   $$0$i$i = $92;
  } else {
   $93 = HEAP32[$85>>2]|0;
   $$0$i$i = $93;
  }
  if ($6) {
   $$095 = $$0$i$i;
  } else {
   $94 = HEAP32[$4>>2]|0;
   $95 = ((($94)) + 28|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (FUNCTION_TABLE_iii[$96 & 31]($4,$$0$i$i)|0);
   $$095 = $97;
  }
  $98 = (($$096) + 1)|0;
  $$093 = $2;$$094$off0 = 0;$$199 = $$0111;$$3104 = $$2103;$$3108 = $$2107;
  while(1) {
   $99 = ($$093|0)==($3|0);
   if ($99) {
    break;
   }
   $100 = HEAP8[$$199>>0]|0;
   $101 = ($100<<24>>24)==(1);
   do {
    if ($101) {
     $102 = ((($$093)) + 8|0);
     $103 = ((($102)) + 3|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = ($104<<24>>24)<(0);
     if ($105) {
      $106 = HEAP32[$$093>>2]|0;
      $108 = $106;
     } else {
      $108 = $$093;
     }
     $107 = (($108) + ($$096<<2)|0);
     $109 = HEAP32[$107>>2]|0;
     if ($6) {
      $$092 = $109;
     } else {
      $110 = HEAP32[$4>>2]|0;
      $111 = ((($110)) + 28|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = (FUNCTION_TABLE_iii[$112 & 31]($4,$109)|0);
      $$092 = $113;
     }
     $114 = ($$095|0)==($$092|0);
     if (!($114)) {
      HEAP8[$$199>>0] = 0;
      $124 = (($$3108) + -1)|0;
      $$2$off0 = $$094$off0;$$5 = $$3104;$$5110 = $124;
      break;
     }
     $115 = HEAP8[$103>>0]|0;
     $116 = ($115<<24>>24)<(0);
     if ($116) {
      $117 = ((($$093)) + 4|0);
      $118 = HEAP32[$117>>2]|0;
      $121 = $118;
     } else {
      $119 = $115&255;
      $121 = $119;
     }
     $120 = ($121|0)==($98|0);
     if ($120) {
      $122 = (($$3108) + -1)|0;
      $123 = (($$3104) + 1)|0;
      HEAP8[$$199>>0] = 2;
      $$2$off0 = 1;$$5 = $123;$$5110 = $122;
     } else {
      $$2$off0 = 1;$$5 = $$3104;$$5110 = $$3108;
     }
    } else {
     $$2$off0 = $$094$off0;$$5 = $$3104;$$5110 = $$3108;
    }
   } while(0);
   $125 = ((($$093)) + 12|0);
   $126 = ((($$199)) + 1|0);
   $$093 = $125;$$094$off0 = $$2$off0;$$199 = $126;$$3104 = $$5;$$3108 = $$5110;
  }
  if (!($$094$off0)) {
   $$096 = $98;$$2103 = $$3104;$$2107 = $$3108;
   continue;
  }
  $127 = HEAP32[$0>>2]|0;
  $128 = ((($127)) + 12|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ((($127)) + 16|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($129|0)==($131|0);
  if ($132) {
   $133 = HEAP32[$127>>2]|0;
   $134 = ((($133)) + 40|0);
   $135 = HEAP32[$134>>2]|0;
   (FUNCTION_TABLE_ii[$135 & 127]($127)|0);
  } else {
   $136 = ((($129)) + 4|0);
   HEAP32[$128>>2] = $136;
  }
  $137 = (($$3104) + ($$3108))|0;
  $138 = ($137>>>0)>(1);
  if ($138) {
   $$0 = $2;$$2100 = $$0111;$$6 = $$3104;
  } else {
   $$096 = $98;$$2103 = $$3104;$$2107 = $$3108;
   continue;
  }
  while(1) {
   $139 = ($$0|0)==($3|0);
   if ($139) {
    $$096 = $98;$$2103 = $$6;$$2107 = $$3108;
    continue L17;
   }
   $140 = HEAP8[$$2100>>0]|0;
   $141 = ($140<<24>>24)==(2);
   if ($141) {
    $142 = ((($$0)) + 8|0);
    $143 = ((($142)) + 3|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = ($144<<24>>24)<(0);
    if ($145) {
     $146 = ((($$0)) + 4|0);
     $147 = HEAP32[$146>>2]|0;
     $150 = $147;
    } else {
     $148 = $144&255;
     $150 = $148;
    }
    $149 = ($150|0)==($98|0);
    if ($149) {
     $$7 = $$6;
    } else {
     $151 = (($$6) + -1)|0;
     HEAP8[$$2100>>0] = 0;
     $$7 = $151;
    }
   } else {
    $$7 = $$6;
   }
   $152 = ((($$0)) + 12|0);
   $153 = ((($$2100)) + 1|0);
   $$0 = $152;$$2100 = $153;$$6 = $$7;
  }
 }
 $60 = ($59|0)==(0|0);
 do {
  if ($60) {
   $163 = 1;
  } else {
   $61 = ((($59)) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($59)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($62|0)==($64|0);
   if ($65) {
    $66 = HEAP32[$59>>2]|0;
    $67 = ((($66)) + 36|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (FUNCTION_TABLE_ii[$68 & 127]($59)|0);
    $$0$i$i$i$i117 = $69;
   } else {
    $70 = HEAP32[$62>>2]|0;
    $$0$i$i$i$i117 = $70;
   }
   $71 = ($$0$i$i$i$i117|0)==(-1);
   if ($71) {
    HEAP32[$0>>2] = 0;
    $163 = 1;
    break;
   } else {
    $$pre$i$i$i119 = HEAP32[$0>>2]|0;
    $phitmp$i$i$i120 = ($$pre$i$i$i119|0)==(0|0);
    $163 = $phitmp$i$i$i120;
    break;
   }
  }
 } while(0);
 $72 = ($$pre$i4$i$i125|0)==(0|0);
 do {
  if ($72) {
   label = 41;
  } else {
   $73 = ((($$pre$i4$i$i125)) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($$pre$i4$i$i125)) + 16|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74|0)==($76|0);
   if ($77) {
    $78 = HEAP32[$$pre$i4$i$i125>>2]|0;
    $79 = ((($78)) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (FUNCTION_TABLE_ii[$80 & 127]($$pre$i4$i$i125)|0);
    $$0$i$i2$i$i123 = $81;
   } else {
    $82 = HEAP32[$74>>2]|0;
    $$0$i$i2$i$i123 = $82;
   }
   $83 = ($$0$i$i2$i$i123|0)==(-1);
   if ($83) {
    HEAP32[$1>>2] = 0;
    label = 41;
    break;
   } else {
    if ($163) {
     $$0112 = $2;$$3 = $$0111;
     break;
    } else {
     label = 77;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 41) {
  if ($163) {
   label = 77;
  } else {
   $$0112 = $2;$$3 = $$0111;
  }
 }
 if ((label|0) == 77) {
  $154 = HEAP32[$5>>2]|0;
  $155 = $154 | 2;
  HEAP32[$5>>2] = $155;
  $$0112 = $2;$$3 = $$0111;
 }
 while(1) {
  $156 = ($$0112|0)==($3|0);
  if ($156) {
   label = 81;
   break;
  }
  $157 = HEAP8[$$3>>0]|0;
  $158 = ($157<<24>>24)==(2);
  if ($158) {
   $$0112144 = $$0112;
   break;
  }
  $159 = ((($$0112)) + 12|0);
  $160 = ((($$3)) + 1|0);
  $$0112 = $159;$$3 = $160;
 }
 if ((label|0) == 81) {
  $161 = HEAP32[$5>>2]|0;
  $162 = $161 | 4;
  HEAP32[$5>>2] = $162;
  $$0112144 = $3;
 }
 _free($$sroa$0130$0);
 STACKTOP = sp;return ($$0112144|0);
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$pr = 0, $$pr$pre = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$09$0 = 0, $$sroa$09$0$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $5 = sp;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  HEAP32[$5>>2] = $13;
  $14 = $4&1;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
  $15 = (FUNCTION_TABLE_iiiiii[$12 & 31]($0,$$byval_copy,$2,$3,$14)|0);
  $$sroa$0$0 = $15;
 } else {
  $16 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
  HEAP32[$$byval_copy>>2] = $16;
  $17 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy,38424)|0);
  (__ZNSt3__214__shared_count16__release_sharedEv($16)|0);
  $18 = HEAP32[$17>>2]|0;
  if ($4) {
   $19 = ((($18)) + 24|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_vii[$20 & 127]($$byval_copy,$17);
  } else {
   $21 = ((($18)) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   FUNCTION_TABLE_vii[$22 & 127]($$byval_copy,$17);
  }
  $23 = ((($$byval_copy)) + 11|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)<(0);
  if ($25) {
   $26 = HEAP32[$$byval_copy>>2]|0;
   $$pr = $24;$$sroa$09$0$ph = $26;
   label = 8;
  } else {
   $$sroa$09$0 = $$byval_copy;$28 = $24;
  }
  while(1) {
   if ((label|0) == 8) {
    label = 0;
    $$sroa$09$0 = $$sroa$09$0$ph;$28 = $$pr;
   }
   $27 = ($28<<24>>24)<(0);
   $29 = HEAP32[$$byval_copy>>2]|0;
   $30 = ((($$byval_copy)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $28&255;
   $33 = $27 ? $29 : $$byval_copy;
   $34 = $27 ? $31 : $32;
   $35 = (($33) + ($34)|0);
   $36 = ($$sroa$09$0|0)==($35|0);
   if ($36) {
    break;
   }
   $37 = HEAP8[$$sroa$09$0>>0]|0;
   $38 = HEAP32[$1>>2]|0;
   $39 = ($38|0)==(0|0);
   do {
    if (!($39)) {
     $40 = ((($38)) + 24|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($38)) + 28|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($41|0)==($43|0);
     if (!($44)) {
      $45 = ((($41)) + 1|0);
      HEAP32[$40>>2] = $45;
      HEAP8[$41>>0] = $37;
      break;
     }
     $46 = HEAP32[$38>>2]|0;
     $47 = ((($46)) + 52|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $37&255;
     $50 = (FUNCTION_TABLE_iii[$48 & 31]($38,$49)|0);
     $51 = ($50|0)==(-1);
     if ($51) {
      HEAP32[$1>>2] = 0;
     }
    }
   } while(0);
   $52 = ((($$sroa$09$0)) + 1|0);
   $$pr$pre = HEAP8[$23>>0]|0;
   $$pr = $$pr$pre;$$sroa$09$0$ph = $52;
   label = 8;
  }
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
  $$sroa$0$0 = $$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp;
 $5 = sp + 52|0;
 $6 = sp + 39|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[28737>>0]|0;HEAP8[$5+1>>0]=HEAP8[28737+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[28737+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[28737+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[28737+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[28737+5>>0]|0;
 $11 = ((($5)) + 1|0);
 $12 = ((($2)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($11,28743,1,$13);
 $14 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $15 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,13,$14,$5,$$byval_copy)|0);
 $16 = (($6) + ($15)|0);
 $17 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$16,$2)|0);
 $18 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $18;
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$17,$16,$7,$8,$9,$$byval_copy);
 $19 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$1>>2]|0;
 HEAP32[$10>>2] = $20;
 $21 = HEAP32[$8>>2]|0;
 $22 = HEAP32[$9>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;
 $23 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$21,$22,$2,$3)|0);
 STACKTOP = sp;return ($23|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 8|0;
 $6 = sp;
 $7 = sp + 71|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 20|0;
 $12 = $6;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($6)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($16,28734,1,$18);
 $19 = (__ZNSt3__26__clocEv()|0);
 $20 = $$byval_copy;
 $21 = $20;
 HEAP32[$21>>2] = $4;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $5;
 $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$19,$6,$$byval_copy)|0);
 $25 = (($7) + ($24)|0);
 $26 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$25,$2)|0);
 $27 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $27;
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($7,$26,$25,$8,$9,$10,$$byval_copy);
 $28 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($28)|0);
 $29 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $29;
 $30 = HEAP32[$9>>2]|0;
 $31 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $32 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$30,$31,$2,$3)|0);
 STACKTOP = sp;return ($32|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp;
 $5 = sp + 52|0;
 $6 = sp + 40|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[28737>>0]|0;HEAP8[$5+1>>0]=HEAP8[28737+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[28737+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[28737+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[28737+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[28737+5>>0]|0;
 $11 = ((($5)) + 1|0);
 $12 = ((($2)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($11,28743,0,$13);
 $14 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $15 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,12,$14,$5,$$byval_copy)|0);
 $16 = (($6) + ($15)|0);
 $17 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$16,$2)|0);
 $18 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $18;
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$17,$16,$7,$8,$9,$$byval_copy);
 $19 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$1>>2]|0;
 HEAP32[$10>>2] = $20;
 $21 = HEAP32[$8>>2]|0;
 $22 = HEAP32[$9>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;
 $23 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$21,$22,$2,$3)|0);
 STACKTOP = sp;return ($23|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 8|0;
 $6 = sp;
 $7 = sp + 71|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 20|0;
 $12 = $6;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($6)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($16,28734,0,$18);
 $19 = (__ZNSt3__26__clocEv()|0);
 $20 = $$byval_copy;
 $21 = $20;
 HEAP32[$21>>2] = $4;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $5;
 $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$19,$6,$$byval_copy)|0);
 $25 = (($7) + ($24)|0);
 $26 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$25,$2)|0);
 $27 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $27;
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($7,$26,$25,$8,$9,$10,$$byval_copy);
 $28 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($28)|0);
 $29 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $29;
 $30 = HEAP32[$9>>2]|0;
 $31 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $32 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$30,$31,$2,$3)|0);
 STACKTOP = sp;return ($32|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$pre54 = 0, $$pre55 = 0, $$sroa$041$0 = 0, $$sroa$048$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 72|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 134|0;
 $7 = sp + 68|0;
 $8 = sp + 76|0;
 $9 = sp + 64|0;
 $10 = sp + 60|0;
 $11 = sp + 56|0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($5)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($16,43760,$18)|0);
 HEAP32[$7>>2] = $6;
 $20 = (__ZNSt3__26__clocEv()|0);
 if ($19) {
  $21 = ((($2)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $23 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer)|0);
  $$0 = $23;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer2)|0);
  $$0 = $24;
 }
 $25 = ($$0|0)>(29);
 if ($25) {
  $26 = (__ZNSt3__26__clocEv()|0);
  if ($19) {
   $27 = ((($2)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $28;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $29 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$26,$5,$vararg_buffer5)|0);
   $$1 = $29;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$26,$5,$vararg_buffer9)|0);
   $$1 = $30;
  }
  $31 = HEAP32[$7>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $$pre = HEAP32[$7>>2]|0;
   $$2 = $$1;$$sroa$048$0 = $$pre;$34 = $$pre;
  } else {
   $$2 = $$1;$$sroa$048$0 = $31;$34 = $31;
  }
 } else {
  $$pre54 = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$048$0 = 0;$34 = $$pre54;
 }
 $33 = (($34) + ($$2)|0);
 $35 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($34,$33,$2)|0);
 $36 = ($34|0)==($6|0);
 if ($36) {
  $$037 = $8;$$sroa$041$0 = 0;$41 = $6;
 } else {
  $37 = $$2 << 1;
  $38 = (_malloc($37)|0);
  $39 = ($38|0)==(0|0);
  if ($39) {
   $$pre55 = HEAP32[$7>>2]|0;
   $$037 = 0;$$sroa$041$0 = 0;$41 = $$pre55;
  } else {
   $$037 = $38;$$sroa$041$0 = $38;$41 = $34;
  }
 }
 $40 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $40;
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($41,$35,$33,$$037,$9,$10,$$byval_copy);
 $42 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($42)|0);
 $43 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $43;
 $44 = HEAP32[$9>>2]|0;
 $45 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $46 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$44,$45,$2,$3)|0);
 _free($$sroa$041$0);
 _free($$sroa$048$0);
 STACKTOP = sp;return ($46|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$pre54 = 0, $$pre55 = 0, $$sroa$041$0 = 0, $$sroa$048$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 72|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 134|0;
 $7 = sp + 68|0;
 $8 = sp + 76|0;
 $9 = sp + 64|0;
 $10 = sp + 60|0;
 $11 = sp + 56|0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($5)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($16,28732,$18)|0);
 HEAP32[$7>>2] = $6;
 $20 = (__ZNSt3__26__clocEv()|0);
 if ($19) {
  $21 = ((($2)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $23 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer)|0);
  $$0 = $23;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer2)|0);
  $$0 = $24;
 }
 $25 = ($$0|0)>(29);
 if ($25) {
  $26 = (__ZNSt3__26__clocEv()|0);
  if ($19) {
   $27 = ((($2)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $28;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $29 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$26,$5,$vararg_buffer5)|0);
   $$1 = $29;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$26,$5,$vararg_buffer9)|0);
   $$1 = $30;
  }
  $31 = HEAP32[$7>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $$pre = HEAP32[$7>>2]|0;
   $$2 = $$1;$$sroa$048$0 = $$pre;$34 = $$pre;
  } else {
   $$2 = $$1;$$sroa$048$0 = $31;$34 = $31;
  }
 } else {
  $$pre54 = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$048$0 = 0;$34 = $$pre54;
 }
 $33 = (($34) + ($$2)|0);
 $35 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($34,$33,$2)|0);
 $36 = ($34|0)==($6|0);
 if ($36) {
  $$037 = $8;$$sroa$041$0 = 0;$41 = $6;
 } else {
  $37 = $$2 << 1;
  $38 = (_malloc($37)|0);
  $39 = ($38|0)==(0|0);
  if ($39) {
   $$pre55 = HEAP32[$7>>2]|0;
   $$037 = 0;$$sroa$041$0 = 0;$41 = $$pre55;
  } else {
   $$037 = $38;$$sroa$041$0 = $38;$41 = $34;
  }
 }
 $40 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $40;
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($41,$35,$33,$$037,$9,$10,$$byval_copy);
 $42 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($42)|0);
 $43 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $43;
 $44 = HEAP32[$9>>2]|0;
 $45 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $46 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$44,$45,$2,$3)|0);
 _free($$sroa$041$0);
 _free($$sroa$048$0);
 STACKTOP = sp;return ($46|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp;
 $5 = sp + 68|0;
 $6 = sp + 48|0;
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[28726>>0]|0;HEAP8[$5+1>>0]=HEAP8[28726+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[28726+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[28726+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[28726+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[28726+5>>0]|0;
 $9 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $10 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,20,$9,$5,$$byval_copy)|0);
 $11 = (($6) + ($10)|0);
 $12 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$11,$2)|0);
 $13 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $13;
 $14 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy,38408)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($13)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_iiiii[$17 & 7]($14,$6,$11,$7)|0);
 $18 = (($7) + ($10)|0);
 $19 = ($12|0)==($11|0);
 $20 = $6;
 $21 = $12;
 $22 = (($21) - ($20))|0;
 $23 = (($7) + ($22)|0);
 $$0 = $19 ? $18 : $23;
 $24 = HEAP32[$1>>2]|0;
 HEAP32[$8>>2] = $24;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
 $25 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$18,$2,$3)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($0,$1,$2,$3,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $varargs = $varargs|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 HEAP32[$4>>2] = $varargs;
 $5 = (_uselocale($2)|0);
 $6 = (_vsnprintf($0,$1,$3,$4)|0);
 $7 = ($5|0)==(0|0);
 if (!($7)) {
  (_uselocale($5)|0);
 }
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 176;
 $trunc = $5&255;
 L1: do {
  switch ($trunc<<24>>24) {
  case 16:  {
   $6 = HEAP8[$0>>0]|0;
   switch ($6<<24>>24) {
   case 43: case 45:  {
    $7 = ((($0)) + 1|0);
    $$0 = $7;
    break L1;
    break;
   }
   default: {
   }
   }
   $8 = $1;
   $9 = $0;
   $10 = (($8) - ($9))|0;
   $11 = ($10|0)>(1);
   $12 = ($6<<24>>24)==(48);
   $or$cond = $11 & $12;
   if ($or$cond) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    switch ($14<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $15 = ((($0)) + 2|0);
    $$0 = $15;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $$0 = $1;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $0;
 }
 return ($$0|0);
}
function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$022 = 0, $$023$off0$ph = 0, $$1 = 0, $$2 = 0, $$2$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 & 2048;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = $0;
 } else {
  $5 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $5;
 }
 $6 = $2 & 1024;
 $7 = ($6|0)==(0);
 if ($7) {
  $$1 = $$0;
 } else {
  $8 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $8;
 }
 $9 = $2 & 260;
 $10 = $2 >>> 14;
 $11 = ($9|0)==(260);
 if ($11) {
  $$023$off0$ph = 0;$$2$ph = $$1;
 } else {
  $12 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $13 = ((($$1)) + 2|0);
  HEAP8[$12>>0] = 42;
  $$023$off0$ph = 1;$$2$ph = $13;
 }
 $$022 = $1;$$2 = $$2$ph;
 while(1) {
  $14 = HEAP8[$$022>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   break;
  }
  $16 = ((($$022)) + 1|0);
  $17 = ((($$2)) + 1|0);
  HEAP8[$$2>>0] = $14;
  $$022 = $16;$$2 = $17;
 }
 $trunc = $9&65535;
 $trunc$clear = $trunc & 511;
 L14: do {
  switch ($trunc$clear<<16>>16) {
  case 4:  {
   $18 = $10 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2>>0] = 102;
    break L14;
   } else {
    HEAP8[$$2>>0] = 70;
    break L14;
   }
   break;
  }
  case 256:  {
   $20 = $10 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2>>0] = 101;
    break L14;
   } else {
    HEAP8[$$2>>0] = 69;
    break L14;
   }
   break;
  }
  default: {
   $22 = $10 & 1;
   $23 = ($22|0)!=(0);
   if ($11) {
    if ($23) {
     HEAP8[$$2>>0] = 65;
     break L14;
    } else {
     HEAP8[$$2>>0] = 97;
     break L14;
    }
   } else {
    if ($23) {
     HEAP8[$$2>>0] = 71;
     break L14;
    } else {
     HEAP8[$$2>>0] = 103;
     break L14;
    }
   }
  }
  }
 } while(0);
 return ($$023$off0$ph|0);
}
function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_uselocale($1)|0);
 $5 = (_vasprintf($0,$2,$3)|0);
 $6 = ($4|0)==(0|0);
 if (!($6)) {
  (_uselocale($4)|0);
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$099 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0100 = 0, $$0102 = 0, $$0104 = 0, $$07$i$i = 0, $$07$i$i107 = 0, $$099 = 0, $$1 = 0, $$1101 = 0, $$1103 = 0, $$1105 = 0, $$2 = 0, $$2106 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,38408)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,38424)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 127]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 switch ($13<<24>>24) {
 case 43: case 45:  {
  $14 = ((($0)) + 1|0);
  $15 = HEAP32[$8>>2]|0;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$17 & 31]($8,$13)|0);
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 1|0);
  HEAP32[$5>>2] = $20;
  HEAP8[$19>>0] = $18;
  $$0102 = $14;
  break;
 }
 default: {
  $$0102 = $0;
 }
 }
 $21 = $2;
 $22 = $$0102;
 $23 = (($21) - ($22))|0;
 $24 = ($23|0)>(1);
 L4: do {
  if ($24) {
   $25 = HEAP8[$$0102>>0]|0;
   $26 = ($25<<24>>24)==(48);
   if ($26) {
    $27 = ((($$0102)) + 1|0);
    $28 = HEAP8[$27>>0]|0;
    switch ($28<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     $$1105 = $$0102;
     label = 10;
     break L4;
    }
    }
    $29 = HEAP32[$8>>2]|0;
    $30 = ((($29)) + 28|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (FUNCTION_TABLE_iii[$31 & 31]($8,48)|0);
    $33 = HEAP32[$5>>2]|0;
    $34 = ((($33)) + 1|0);
    HEAP32[$5>>2] = $34;
    HEAP8[$33>>0] = $32;
    $35 = ((($$0102)) + 2|0);
    $36 = HEAP8[$27>>0]|0;
    $37 = HEAP32[$8>>2]|0;
    $38 = ((($37)) + 28|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 31]($8,$36)|0);
    $41 = HEAP32[$5>>2]|0;
    $42 = ((($41)) + 1|0);
    HEAP32[$5>>2] = $42;
    HEAP8[$41>>0] = $40;
    $$0104 = $35;
    while(1) {
     $43 = ($$0104>>>0)<($2>>>0);
     if (!($43)) {
      $$1103 = $35;$$2106 = $$0104;
      break L4;
     }
     $44 = HEAP8[$$0104>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = (__ZNSt3__26__clocEv()|0);
     $47 = (_isxdigit_l($45,$46)|0);
     $48 = ($47|0)==(0);
     if ($48) {
      $$1103 = $35;$$2106 = $$0104;
      break L4;
     }
     $49 = ((($$0104)) + 1|0);
     $$0104 = $49;
    }
   } else {
    $$1105 = $$0102;
    label = 10;
   }
  } else {
   $$1105 = $$0102;
   label = 10;
  }
 } while(0);
 L12: do {
  if ((label|0) == 10) {
   while(1) {
    label = 0;
    $50 = ($$1105>>>0)<($2>>>0);
    if (!($50)) {
     $$1103 = $$0102;$$2106 = $$1105;
     break L12;
    }
    $51 = HEAP8[$$1105>>0]|0;
    $52 = $51 << 24 >> 24;
    $53 = (__ZNSt3__26__clocEv()|0);
    $54 = (_isdigit_l($52,$53)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     $$1103 = $$0102;$$2106 = $$1105;
     break L12;
    }
    $56 = ((($$1105)) + 1|0);
    $$1105 = $56;
    label = 10;
   }
  }
 } while(0);
 $57 = ((($7)) + 11|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = ($58<<24>>24)<(0);
 $60 = ((($7)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $58&255;
 $63 = $59 ? $61 : $62;
 $64 = ($63|0)==(0);
 L18: do {
  if ($64) {
   $65 = HEAP32[$5>>2]|0;
   $66 = HEAP32[$8>>2]|0;
   $67 = ((($66)) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   (FUNCTION_TABLE_iiiii[$68 & 7]($8,$$1103,$$2106,$65)|0);
   $69 = $$2106;
   $70 = $$1103;
   $71 = (($69) - ($70))|0;
   $72 = HEAP32[$5>>2]|0;
   $73 = (($72) + ($71)|0);
   HEAP32[$5>>2] = $73;
   $$pre$phiZ2D = $8;
  } else {
   $74 = ($$1103|0)==($$2106|0);
   L21: do {
    if (!($74)) {
     $$0$i$i = $$2106;$$07$i$i = $$1103;
     while(1) {
      $75 = ((($$0$i$i)) + -1|0);
      $76 = ($$07$i$i>>>0)<($75>>>0);
      if (!($76)) {
       break L21;
      }
      $77 = HEAP8[$$07$i$i>>0]|0;
      $78 = HEAP8[$75>>0]|0;
      HEAP8[$$07$i$i>>0] = $78;
      HEAP8[$75>>0] = $77;
      $79 = ((($$07$i$i)) + 1|0);
      $$0$i$i = $75;$$07$i$i = $79;
     }
    }
   } while(0);
   $80 = HEAP32[$9>>2]|0;
   $81 = ((($80)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (FUNCTION_TABLE_ii[$82 & 127]($9)|0);
   $$0 = $$1103;$$0100 = 0;$$099 = 0;
   while(1) {
    $84 = ($$0>>>0)<($$2106>>>0);
    if (!($84)) {
     break;
    }
    $96 = HEAP8[$57>>0]|0;
    $97 = ($96<<24>>24)<(0);
    $98 = HEAP32[$7>>2]|0;
    $99 = $97 ? $98 : $7;
    $100 = (($99) + ($$099)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = ($101<<24>>24)>(0);
    $103 = $101 << 24 >> 24;
    $104 = ($$0100|0)==($103|0);
    $or$cond = $102 & $104;
    if ($or$cond) {
     $105 = HEAP32[$5>>2]|0;
     $106 = ((($105)) + 1|0);
     HEAP32[$5>>2] = $106;
     HEAP8[$105>>0] = $83;
     $107 = HEAP8[$57>>0]|0;
     $108 = ($107<<24>>24)<(0);
     $109 = HEAP32[$60>>2]|0;
     $110 = $107&255;
     $111 = $108 ? $109 : $110;
     $112 = (($111) + -1)|0;
     $113 = ($$099>>>0)<($112>>>0);
     $114 = $113&1;
     $$$099 = (($114) + ($$099))|0;
     $$1 = $$$099;$$1101 = 0;
    } else {
     $$1 = $$099;$$1101 = $$0100;
    }
    $115 = HEAP8[$$0>>0]|0;
    $116 = HEAP32[$8>>2]|0;
    $117 = ((($116)) + 28|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (FUNCTION_TABLE_iii[$118 & 31]($8,$115)|0);
    $120 = HEAP32[$5>>2]|0;
    $121 = ((($120)) + 1|0);
    HEAP32[$5>>2] = $121;
    HEAP8[$120>>0] = $119;
    $122 = (($$1101) + 1)|0;
    $123 = ((($$0)) + 1|0);
    $$0 = $123;$$0100 = $122;$$099 = $$1;
   }
   $85 = $$1103;
   $86 = $0;
   $87 = (($85) - ($86))|0;
   $88 = (($3) + ($87)|0);
   $89 = HEAP32[$5>>2]|0;
   $90 = ($88|0)==($89|0);
   if ($90) {
    $$pre$phiZ2D = $8;
   } else {
    $$0$i$i108 = $89;$$07$i$i107 = $88;
    while(1) {
     $91 = ((($$0$i$i108)) + -1|0);
     $92 = ($$07$i$i107>>>0)<($91>>>0);
     if (!($92)) {
      $$pre$phiZ2D = $8;
      break L18;
     }
     $93 = HEAP8[$$07$i$i107>>0]|0;
     $94 = HEAP8[$91>>0]|0;
     HEAP8[$$07$i$i107>>0] = $94;
     HEAP8[$91>>0] = $93;
     $95 = ((($$07$i$i107)) + 1|0);
     $$0$i$i108 = $91;$$07$i$i107 = $95;
    }
   }
  }
 } while(0);
 $$2 = $$2106;
 while(1) {
  $124 = ($$2>>>0)<($2>>>0);
  if (!($124)) {
   $$3 = $$2;
   break;
  }
  $125 = HEAP8[$$2>>0]|0;
  $126 = ($125<<24>>24)==(46);
  if ($126) {
   label = 29;
   break;
  }
  $134 = HEAP32[$$pre$phiZ2D>>2]|0;
  $135 = ((($134)) + 28|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (FUNCTION_TABLE_iii[$136 & 31]($8,$125)|0);
  $138 = HEAP32[$5>>2]|0;
  $139 = ((($138)) + 1|0);
  HEAP32[$5>>2] = $139;
  HEAP8[$138>>0] = $137;
  $140 = ((($$2)) + 1|0);
  $$2 = $140;
 }
 if ((label|0) == 29) {
  $127 = HEAP32[$9>>2]|0;
  $128 = ((($127)) + 12|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 127]($9)|0);
  $131 = HEAP32[$5>>2]|0;
  $132 = ((($131)) + 1|0);
  HEAP32[$5>>2] = $132;
  HEAP8[$131>>0] = $130;
  $133 = ((($$2)) + 1|0);
  $$3 = $133;
 }
 $141 = HEAP32[$5>>2]|0;
 $142 = HEAP32[$8>>2]|0;
 $143 = ((($142)) + 32|0);
 $144 = HEAP32[$143>>2]|0;
 (FUNCTION_TABLE_iiiii[$144 & 7]($8,$$3,$2,$141)|0);
 $145 = $$3;
 $146 = (($21) - ($145))|0;
 $147 = HEAP32[$5>>2]|0;
 $148 = (($147) + ($146)|0);
 HEAP32[$5>>2] = $148;
 $149 = ($1|0)==($2|0);
 $150 = $1;
 $151 = $0;
 $152 = (($150) - ($151))|0;
 $153 = (($3) + ($152)|0);
 $storemerge = $149 ? $148 : $153;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$013 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 & 2048;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = $0;
 } else {
  $6 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $6;
 }
 $7 = $3 & 512;
 $8 = ($7|0)==(0);
 if ($8) {
  $$013 = $1;$$1 = $$0;
 } else {
  $9 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$013 = $1;$$1 = $9;
 }
 while(1) {
  $10 = HEAP8[$$013>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   break;
  }
  $12 = ((($$013)) + 1|0);
  $13 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = $10;
  $$013 = $12;$$1 = $13;
 }
 $14 = $3 & 74;
 $trunc = $14&255;
 $trunc$clear = $trunc & 127;
 L10: do {
  switch ($trunc$clear<<24>>24) {
  case 64:  {
   HEAP8[$$1>>0] = 111;
   break;
  }
  case 8:  {
   $15 = $3 & 16384;
   $16 = ($15|0)==(0);
   if ($16) {
    HEAP8[$$1>>0] = 120;
    break L10;
   } else {
    HEAP8[$$1>>0] = 88;
    break L10;
   }
   break;
  }
  default: {
   if ($2) {
    HEAP8[$$1>>0] = 100;
    break L10;
   } else {
    HEAP8[$$1>>0] = 117;
    break L10;
   }
  }
  }
 } while(0);
 return;
}
function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$070 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i77 = 0, $$07$i$i = 0, $$07$i$i76 = 0, $$070 = 0, $$071 = 0, $$073 = 0, $$1 = 0, $$172 = 0, $$174 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,38408)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,38424)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 127]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  (FUNCTION_TABLE_iiiii[$23 & 7]($8,$0,$2,$3)|0);
  $24 = $2;
  $25 = $0;
  $26 = (($24) - ($25))|0;
  $27 = (($3) + ($26)|0);
  HEAP32[$5>>2] = $27;
  $$pre$phiZ2D = $25;$112 = $27;
 } else {
  HEAP32[$5>>2] = $3;
  $28 = HEAP8[$0>>0]|0;
  switch ($28<<24>>24) {
  case 43: case 45:  {
   $29 = ((($0)) + 1|0);
   $30 = HEAP32[$8>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (FUNCTION_TABLE_iii[$32 & 31]($8,$28)|0);
   $34 = HEAP32[$5>>2]|0;
   $35 = ((($34)) + 1|0);
   HEAP32[$5>>2] = $35;
   HEAP8[$34>>0] = $33;
   $$073 = $29;
   break;
  }
  default: {
   $$073 = $0;
  }
  }
  $36 = $2;
  $37 = $$073;
  $38 = (($36) - ($37))|0;
  $39 = ($38|0)>(1);
  L7: do {
   if ($39) {
    $40 = HEAP8[$$073>>0]|0;
    $41 = ($40<<24>>24)==(48);
    if ($41) {
     $42 = ((($$073)) + 1|0);
     $43 = HEAP8[$42>>0]|0;
     switch ($43<<24>>24) {
     case 88: case 120:  {
      break;
     }
     default: {
      $$174 = $$073;
      break L7;
     }
     }
     $44 = HEAP32[$8>>2]|0;
     $45 = ((($44)) + 28|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (FUNCTION_TABLE_iii[$46 & 31]($8,48)|0);
     $48 = HEAP32[$5>>2]|0;
     $49 = ((($48)) + 1|0);
     HEAP32[$5>>2] = $49;
     HEAP8[$48>>0] = $47;
     $50 = ((($$073)) + 2|0);
     $51 = HEAP8[$42>>0]|0;
     $52 = HEAP32[$8>>2]|0;
     $53 = ((($52)) + 28|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_iii[$54 & 31]($8,$51)|0);
     $56 = HEAP32[$5>>2]|0;
     $57 = ((($56)) + 1|0);
     HEAP32[$5>>2] = $57;
     HEAP8[$56>>0] = $55;
     $$174 = $50;
    } else {
     $$174 = $$073;
    }
   } else {
    $$174 = $$073;
   }
  } while(0);
  $58 = ($$174|0)==($2|0);
  L12: do {
   if (!($58)) {
    $$0$i$i = $2;$$07$i$i = $$174;
    while(1) {
     $59 = ((($$0$i$i)) + -1|0);
     $60 = ($$07$i$i>>>0)<($59>>>0);
     if (!($60)) {
      break L12;
     }
     $61 = HEAP8[$$07$i$i>>0]|0;
     $62 = HEAP8[$59>>0]|0;
     HEAP8[$$07$i$i>>0] = $62;
     HEAP8[$59>>0] = $61;
     $63 = ((($$07$i$i)) + 1|0);
     $$0$i$i = $59;$$07$i$i = $63;
    }
   }
  } while(0);
  $64 = HEAP32[$9>>2]|0;
  $65 = ((($64)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (FUNCTION_TABLE_ii[$66 & 127]($9)|0);
  $$0 = $$174;$$070 = 0;$$071 = 0;
  while(1) {
   $68 = ($$0>>>0)<($2>>>0);
   if (!($68)) {
    break;
   }
   $80 = HEAP8[$13>>0]|0;
   $81 = ($80<<24>>24)<(0);
   $82 = HEAP32[$7>>2]|0;
   $83 = $81 ? $82 : $7;
   $84 = (($83) + ($$070)|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = ($85<<24>>24)!=(0);
   $87 = $85 << 24 >> 24;
   $88 = ($$071|0)==($87|0);
   $or$cond = $86 & $88;
   if ($or$cond) {
    $89 = HEAP32[$5>>2]|0;
    $90 = ((($89)) + 1|0);
    HEAP32[$5>>2] = $90;
    HEAP8[$89>>0] = $67;
    $91 = HEAP8[$13>>0]|0;
    $92 = ($91<<24>>24)<(0);
    $93 = HEAP32[$16>>2]|0;
    $94 = $91&255;
    $95 = $92 ? $93 : $94;
    $96 = (($95) + -1)|0;
    $97 = ($$070>>>0)<($96>>>0);
    $98 = $97&1;
    $$$070 = (($98) + ($$070))|0;
    $$1 = $$$070;$$172 = 0;
   } else {
    $$1 = $$070;$$172 = $$071;
   }
   $99 = HEAP8[$$0>>0]|0;
   $100 = HEAP32[$8>>2]|0;
   $101 = ((($100)) + 28|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (FUNCTION_TABLE_iii[$102 & 31]($8,$99)|0);
   $104 = HEAP32[$5>>2]|0;
   $105 = ((($104)) + 1|0);
   HEAP32[$5>>2] = $105;
   HEAP8[$104>>0] = $103;
   $106 = (($$172) + 1)|0;
   $107 = ((($$0)) + 1|0);
   $$0 = $107;$$070 = $$1;$$071 = $106;
  }
  $69 = $$174;
  $70 = $0;
  $71 = (($69) - ($70))|0;
  $72 = (($3) + ($71)|0);
  $73 = HEAP32[$5>>2]|0;
  $74 = ($72|0)==($73|0);
  if ($74) {
   $$pre$phiZ2D = $70;$112 = $72;
  } else {
   $$0$i$i77 = $73;$$07$i$i76 = $72;
   while(1) {
    $75 = ((($$0$i$i77)) + -1|0);
    $76 = ($$07$i$i76>>>0)<($75>>>0);
    if (!($76)) {
     break;
    }
    $77 = HEAP8[$$07$i$i76>>0]|0;
    $78 = HEAP8[$75>>0]|0;
    HEAP8[$$07$i$i76>>0] = $78;
    HEAP8[$75>>0] = $77;
    $79 = ((($$07$i$i76)) + 1|0);
    $$0$i$i77 = $75;$$07$i$i76 = $79;
   }
   $$pre = HEAP32[$5>>2]|0;
   $$pre$phiZ2D = $70;$112 = $$pre;
  }
 }
 $108 = ($1|0)==($2|0);
 $109 = $1;
 $110 = (($109) - ($$pre$phiZ2D))|0;
 $111 = (($3) + ($110)|0);
 $storemerge = $108 ? $112 : $111;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$byval_copy = 0, $$pre = 0, $$pre13 = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$09$0 = 0, $$sroa$09$0$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $5 = sp;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  HEAP32[$5>>2] = $13;
  $14 = $4&1;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
  $15 = (FUNCTION_TABLE_iiiiii[$12 & 31]($0,$$byval_copy,$2,$3,$14)|0);
  $$sroa$0$0 = $15;
 } else {
  $16 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
  HEAP32[$$byval_copy>>2] = $16;
  $17 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy,38448)|0);
  (__ZNSt3__214__shared_count16__release_sharedEv($16)|0);
  $18 = HEAP32[$17>>2]|0;
  if ($4) {
   $19 = ((($18)) + 24|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_vii[$20 & 127]($$byval_copy,$17);
  } else {
   $21 = ((($18)) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   FUNCTION_TABLE_vii[$22 & 127]($$byval_copy,$17);
  }
  $23 = ((($$byval_copy)) + 8|0);
  $24 = ((($23)) + 3|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)<(0);
  $27 = HEAP32[$$byval_copy>>2]|0;
  $$sroa$09$0$ph = $26 ? $27 : $$byval_copy;
  $28 = ((($$byval_copy)) + 4|0);
  $$sroa$09$0 = $$sroa$09$0$ph;$30 = $25;$34 = $27;
  while(1) {
   $29 = ($30<<24>>24)<(0);
   $31 = HEAP32[$28>>2]|0;
   $32 = $30&255;
   $33 = $29 ? $34 : $$byval_copy;
   $35 = $29 ? $31 : $32;
   $36 = (($33) + ($35<<2)|0);
   $37 = ($$sroa$09$0|0)==($36|0);
   if ($37) {
    break;
   }
   $38 = HEAP32[$$sroa$09$0>>2]|0;
   $39 = HEAP32[$1>>2]|0;
   $40 = ($39|0)==(0|0);
   if (!($40)) {
    $41 = ((($39)) + 24|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($39)) + 28|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($42|0)==($44|0);
    if ($45) {
     $46 = HEAP32[$39>>2]|0;
     $47 = ((($46)) + 52|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (FUNCTION_TABLE_iii[$48 & 31]($39,$38)|0);
     $$0$i$i = $49;
    } else {
     $50 = ((($42)) + 4|0);
     HEAP32[$41>>2] = $50;
     HEAP32[$42>>2] = $38;
     $$0$i$i = $38;
    }
    $51 = ($$0$i$i|0)==(-1);
    if ($51) {
     HEAP32[$1>>2] = 0;
    }
   }
   $52 = ((($$sroa$09$0)) + 4|0);
   $$pre = HEAP8[$24>>0]|0;
   $$pre13 = HEAP32[$$byval_copy>>2]|0;
   $$sroa$09$0 = $52;$30 = $$pre;$34 = $$pre13;
  }
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
  $$sroa$0$0 = $$sroa$0$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp;
 $5 = sp + 122|0;
 $6 = sp + 108|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[28737>>0]|0;HEAP8[$5+1>>0]=HEAP8[28737+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[28737+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[28737+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[28737+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[28737+5>>0]|0;
 $11 = ((($5)) + 1|0);
 $12 = ((($2)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($11,28743,1,$13);
 $14 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $15 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,13,$14,$5,$$byval_copy)|0);
 $16 = (($6) + ($15)|0);
 $17 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$16,$2)|0);
 $18 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $18;
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$17,$16,$7,$8,$9,$$byval_copy);
 $19 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$1>>2]|0;
 HEAP32[$10>>2] = $20;
 $21 = HEAP32[$8>>2]|0;
 $22 = HEAP32[$9>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;
 $23 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$21,$22,$2,$3)|0);
 STACKTOP = sp;return ($23|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $$byval_copy = sp + 8|0;
 $6 = sp;
 $7 = sp + 200|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 20|0;
 $12 = $6;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($6)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($16,28734,1,$18);
 $19 = (__ZNSt3__26__clocEv()|0);
 $20 = $$byval_copy;
 $21 = $20;
 HEAP32[$21>>2] = $4;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $5;
 $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$19,$6,$$byval_copy)|0);
 $25 = (($7) + ($24)|0);
 $26 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$25,$2)|0);
 $27 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $27;
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($7,$26,$25,$8,$9,$10,$$byval_copy);
 $28 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($28)|0);
 $29 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $29;
 $30 = HEAP32[$9>>2]|0;
 $31 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $32 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$30,$31,$2,$3)|0);
 STACKTOP = sp;return ($32|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp;
 $5 = sp + 112|0;
 $6 = sp + 100|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[28737>>0]|0;HEAP8[$5+1>>0]=HEAP8[28737+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[28737+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[28737+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[28737+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[28737+5>>0]|0;
 $11 = ((($5)) + 1|0);
 $12 = ((($2)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($11,28743,0,$13);
 $14 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $15 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,12,$14,$5,$$byval_copy)|0);
 $16 = (($6) + ($15)|0);
 $17 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$16,$2)|0);
 $18 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $18;
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$17,$16,$7,$8,$9,$$byval_copy);
 $19 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$1>>2]|0;
 HEAP32[$10>>2] = $20;
 $21 = HEAP32[$8>>2]|0;
 $22 = HEAP32[$9>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;
 $23 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$21,$22,$2,$3)|0);
 STACKTOP = sp;return ($23|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $$byval_copy = sp + 8|0;
 $6 = sp;
 $7 = sp + 200|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 20|0;
 $12 = $6;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($6)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($16,28734,0,$18);
 $19 = (__ZNSt3__26__clocEv()|0);
 $20 = $$byval_copy;
 $21 = $20;
 HEAP32[$21>>2] = $4;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $5;
 $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$19,$6,$$byval_copy)|0);
 $25 = (($7) + ($24)|0);
 $26 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$25,$2)|0);
 $27 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $27;
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($7,$26,$25,$8,$9,$10,$$byval_copy);
 $28 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($28)|0);
 $29 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $29;
 $30 = HEAP32[$9>>2]|0;
 $31 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $32 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$30,$31,$2,$3)|0);
 STACKTOP = sp;return ($32|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$pre53 = 0, $$pre54$pre = 0, $$sroa$039$0 = 0, $$sroa$046$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy = sp + 300|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 304|0;
 $7 = sp + 296|0;
 $8 = sp + 68|0;
 $9 = sp + 64|0;
 $10 = sp + 60|0;
 $11 = sp + 56|0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($5)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($16,43760,$18)|0);
 HEAP32[$7>>2] = $6;
 $20 = (__ZNSt3__26__clocEv()|0);
 if ($19) {
  $21 = ((($2)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $23 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer)|0);
  $$0 = $23;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer2)|0);
  $$0 = $24;
 }
 $25 = ($$0|0)>(29);
 if ($25) {
  $26 = (__ZNSt3__26__clocEv()|0);
  if ($19) {
   $27 = ((($2)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $28;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $29 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$26,$5,$vararg_buffer5)|0);
   $$1 = $29;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$26,$5,$vararg_buffer9)|0);
   $$1 = $30;
  }
  $31 = HEAP32[$7>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $$pre = HEAP32[$7>>2]|0;
   $$2 = $$1;$$sroa$046$0 = $$pre;$34 = $$pre;
  } else {
   $$2 = $$1;$$sroa$046$0 = $31;$34 = $31;
  }
 } else {
  $$pre53 = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$046$0 = 0;$34 = $$pre53;
 }
 $33 = (($34) + ($$2)|0);
 $35 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($34,$33,$2)|0);
 $36 = ($34|0)==($6|0);
 if ($36) {
  $$037 = $8;$$sroa$039$0 = 0;$41 = $6;
 } else {
  $37 = $$2 << 3;
  $38 = (_malloc($37)|0);
  $39 = ($38|0)==(0|0);
  if ($39) {
   $$pre54$pre = HEAP32[$7>>2]|0;
   $$037 = $38;$$sroa$039$0 = $38;$41 = $$pre54$pre;
  } else {
   $$037 = $38;$$sroa$039$0 = $38;$41 = $34;
  }
 }
 $40 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $40;
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($41,$35,$33,$$037,$9,$10,$$byval_copy);
 $42 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($42)|0);
 $43 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $43;
 $44 = HEAP32[$9>>2]|0;
 $45 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $46 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$44,$45,$2,$3)|0);
 HEAP32[$1>>2] = $46;
 $47 = ($$sroa$039$0|0)==(0|0);
 if (!($47)) {
  _free($$sroa$039$0);
 }
 _free($$sroa$046$0);
 STACKTOP = sp;return ($46|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$037 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre = 0, $$pre53 = 0, $$pre54$pre = 0, $$sroa$039$0 = 0, $$sroa$046$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy = sp + 300|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 304|0;
 $7 = sp + 296|0;
 $8 = sp + 68|0;
 $9 = sp + 64|0;
 $10 = sp + 60|0;
 $11 = sp + 56|0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($5)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($16,28732,$18)|0);
 HEAP32[$7>>2] = $6;
 $20 = (__ZNSt3__26__clocEv()|0);
 if ($19) {
  $21 = ((($2)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $23 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer)|0);
  $$0 = $23;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer2)|0);
  $$0 = $24;
 }
 $25 = ($$0|0)>(29);
 if ($25) {
  $26 = (__ZNSt3__26__clocEv()|0);
  if ($19) {
   $27 = ((($2)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $28;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $4;
   $29 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$26,$5,$vararg_buffer5)|0);
   $$1 = $29;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $4;
   $30 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$26,$5,$vararg_buffer9)|0);
   $$1 = $30;
  }
  $31 = HEAP32[$7>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $$pre = HEAP32[$7>>2]|0;
   $$2 = $$1;$$sroa$046$0 = $$pre;$34 = $$pre;
  } else {
   $$2 = $$1;$$sroa$046$0 = $31;$34 = $31;
  }
 } else {
  $$pre53 = HEAP32[$7>>2]|0;
  $$2 = $$0;$$sroa$046$0 = 0;$34 = $$pre53;
 }
 $33 = (($34) + ($$2)|0);
 $35 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($34,$33,$2)|0);
 $36 = ($34|0)==($6|0);
 if ($36) {
  $$037 = $8;$$sroa$039$0 = 0;$41 = $6;
 } else {
  $37 = $$2 << 3;
  $38 = (_malloc($37)|0);
  $39 = ($38|0)==(0|0);
  if ($39) {
   $$pre54$pre = HEAP32[$7>>2]|0;
   $$037 = $38;$$sroa$039$0 = $38;$41 = $$pre54$pre;
  } else {
   $$037 = $38;$$sroa$039$0 = $38;$41 = $34;
  }
 }
 $40 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $40;
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($41,$35,$33,$$037,$9,$10,$$byval_copy);
 $42 = HEAP32[$$byval_copy>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($42)|0);
 $43 = HEAP32[$1>>2]|0;
 HEAP32[$11>>2] = $43;
 $44 = HEAP32[$9>>2]|0;
 $45 = HEAP32[$10>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
 $46 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$44,$45,$2,$3)|0);
 HEAP32[$1>>2] = $46;
 $47 = ($$sroa$039$0|0)==(0|0);
 if (!($47)) {
  _free($$sroa$039$0);
 }
 _free($$sroa$046$0);
 STACKTOP = sp;return ($46|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $$byval_copy = sp;
 $5 = sp + 176|0;
 $6 = sp + 156|0;
 $7 = sp + 4|0;
 $8 = sp + 152|0;
 ;HEAP8[$5>>0]=HEAP8[28726>>0]|0;HEAP8[$5+1>>0]=HEAP8[28726+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[28726+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[28726+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[28726+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[28726+5>>0]|0;
 $9 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $10 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,20,$9,$5,$$byval_copy)|0);
 $11 = (($6) + ($10)|0);
 $12 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$11,$2)|0);
 $13 = (__ZNKSt3__28ios_base6getlocEv($2)|0);
 HEAP32[$$byval_copy>>2] = $13;
 $14 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy,38440)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($13)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_iiiii[$17 & 7]($14,$6,$11,$7)|0);
 $18 = (($7) + ($10<<2)|0);
 $19 = ($12|0)==($11|0);
 $20 = $6;
 $21 = $12;
 $22 = (($21) - ($20))|0;
 $23 = (($7) + ($22<<2)|0);
 $$0 = $19 ? $18 : $23;
 $24 = HEAP32[$1>>2]|0;
 HEAP32[$8>>2] = $24;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
 $25 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$18,$2,$3)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$038 = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if ($8) {
   $$sroa$0$2 = 0;
  } else {
   $9 = $3;
   $10 = $1;
   $11 = (($9) - ($10))|0;
   $12 = $11 >> 2;
   $13 = ((($4)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)>($12|0);
   $16 = (($14) - ($12))|0;
   $$038 = $15 ? $16 : 0;
   $17 = $2;
   $18 = (($17) - ($10))|0;
   $19 = $18 >> 2;
   $20 = ($18|0)>(0);
   if ($20) {
    $21 = HEAP32[$7>>2]|0;
    $22 = ((($21)) + 48|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_iiii[$23 & 31]($7,$1,$19)|0);
    $25 = ($24|0)==($19|0);
    if (!($25)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $26 = ($$038|0)>(0);
   do {
    if ($26) {
     ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($6,$$038,$5);
     $27 = ((($6)) + 8|0);
     $28 = ((($27)) + 3|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = ($29<<24>>24)<(0);
     $31 = HEAP32[$6>>2]|0;
     $32 = $30 ? $31 : $6;
     $33 = HEAP32[$7>>2]|0;
     $34 = ((($33)) + 48|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (FUNCTION_TABLE_iiii[$35 & 31]($7,$32,$$038)|0);
     $37 = ($36|0)==($$038|0);
     if ($37) {
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      break;
     } else {
      HEAP32[$0>>2] = 0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $38 = (($9) - ($17))|0;
   $39 = $38 >> 2;
   $40 = ($38|0)>(0);
   if ($40) {
    $41 = HEAP32[$7>>2]|0;
    $42 = ((($41)) + 48|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_iiii[$43 & 31]($7,$2,$39)|0);
    $45 = ($44|0)==($39|0);
    if (!($45)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$13>>2] = 0;
   $$sroa$0$2 = $7;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$0101 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i110 = 0, $$0101 = 0, $$0102 = 0, $$0104 = 0, $$0106 = 0, $$07$i$i = 0, $$07$i$i109 = 0, $$1 = 0, $$1103 = 0, $$1105 = 0, $$1107 = 0, $$2 = 0, $$2108 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,38440)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,38448)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 127]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 switch ($13<<24>>24) {
 case 43: case 45:  {
  $14 = ((($0)) + 1|0);
  $15 = HEAP32[$8>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$17 & 31]($8,$13)|0);
  $19 = HEAP32[$5>>2]|0;
  $20 = ((($19)) + 4|0);
  HEAP32[$5>>2] = $20;
  HEAP32[$19>>2] = $18;
  $$0104 = $14;
  break;
 }
 default: {
  $$0104 = $0;
 }
 }
 $21 = $2;
 $22 = $$0104;
 $23 = (($21) - ($22))|0;
 $24 = ($23|0)>(1);
 L4: do {
  if ($24) {
   $25 = HEAP8[$$0104>>0]|0;
   $26 = ($25<<24>>24)==(48);
   if ($26) {
    $27 = ((($$0104)) + 1|0);
    $28 = HEAP8[$27>>0]|0;
    switch ($28<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     $$1107 = $$0104;
     label = 10;
     break L4;
    }
    }
    $29 = HEAP32[$8>>2]|0;
    $30 = ((($29)) + 44|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (FUNCTION_TABLE_iii[$31 & 31]($8,48)|0);
    $33 = HEAP32[$5>>2]|0;
    $34 = ((($33)) + 4|0);
    HEAP32[$5>>2] = $34;
    HEAP32[$33>>2] = $32;
    $35 = ((($$0104)) + 2|0);
    $36 = HEAP8[$27>>0]|0;
    $37 = HEAP32[$8>>2]|0;
    $38 = ((($37)) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 31]($8,$36)|0);
    $41 = HEAP32[$5>>2]|0;
    $42 = ((($41)) + 4|0);
    HEAP32[$5>>2] = $42;
    HEAP32[$41>>2] = $40;
    $$0106 = $35;
    while(1) {
     $43 = ($$0106>>>0)<($2>>>0);
     if (!($43)) {
      $$1105 = $35;$$2108 = $$0106;
      break L4;
     }
     $44 = HEAP8[$$0106>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = (__ZNSt3__26__clocEv()|0);
     $47 = (_isxdigit_l($45,$46)|0);
     $48 = ($47|0)==(0);
     if ($48) {
      $$1105 = $35;$$2108 = $$0106;
      break L4;
     }
     $49 = ((($$0106)) + 1|0);
     $$0106 = $49;
    }
   } else {
    $$1107 = $$0104;
    label = 10;
   }
  } else {
   $$1107 = $$0104;
   label = 10;
  }
 } while(0);
 L12: do {
  if ((label|0) == 10) {
   while(1) {
    label = 0;
    $50 = ($$1107>>>0)<($2>>>0);
    if (!($50)) {
     $$1105 = $$0104;$$2108 = $$1107;
     break L12;
    }
    $51 = HEAP8[$$1107>>0]|0;
    $52 = $51 << 24 >> 24;
    $53 = (__ZNSt3__26__clocEv()|0);
    $54 = (_isdigit_l($52,$53)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     $$1105 = $$0104;$$2108 = $$1107;
     break L12;
    }
    $56 = ((($$1107)) + 1|0);
    $$1107 = $56;
    label = 10;
   }
  }
 } while(0);
 $57 = ((($7)) + 11|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = ($58<<24>>24)<(0);
 $60 = ((($7)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $58&255;
 $63 = $59 ? $61 : $62;
 $64 = ($63|0)==(0);
 L18: do {
  if ($64) {
   $65 = HEAP32[$5>>2]|0;
   $66 = HEAP32[$8>>2]|0;
   $67 = ((($66)) + 48|0);
   $68 = HEAP32[$67>>2]|0;
   (FUNCTION_TABLE_iiiii[$68 & 7]($8,$$1105,$$2108,$65)|0);
   $69 = $$2108;
   $70 = $$1105;
   $71 = (($69) - ($70))|0;
   $72 = HEAP32[$5>>2]|0;
   $73 = (($72) + ($71<<2)|0);
   HEAP32[$5>>2] = $73;
   $$pre$phiZ2D = $8;$152 = $73;
  } else {
   $74 = ($$1105|0)==($$2108|0);
   L21: do {
    if (!($74)) {
     $$0$i$i = $$2108;$$07$i$i = $$1105;
     while(1) {
      $75 = ((($$0$i$i)) + -1|0);
      $76 = ($$07$i$i>>>0)<($75>>>0);
      if (!($76)) {
       break L21;
      }
      $77 = HEAP8[$$07$i$i>>0]|0;
      $78 = HEAP8[$75>>0]|0;
      HEAP8[$$07$i$i>>0] = $78;
      HEAP8[$75>>0] = $77;
      $79 = ((($$07$i$i)) + 1|0);
      $$0$i$i = $75;$$07$i$i = $79;
     }
    }
   } while(0);
   $80 = HEAP32[$9>>2]|0;
   $81 = ((($80)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (FUNCTION_TABLE_ii[$82 & 127]($9)|0);
   $$0 = $$1105;$$0101 = 0;$$0102 = 0;
   while(1) {
    $84 = ($$0>>>0)<($$2108>>>0);
    if (!($84)) {
     break;
    }
    $96 = HEAP8[$57>>0]|0;
    $97 = ($96<<24>>24)<(0);
    $98 = HEAP32[$7>>2]|0;
    $99 = $97 ? $98 : $7;
    $100 = (($99) + ($$0101)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = ($101<<24>>24)>(0);
    $103 = $101 << 24 >> 24;
    $104 = ($$0102|0)==($103|0);
    $or$cond = $102 & $104;
    if ($or$cond) {
     $105 = HEAP32[$5>>2]|0;
     $106 = ((($105)) + 4|0);
     HEAP32[$5>>2] = $106;
     HEAP32[$105>>2] = $83;
     $107 = HEAP32[$60>>2]|0;
     $108 = $96&255;
     $109 = $97 ? $107 : $108;
     $110 = (($109) + -1)|0;
     $111 = ($$0101>>>0)<($110>>>0);
     $112 = $111&1;
     $$$0101 = (($112) + ($$0101))|0;
     $$1 = $$$0101;$$1103 = 0;
    } else {
     $$1 = $$0101;$$1103 = $$0102;
    }
    $113 = HEAP8[$$0>>0]|0;
    $114 = HEAP32[$8>>2]|0;
    $115 = ((($114)) + 44|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (FUNCTION_TABLE_iii[$116 & 31]($8,$113)|0);
    $118 = HEAP32[$5>>2]|0;
    $119 = ((($118)) + 4|0);
    HEAP32[$5>>2] = $119;
    HEAP32[$118>>2] = $117;
    $120 = (($$1103) + 1)|0;
    $121 = ((($$0)) + 1|0);
    $$0 = $121;$$0101 = $$1;$$0102 = $120;
   }
   $85 = $$1105;
   $86 = $0;
   $87 = (($85) - ($86))|0;
   $88 = (($3) + ($87<<2)|0);
   $89 = HEAP32[$5>>2]|0;
   $90 = ($88|0)==($89|0);
   if ($90) {
    $$pre$phiZ2D = $8;$152 = $88;
   } else {
    $$0$i$i110 = $89;$$07$i$i109 = $88;
    while(1) {
     $91 = ((($$0$i$i110)) + -4|0);
     $92 = ($$07$i$i109>>>0)<($91>>>0);
     if (!($92)) {
      $$pre$phiZ2D = $8;$152 = $89;
      break L18;
     }
     $93 = HEAP32[$$07$i$i109>>2]|0;
     $94 = HEAP32[$91>>2]|0;
     HEAP32[$$07$i$i109>>2] = $94;
     HEAP32[$91>>2] = $93;
     $95 = ((($$07$i$i109)) + 4|0);
     $$0$i$i110 = $91;$$07$i$i109 = $95;
    }
   }
  }
 } while(0);
 $$2 = $$2108;$153 = $152;
 while(1) {
  $122 = ($$2>>>0)<($2>>>0);
  if (!($122)) {
   $$3 = $$2;$142 = $153;
   break;
  }
  $123 = HEAP8[$$2>>0]|0;
  $124 = ($123<<24>>24)==(46);
  if ($124) {
   label = 29;
   break;
  }
  $132 = HEAP32[$$pre$phiZ2D>>2]|0;
  $133 = ((($132)) + 44|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (FUNCTION_TABLE_iii[$134 & 31]($8,$123)|0);
  $136 = HEAP32[$5>>2]|0;
  $137 = ((($136)) + 4|0);
  HEAP32[$5>>2] = $137;
  HEAP32[$136>>2] = $135;
  $138 = ((($$2)) + 1|0);
  $$2 = $138;$153 = $137;
 }
 if ((label|0) == 29) {
  $125 = HEAP32[$9>>2]|0;
  $126 = ((($125)) + 12|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (FUNCTION_TABLE_ii[$127 & 127]($9)|0);
  $129 = HEAP32[$5>>2]|0;
  $130 = ((($129)) + 4|0);
  HEAP32[$5>>2] = $130;
  HEAP32[$129>>2] = $128;
  $131 = ((($$2)) + 1|0);
  $$3 = $131;$142 = $130;
 }
 $139 = HEAP32[$8>>2]|0;
 $140 = ((($139)) + 48|0);
 $141 = HEAP32[$140>>2]|0;
 (FUNCTION_TABLE_iiiii[$141 & 7]($8,$$3,$2,$142)|0);
 $143 = $$3;
 $144 = (($21) - ($143))|0;
 $145 = HEAP32[$5>>2]|0;
 $146 = (($145) + ($144<<2)|0);
 HEAP32[$5>>2] = $146;
 $147 = ($1|0)==($2|0);
 $148 = $1;
 $149 = $0;
 $150 = (($148) - ($149))|0;
 $151 = (($3) + ($150<<2)|0);
 $storemerge = $147 ? $146 : $151;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$072 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i79 = 0, $$07$i$i = 0, $$07$i$i78 = 0, $$072 = 0, $$073 = 0, $$075 = 0, $$1 = 0, $$174 = 0, $$176 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,38440)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,38448)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 127]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 L1: do {
  if ($20) {
   $21 = HEAP32[$8>>2]|0;
   $22 = ((($21)) + 48|0);
   $23 = HEAP32[$22>>2]|0;
   (FUNCTION_TABLE_iiiii[$23 & 7]($8,$0,$2,$3)|0);
   $24 = $2;
   $25 = $0;
   $26 = (($24) - ($25))|0;
   $27 = (($3) + ($26<<2)|0);
   HEAP32[$5>>2] = $27;
   $$pre$phiZ2D = $25;$110 = $27;
  } else {
   HEAP32[$5>>2] = $3;
   $28 = HEAP8[$0>>0]|0;
   switch ($28<<24>>24) {
   case 43: case 45:  {
    $29 = ((($0)) + 1|0);
    $30 = HEAP32[$8>>2]|0;
    $31 = ((($30)) + 44|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_iii[$32 & 31]($8,$28)|0);
    $34 = HEAP32[$5>>2]|0;
    $35 = ((($34)) + 4|0);
    HEAP32[$5>>2] = $35;
    HEAP32[$34>>2] = $33;
    $$075 = $29;
    break;
   }
   default: {
    $$075 = $0;
   }
   }
   $36 = $2;
   $37 = $$075;
   $38 = (($36) - ($37))|0;
   $39 = ($38|0)>(1);
   L7: do {
    if ($39) {
     $40 = HEAP8[$$075>>0]|0;
     $41 = ($40<<24>>24)==(48);
     if ($41) {
      $42 = ((($$075)) + 1|0);
      $43 = HEAP8[$42>>0]|0;
      switch ($43<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $$176 = $$075;
       break L7;
      }
      }
      $44 = HEAP32[$8>>2]|0;
      $45 = ((($44)) + 44|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (FUNCTION_TABLE_iii[$46 & 31]($8,48)|0);
      $48 = HEAP32[$5>>2]|0;
      $49 = ((($48)) + 4|0);
      HEAP32[$5>>2] = $49;
      HEAP32[$48>>2] = $47;
      $50 = ((($$075)) + 2|0);
      $51 = HEAP8[$42>>0]|0;
      $52 = HEAP32[$8>>2]|0;
      $53 = ((($52)) + 44|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = (FUNCTION_TABLE_iii[$54 & 31]($8,$51)|0);
      $56 = HEAP32[$5>>2]|0;
      $57 = ((($56)) + 4|0);
      HEAP32[$5>>2] = $57;
      HEAP32[$56>>2] = $55;
      $$176 = $50;
     } else {
      $$176 = $$075;
     }
    } else {
     $$176 = $$075;
    }
   } while(0);
   $58 = ($$176|0)==($2|0);
   L12: do {
    if (!($58)) {
     $$0$i$i = $2;$$07$i$i = $$176;
     while(1) {
      $59 = ((($$0$i$i)) + -1|0);
      $60 = ($$07$i$i>>>0)<($59>>>0);
      if (!($60)) {
       break L12;
      }
      $61 = HEAP8[$$07$i$i>>0]|0;
      $62 = HEAP8[$59>>0]|0;
      HEAP8[$$07$i$i>>0] = $62;
      HEAP8[$59>>0] = $61;
      $63 = ((($$07$i$i)) + 1|0);
      $$0$i$i = $59;$$07$i$i = $63;
     }
    }
   } while(0);
   $64 = HEAP32[$9>>2]|0;
   $65 = ((($64)) + 16|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (FUNCTION_TABLE_ii[$66 & 127]($9)|0);
   $$0 = $$176;$$072 = 0;$$073 = 0;
   while(1) {
    $68 = ($$0>>>0)<($2>>>0);
    if (!($68)) {
     break;
    }
    $80 = HEAP8[$13>>0]|0;
    $81 = ($80<<24>>24)<(0);
    $82 = HEAP32[$7>>2]|0;
    $83 = $81 ? $82 : $7;
    $84 = (($83) + ($$072)|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = ($85<<24>>24)!=(0);
    $87 = $85 << 24 >> 24;
    $88 = ($$073|0)==($87|0);
    $or$cond = $86 & $88;
    if ($or$cond) {
     $89 = HEAP32[$5>>2]|0;
     $90 = ((($89)) + 4|0);
     HEAP32[$5>>2] = $90;
     HEAP32[$89>>2] = $67;
     $91 = HEAP32[$16>>2]|0;
     $92 = $80&255;
     $93 = $81 ? $91 : $92;
     $94 = (($93) + -1)|0;
     $95 = ($$072>>>0)<($94>>>0);
     $96 = $95&1;
     $$$072 = (($96) + ($$072))|0;
     $$1 = $$$072;$$174 = 0;
    } else {
     $$1 = $$072;$$174 = $$073;
    }
    $97 = HEAP8[$$0>>0]|0;
    $98 = HEAP32[$8>>2]|0;
    $99 = ((($98)) + 44|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (FUNCTION_TABLE_iii[$100 & 31]($8,$97)|0);
    $102 = HEAP32[$5>>2]|0;
    $103 = ((($102)) + 4|0);
    HEAP32[$5>>2] = $103;
    HEAP32[$102>>2] = $101;
    $104 = (($$174) + 1)|0;
    $105 = ((($$0)) + 1|0);
    $$0 = $105;$$072 = $$1;$$073 = $104;
   }
   $69 = $$176;
   $70 = $0;
   $71 = (($69) - ($70))|0;
   $72 = (($3) + ($71<<2)|0);
   $73 = HEAP32[$5>>2]|0;
   $74 = ($72|0)==($73|0);
   if ($74) {
    $$pre$phiZ2D = $70;$110 = $72;
   } else {
    $$0$i$i79 = $73;$$07$i$i78 = $72;
    while(1) {
     $75 = ((($$0$i$i79)) + -4|0);
     $76 = ($$07$i$i78>>>0)<($75>>>0);
     if (!($76)) {
      $$pre$phiZ2D = $70;$110 = $73;
      break L1;
     }
     $77 = HEAP32[$$07$i$i78>>2]|0;
     $78 = HEAP32[$75>>2]|0;
     HEAP32[$$07$i$i78>>2] = $78;
     HEAP32[$75>>2] = $77;
     $79 = ((($$07$i$i78)) + 4|0);
     $$0$i$i79 = $75;$$07$i$i78 = $79;
    }
   }
  }
 } while(0);
 $106 = ($1|0)==($2|0);
 $107 = $1;
 $108 = (($107) - ($$pre$phiZ2D))|0;
 $109 = (($3) + ($108<<2)|0);
 $storemerge = $106 ? $110 : $109;
 HEAP32[$4>>2] = $storemerge;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,29262,(29270))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 11|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)<(0);
 $18 = HEAP32[$12>>2]|0;
 $19 = $17 ? $18 : $12;
 $20 = ((($12)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $16&255;
 $23 = $17 ? $21 : $22;
 $24 = (($19) + ($23)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $25 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$19,$24)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$$byval_copy>>2] = $7;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy,38408)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($7)|0);
 $9 = ((($5)) + 24|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$$byval_copy>>2] = $7;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy,38408)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($7)|0);
 $9 = ((($5)) + 16|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$$byval_copy>>2] = $7;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy,38408)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($7)|0);
 $9 = ((($5)) + 20|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$095$0 = 0, $$sroa$095$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy30 = sp + 128|0;
 $$byval_copy26 = sp + 112|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 108|0;
 $12 = sp + 104|0;
 $13 = sp + 100|0;
 $14 = sp + 96|0;
 $15 = sp + 92|0;
 $16 = sp + 88|0;
 $17 = sp + 84|0;
 $18 = sp + 80|0;
 $19 = sp + 76|0;
 $20 = sp + 72|0;
 $21 = sp + 68|0;
 $22 = sp + 64|0;
 $23 = sp + 60|0;
 $24 = sp + 56|0;
 $25 = sp + 52|0;
 $26 = sp + 48|0;
 $27 = sp + 44|0;
 $28 = sp + 40|0;
 $29 = sp + 36|0;
 $30 = sp + 32|0;
 $31 = sp + 28|0;
 $32 = sp + 24|0;
 $33 = sp + 20|0;
 $34 = sp + 16|0;
 $35 = sp + 12|0;
 $36 = sp + 8|0;
 $37 = sp + 4|0;
 $38 = sp;
 HEAP32[$4>>2] = 0;
 $39 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$$byval_copy30>>2] = $39;
 $40 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy30,38408)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($39)|0);
 $41 = $6 << 24 >> 24;
 do {
  switch ($41|0) {
  case 65: case 97:  {
   $42 = ((($5)) + 24|0);
   $43 = HEAP32[$2>>2]|0;
   HEAP32[$8>>2] = $43;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$8>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$42,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 104: case 66: case 98:  {
   $44 = ((($5)) + 16|0);
   $45 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $45;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$44,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 99:  {
   $46 = ((($0)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_ii[$49 & 127]($46)|0);
   $51 = HEAP32[$1>>2]|0;
   HEAP32[$10>>2] = $51;
   $52 = HEAP32[$2>>2]|0;
   HEAP32[$11>>2] = $52;
   $53 = ((($50)) + 11|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = ($54<<24>>24)<(0);
   $56 = HEAP32[$50>>2]|0;
   $57 = $55 ? $56 : $50;
   $58 = ((($50)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $54&255;
   $61 = $55 ? $59 : $60;
   $62 = (($57) + ($61)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$10>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$11>>2]|0;
   $63 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,$57,$62)|0);
   HEAP32[$1>>2] = $63;
   label = 26;
   break;
  }
  case 101: case 100:  {
   $64 = ((($5)) + 12|0);
   $65 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $65;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$64,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 68:  {
   $66 = HEAP32[$1>>2]|0;
   HEAP32[$13>>2] = $66;
   $67 = HEAP32[$2>>2]|0;
   HEAP32[$14>>2] = $67;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$13>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$14>>2]|0;
   $68 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,29222,(29230))|0);
   HEAP32[$1>>2] = $68;
   label = 26;
   break;
  }
  case 70:  {
   $69 = HEAP32[$1>>2]|0;
   HEAP32[$15>>2] = $69;
   $70 = HEAP32[$2>>2]|0;
   HEAP32[$16>>2] = $70;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$15>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$16>>2]|0;
   $71 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,29230,(29238))|0);
   HEAP32[$1>>2] = $71;
   label = 26;
   break;
  }
  case 72:  {
   $72 = ((($5)) + 8|0);
   $73 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $73;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$72,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 73:  {
   $74 = ((($5)) + 8|0);
   $75 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $75;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$74,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 106:  {
   $76 = ((($5)) + 28|0);
   $77 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $77;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$76,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 109:  {
   $78 = ((($5)) + 16|0);
   $79 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $79;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$78,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 77:  {
   $80 = ((($5)) + 4|0);
   $81 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $81;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$80,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 116: case 110:  {
   $82 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $82;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 112:  {
   $83 = ((($5)) + 8|0);
   $84 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $84;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$83,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 114:  {
   $85 = HEAP32[$1>>2]|0;
   HEAP32[$24>>2] = $85;
   $86 = HEAP32[$2>>2]|0;
   HEAP32[$25>>2] = $86;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$24>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$25>>2]|0;
   $87 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,29238,(29249))|0);
   HEAP32[$1>>2] = $87;
   label = 26;
   break;
  }
  case 82:  {
   $88 = HEAP32[$1>>2]|0;
   HEAP32[$26>>2] = $88;
   $89 = HEAP32[$2>>2]|0;
   HEAP32[$27>>2] = $89;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$27>>2]|0;
   $90 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,29249,(29254))|0);
   HEAP32[$1>>2] = $90;
   label = 26;
   break;
  }
  case 83:  {
   $91 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $91;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$28>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$5,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 84:  {
   $92 = HEAP32[$1>>2]|0;
   HEAP32[$29>>2] = $92;
   $93 = HEAP32[$2>>2]|0;
   HEAP32[$30>>2] = $93;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$29>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$30>>2]|0;
   $94 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,29254,(29262))|0);
   HEAP32[$1>>2] = $94;
   label = 26;
   break;
  }
  case 119:  {
   $95 = ((($5)) + 24|0);
   $96 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $96;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$95,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 120:  {
   $97 = HEAP32[$0>>2]|0;
   $98 = ((($97)) + 20|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$1>>2]|0;
   HEAP32[$32>>2] = $100;
   $101 = HEAP32[$2>>2]|0;
   HEAP32[$33>>2] = $101;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$32>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$33>>2]|0;
   $102 = (FUNCTION_TABLE_iiiiiii[$99 & 63]($0,$$byval_copy26,$$byval_copy30,$3,$4,$5)|0);
   $$sroa$095$0 = $102;
   break;
  }
  case 88:  {
   $103 = ((($0)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_ii[$106 & 127]($103)|0);
   $108 = HEAP32[$1>>2]|0;
   HEAP32[$34>>2] = $108;
   $109 = HEAP32[$2>>2]|0;
   HEAP32[$35>>2] = $109;
   $110 = ((($107)) + 11|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = ($111<<24>>24)<(0);
   $113 = HEAP32[$107>>2]|0;
   $114 = $112 ? $113 : $107;
   $115 = ((($107)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $111&255;
   $118 = $112 ? $116 : $117;
   $119 = (($114) + ($118)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$34>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$35>>2]|0;
   $120 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,$114,$119)|0);
   HEAP32[$1>>2] = $120;
   label = 26;
   break;
  }
  case 121:  {
   $121 = ((($5)) + 20|0);
   $122 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $122;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$36>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$121,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 89:  {
   $123 = ((($5)) + 20|0);
   $124 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $124;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$123,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 37:  {
   $125 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $125;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  default: {
   $126 = HEAP32[$4>>2]|0;
   $127 = $126 | 4;
   HEAP32[$4>>2] = $127;
   label = 26;
  }
  }
 } while(0);
 if ((label|0) == 26) {
  $$sroa$095$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$095$0 = $$sroa$095$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$095$0|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31880]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31880)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP8[31888]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = (___cxa_guard_acquire(31888)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = 39112;
     while(1) {
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $10 = (($9) + ($$0$i$i$i<<2)|0);
       HEAP32[$10>>2] = 0;
       $11 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $11;
      }
      $12 = ((($9)) + 12|0);
      $13 = ($12|0)==((39280)|0);
      if ($13) {
       break;
      } else {
       $9 = $12;
      }
     }
     (___cxa_atexit((148|0),(0|0),(___dso_handle|0))|0);
    }
   }
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(39112,29137)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39124),29144)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39136),29151)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39148),29159)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39160),29169)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39172),29178)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39184),29185)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39196),29194)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39208),29198)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39220),29202)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39232),29206)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39244),29210)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39256),29214)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39268),29218)|0);
   HEAP32[9820] = 39112;
  }
 }
 $14 = HEAP32[9820]|0;
 return ($14|0);
}
function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31864]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31864)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP8[31872]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = (___cxa_guard_acquire(31872)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = 38820;
     while(1) {
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $10 = (($9) + ($$0$i$i$i<<2)|0);
       HEAP32[$10>>2] = 0;
       $11 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $11;
      }
      $12 = ((($9)) + 12|0);
      $13 = ($12|0)==((39108)|0);
      if ($13) {
       break;
      } else {
       $9 = $12;
      }
     }
     (___cxa_atexit((149|0),(0|0),(___dso_handle|0))|0);
    }
   }
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(38820,29007)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38832),29015)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38844),29024)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38856),29030)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38868),29036)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38880),29040)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38892),29045)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38904),29050)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38916),29057)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38928),29067)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38940),29075)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38952),29084)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38964),29093)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38976),29097)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38988),29101)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39000),29105)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39012),29036)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39024),29109)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39036),29113)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39048),29117)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39060),29121)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39072),29125)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39084),29129)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((39096),29133)|0);
   HEAP32[9777] = 38820;
  }
 }
 $14 = HEAP32[9777]|0;
 return ($14|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31848]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31848)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP8[31856]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = (___cxa_guard_acquire(31856)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = 38528;
     while(1) {
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $10 = (($9) + ($$0$i$i$i<<2)|0);
       HEAP32[$10>>2] = 0;
       $11 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $11;
      }
      $12 = ((($9)) + 12|0);
      $13 = ($12|0)==((38816)|0);
      if ($13) {
       break;
      } else {
       $9 = $12;
      }
     }
     (___cxa_atexit((150|0),(0|0),(___dso_handle|0))|0);
    }
   }
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(38528,29001)|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((38540),29004)|0);
   HEAP32[9704] = 38528;
  }
 }
 $14 = HEAP32[9704]|0;
 return ($14|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__cEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31840]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31840)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[38516>>2]=0|0;HEAP32[38516+4>>2]=0|0;HEAP32[38516+8>>2]=0|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(38516,28980,20);
   (___cxa_atexit((151|0),(38516|0),(___dso_handle|0))|0);
  }
 }
 return (38516|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__rEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31832]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31832)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[38504>>2]=0|0;HEAP32[38504+4>>2]=0|0;HEAP32[38504+8>>2]=0|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(38504,28968,11);
   (___cxa_atexit((151|0),(38504|0),(___dso_handle|0))|0);
  }
 }
 return (38504|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__xEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31824]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31824)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[38492>>2]=0|0;HEAP32[38492+4>>2]=0|0;HEAP32[38492+8>>2]=0|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(38492,28959,8);
   (___cxa_atexit((151|0),(38492|0),(___dso_handle|0))|0);
  }
 }
 return (38492|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__XEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31816]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31816)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[38480>>2]=0|0;HEAP32[38480+4>>2]=0|0;HEAP32[38480+8>>2]=0|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(38480,28950,8);
   (___cxa_atexit((151|0),(38480|0),(___dso_handle|0))|0);
  }
 }
 return (38480|0);
}
function ___cxx_global_array_dtor_109($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (38816);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $3 = ($1|0)==(38528|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function ___cxx_global_array_dtor_61($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (39108);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $3 = ($1|0)==(38820|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (39280);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $3 = ($1|0)==(39112|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0$i$i = 0, $$0$i$i73 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$049 = 0, $$050 = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i55 = 0, $$pre$i$i$i64 = 0, $$pre$i3$i$i68 = 0, $$pre$i3$i$i6888 = 0, $$pre$i3$i$i6889 = 0, $$pre$pre = 0, $$sroa$047$0$copyload = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isascii3$i = 0, $isascii3$i52 = 0, $isascii3$i71 = 0, $or$cond = 0, $sext = 0, $tmp$i$i70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$$byval_copy1>>2] = $10;
 $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy1,38408)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($10)|0);
 HEAP32[$4>>2] = 0;
 $12 = ((($11)) + 8|0);
 $$0$ph = $6;$$pre = 0;
 L1: while(1) {
  $13 = ($$0$ph|0)!=($7|0);
  $15 = $$pre;
  while(1) {
   $14 = ($15|0)==(0);
   $or$cond = $13 & $14;
   $16 = HEAP32[$1>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i55 = $16;
    break L1;
   }
   $17 = ($16|0)==(0|0);
   $18 = $16;
   if ($17) {
    $30 = 0;$67 = $18;
   } else {
    $19 = ((($16)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($16)) + 16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($20|0)==($22|0);
    if ($23) {
     $24 = HEAP32[$16>>2]|0;
     $25 = ((($24)) + 36|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (FUNCTION_TABLE_ii[$26 & 127]($16)|0);
     $28 = ($27|0)==(-1);
     if ($28) {
      HEAP32[$1>>2] = 0;
      $30 = 0;$67 = 0;
     } else {
      $30 = $16;$67 = $18;
     }
    } else {
     $30 = $16;$67 = $18;
    }
   }
   $29 = ($30|0)==(0|0);
   $31 = HEAP32[$2>>2]|0;
   $32 = ($31|0)==(0|0);
   $33 = $31;
   do {
    if ($32) {
     $193 = $33;
     label = 13;
    } else {
     $34 = ((($31)) + 12|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ((($31)) + 16|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($35|0)==($37|0);
     if ($38) {
      $39 = HEAP32[$31>>2]|0;
      $40 = ((($39)) + 36|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (FUNCTION_TABLE_ii[$41 & 127]($31)|0);
      $43 = ($42|0)==(-1);
      if ($43) {
       HEAP32[$2>>2] = 0;
       $193 = 0;
       label = 13;
       break;
      }
     }
     if ($29) {
      $194 = $31;$68 = $33;
     } else {
      label = 14;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 13) {
    label = 0;
    if ($29) {
     label = 14;
     break L1;
    } else {
     $194 = 0;$68 = $193;
    }
   }
   $44 = HEAP8[$$0$ph>>0]|0;
   $45 = HEAP32[$11>>2]|0;
   $46 = ((($45)) + 36|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiii[$47 & 31]($11,$44,0)|0);
   $49 = ($48<<24>>24)==(37);
   if ($49) {
    label = 16;
    break;
   }
   $72 = HEAP8[$$0$ph>>0]|0;
   $isascii3$i = ($72<<24>>24)>(-1);
   if ($isascii3$i) {
    $73 = $72 << 24 >> 24;
    $74 = HEAP32[$12>>2]|0;
    $75 = (($74) + ($73<<1)|0);
    $76 = HEAP16[$75>>1]|0;
    $77 = $76 & 8192;
    $78 = ($77<<16>>16)==(0);
    if (!($78)) {
     $$0$pn = $$0$ph;
     label = 25;
     break;
    }
   }
   $137 = ((($30)) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ((($30)) + 16|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($138|0)==($140|0);
   if ($141) {
    $142 = HEAP32[$30>>2]|0;
    $143 = ((($142)) + 36|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (FUNCTION_TABLE_ii[$144 & 127]($30)|0);
    $$0$i$i73 = $145;
   } else {
    $146 = HEAP8[$138>>0]|0;
    $147 = $146&255;
    $$0$i$i73 = $147;
   }
   $148 = $$0$i$i73&255;
   $149 = HEAP32[$11>>2]|0;
   $150 = ((($149)) + 12|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (FUNCTION_TABLE_iii[$151 & 31]($11,$148)|0);
   $153 = HEAP8[$$0$ph>>0]|0;
   $154 = HEAP32[$11>>2]|0;
   $155 = ((($154)) + 12|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (FUNCTION_TABLE_iii[$156 & 31]($11,$153)|0);
   $158 = ($152<<24>>24)==($157<<24>>24);
   if ($158) {
    label = 52;
    break;
   }
   HEAP32[$4>>2] = 4;
   $15 = 4;
  }
  L29: do {
   if ((label|0) == 16) {
    label = 0;
    $50 = ((($$0$ph)) + 1|0);
    $51 = ($50|0)==($7|0);
    if ($51) {
     label = 17;
     break L1;
    }
    $52 = HEAP8[$50>>0]|0;
    $53 = HEAP32[$11>>2]|0;
    $54 = ((($53)) + 36|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (FUNCTION_TABLE_iiii[$55 & 31]($11,$52,0)|0);
    switch ($56<<24>>24) {
    case 48: case 69:  {
     $57 = ((($$0$ph)) + 2|0);
     $58 = ($57|0)==($7|0);
     if ($58) {
      label = 22;
      break L1;
     }
     $59 = HEAP8[$57>>0]|0;
     $60 = HEAP32[$11>>2]|0;
     $61 = ((($60)) + 36|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (FUNCTION_TABLE_iiii[$62 & 31]($11,$59,0)|0);
     $$049 = $56;$$050 = $63;$71 = $50;
     break;
    }
    default: {
     $$049 = 0;$$050 = $56;$71 = $$0$ph;
    }
    }
    $64 = HEAP32[$0>>2]|0;
    $65 = ((($64)) + 36|0);
    $66 = HEAP32[$65>>2]|0;
    HEAP32[$8>>2] = $67;
    HEAP32[$9>>2] = $68;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$9>>2]|0;
    $69 = (FUNCTION_TABLE_iiiiiiiii[$66 & 15]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$050,$$049)|0);
    HEAP32[$1>>2] = $69;
    $70 = ((($71)) + 2|0);
    $$0$ph$be = $70;
   }
   else if ((label|0) == 25) {
    while(1) {
     label = 0;
     $$3 = ((($$0$pn)) + 1|0);
     $79 = ($$3|0)==($7|0);
     if ($79) {
      $$3$lcssa = $7;
      break;
     }
     $80 = HEAP8[$$3>>0]|0;
     $isascii3$i52 = ($80<<24>>24)>(-1);
     if (!($isascii3$i52)) {
      $$3$lcssa = $$3;
      break;
     }
     $81 = $80 << 24 >> 24;
     $82 = (($74) + ($81<<1)|0);
     $83 = HEAP16[$82>>1]|0;
     $84 = $83 & 8192;
     $85 = ($84<<16>>16)==(0);
     if ($85) {
      $$3$lcssa = $$3;
      break;
     } else {
      $$0$pn = $$3;
      label = 25;
     }
    }
    $$pre$i$i$i64 = $30;$$pre$i3$i$i68 = $194;$100 = $194;
    while(1) {
     $86 = ($$pre$i$i$i64|0)==(0|0);
     if ($86) {
      $98 = 0;
     } else {
      $87 = ((($$pre$i$i$i64)) + 12|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = ((($$pre$i$i$i64)) + 16|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($88|0)==($90|0);
      if ($91) {
       $92 = HEAP32[$$pre$i$i$i64>>2]|0;
       $93 = ((($92)) + 36|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = (FUNCTION_TABLE_ii[$94 & 127]($$pre$i$i$i64)|0);
       $96 = ($95|0)==(-1);
       if ($96) {
        HEAP32[$1>>2] = 0;
        $98 = 0;
       } else {
        $98 = $$pre$i$i$i64;
       }
      } else {
       $98 = $$pre$i$i$i64;
      }
     }
     $97 = ($98|0)==(0|0);
     $99 = ($100|0)==(0|0);
     do {
      if ($99) {
       $$pre$i3$i$i6889 = $$pre$i3$i$i68;
       label = 38;
      } else {
       $101 = ((($100)) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ((($100)) + 16|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($102|0)==($104|0);
       if (!($105)) {
        if ($97) {
         $$pre$i3$i$i6888 = $$pre$i3$i$i68;$195 = $100;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L29;
        }
       }
       $106 = HEAP32[$100>>2]|0;
       $107 = ((($106)) + 36|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (FUNCTION_TABLE_ii[$108 & 127]($100)|0);
       $110 = ($109|0)==(-1);
       if ($110) {
        HEAP32[$2>>2] = 0;
        $$pre$i3$i$i6889 = 0;
        label = 38;
        break;
       } else {
        $111 = ($$pre$i3$i$i68|0)==(0|0);
        $tmp$i$i70 = $97 ^ $111;
        if ($tmp$i$i70) {
         $$pre$i3$i$i6888 = $$pre$i3$i$i68;$195 = $$pre$i3$i$i68;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L29;
        }
       }
      }
     } while(0);
     if ((label|0) == 38) {
      label = 0;
      if ($97) {
       $$0$ph$be = $$3$lcssa;
       break L29;
      } else {
       $$pre$i3$i$i6888 = $$pre$i3$i$i6889;$195 = 0;
      }
     }
     $112 = ((($98)) + 12|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ((($98)) + 16|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($113|0)==($115|0);
     if ($116) {
      $117 = HEAP32[$98>>2]|0;
      $118 = ((($117)) + 36|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = (FUNCTION_TABLE_ii[$119 & 127]($98)|0);
      $$0$i$i = $120;
     } else {
      $121 = HEAP8[$113>>0]|0;
      $122 = $121&255;
      $$0$i$i = $122;
     }
     $123 = $$0$i$i&255;
     $isascii3$i71 = ($123<<24>>24)>(-1);
     if (!($isascii3$i71)) {
      $$0$ph$be = $$3$lcssa;
      break L29;
     }
     $sext = $$0$i$i << 24;
     $124 = $sext >> 24;
     $125 = HEAP32[$12>>2]|0;
     $126 = (($125) + ($124<<1)|0);
     $127 = HEAP16[$126>>1]|0;
     $128 = $127 & 8192;
     $129 = ($128<<16>>16)==(0);
     if ($129) {
      $$0$ph$be = $$3$lcssa;
      break L29;
     }
     $130 = HEAP32[$112>>2]|0;
     $131 = HEAP32[$114>>2]|0;
     $132 = ($130|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$98>>2]|0;
      $134 = ((($133)) + 40|0);
      $135 = HEAP32[$134>>2]|0;
      (FUNCTION_TABLE_ii[$135 & 127]($98)|0);
      $$pre$i$i$i64 = $98;$$pre$i3$i$i68 = $$pre$i3$i$i6888;$100 = $195;
      continue;
     } else {
      $136 = ((($130)) + 1|0);
      HEAP32[$112>>2] = $136;
      $$pre$i$i$i64 = $98;$$pre$i3$i$i68 = $$pre$i3$i$i6888;$100 = $195;
      continue;
     }
    }
   }
   else if ((label|0) == 52) {
    label = 0;
    $159 = HEAP32[$137>>2]|0;
    $160 = HEAP32[$139>>2]|0;
    $161 = ($159|0)==($160|0);
    if ($161) {
     $162 = HEAP32[$30>>2]|0;
     $163 = ((($162)) + 40|0);
     $164 = HEAP32[$163>>2]|0;
     (FUNCTION_TABLE_ii[$164 & 127]($30)|0);
    } else {
     $165 = ((($159)) + 1|0);
     HEAP32[$137>>2] = $165;
    }
    $166 = ((($$0$ph)) + 1|0);
    $$0$ph$be = $166;
   }
  } while(0);
  $$pre$pre = HEAP32[$4>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 14) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i55 = $30;
 }
 else if ((label|0) == 17) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i55 = $30;
 }
 else if ((label|0) == 22) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i55 = $30;
 }
 $167 = ($$pre$i$i$i55|0)==(0|0);
 if ($167) {
  $$sroa$047$0$copyload = 0;
 } else {
  $168 = ((($$pre$i$i$i55)) + 12|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ((($$pre$i$i$i55)) + 16|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ($169|0)==($171|0);
  if ($172) {
   $173 = HEAP32[$$pre$i$i$i55>>2]|0;
   $174 = ((($173)) + 36|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (FUNCTION_TABLE_ii[$175 & 127]($$pre$i$i$i55)|0);
   $177 = ($176|0)==(-1);
   if ($177) {
    HEAP32[$1>>2] = 0;
    $$sroa$047$0$copyload = 0;
   } else {
    $$sroa$047$0$copyload = $$pre$i$i$i55;
   }
  } else {
   $$sroa$047$0$copyload = $$pre$i$i$i55;
  }
 }
 $178 = ($$sroa$047$0$copyload|0)==(0|0);
 $179 = HEAP32[$2>>2]|0;
 $180 = ($179|0)==(0|0);
 do {
  if ($180) {
   label = 67;
  } else {
   $181 = ((($179)) + 12|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = ((($179)) + 16|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($182|0)==($184|0);
   if ($185) {
    $186 = HEAP32[$179>>2]|0;
    $187 = ((($186)) + 36|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = (FUNCTION_TABLE_ii[$188 & 127]($179)|0);
    $190 = ($189|0)==(-1);
    if ($190) {
     HEAP32[$2>>2] = 0;
     label = 67;
     break;
    }
   }
   if (!($178)) {
    label = 68;
   }
  }
 } while(0);
 if ((label|0) == 67) {
  if ($178) {
   label = 68;
  }
 }
 if ((label|0) == 68) {
  $191 = HEAP32[$4>>2]|0;
  $192 = $191 | 2;
  HEAP32[$4>>2] = $192;
 }
 STACKTOP = sp;return ($$sroa$047$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i8 = 0, $$pre$i3$i$i12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $isascii3$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($4)) + 8|0);
 L1: while(1) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0|0);
  do {
   if ($7) {
    $19 = 0;
   } else {
    $8 = ((($6)) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($6)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)==($11|0);
    if ($12) {
     $13 = HEAP32[$6>>2]|0;
     $14 = ((($13)) + 36|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_ii[$15 & 127]($6)|0);
     $17 = ($16|0)==(-1);
     if ($17) {
      HEAP32[$1>>2] = 0;
      $19 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$1>>2]|0;
      $19 = $$pre$i$i$i;
      break;
     }
    } else {
     $19 = $6;
    }
   }
  } while(0);
  $18 = ($19|0)==(0|0);
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  do {
   if ($21) {
    label = 12;
   } else {
    $22 = ((($20)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($20)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23|0)==($25|0);
    if (!($26)) {
     if ($18) {
      $88 = $20;
      break;
     } else {
      $$pre$i3$i$i12 = $20;
      break L1;
     }
    }
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 127]($20)|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     HEAP32[$2>>2] = 0;
     label = 12;
     break;
    } else {
     if ($18) {
      $88 = $20;
      break;
     } else {
      $$pre$i3$i$i12 = $20;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($18) {
    $$pre$i3$i$i12 = 0;
    break;
   } else {
    $88 = 0;
   }
  }
  $32 = HEAP32[$1>>2]|0;
  $33 = ((($32)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($32)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($34|0)==($36|0);
  if ($37) {
   $38 = HEAP32[$32>>2]|0;
   $39 = ((($38)) + 36|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (FUNCTION_TABLE_ii[$40 & 127]($32)|0);
   $$0$i$i = $41;
  } else {
   $42 = HEAP8[$34>>0]|0;
   $43 = $42&255;
   $$0$i$i = $43;
  }
  $44 = $$0$i$i&255;
  $isascii3$i = ($44<<24>>24)>(-1);
  if (!($isascii3$i)) {
   $$pre$i3$i$i12 = $88;
   break;
  }
  $sext = $$0$i$i << 24;
  $45 = $sext >> 24;
  $46 = HEAP32[$5>>2]|0;
  $47 = (($46) + ($45<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 & 8192;
  $50 = ($49<<16>>16)==(0);
  if ($50) {
   $$pre$i3$i$i12 = $88;
   break;
  }
  $51 = HEAP32[$1>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($51)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)==($55|0);
  if ($56) {
   $57 = HEAP32[$51>>2]|0;
   $58 = ((($57)) + 40|0);
   $59 = HEAP32[$58>>2]|0;
   (FUNCTION_TABLE_ii[$59 & 127]($51)|0);
   continue;
  } else {
   $60 = ((($53)) + 1|0);
   HEAP32[$52>>2] = $60;
   continue;
  }
 }
 $61 = HEAP32[$1>>2]|0;
 $62 = ($61|0)==(0|0);
 do {
  if ($62) {
   $74 = 0;
  } else {
   $63 = ((($61)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($61)) + 16|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($64|0)==($66|0);
   if ($67) {
    $68 = HEAP32[$61>>2]|0;
    $69 = ((($68)) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (FUNCTION_TABLE_ii[$70 & 127]($61)|0);
    $72 = ($71|0)==(-1);
    if ($72) {
     HEAP32[$1>>2] = 0;
     $74 = 0;
     break;
    } else {
     $$pre$i$i$i8 = HEAP32[$1>>2]|0;
     $74 = $$pre$i$i$i8;
     break;
    }
   } else {
    $74 = $61;
   }
  }
 } while(0);
 $73 = ($74|0)==(0|0);
 $75 = ($$pre$i3$i$i12|0)==(0|0);
 do {
  if ($75) {
   label = 32;
  } else {
   $76 = ((($$pre$i3$i$i12)) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($$pre$i3$i$i12)) + 16|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($77|0)==($79|0);
   if ($80) {
    $81 = HEAP32[$$pre$i3$i$i12>>2]|0;
    $82 = ((($81)) + 36|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (FUNCTION_TABLE_ii[$83 & 127]($$pre$i3$i$i12)|0);
    $85 = ($84|0)==(-1);
    if ($85) {
     HEAP32[$2>>2] = 0;
     label = 32;
     break;
    }
   }
   if (!($73)) {
    label = 33;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($73) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $86 = HEAP32[$3>>2]|0;
  $87 = $86 | 2;
  HEAP32[$3>>2] = $87;
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond20 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = ((($11)) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = ((($11)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $28 = $16;
 } else {
  $17 = $13&255;
  $28 = $17;
 }
 $18 = ((($11)) + 12|0);
 $19 = ((($18)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($11)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $26 = $23;
 } else {
  $24 = $20&255;
  $26 = $24;
 }
 $25 = (0 - ($26))|0;
 $27 = ($28|0)==($25|0);
 do {
  if ($27) {
   $29 = HEAP32[$4>>2]|0;
   $30 = $29 | 4;
   HEAP32[$4>>2] = $30;
  } else {
   $31 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $31;
   $32 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $33 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$32,$5,$4,0)|0);
   $34 = $33;
   $35 = $11;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)==(0);
   $38 = HEAP32[$1>>2]|0;
   $39 = ($38|0)==(12);
   $or$cond = $39 & $37;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $40 = ($36|0)==(12);
   $41 = ($38|0)<(12);
   $or$cond20 = $41 & $40;
   if ($or$cond20) {
    $42 = (($38) + 12)|0;
    HEAP32[$1>>2] = $42;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $$ = $14 ? $15 : $8;
   $$0 = $$;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $$pre$i3$i$i1318 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $18 = 0;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 127]($5)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     HEAP32[$1>>2] = 0;
     $18 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $18 = $$pre$i$i$i;
     break;
    }
   } else {
    $18 = $5;
   }
  }
 } while(0);
 $17 = ($18|0)==(0|0);
 $19 = HEAP32[$2>>2]|0;
 $20 = ($19|0)==(0|0);
 do {
  if ($20) {
   label = 11;
  } else {
   $21 = ((($19)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($19)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22|0)==($24|0);
   if ($25) {
    $26 = HEAP32[$19>>2]|0;
    $27 = ((($26)) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_ii[$28 & 127]($19)|0);
    $30 = ($29|0)==(-1);
    if ($30) {
     HEAP32[$2>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($17) {
    $$pre$i3$i$i1318 = $19;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($17) {
   label = 12;
  } else {
   $$pre$i3$i$i1318 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $31 = HEAP32[$3>>2]|0;
   $32 = $31 | 6;
   HEAP32[$3>>2] = $32;
  }
  else if ((label|0) == 13) {
   $33 = HEAP32[$1>>2]|0;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($33)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($35|0)==($37|0);
   if ($38) {
    $39 = HEAP32[$33>>2]|0;
    $40 = ((($39)) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_ii[$41 & 127]($33)|0);
    $$0$i$i = $42;
   } else {
    $43 = HEAP8[$35>>0]|0;
    $44 = $43&255;
    $$0$i$i = $44;
   }
   $45 = $$0$i$i&255;
   $46 = HEAP32[$4>>2]|0;
   $47 = ((($46)) + 36|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (FUNCTION_TABLE_iiii[$48 & 31]($4,$45,0)|0);
   $50 = ($49<<24>>24)==(37);
   if (!($50)) {
    $51 = HEAP32[$3>>2]|0;
    $52 = $51 | 4;
    HEAP32[$3>>2] = $52;
    break;
   }
   $53 = HEAP32[$1>>2]|0;
   $54 = ((($53)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($53)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($55|0)==($57|0);
   if ($58) {
    $60 = HEAP32[$53>>2]|0;
    $61 = ((($60)) + 40|0);
    $62 = HEAP32[$61>>2]|0;
    (FUNCTION_TABLE_ii[$62 & 127]($53)|0);
    $$pre = HEAP32[$1>>2]|0;
    $63 = ($$pre|0)==(0|0);
    if ($63) {
     $76 = 0;
    } else {
     $65 = $$pre;
     label = 21;
    }
   } else {
    $59 = ((($55)) + 1|0);
    HEAP32[$54>>2] = $59;
    $65 = $53;
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     $64 = ((($65)) + 12|0);
     $66 = HEAP32[$64>>2]|0;
     $67 = ((($65)) + 16|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($66|0)==($68|0);
     if ($69) {
      $70 = HEAP32[$65>>2]|0;
      $71 = ((($70)) + 36|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (FUNCTION_TABLE_ii[$72 & 127]($65)|0);
      $74 = ($73|0)==(-1);
      if ($74) {
       HEAP32[$1>>2] = 0;
       $76 = 0;
       break;
      } else {
       $$pre$i$i$i9 = HEAP32[$1>>2]|0;
       $76 = $$pre$i$i$i9;
       break;
      }
     } else {
      $76 = $65;
     }
    }
   } while(0);
   $75 = ($76|0)==(0|0);
   $77 = ($$pre$i3$i$i1318|0)==(0|0);
   do {
    if ($77) {
     label = 30;
    } else {
     $78 = ((($$pre$i3$i$i1318)) + 12|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ((($$pre$i3$i$i1318)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($79|0)==($81|0);
     if ($82) {
      $83 = HEAP32[$$pre$i3$i$i1318>>2]|0;
      $84 = ((($83)) + 36|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (FUNCTION_TABLE_ii[$85 & 127]($$pre$i3$i$i1318)|0);
      $87 = ($86|0)==(-1);
      if ($87) {
       HEAP32[$2>>2] = 0;
       label = 30;
       break;
      }
     }
     if ($75) {
      break L16;
     }
    }
   } while(0);
   if ((label|0) == 30) {
    if (!($75)) {
     break;
    }
   }
   $88 = HEAP32[$3>>2]|0;
   $89 = $88 | 2;
   HEAP32[$3>>2] = $89;
  }
 } while(0);
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i33 = 0, $$0$in = 0, $$023 = 0, $$023$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i26 = 0, $$pre$i$i$i39 = 0, $$pre$i3$i$i30 = 0, $$pre$i3$i$i43 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isascii3$i = 0, $isascii3$i35 = 0, $sext = 0, $sext47 = 0, $tmp$i$i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $18 = 0;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 127]($5)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     HEAP32[$0>>2] = 0;
     $18 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$0>>2]|0;
     $18 = $$pre$i$i$i;
     break;
    }
   } else {
    $18 = $5;
   }
  }
 } while(0);
 $17 = ($18|0)==(0|0);
 $19 = HEAP32[$1>>2]|0;
 $20 = ($19|0)==(0|0);
 do {
  if ($20) {
   label = 11;
  } else {
   $21 = ((($19)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($19)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22|0)==($24|0);
   if ($25) {
    $26 = HEAP32[$19>>2]|0;
    $27 = ((($26)) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_ii[$28 & 127]($19)|0);
    $30 = ($29|0)==(-1);
    if ($30) {
     HEAP32[$1>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($17) {
    $162 = $19;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($17) {
   label = 12;
  } else {
   $162 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $31 = HEAP32[$2>>2]|0;
   $32 = $31 | 6;
   HEAP32[$2>>2] = $32;
   $$2 = 0;
  }
  else if ((label|0) == 13) {
   $33 = HEAP32[$0>>2]|0;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($33)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($35|0)==($37|0);
   if ($38) {
    $39 = HEAP32[$33>>2]|0;
    $40 = ((($39)) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_ii[$41 & 127]($33)|0);
    $$0$i$i = $42;
   } else {
    $43 = HEAP8[$35>>0]|0;
    $44 = $43&255;
    $$0$i$i = $44;
   }
   $45 = $$0$i$i&255;
   $isascii3$i = ($45<<24>>24)>(-1);
   if ($isascii3$i) {
    $sext = $$0$i$i << 24;
    $46 = $sext >> 24;
    $47 = ((($3)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + ($46<<1)|0);
    $50 = HEAP16[$49>>1]|0;
    $51 = $50 & 2048;
    $52 = ($51<<16>>16)==(0);
    if (!($52)) {
     $55 = HEAP32[$3>>2]|0;
     $56 = ((($55)) + 36|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (FUNCTION_TABLE_iiii[$57 & 31]($3,$45,0)|0);
     $59 = $58 << 24 >> 24;
     $60 = HEAP32[$0>>2]|0;
     $61 = ((($60)) + 12|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ((($60)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($62|0)==($64|0);
     if ($65) {
      $66 = HEAP32[$60>>2]|0;
      $67 = ((($66)) + 40|0);
      $68 = HEAP32[$67>>2]|0;
      (FUNCTION_TABLE_ii[$68 & 127]($60)|0);
      $$0$in = $59;$$023$in = $4;$$pre$i3$i$i30 = $162;$85 = $162;
     } else {
      $69 = ((($62)) + 1|0);
      HEAP32[$61>>2] = $69;
      $$0$in = $59;$$023$in = $4;$$pre$i3$i$i30 = $162;$85 = $162;
     }
     while(1) {
      $$0 = (($$0$in) + -48)|0;
      $$023 = (($$023$in) + -1)|0;
      $70 = HEAP32[$0>>2]|0;
      $71 = ($70|0)==(0|0);
      do {
       if ($71) {
        $83 = 0;
       } else {
        $72 = ((($70)) + 12|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = ((($70)) + 16|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = ($73|0)==($75|0);
        if ($76) {
         $77 = HEAP32[$70>>2]|0;
         $78 = ((($77)) + 36|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = (FUNCTION_TABLE_ii[$79 & 127]($70)|0);
         $81 = ($80|0)==(-1);
         if ($81) {
          HEAP32[$0>>2] = 0;
          $83 = 0;
          break;
         } else {
          $$pre$i$i$i26 = HEAP32[$0>>2]|0;
          $83 = $$pre$i$i$i26;
          break;
         }
        } else {
         $83 = $70;
        }
       }
      } while(0);
      $82 = ($83|0)==(0|0);
      $84 = ($85|0)==(0|0);
      if ($84) {
       $$pre$i3$i$i43 = $$pre$i3$i$i30;$97 = 0;
      } else {
       $86 = ((($85)) + 12|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ((($85)) + 16|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ($87|0)==($89|0);
       if ($90) {
        $91 = HEAP32[$85>>2]|0;
        $92 = ((($91)) + 36|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = (FUNCTION_TABLE_ii[$93 & 127]($85)|0);
        $95 = ($94|0)==(-1);
        if ($95) {
         HEAP32[$1>>2] = 0;
         $$pre$i3$i$i43 = 0;$97 = 0;
        } else {
         $$pre$i3$i$i43 = $$pre$i3$i$i30;$97 = $$pre$i3$i$i30;
        }
       } else {
        $$pre$i3$i$i43 = $$pre$i3$i$i30;$97 = $85;
       }
      }
      $96 = ($97|0)==(0|0);
      $tmp$i$i32 = $82 ^ $96;
      $98 = ($$023$in|0)>(1);
      $99 = $98 & $tmp$i$i32;
      $100 = HEAP32[$0>>2]|0;
      if (!($99)) {
       break;
      }
      $101 = ((($100)) + 12|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ((($100)) + 16|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($102|0)==($104|0);
      if ($105) {
       $106 = HEAP32[$100>>2]|0;
       $107 = ((($106)) + 36|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (FUNCTION_TABLE_ii[$108 & 127]($100)|0);
       $$0$i$i33 = $109;
      } else {
       $110 = HEAP8[$102>>0]|0;
       $111 = $110&255;
       $$0$i$i33 = $111;
      }
      $112 = $$0$i$i33&255;
      $isascii3$i35 = ($112<<24>>24)>(-1);
      if (!($isascii3$i35)) {
       $$2 = $$0;
       break L16;
      }
      $sext47 = $$0$i$i33 << 24;
      $113 = $sext47 >> 24;
      $114 = HEAP32[$47>>2]|0;
      $115 = (($114) + ($113<<1)|0);
      $116 = HEAP16[$115>>1]|0;
      $117 = $116 & 2048;
      $118 = ($117<<16>>16)==(0);
      if ($118) {
       $$2 = $$0;
       break L16;
      }
      $119 = ($$0*10)|0;
      $120 = HEAP32[$3>>2]|0;
      $121 = ((($120)) + 36|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (FUNCTION_TABLE_iiii[$122 & 31]($3,$112,0)|0);
      $124 = $123 << 24 >> 24;
      $125 = (($124) + ($119))|0;
      $126 = HEAP32[$0>>2]|0;
      $127 = ((($126)) + 12|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = ((($126)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($128|0)==($130|0);
      if ($131) {
       $132 = HEAP32[$126>>2]|0;
       $133 = ((($132)) + 40|0);
       $134 = HEAP32[$133>>2]|0;
       (FUNCTION_TABLE_ii[$134 & 127]($126)|0);
       $$0$in = $125;$$023$in = $$023;$$pre$i3$i$i30 = $$pre$i3$i$i43;$85 = $97;
       continue;
      } else {
       $135 = ((($128)) + 1|0);
       HEAP32[$127>>2] = $135;
       $$0$in = $125;$$023$in = $$023;$$pre$i3$i$i30 = $$pre$i3$i$i43;$85 = $97;
       continue;
      }
     }
     $136 = ($100|0)==(0|0);
     do {
      if ($136) {
       $148 = 0;
      } else {
       $137 = ((($100)) + 12|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = ((($100)) + 16|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ($138|0)==($140|0);
       if ($141) {
        $142 = HEAP32[$100>>2]|0;
        $143 = ((($142)) + 36|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (FUNCTION_TABLE_ii[$144 & 127]($100)|0);
        $146 = ($145|0)==(-1);
        if ($146) {
         HEAP32[$0>>2] = 0;
         $148 = 0;
         break;
        } else {
         $$pre$i$i$i39 = HEAP32[$0>>2]|0;
         $148 = $$pre$i$i$i39;
         break;
        }
       } else {
        $148 = $100;
       }
      }
     } while(0);
     $147 = ($148|0)==(0|0);
     $149 = ($$pre$i3$i$i43|0)==(0|0);
     do {
      if ($149) {
       label = 50;
      } else {
       $150 = ((($$pre$i3$i$i43)) + 12|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ((($$pre$i3$i$i43)) + 16|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($151|0)==($153|0);
       if ($154) {
        $155 = HEAP32[$$pre$i3$i$i43>>2]|0;
        $156 = ((($155)) + 36|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = (FUNCTION_TABLE_ii[$157 & 127]($$pre$i3$i$i43)|0);
        $159 = ($158|0)==(-1);
        if ($159) {
         HEAP32[$1>>2] = 0;
         label = 50;
         break;
        }
       }
       if ($147) {
        $$2 = $$0;
        break L16;
       }
      }
     } while(0);
     if ((label|0) == 50) {
      if (!($147)) {
       $$2 = $$0;
       break;
      }
     }
     $160 = HEAP32[$2>>2]|0;
     $161 = $160 | 2;
     HEAP32[$2>>2] = $161;
     $$2 = $$0;
     break;
    }
   }
   $53 = HEAP32[$2>>2]|0;
   $54 = $53 | 4;
   HEAP32[$2>>2] = $54;
   $$2 = 0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,11724,(11756))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)<(0);
 $19 = HEAP32[$12>>2]|0;
 $20 = $18 ? $19 : $12;
 $21 = ((($12)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $17&255;
 $24 = $18 ? $22 : $23;
 $25 = (($20) + ($24<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $26 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$20,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$$byval_copy>>2] = $7;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy,38440)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($7)|0);
 $9 = ((($5)) + 24|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$$byval_copy>>2] = $7;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy,38440)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($7)|0);
 $9 = ((($5)) + 16|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$$byval_copy>>2] = $7;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy,38440)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($7)|0);
 $9 = ((($5)) + 20|0);
 $10 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = $10;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$9,$1,$$byval_copy,$4,$8);
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$095$0 = 0, $$sroa$095$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy30 = sp + 128|0;
 $$byval_copy26 = sp + 112|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 108|0;
 $12 = sp + 104|0;
 $13 = sp + 100|0;
 $14 = sp + 96|0;
 $15 = sp + 92|0;
 $16 = sp + 88|0;
 $17 = sp + 84|0;
 $18 = sp + 80|0;
 $19 = sp + 76|0;
 $20 = sp + 72|0;
 $21 = sp + 68|0;
 $22 = sp + 64|0;
 $23 = sp + 60|0;
 $24 = sp + 56|0;
 $25 = sp + 52|0;
 $26 = sp + 48|0;
 $27 = sp + 44|0;
 $28 = sp + 40|0;
 $29 = sp + 36|0;
 $30 = sp + 32|0;
 $31 = sp + 28|0;
 $32 = sp + 24|0;
 $33 = sp + 20|0;
 $34 = sp + 16|0;
 $35 = sp + 12|0;
 $36 = sp + 8|0;
 $37 = sp + 4|0;
 $38 = sp;
 HEAP32[$4>>2] = 0;
 $39 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$$byval_copy30>>2] = $39;
 $40 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy30,38440)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($39)|0);
 $41 = $6 << 24 >> 24;
 do {
  switch ($41|0) {
  case 65: case 97:  {
   $42 = ((($5)) + 24|0);
   $43 = HEAP32[$2>>2]|0;
   HEAP32[$8>>2] = $43;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$8>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$42,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 104: case 66: case 98:  {
   $44 = ((($5)) + 16|0);
   $45 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $45;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$44,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 99:  {
   $46 = ((($0)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_ii[$49 & 127]($46)|0);
   $51 = HEAP32[$1>>2]|0;
   HEAP32[$10>>2] = $51;
   $52 = HEAP32[$2>>2]|0;
   HEAP32[$11>>2] = $52;
   $53 = ((($50)) + 8|0);
   $54 = ((($53)) + 3|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = ($55<<24>>24)<(0);
   $57 = HEAP32[$50>>2]|0;
   $58 = $56 ? $57 : $50;
   $59 = ((($50)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $55&255;
   $62 = $56 ? $60 : $61;
   $63 = (($58) + ($62<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$10>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$11>>2]|0;
   $64 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,$58,$63)|0);
   HEAP32[$1>>2] = $64;
   label = 26;
   break;
  }
  case 101: case 100:  {
   $65 = ((($5)) + 12|0);
   $66 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $66;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$65,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 68:  {
   $67 = HEAP32[$1>>2]|0;
   HEAP32[$13>>2] = $67;
   $68 = HEAP32[$2>>2]|0;
   HEAP32[$14>>2] = $68;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$13>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$14>>2]|0;
   $69 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,11564,(11596))|0);
   HEAP32[$1>>2] = $69;
   label = 26;
   break;
  }
  case 70:  {
   $70 = HEAP32[$1>>2]|0;
   HEAP32[$15>>2] = $70;
   $71 = HEAP32[$2>>2]|0;
   HEAP32[$16>>2] = $71;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$15>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$16>>2]|0;
   $72 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,11596,(11628))|0);
   HEAP32[$1>>2] = $72;
   label = 26;
   break;
  }
  case 72:  {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $74;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$73,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 73:  {
   $75 = ((($5)) + 8|0);
   $76 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $76;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$75,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 106:  {
   $77 = ((($5)) + 28|0);
   $78 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $78;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$77,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 109:  {
   $79 = ((($5)) + 16|0);
   $80 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $80;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$79,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 77:  {
   $81 = ((($5)) + 4|0);
   $82 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $82;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$81,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 116: case 110:  {
   $83 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $83;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 112:  {
   $84 = ((($5)) + 8|0);
   $85 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $85;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$84,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 114:  {
   $86 = HEAP32[$1>>2]|0;
   HEAP32[$24>>2] = $86;
   $87 = HEAP32[$2>>2]|0;
   HEAP32[$25>>2] = $87;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$24>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$25>>2]|0;
   $88 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,11628,(11672))|0);
   HEAP32[$1>>2] = $88;
   label = 26;
   break;
  }
  case 82:  {
   $89 = HEAP32[$1>>2]|0;
   HEAP32[$26>>2] = $89;
   $90 = HEAP32[$2>>2]|0;
   HEAP32[$27>>2] = $90;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$27>>2]|0;
   $91 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,11672,(11692))|0);
   HEAP32[$1>>2] = $91;
   label = 26;
   break;
  }
  case 83:  {
   $92 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $92;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$28>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$5,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 84:  {
   $93 = HEAP32[$1>>2]|0;
   HEAP32[$29>>2] = $93;
   $94 = HEAP32[$2>>2]|0;
   HEAP32[$30>>2] = $94;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$29>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$30>>2]|0;
   $95 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,11692,(11724))|0);
   HEAP32[$1>>2] = $95;
   label = 26;
   break;
  }
  case 119:  {
   $96 = ((($5)) + 24|0);
   $97 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $97;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$96,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 120:  {
   $98 = HEAP32[$0>>2]|0;
   $99 = ((($98)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$1>>2]|0;
   HEAP32[$32>>2] = $101;
   $102 = HEAP32[$2>>2]|0;
   HEAP32[$33>>2] = $102;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$32>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$33>>2]|0;
   $103 = (FUNCTION_TABLE_iiiiiii[$100 & 63]($0,$$byval_copy26,$$byval_copy30,$3,$4,$5)|0);
   $$sroa$095$0 = $103;
   break;
  }
  case 88:  {
   $104 = ((($0)) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($105)) + 24|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_ii[$107 & 127]($104)|0);
   $109 = HEAP32[$1>>2]|0;
   HEAP32[$34>>2] = $109;
   $110 = HEAP32[$2>>2]|0;
   HEAP32[$35>>2] = $110;
   $111 = ((($108)) + 8|0);
   $112 = ((($111)) + 3|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = ($113<<24>>24)<(0);
   $115 = HEAP32[$108>>2]|0;
   $116 = $114 ? $115 : $108;
   $117 = ((($108)) + 4|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $113&255;
   $120 = $114 ? $118 : $119;
   $121 = (($116) + ($120<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$34>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$35>>2]|0;
   $122 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,$116,$121)|0);
   HEAP32[$1>>2] = $122;
   label = 26;
   break;
  }
  case 121:  {
   $123 = ((($5)) + 20|0);
   $124 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $124;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$36>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$123,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 89:  {
   $125 = ((($5)) + 20|0);
   $126 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $126;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$125,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  case 37:  {
   $127 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $127;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy30,$4,$40);
   label = 26;
   break;
  }
  default: {
   $128 = HEAP32[$4>>2]|0;
   $129 = $128 | 4;
   HEAP32[$4>>2] = $129;
   label = 26;
  }
  }
 } while(0);
 if ((label|0) == 26) {
  $$sroa$095$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$095$0 = $$sroa$095$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$095$0|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31960]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31960)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP8[31968]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = (___cxa_guard_acquire(31968)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = 39924;
     while(1) {
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $10 = (($9) + ($$0$i$i$i<<2)|0);
       HEAP32[$10>>2] = 0;
       $11 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $11;
      }
      $12 = ((($9)) + 12|0);
      $13 = ($12|0)==((40092)|0);
      if ($13) {
       break;
      } else {
       $9 = $12;
      }
     }
     (___cxa_atexit((152|0),(0|0),(___dso_handle|0))|0);
    }
   }
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(39924,11224)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39936),11252)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39948),11280)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39960),11312)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39972),11352)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39984),11388)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39996),11416)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((40008),11452)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((40020),11468)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((40032),11484)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((40044),11500)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((40056),11516)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((40068),11532)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((40080),11548)|0);
   HEAP32[10023] = 39924;
  }
 }
 $14 = HEAP32[10023]|0;
 return ($14|0);
}
function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31944]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31944)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP8[31952]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = (___cxa_guard_acquire(31952)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = 39632;
     while(1) {
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $10 = (($9) + ($$0$i$i$i<<2)|0);
       HEAP32[$10>>2] = 0;
       $11 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $11;
      }
      $12 = ((($9)) + 12|0);
      $13 = ($12|0)==((39920)|0);
      if ($13) {
       break;
      } else {
       $9 = $12;
      }
     }
     (___cxa_atexit((153|0),(0|0),(___dso_handle|0))|0);
    }
   }
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(39632,10704)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39644),10736)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39656),10772)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39668),10796)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39680),10820)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39692),10836)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39704),10856)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39716),10876)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39728),10904)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39740),10944)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39752),10976)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39764),11012)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39776),11048)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39788),11064)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39800),11080)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39812),11096)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39824),10820)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39836),11112)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39848),11128)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39860),11144)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39872),11160)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39884),11176)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39896),11192)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39908),11208)|0);
   HEAP32[9980] = 39632;
  }
 }
 $14 = HEAP32[9980]|0;
 return ($14|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($0) {
 $0 = $0|0;
 var $$0$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31928]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31928)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP8[31936]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = (___cxa_guard_acquire(31936)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = 39340;
     while(1) {
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $10 = (($9) + ($$0$i$i$i<<2)|0);
       HEAP32[$10>>2] = 0;
       $11 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $11;
      }
      $12 = ((($9)) + 12|0);
      $13 = ($12|0)==((39628)|0);
      if ($13) {
       break;
      } else {
       $9 = $12;
      }
     }
     (___cxa_atexit((154|0),(0|0),(___dso_handle|0))|0);
    }
   }
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(39340,10680)|0);
   (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((39352),10692)|0);
   HEAP32[9907] = 39340;
  }
 }
 $14 = HEAP32[9907]|0;
 return ($14|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__cEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31920]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31920)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[39328>>2]=0|0;HEAP32[39328+4>>2]=0|0;HEAP32[39328+8>>2]=0|0;
   $5 = (_wcslen(10596)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(39328,10596,$5);
   (___cxa_atexit((155|0),(39328|0),(___dso_handle|0))|0);
  }
 }
 return (39328|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__rEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31912]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31912)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[39316>>2]=0|0;HEAP32[39316+4>>2]=0|0;HEAP32[39316+8>>2]=0|0;
   $5 = (_wcslen(10548)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(39316,10548,$5);
   (___cxa_atexit((155|0),(39316|0),(___dso_handle|0))|0);
  }
 }
 return (39316|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__xEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31904]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31904)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[39304>>2]=0|0;HEAP32[39304+4>>2]=0|0;HEAP32[39304+8>>2]=0|0;
   $5 = (_wcslen(10512)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(39304,10512,$5);
   (___cxa_atexit((155|0),(39304|0),(___dso_handle|0))|0);
  }
 }
 return (39304|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__XEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[31896]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (___cxa_guard_acquire(31896)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   ;HEAP32[39292>>2]=0|0;HEAP32[39292+4>>2]=0|0;HEAP32[39292+8>>2]=0|0;
   $5 = (_wcslen(10476)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(39292,10476,$5);
   (___cxa_atexit((155|0),(39292|0),(___dso_handle|0))|0);
  }
 }
 return (39292|0);
}
function ___cxx_global_array_dtor_112($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (39628);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $3 = ($1|0)==(39340|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function ___cxx_global_array_dtor_85($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (39920);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $3 = ($1|0)==(39632|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function ___cxx_global_array_dtor_46($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (40092);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $3 = ($1|0)==(39924|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 127]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i52 = 0, $$0$i$i$i$i67 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i58 = 0, $$0$i$i2$i$i73 = 0, $$0$i$i64 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$049 = 0, $$050 = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i54 = 0;
 var $$pre$i$i$i69 = 0, $$pre$i4$i$i60 = 0, $$pre$i4$i$i6093 = 0, $$pre$i4$i$i6094 = 0, $$pre$pre = 0, $$sroa$047$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $phitmp$i5$i$i61 = 0, $tmp$i$i63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 $10 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$$byval_copy1>>2] = $10;
 $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($$byval_copy1,38440)|0);
 (__ZNSt3__214__shared_count16__release_sharedEv($10)|0);
 HEAP32[$4>>2] = 0;
 $$0$ph = $6;$$pre = 0;
 L1: while(1) {
  $12 = ($$0$ph|0)!=($7|0);
  $14 = $$pre;
  while(1) {
   $13 = ($14|0)==(0);
   $or$cond = $12 & $13;
   $15 = HEAP32[$1>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i69 = $15;
    break L1;
   }
   $16 = ($15|0)==(0|0);
   $17 = $15;
   if ($16) {
    $131 = 0;$186 = 1;$66 = $17;
   } else {
    $18 = ((($15)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($15)) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19|0)==($21|0);
    if ($22) {
     $23 = HEAP32[$15>>2]|0;
     $24 = ((($23)) + 36|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (FUNCTION_TABLE_ii[$25 & 127]($15)|0);
     $$0$i$i$i$i = $26;
    } else {
     $27 = HEAP32[$19>>2]|0;
     $$0$i$i$i$i = $27;
    }
    $28 = ($$0$i$i$i$i|0)==(-1);
    if ($28) {
     HEAP32[$1>>2] = 0;
     $131 = 0;$186 = 1;$66 = 0;
    } else {
     $131 = $15;$186 = 0;$66 = $17;
    }
   }
   $29 = HEAP32[$2>>2]|0;
   $30 = ($29|0)==(0|0);
   $31 = $29;
   do {
    if ($30) {
     $$ph = $31;
     label = 16;
    } else {
     $32 = ((($29)) + 12|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ((($29)) + 16|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($33|0)==($35|0);
     if ($36) {
      $37 = HEAP32[$29>>2]|0;
      $38 = ((($37)) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (FUNCTION_TABLE_ii[$39 & 127]($29)|0);
      $$0$i$i2$i$i = $40;
     } else {
      $41 = HEAP32[$33>>2]|0;
      $$0$i$i2$i$i = $41;
     }
     $42 = ($$0$i$i2$i$i|0)==(-1);
     if ($42) {
      HEAP32[$2>>2] = 0;
      $$ph = 0;
      label = 16;
      break;
     } else {
      if ($186) {
       $187 = $29;$67 = $31;
       break;
      } else {
       label = 18;
       break L1;
      }
     }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    if ($186) {
     label = 18;
     break L1;
    } else {
     $187 = 0;$67 = $$ph;
    }
   }
   $43 = HEAP32[$$0$ph>>2]|0;
   $44 = HEAP32[$11>>2]|0;
   $45 = ((($44)) + 52|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (FUNCTION_TABLE_iiii[$46 & 31]($11,$43,0)|0);
   $48 = ($47<<24>>24)==(37);
   if ($48) {
    label = 20;
    break;
   }
   $71 = HEAP32[$$0$ph>>2]|0;
   $72 = HEAP32[$11>>2]|0;
   $73 = ((($72)) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_iiii[$74 & 31]($11,8192,$71)|0);
   if ($75) {
    $$0$pn = $$0$ph;
    label = 28;
    break;
   }
   $130 = ((($131)) + 12|0);
   $132 = HEAP32[$130>>2]|0;
   $133 = ((($131)) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($132|0)==($134|0);
   if ($135) {
    $136 = HEAP32[$131>>2]|0;
    $137 = ((($136)) + 36|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (FUNCTION_TABLE_ii[$138 & 127]($131)|0);
    $$0$i$i64 = $139;
   } else {
    $140 = HEAP32[$132>>2]|0;
    $$0$i$i64 = $140;
   }
   $141 = HEAP32[$11>>2]|0;
   $142 = ((($141)) + 28|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (FUNCTION_TABLE_iii[$143 & 31]($11,$$0$i$i64)|0);
   $145 = HEAP32[$$0$ph>>2]|0;
   $146 = HEAP32[$11>>2]|0;
   $147 = ((($146)) + 28|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (FUNCTION_TABLE_iii[$148 & 31]($11,$145)|0);
   $150 = ($144|0)==($149|0);
   if ($150) {
    label = 56;
    break;
   }
   HEAP32[$4>>2] = 4;
   $14 = 4;
  }
  L33: do {
   if ((label|0) == 20) {
    label = 0;
    $49 = ((($$0$ph)) + 4|0);
    $50 = ($49|0)==($7|0);
    if ($50) {
     label = 21;
     break L1;
    }
    $51 = HEAP32[$49>>2]|0;
    $52 = HEAP32[$11>>2]|0;
    $53 = ((($52)) + 52|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (FUNCTION_TABLE_iiii[$54 & 31]($11,$51,0)|0);
    switch ($55<<24>>24) {
    case 48: case 69:  {
     $56 = ((($$0$ph)) + 8|0);
     $57 = ($56|0)==($7|0);
     if ($57) {
      label = 26;
      break L1;
     }
     $58 = HEAP32[$56>>2]|0;
     $59 = HEAP32[$11>>2]|0;
     $60 = ((($59)) + 52|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (FUNCTION_TABLE_iiii[$61 & 31]($11,$58,0)|0);
     $$049 = $55;$$050 = $62;$70 = $49;
     break;
    }
    default: {
     $$049 = 0;$$050 = $55;$70 = $$0$ph;
    }
    }
    $63 = HEAP32[$0>>2]|0;
    $64 = ((($63)) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    HEAP32[$8>>2] = $66;
    HEAP32[$9>>2] = $67;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$9>>2]|0;
    $68 = (FUNCTION_TABLE_iiiiiiiii[$65 & 15]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$050,$$049)|0);
    HEAP32[$1>>2] = $68;
    $69 = ((($70)) + 8|0);
    $$0$ph$be = $69;
   }
   else if ((label|0) == 28) {
    while(1) {
     label = 0;
     $$3 = ((($$0$pn)) + 4|0);
     $76 = ($$3|0)==($7|0);
     if ($76) {
      $$3$lcssa = $7;
      break;
     }
     $77 = HEAP32[$$3>>2]|0;
     $78 = HEAP32[$11>>2]|0;
     $79 = ((($78)) + 12|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (FUNCTION_TABLE_iiii[$80 & 31]($11,8192,$77)|0);
     if ($81) {
      $$0$pn = $$3;
      label = 28;
     } else {
      $$3$lcssa = $$3;
      break;
     }
    }
    $$pre$i$i$i54 = $131;$$pre$i4$i$i60 = $187;$95 = $187;
    while(1) {
     $82 = ($$pre$i$i$i54|0)==(0|0);
     if ($82) {
      $107 = 1;$109 = 0;
     } else {
      $83 = ((($$pre$i$i$i54)) + 12|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($$pre$i$i$i54)) + 16|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($84|0)==($86|0);
      if ($87) {
       $88 = HEAP32[$$pre$i$i$i54>>2]|0;
       $89 = ((($88)) + 36|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (FUNCTION_TABLE_ii[$90 & 127]($$pre$i$i$i54)|0);
       $$0$i$i$i$i52 = $91;
      } else {
       $92 = HEAP32[$84>>2]|0;
       $$0$i$i$i$i52 = $92;
      }
      $93 = ($$0$i$i$i$i52|0)==(-1);
      if ($93) {
       HEAP32[$1>>2] = 0;
       $107 = 1;$109 = 0;
      } else {
       $107 = 0;$109 = $$pre$i$i$i54;
      }
     }
     $94 = ($95|0)==(0|0);
     do {
      if ($94) {
       $$pre$i4$i$i6094 = $$pre$i4$i$i60;
       label = 43;
      } else {
       $96 = ((($95)) + 12|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = ((($95)) + 16|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = ($97|0)==($99|0);
       if ($100) {
        $101 = HEAP32[$95>>2]|0;
        $102 = ((($101)) + 36|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = (FUNCTION_TABLE_ii[$103 & 127]($95)|0);
        $$0$i$i2$i$i58 = $104;
       } else {
        $105 = HEAP32[$97>>2]|0;
        $$0$i$i2$i$i58 = $105;
       }
       $106 = ($$0$i$i2$i$i58|0)==(-1);
       if ($106) {
        HEAP32[$2>>2] = 0;
        $$pre$i4$i$i6094 = 0;
        label = 43;
        break;
       } else {
        $phitmp$i5$i$i61 = ($$pre$i4$i$i60|0)==(0|0);
        $tmp$i$i63 = $107 ^ $phitmp$i5$i$i61;
        if ($tmp$i$i63) {
         $$pre$i4$i$i6093 = $$pre$i4$i$i60;$188 = $$pre$i4$i$i60;
         break;
        } else {
         $$0$ph$be = $$3$lcssa;
         break L33;
        }
       }
      }
     } while(0);
     if ((label|0) == 43) {
      label = 0;
      if ($107) {
       $$0$ph$be = $$3$lcssa;
       break L33;
      } else {
       $$pre$i4$i$i6093 = $$pre$i4$i$i6094;$188 = 0;
      }
     }
     $108 = ((($109)) + 12|0);
     $110 = HEAP32[$108>>2]|0;
     $111 = ((($109)) + 16|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($110|0)==($112|0);
     if ($113) {
      $114 = HEAP32[$109>>2]|0;
      $115 = ((($114)) + 36|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (FUNCTION_TABLE_ii[$116 & 127]($109)|0);
      $$0$i$i = $117;
     } else {
      $118 = HEAP32[$110>>2]|0;
      $$0$i$i = $118;
     }
     $119 = HEAP32[$11>>2]|0;
     $120 = ((($119)) + 12|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (FUNCTION_TABLE_iiii[$121 & 31]($11,8192,$$0$i$i)|0);
     if (!($122)) {
      $$0$ph$be = $$3$lcssa;
      break L33;
     }
     $123 = HEAP32[$108>>2]|0;
     $124 = HEAP32[$111>>2]|0;
     $125 = ($123|0)==($124|0);
     if ($125) {
      $126 = HEAP32[$109>>2]|0;
      $127 = ((($126)) + 40|0);
      $128 = HEAP32[$127>>2]|0;
      (FUNCTION_TABLE_ii[$128 & 127]($109)|0);
      $$pre$i$i$i54 = $109;$$pre$i4$i$i60 = $$pre$i4$i$i6093;$95 = $188;
      continue;
     } else {
      $129 = ((($123)) + 4|0);
      HEAP32[$108>>2] = $129;
      $$pre$i$i$i54 = $109;$$pre$i4$i$i60 = $$pre$i4$i$i6093;$95 = $188;
      continue;
     }
    }
   }
   else if ((label|0) == 56) {
    label = 0;
    $151 = HEAP32[$130>>2]|0;
    $152 = HEAP32[$133>>2]|0;
    $153 = ($151|0)==($152|0);
    if ($153) {
     $154 = HEAP32[$131>>2]|0;
     $155 = ((($154)) + 40|0);
     $156 = HEAP32[$155>>2]|0;
     (FUNCTION_TABLE_ii[$156 & 127]($131)|0);
    } else {
     $157 = ((($151)) + 4|0);
     HEAP32[$130>>2] = $157;
    }
    $158 = ((($$0$ph)) + 4|0);
    $$0$ph$be = $158;
   }
  } while(0);
  $$pre$pre = HEAP32[$4>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 18) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i69 = $131;
 }
 else if ((label|0) == 21) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i69 = $131;
 }
 else if ((label|0) == 26) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i69 = $131;
 }
 $159 = ($$pre$i$i$i69|0)==(0|0);
 if ($159) {
  $$sroa$047$0$copyload = 0;$189 = 1;
 } else {
  $160 = ((($$pre$i$i$i69)) + 12|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ((($$pre$i$i$i69)) + 16|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ($161|0)==($163|0);
  if ($164) {
   $165 = HEAP32[$$pre$i$i$i69>>2]|0;
   $166 = ((($165)) + 36|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (FUNCTION_TABLE_ii[$167 & 127]($$pre$i$i$i69)|0);
   $$0$i$i$i$i67 = $168;
  } else {
   $169 = HEAP32[$161>>2]|0;
   $$0$i$i$i$i67 = $169;
  }
  $170 = ($$0$i$i$i$i67|0)==(-1);
  if ($170) {
   HEAP32[$1>>2] = 0;
   $$sroa$047$0$copyload = 0;$189 = 1;
  } else {
   $$sroa$047$0$copyload = $$pre$i$i$i69;$189 = 0;
  }
 }
 $171 = HEAP32[$2>>2]|0;
 $172 = ($171|0)==(0|0);
 do {
  if ($172) {
   label = 74;
  } else {
   $173 = ((($171)) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ((($171)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($174|0)==($176|0);
   if ($177) {
    $178 = HEAP32[$171>>2]|0;
    $179 = ((($178)) + 36|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (FUNCTION_TABLE_ii[$180 & 127]($171)|0);
    $$0$i$i2$i$i73 = $181;
   } else {
    $182 = HEAP32[$174>>2]|0;
    $$0$i$i2$i$i73 = $182;
   }
   $183 = ($$0$i$i2$i$i73|0)==(-1);
   if ($183) {
    HEAP32[$2>>2] = 0;
    label = 74;
    break;
   } else {
    if ($189) {
     break;
    } else {
     label = 76;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 74) {
  if ($189) {
   label = 76;
  }
 }
 if ((label|0) == 76) {
  $184 = HEAP32[$4>>2]|0;
  $185 = $184 | 2;
  HEAP32[$4>>2] = $185;
 }
 STACKTOP = sp;return ($$sroa$047$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $$pre$i4$i$i15 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  do {
   if ($6) {
    $83 = 1;
   } else {
    $7 = ((($5)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($5)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($8|0)==($10|0);
    if ($11) {
     $12 = HEAP32[$5>>2]|0;
     $13 = ((($12)) + 36|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (FUNCTION_TABLE_ii[$14 & 127]($5)|0);
     $$0$i$i$i$i = $15;
    } else {
     $16 = HEAP32[$8>>2]|0;
     $$0$i$i$i$i = $16;
    }
    $17 = ($$0$i$i$i$i|0)==(-1);
    if ($17) {
     HEAP32[$1>>2] = 0;
     $83 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $83 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $18 = HEAP32[$2>>2]|0;
  $19 = ($18|0)==(0|0);
  do {
   if ($19) {
    label = 15;
   } else {
    $20 = ((($18)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($18)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($21|0)==($23|0);
    if ($24) {
     $25 = HEAP32[$18>>2]|0;
     $26 = ((($25)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_ii[$27 & 127]($18)|0);
     $$0$i$i2$i$i = $28;
    } else {
     $29 = HEAP32[$21>>2]|0;
     $$0$i$i2$i$i = $29;
    }
    $30 = ($$0$i$i2$i$i|0)==(-1);
    if ($30) {
     HEAP32[$2>>2] = 0;
     label = 15;
     break;
    } else {
     if ($83) {
      $84 = $18;
      break;
     } else {
      $$pre$i4$i$i15 = $18;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($83) {
    $$pre$i4$i$i15 = 0;
    break;
   } else {
    $84 = 0;
   }
  }
  $31 = HEAP32[$1>>2]|0;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($31)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($33|0)==($35|0);
  if ($36) {
   $37 = HEAP32[$31>>2]|0;
   $38 = ((($37)) + 36|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_ii[$39 & 127]($31)|0);
   $$0$i$i = $40;
  } else {
   $41 = HEAP32[$33>>2]|0;
   $$0$i$i = $41;
  }
  $42 = HEAP32[$4>>2]|0;
  $43 = ((($42)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (FUNCTION_TABLE_iiii[$44 & 31]($4,8192,$$0$i$i)|0);
  if (!($45)) {
   $$pre$i4$i$i15 = $84;
   break;
  }
  $46 = HEAP32[$1>>2]|0;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($46)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = ((($52)) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 127]($46)|0);
   continue;
  } else {
   $55 = ((($48)) + 4|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$1>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $85 = 1;
  } else {
   $58 = ((($56)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($56)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = ((($63)) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 127]($56)|0);
    $$0$i$i$i$i7 = $66;
   } else {
    $67 = HEAP32[$59>>2]|0;
    $$0$i$i$i$i7 = $67;
   }
   $68 = ($$0$i$i$i$i7|0)==(-1);
   if ($68) {
    HEAP32[$1>>2] = 0;
    $85 = 1;
    break;
   } else {
    $$pre$i$i$i9 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i10 = ($$pre$i$i$i9|0)==(0|0);
    $85 = $phitmp$i$i$i10;
    break;
   }
  }
 } while(0);
 $69 = ($$pre$i4$i$i15|0)==(0|0);
 do {
  if ($69) {
   label = 37;
  } else {
   $70 = ((($$pre$i4$i$i15)) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($$pre$i4$i$i15)) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$$pre$i4$i$i15>>2]|0;
    $76 = ((($75)) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_ii[$77 & 127]($$pre$i4$i$i15)|0);
    $$0$i$i2$i$i13 = $78;
   } else {
    $79 = HEAP32[$71>>2]|0;
    $$0$i$i2$i$i13 = $79;
   }
   $80 = ($$0$i$i2$i$i13|0)==(-1);
   if ($80) {
    HEAP32[$2>>2] = 0;
    label = 37;
    break;
   } else {
    if ($85) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($85) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $81 = HEAP32[$3>>2]|0;
  $82 = $81 | 2;
  HEAP32[$3>>2] = $82;
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = ((($11)) + 8|0);
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = ((($11)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $29 = $17;
 } else {
  $18 = $14&255;
  $29 = $18;
 }
 $19 = ((($11)) + 20|0);
 $20 = ((($19)) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)<(0);
 if ($22) {
  $23 = ((($11)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 } else {
  $25 = $21&255;
  $27 = $25;
 }
 $26 = (0 - ($27))|0;
 $28 = ($29|0)==($26|0);
 do {
  if ($28) {
   $30 = HEAP32[$4>>2]|0;
   $31 = $30 | 4;
   HEAP32[$4>>2] = $31;
  } else {
   $32 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $32;
   $33 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $34 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$33,$5,$4,0)|0);
   $35 = $34;
   $36 = $11;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$1>>2]|0;
   $40 = ($39|0)==(12);
   $or$cond = $40 & $38;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $41 = ($37|0)==(12);
   $42 = ($39|0)<(12);
   $or$cond20 = $42 & $41;
   if ($or$cond20) {
    $43 = (($39) + 12)|0;
    HEAP32[$1>>2] = $43;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $$ = $14 ? $15 : $8;
   $$0 = $$;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i14 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i10 = 0, $$pre$i4$i$i1622 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $88 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 127]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $$0$i$i$i$i = $16;
   }
   $17 = ($$0$i$i$i$i|0)==(-1);
   if ($17) {
    HEAP32[$1>>2] = 0;
    $88 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $88 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18|0)==(0|0);
 do {
  if ($19) {
   label = 14;
  } else {
   $20 = ((($18)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($18)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   if ($24) {
    $25 = HEAP32[$18>>2]|0;
    $26 = ((($25)) + 36|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_ii[$27 & 127]($18)|0);
    $$0$i$i2$i$i = $28;
   } else {
    $29 = HEAP32[$21>>2]|0;
    $$0$i$i2$i$i = $29;
   }
   $30 = ($$0$i$i2$i$i|0)==(-1);
   if ($30) {
    HEAP32[$2>>2] = 0;
    label = 14;
    break;
   } else {
    if ($88) {
     $$pre$i4$i$i1622 = $18;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($88) {
   label = 16;
  } else {
   $$pre$i4$i$i1622 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $31 = HEAP32[$3>>2]|0;
   $32 = $31 | 6;
   HEAP32[$3>>2] = $32;
  }
  else if ((label|0) == 17) {
   $33 = HEAP32[$1>>2]|0;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($33)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($35|0)==($37|0);
   if ($38) {
    $39 = HEAP32[$33>>2]|0;
    $40 = ((($39)) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_ii[$41 & 127]($33)|0);
    $$0$i$i = $42;
   } else {
    $43 = HEAP32[$35>>2]|0;
    $$0$i$i = $43;
   }
   $44 = HEAP32[$4>>2]|0;
   $45 = ((($44)) + 52|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (FUNCTION_TABLE_iiii[$46 & 31]($4,$$0$i$i,0)|0);
   $48 = ($47<<24>>24)==(37);
   if (!($48)) {
    $49 = HEAP32[$3>>2]|0;
    $50 = $49 | 4;
    HEAP32[$3>>2] = $50;
    break;
   }
   $51 = HEAP32[$1>>2]|0;
   $52 = ((($51)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($51)) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($53|0)==($55|0);
   if ($56) {
    $58 = HEAP32[$51>>2]|0;
    $59 = ((($58)) + 40|0);
    $60 = HEAP32[$59>>2]|0;
    (FUNCTION_TABLE_ii[$60 & 127]($51)|0);
    $$pre = HEAP32[$1>>2]|0;
    $61 = ($$pre|0)==(0|0);
    if ($61) {
     $89 = 1;
    } else {
     $63 = $$pre;
     label = 25;
    }
   } else {
    $57 = ((($53)) + 4|0);
    HEAP32[$52>>2] = $57;
    $63 = $51;
    label = 25;
   }
   do {
    if ((label|0) == 25) {
     $62 = ((($63)) + 12|0);
     $64 = HEAP32[$62>>2]|0;
     $65 = ((($63)) + 16|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($64|0)==($66|0);
     if ($67) {
      $68 = HEAP32[$63>>2]|0;
      $69 = ((($68)) + 36|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (FUNCTION_TABLE_ii[$70 & 127]($63)|0);
      $$0$i$i$i$i8 = $71;
     } else {
      $72 = HEAP32[$64>>2]|0;
      $$0$i$i$i$i8 = $72;
     }
     $73 = ($$0$i$i$i$i8|0)==(-1);
     if ($73) {
      HEAP32[$1>>2] = 0;
      $89 = 1;
      break;
     } else {
      $$pre$i$i$i10 = HEAP32[$1>>2]|0;
      $phitmp$i$i$i11 = ($$pre$i$i$i10|0)==(0|0);
      $89 = $phitmp$i$i$i11;
      break;
     }
    }
   } while(0);
   $74 = ($$pre$i4$i$i1622|0)==(0|0);
   do {
    if ($74) {
     label = 37;
    } else {
     $75 = ((($$pre$i4$i$i1622)) + 12|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ((($$pre$i4$i$i1622)) + 16|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($76|0)==($78|0);
     if ($79) {
      $80 = HEAP32[$$pre$i4$i$i1622>>2]|0;
      $81 = ((($80)) + 36|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (FUNCTION_TABLE_ii[$82 & 127]($$pre$i4$i$i1622)|0);
      $$0$i$i2$i$i14 = $83;
     } else {
      $84 = HEAP32[$76>>2]|0;
      $$0$i$i2$i$i14 = $84;
     }
     $85 = ($$0$i$i2$i$i14|0)==(-1);
     if ($85) {
      HEAP32[$2>>2] = 0;
      label = 37;
      break;
     } else {
      if ($89) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 37) {
    if (!($89)) {
     break;
    }
   }
   $86 = HEAP32[$3>>2]|0;
   $87 = $86 | 2;
   HEAP32[$3>>2] = $87;
  }
 } while(0);
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i27 = 0, $$0$i$i$i$i42 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i33 = 0, $$0$i$i2$i$i48 = 0, $$0$i$i39 = 0, $$0$in = 0, $$025 = 0, $$025$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i29 = 0, $$pre$i$i$i44 = 0, $$pre$i4$i$i35 = 0, $$pre$i4$i$i50 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i30 = 0, $phitmp$i$i$i45 = 0, $phitmp$i5$i$i36 = 0, $tmp$i$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $153 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 127]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $$0$i$i$i$i = $16;
   }
   $17 = ($$0$i$i$i$i|0)==(-1);
   if ($17) {
    HEAP32[$0>>2] = 0;
    $153 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$0>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $153 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $18 = HEAP32[$1>>2]|0;
 $19 = ($18|0)==(0|0);
 do {
  if ($19) {
   label = 14;
  } else {
   $20 = ((($18)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($18)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   if ($24) {
    $25 = HEAP32[$18>>2]|0;
    $26 = ((($25)) + 36|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_ii[$27 & 127]($18)|0);
    $$0$i$i2$i$i = $28;
   } else {
    $29 = HEAP32[$21>>2]|0;
    $$0$i$i2$i$i = $29;
   }
   $30 = ($$0$i$i2$i$i|0)==(-1);
   if ($30) {
    HEAP32[$1>>2] = 0;
    label = 14;
    break;
   } else {
    if ($153) {
     $154 = $18;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($153) {
   label = 16;
  } else {
   $154 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $31 = HEAP32[$2>>2]|0;
   $32 = $31 | 6;
   HEAP32[$2>>2] = $32;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $33 = HEAP32[$0>>2]|0;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($33)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($35|0)==($37|0);
   if ($38) {
    $39 = HEAP32[$33>>2]|0;
    $40 = ((($39)) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_ii[$41 & 127]($33)|0);
    $$0$i$i = $42;
   } else {
    $43 = HEAP32[$35>>2]|0;
    $$0$i$i = $43;
   }
   $44 = HEAP32[$3>>2]|0;
   $45 = ((($44)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (FUNCTION_TABLE_iiii[$46 & 31]($3,2048,$$0$i$i)|0);
   if (!($47)) {
    $48 = HEAP32[$2>>2]|0;
    $49 = $48 | 4;
    HEAP32[$2>>2] = $49;
    $$2 = 0;
    break;
   }
   $50 = HEAP32[$3>>2]|0;
   $51 = ((($50)) + 52|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 31]($3,$$0$i$i,0)|0);
   $54 = $53 << 24 >> 24;
   $55 = HEAP32[$0>>2]|0;
   $56 = ((($55)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($55)) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$55>>2]|0;
    $62 = ((($61)) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    (FUNCTION_TABLE_ii[$63 & 127]($55)|0);
    $$0$in = $54;$$025$in = $4;$$pre$i4$i$i35 = $154;$79 = $154;
   } else {
    $64 = ((($57)) + 4|0);
    HEAP32[$56>>2] = $64;
    $$0$in = $54;$$025$in = $4;$$pre$i4$i$i35 = $154;$79 = $154;
   }
   while(1) {
    $$0 = (($$0$in) + -48)|0;
    $$025 = (($$025$in) + -1)|0;
    $65 = HEAP32[$0>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $91 = 1;
     } else {
      $67 = ((($65)) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ((($65)) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = ((($72)) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_ii[$74 & 127]($65)|0);
       $$0$i$i$i$i27 = $75;
      } else {
       $76 = HEAP32[$68>>2]|0;
       $$0$i$i$i$i27 = $76;
      }
      $77 = ($$0$i$i$i$i27|0)==(-1);
      if ($77) {
       HEAP32[$0>>2] = 0;
       $91 = 1;
       break;
      } else {
       $$pre$i$i$i29 = HEAP32[$0>>2]|0;
       $phitmp$i$i$i30 = ($$pre$i$i$i29|0)==(0|0);
       $91 = $phitmp$i$i$i30;
       break;
      }
     }
    } while(0);
    $78 = ($79|0)==(0|0);
    do {
     if ($78) {
      $$pre$i4$i$i50 = $$pre$i4$i$i35;$155 = 0;$92 = 1;
     } else {
      $80 = ((($79)) + 12|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($79)) + 16|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($81|0)==($83|0);
      if ($84) {
       $85 = HEAP32[$79>>2]|0;
       $86 = ((($85)) + 36|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = (FUNCTION_TABLE_ii[$87 & 127]($79)|0);
       $$0$i$i2$i$i33 = $88;
      } else {
       $89 = HEAP32[$81>>2]|0;
       $$0$i$i2$i$i33 = $89;
      }
      $90 = ($$0$i$i2$i$i33|0)==(-1);
      if ($90) {
       HEAP32[$1>>2] = 0;
       $$pre$i4$i$i50 = 0;$155 = 0;$92 = 1;
       break;
      } else {
       $phitmp$i5$i$i36 = ($$pre$i4$i$i35|0)==(0|0);
       $$pre$i4$i$i50 = $$pre$i4$i$i35;$155 = $$pre$i4$i$i35;$92 = $phitmp$i5$i$i36;
       break;
      }
     }
    } while(0);
    $tmp$i$i38 = $91 ^ $92;
    $93 = ($$025$in|0)>(1);
    $94 = $93 & $tmp$i$i38;
    $95 = HEAP32[$0>>2]|0;
    if (!($94)) {
     break;
    }
    $96 = ((($95)) + 12|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ((($95)) + 16|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($97|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$95>>2]|0;
     $102 = ((($101)) + 36|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (FUNCTION_TABLE_ii[$103 & 127]($95)|0);
     $$0$i$i39 = $104;
    } else {
     $105 = HEAP32[$97>>2]|0;
     $$0$i$i39 = $105;
    }
    $106 = HEAP32[$3>>2]|0;
    $107 = ((($106)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (FUNCTION_TABLE_iiii[$108 & 31]($3,2048,$$0$i$i39)|0);
    if (!($109)) {
     $$2 = $$0;
     break L22;
    }
    $110 = ($$0*10)|0;
    $111 = HEAP32[$3>>2]|0;
    $112 = ((($111)) + 52|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (FUNCTION_TABLE_iiii[$113 & 31]($3,$$0$i$i39,0)|0);
    $115 = $114 << 24 >> 24;
    $116 = (($115) + ($110))|0;
    $117 = HEAP32[$0>>2]|0;
    $118 = ((($117)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ((($117)) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($119|0)==($121|0);
    if ($122) {
     $123 = HEAP32[$117>>2]|0;
     $124 = ((($123)) + 40|0);
     $125 = HEAP32[$124>>2]|0;
     (FUNCTION_TABLE_ii[$125 & 127]($117)|0);
     $$0$in = $116;$$025$in = $$025;$$pre$i4$i$i35 = $$pre$i4$i$i50;$79 = $155;
     continue;
    } else {
     $126 = ((($119)) + 4|0);
     HEAP32[$118>>2] = $126;
     $$0$in = $116;$$025$in = $$025;$$pre$i4$i$i35 = $$pre$i4$i$i50;$79 = $155;
     continue;
    }
   }
   $127 = ($95|0)==(0|0);
   do {
    if ($127) {
     $156 = 1;
    } else {
     $128 = ((($95)) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($95)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$95>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = (FUNCTION_TABLE_ii[$135 & 127]($95)|0);
      $$0$i$i$i$i42 = $136;
     } else {
      $137 = HEAP32[$129>>2]|0;
      $$0$i$i$i$i42 = $137;
     }
     $138 = ($$0$i$i$i$i42|0)==(-1);
     if ($138) {
      HEAP32[$0>>2] = 0;
      $156 = 1;
      break;
     } else {
      $$pre$i$i$i44 = HEAP32[$0>>2]|0;
      $phitmp$i$i$i45 = ($$pre$i$i$i44|0)==(0|0);
      $156 = $phitmp$i$i$i45;
      break;
     }
    }
   } while(0);
   $139 = ($$pre$i4$i$i50|0)==(0|0);
   do {
    if ($139) {
     label = 60;
    } else {
     $140 = ((($$pre$i4$i$i50)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ((($$pre$i4$i$i50)) + 16|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($141|0)==($143|0);
     if ($144) {
      $145 = HEAP32[$$pre$i4$i$i50>>2]|0;
      $146 = ((($145)) + 36|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (FUNCTION_TABLE_ii[$147 & 127]($$pre$i4$i$i50)|0);
      $$0$i$i2$i$i48 = $148;
     } else {
      $149 = HEAP32[$141>>2]|0;
      $$0$i$i2$i$i48 = $149;
     }
     $150 = ($$0$i$i2$i$i48|0)==(-1);
     if ($150) {
      HEAP32[$1>>2] = 0;
      label = 60;
      break;
     } else {
      if ($156) {
       $$2 = $$0;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($156)) {
     $$2 = $$0;
     break;
    }
   }
   $151 = HEAP32[$2>>2]|0;
   $152 = $151 | 2;
   HEAP32[$2>>2] = $152;
   $$2 = $$0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 return;
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$sroa$04$0$i = 0, $$0$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 4|0;
 $8 = sp;
 $9 = ((($7)) + 100|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP8[$$0$i$i>>0]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  do {
   if ($15) {
    $$sroa$04$1$i = 0;
   } else {
    $16 = ((($$sroa$04$0$i)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($$sroa$04$0$i)) + 28|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17|0)==($19|0);
    if ($20) {
     $22 = HEAP32[$$sroa$04$0$i>>2]|0;
     $23 = ((($22)) + 52|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $14&255;
     $26 = (FUNCTION_TABLE_iii[$24 & 31]($$sroa$04$0$i,$25)|0);
     $27 = ($26|0)==(-1);
     $$$sroa$04$0$i = $27 ? 0 : $$sroa$04$0$i;
     $$sroa$04$1$i = $$$sroa$04$0$i;
     break;
    } else {
     $21 = ((($17)) + 1|0);
     HEAP32[$16>>2] = $21;
     HEAP8[$17>>0] = $14;
     $$sroa$04$1$i = $$sroa$04$0$i;
     break;
    }
   }
  } while(0);
  $28 = ((($$0$i$i)) + 1|0);
  $$0$i$i = $28;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 HEAP8[$6>>0] = 37;
 $7 = ((($6)) + 1|0);
 HEAP8[$7>>0] = $4;
 $8 = ((($6)) + 2|0);
 HEAP8[$8>>0] = $5;
 $9 = ((($6)) + 3|0);
 HEAP8[$9>>0] = 0;
 $10 = ($5<<24>>24)==(0);
 if (!($10)) {
  HEAP8[$7>>0] = $5;
  HEAP8[$8>>0] = $4;
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = $1;
 $13 = (($11) - ($12))|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (_strftime_l(($1|0),($13|0),($6|0),($3|0),($14|0))|0);
 $16 = (($1) + ($15)|0);
 HEAP32[$2>>2] = $16;
 STACKTOP = sp;return;
}
function __ZNSt3__210__time_putD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__26__clocEv()|0);
 $3 = ($1|0)==($2|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  _freelocale($4);
 }
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$sroa$04$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $7 = sp + 8|0;
 $8 = sp;
 $9 = ((($7)) + 400|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$$0$i$i>>2]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  if ($15) {
   $$sroa$04$1$i = 0;
  } else {
   $16 = ((($$sroa$04$0$i)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$sroa$04$0$i)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$$sroa$04$0$i>>2]|0;
    $22 = ((($21)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_iii[$23 & 31]($$sroa$04$0$i,$14)|0);
    $$0$i$i$i$i = $24;
   } else {
    $25 = ((($17)) + 4|0);
    HEAP32[$16>>2] = $25;
    HEAP32[$17>>2] = $14;
    $$0$i$i$i$i = $14;
   }
   $26 = ($$0$i$i$i$i|0)==(-1);
   $$$sroa$04$0$i = $26 ? 0 : $$sroa$04$0$i;
   $$sroa$04$1$i = $$$sroa$04$0$i;
  }
  $27 = ((($$0$i$i)) + 4|0);
  $$0$i$i = $27;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp;
 $9 = sp + 8|0;
 $10 = ((($6)) + 100|0);
 HEAP32[$7>>2] = $10;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$6,$7,$3,$4,$5);
 $11 = $8;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = $6;
 $15 = HEAP32[$2>>2]|0;
 $16 = $1;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = HEAP32[$0>>2]|0;
 $20 = (_uselocale($19)|0);
 $21 = (_mbsrtowcs($1,$9,$18,$8)|0);
 $22 = ($20|0)==(0|0);
 if (!($22)) {
  (_uselocale($20)|0);
 }
 $23 = (($1) + ($21<<2)|0);
 HEAP32[$2>>2] = $23;
 STACKTOP = sp;return;
}
function __ZNSt3__210moneypunctIcLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210moneypunctIcLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIcLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210moneypunctIcLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210moneypunctIwLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210moneypunctIwLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$025 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $$sroa$028$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $7 = sp + 140|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 136|0;
 $12 = sp + 4|0;
 $13 = sp + 36|0;
 $14 = $7;
 HEAP32[$8>>2] = $14;
 $15 = ((($8)) + 4|0);
 HEAP32[$15>>2] = (156);
 $16 = ((($7)) + 100|0);
 $17 = (__ZNKSt3__28ios_base6getlocEv($4)|0);
 HEAP32[$10>>2] = $17;
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,38408)|0);
 HEAP8[$11>>0] = 0;
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$12>>2] = $19;
 $20 = ((($4)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $22 = (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($1,$$byval_copy,$3,$10,$21,$5,$11,$18,$8,$9,$16)|0);
 if ($22) {
  $23 = HEAP32[$18>>2]|0;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  (FUNCTION_TABLE_iiiii[$25 & 7]($18,29787,(29797),$$byval_copy)|0);
  $26 = HEAP32[$9>>2]|0;
  $27 = HEAP32[$8>>2]|0;
  $28 = (($26) - ($27))|0;
  $29 = ($28|0)>(98);
  if ($29) {
   $30 = (($28) + 2)|0;
   $31 = (_malloc($30)|0);
   $32 = $31;
   $33 = ($31|0)==(0|0);
   if ($33) {
    $$025 = 0;$$sroa$028$0 = $32;
   } else {
    $$025 = $31;$$sroa$028$0 = $32;
   }
  } else {
   $$025 = $13;$$sroa$028$0 = 0;
  }
  $34 = HEAP8[$11>>0]|0;
  $35 = ($34<<24>>24)==(0);
  if ($35) {
   $$1 = $$025;
  } else {
   $36 = ((($$025)) + 1|0);
   HEAP8[$$025>>0] = 45;
   $$1 = $36;
  }
  $37 = HEAP32[$8>>2]|0;
  $38 = ((($$byval_copy)) + 10|0);
  $39 = $$byval_copy;
  $$0 = $37;$$2 = $$1;
  while(1) {
   $40 = HEAP32[$9>>2]|0;
   $41 = ($$0>>>0)<($40>>>0);
   if (!($41)) {
    break;
   }
   $43 = HEAP8[$$0>>0]|0;
   $$0$i = $$byval_copy;
   while(1) {
    $44 = ($$0$i|0)==($38|0);
    if ($44) {
     $$0$lcssa$i = $38;
     break;
    }
    $45 = HEAP8[$$0$i>>0]|0;
    $46 = ($45<<24>>24)==($43<<24>>24);
    if ($46) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $47 = ((($$0$i)) + 1|0);
    $$0$i = $47;
   }
   $48 = $$0$lcssa$i;
   $49 = (($48) - ($39))|0;
   $50 = (29787 + ($49)|0);
   $51 = HEAP8[$50>>0]|0;
   HEAP8[$$2>>0] = $51;
   $52 = ((($$0)) + 1|0);
   $53 = ((($$2)) + 1|0);
   $$0 = $52;$$2 = $53;
  }
  HEAP8[$$2>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $6;
  (_sscanf($13,29798,$vararg_buffer)|0);
  $42 = ($$sroa$028$0|0)==(0);
  if (!($42)) {
   $54 = $$sroa$028$0;
   _free($54);
  }
 }
 $55 = HEAP32[$1>>2]|0;
 $56 = ($55|0)==(0|0);
 do {
  if ($56) {
   $68 = 0;
  } else {
   $57 = ((($55)) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($55)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($58|0)==($60|0);
   if ($61) {
    $62 = HEAP32[$55>>2]|0;
    $63 = ((($62)) + 36|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (FUNCTION_TABLE_ii[$64 & 127]($55)|0);
    $66 = ($65|0)==(-1);
    if ($66) {
     HEAP32[$1>>2] = 0;
     $68 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $68 = $$pre$i$i$i;
     break;
    }
   } else {
    $68 = $55;
   }
  }
 } while(0);
 $67 = ($68|0)==(0|0);
 $69 = HEAP32[$2>>2]|0;
 $70 = ($69|0)==(0|0);
 do {
  if ($70) {
   label = 27;
  } else {
   $71 = ((($69)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($69)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$69>>2]|0;
    $77 = ((($76)) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 127]($69)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$2>>2] = 0;
     label = 27;
     break;
    }
   }
   if (!($67)) {
    label = 28;
   }
  }
 } while(0);
 if ((label|0) == 27) {
  if ($67) {
   label = 28;
  }
 }
 if ((label|0) == 28) {
  $81 = HEAP32[$5>>2]|0;
  $82 = $81 | 2;
  HEAP32[$5>>2] = $82;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 $83 = HEAP32[$10>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($83)|0);
 $84 = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_vi[$86 & 255]($84);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 24|0;
 $7 = sp + 32|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp + 28|0;
 $12 = sp;
 $13 = $7;
 HEAP32[$8>>2] = $13;
 $14 = ((($8)) + 4|0);
 HEAP32[$14>>2] = (156);
 $15 = ((($7)) + 100|0);
 $16 = (__ZNKSt3__28ios_base6getlocEv($4)|0);
 HEAP32[$10>>2] = $16;
 $17 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,38408)|0);
 HEAP8[$11>>0] = 0;
 $18 = HEAP32[$2>>2]|0;
 HEAP32[$12>>2] = $18;
 $19 = ((($4)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $21 = (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($1,$$byval_copy,$3,$10,$20,$5,$11,$17,$8,$9,$15)|0);
 $22 = $18;
 if ($21) {
  $23 = ((($6)) + 11|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)<(0);
  if ($25) {
   $26 = HEAP32[$6>>2]|0;
   HEAP8[$26>>0] = 0;
   $27 = ((($6)) + 4|0);
   HEAP32[$27>>2] = 0;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$23>>0] = 0;
  }
  $28 = HEAP8[$11>>0]|0;
  $29 = ($28<<24>>24)==(0);
  if (!($29)) {
   $30 = HEAP32[$17>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (FUNCTION_TABLE_iii[$32 & 31]($17,45)|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($6,$33);
  }
  $34 = HEAP32[$17>>2]|0;
  $35 = ((($34)) + 28|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_iii[$36 & 31]($17,48)|0);
  $38 = HEAP32[$8>>2]|0;
  $39 = HEAP32[$9>>2]|0;
  $40 = ((($39)) + -1|0);
  $$0 = $38;
  while(1) {
   $41 = ($$0>>>0)<($40>>>0);
   if (!($41)) {
    break;
   }
   $42 = HEAP8[$$0>>0]|0;
   $43 = ($42<<24>>24)==($37<<24>>24);
   if (!($43)) {
    break;
   }
   $44 = ((($$0)) + 1|0);
   $$0 = $44;
  }
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_($6,$$0,$39)|0);
 }
 $45 = HEAP32[$1>>2]|0;
 $46 = ($45|0)==(0|0);
 do {
  if ($46) {
   $58 = 0;
  } else {
   $47 = ((($45)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($45)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $52 = HEAP32[$45>>2]|0;
    $53 = ((($52)) + 36|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (FUNCTION_TABLE_ii[$54 & 127]($45)|0);
    $56 = ($55|0)==(-1);
    if ($56) {
     HEAP32[$1>>2] = 0;
     $58 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $58 = $$pre$i$i$i;
     break;
    }
   } else {
    $58 = $45;
   }
  }
 } while(0);
 $57 = ($58|0)==(0|0);
 $59 = ($18|0)==(0);
 do {
  if ($59) {
   label = 22;
  } else {
   $60 = ((($22)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($22)) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = $18;
    $66 = HEAP32[$65>>2]|0;
    $67 = ((($66)) + 36|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (FUNCTION_TABLE_ii[$68 & 127]($22)|0);
    $70 = ($69|0)==(-1);
    if ($70) {
     HEAP32[$2>>2] = 0;
     label = 22;
     break;
    }
   }
   if (!($57)) {
    label = 23;
   }
  }
 } while(0);
 if ((label|0) == 22) {
  if ($57) {
   label = 23;
  }
 }
 if ((label|0) == 23) {
  $71 = HEAP32[$5>>2]|0;
  $72 = $71 | 2;
  HEAP32[$5>>2] = $72;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 $73 = HEAP32[$10>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($73)|0);
 $74 = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $75 = ($74|0)==(0|0);
 if (!($75)) {
  $76 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$76 & 255]($74);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$$0129 = 0, $$$0129139 = 0, $$$0129140 = 0, $$$0129141 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i147 = 0, $$0$i$i150 = 0, $$0$i$i151 = 0, $$0$i$i154 = 0, $$0$i$i157 = 0, $$0$i$i161 = 0, $$0$i$i171 = 0, $$0$i$i173 = 0, $$0$i$i183 = 0, $$0$i$i189 = 0, $$0$i$i193 = 0, $$0$i$i209 = 0, $$0$i$i221 = 0, $$0$i$i229 = 0;
 var $$0$i$i237 = 0, $$0$i$i239 = 0, $$0$i$i254 = 0, $$0124 = 0, $$0129 = 0, $$0131 = 0, $$10 = 0, $$1130 = 0, $$2126$ph = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$phi$trans$insert372 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i164 = 0, $$pre$i$i$i175 = 0, $$pre$i$i$i197 = 0, $$pre$i$i$i213 = 0, $$pre$i$i$i243 = 0, $$pre$i$i$i258 = 0;
 var $$pre$i3$i$i179 = 0, $$pre$i3$i$i179378 = 0, $$pre$i3$i$i179380 = 0, $$pre$i3$i$i201 = 0, $$pre$i3$i$i201362$ph = 0, $$pre$i3$i$i201362383 = 0, $$pre$i3$i$i217 = 0, $$pre$i3$i$i247 = 0, $$pre$i3$i$i247357 = 0, $$pre$i3$i$i247359 = 0, $$pre$i3$i$i262 = 0, $$pre$i3$i$i262366 = 0, $$pre$i3$i$i262367 = 0, $$pre360 = 0, $$pre361 = 0, $$pre364 = 0, $$pre365 = 0, $$pre369 = 0, $$pre370 = 0, $$pre371 = 0;
 var $$pre373 = 0, $$pre374 = 0, $$pre375 = 0, $$pre376 = 0, $$pre377 = 0, $$sink = 0, $$sroa$0281$0 = 0, $$sroa$0301$0 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $cond146 = 0, $exitcond$i$i = 0, $exitcond$i$i148 = 0, $exitcond$i$i152 = 0, $exitcond$i$i155 = 0, $exitcond$i$i158 = 0, $isascii3$i = 0, $isascii3$i185 = 0, $isascii3$i191 = 0, $isascii3$i235 = 0, $isascii3$i274 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond143 = 0, $or$cond15 = 0, $or$cond392 = 0, $sext = 0, $sext341 = 0, $sext342 = 0, $sext343 = 0;
 var $switch = 0, $tmp$i$i181 = 0, $tmp$i$i203 = 0, $tmp$i$i249 = 0, $tmp$i$i264 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 88|0;
 $12 = sp + 96|0;
 $13 = sp + 80|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 500|0;
 $17 = sp + 497|0;
 $18 = sp + 496|0;
 $19 = sp + 56|0;
 $20 = sp + 44|0;
 $21 = sp + 32|0;
 $22 = sp + 20|0;
 $23 = sp + 8|0;
 $24 = sp + 4|0;
 $25 = sp;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (156);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i147 = 0;
 while(1) {
  $exitcond$i$i148 = ($$0$i$i147|0)==(3);
  if ($exitcond$i$i148) {
   break;
  }
  $31 = (($20) + ($$0$i$i147<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i147) + 1)|0;
  $$0$i$i147 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i151 = 0;
 while(1) {
  $exitcond$i$i152 = ($$0$i$i151|0)==(3);
  if ($exitcond$i$i152) {
   break;
  }
  $33 = (($21) + ($$0$i$i151<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i151) + 1)|0;
  $$0$i$i151 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i154 = 0;
 while(1) {
  $exitcond$i$i155 = ($$0$i$i154|0)==(3);
  if ($exitcond$i$i155) {
   break;
  }
  $35 = (($22) + ($$0$i$i154<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i154) + 1)|0;
  $$0$i$i154 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i157 = 0;
 while(1) {
  $exitcond$i$i158 = ($$0$i$i157|0)==(3);
  if ($exitcond$i$i158) {
   break;
  }
  $37 = (($23) + ($$0$i$i157<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i157) + 1)|0;
  $$0$i$i157 = $38;
 }
 __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($2,$3,$16,$17,$18,$19,$20,$21,$22,$24);
 $39 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $39;
 $40 = ((($7)) + 8|0);
 $41 = ((($21)) + 11|0);
 $42 = ((($21)) + 4|0);
 $43 = ((($22)) + 11|0);
 $44 = ((($22)) + 4|0);
 $45 = $4 & 512;
 $46 = ($45|0)!=(0);
 $47 = ((($20)) + 11|0);
 $48 = ((($20)) + 4|0);
 $49 = ((($23)) + 11|0);
 $50 = ((($23)) + 4|0);
 $51 = ((($16)) + 3|0);
 $52 = ((($19)) + 11|0);
 $53 = ((($19)) + 4|0);
 $$0129 = 0;$$0131 = 0;
 L21: while(1) {
  $54 = ($$0131>>>0)<(4);
  if (!($54)) {
   label = 217;
   break;
  }
  $55 = HEAP32[$0>>2]|0;
  $56 = ($55|0)==(0|0);
  do {
   if ($56) {
    $68 = 0;
   } else {
    $57 = ((($55)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($55)) + 16|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($58|0)==($60|0);
    if ($61) {
     $62 = HEAP32[$55>>2]|0;
     $63 = ((($62)) + 36|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (FUNCTION_TABLE_ii[$64 & 127]($55)|0);
     $66 = ($65|0)==(-1);
     if ($66) {
      HEAP32[$0>>2] = 0;
      $68 = 0;
      break;
     } else {
      $$pre$i$i$i164 = HEAP32[$0>>2]|0;
      $68 = $$pre$i$i$i164;
      break;
     }
    } else {
     $68 = $55;
    }
   }
  } while(0);
  $67 = ($68|0)==(0|0);
  $69 = HEAP32[$1>>2]|0;
  $70 = ($69|0)==(0|0);
  do {
   if ($70) {
    label = 28;
   } else {
    $71 = ((($69)) + 12|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($69)) + 16|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($72|0)==($74|0);
    if (!($75)) {
     if ($67) {
      $736 = $69;
      break;
     } else {
      label = 217;
      break L21;
     }
    }
    $76 = HEAP32[$69>>2]|0;
    $77 = ((($76)) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 127]($69)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$1>>2] = 0;
     label = 28;
     break;
    } else {
     if ($67) {
      $736 = $69;
      break;
     } else {
      label = 217;
      break L21;
     }
    }
   }
  } while(0);
  if ((label|0) == 28) {
   label = 0;
   if ($67) {
    label = 217;
    break;
   } else {
    $736 = 0;
   }
  }
  $81 = (($16) + ($$0131)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82 << 24 >> 24;
  L42: do {
   switch ($83|0) {
   case 1:  {
    $cond146 = ($$0131|0)==(3);
    if ($cond146) {
     $$1130 = $$0129;
    } else {
     $84 = HEAP32[$0>>2]|0;
     $85 = ((($84)) + 12|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ((($84)) + 16|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ($86|0)==($88|0);
     if ($89) {
      $90 = HEAP32[$84>>2]|0;
      $91 = ((($90)) + 36|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (FUNCTION_TABLE_ii[$92 & 127]($84)|0);
      $$0$i$i171 = $93;
     } else {
      $94 = HEAP8[$86>>0]|0;
      $95 = $94&255;
      $$0$i$i171 = $95;
     }
     $96 = $$0$i$i171&255;
     $isascii3$i = ($96<<24>>24)>(-1);
     if (!($isascii3$i)) {
      label = 41;
      break L21;
     }
     $sext343 = $$0$i$i171 << 24;
     $97 = $sext343 >> 24;
     $98 = HEAP32[$40>>2]|0;
     $99 = (($98) + ($97<<1)|0);
     $100 = HEAP16[$99>>1]|0;
     $101 = $100 & 8192;
     $102 = ($101<<16>>16)==(0);
     if ($102) {
      label = 41;
      break L21;
     }
     $103 = HEAP32[$0>>2]|0;
     $104 = ((($103)) + 12|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ((($103)) + 16|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($105|0)==($107|0);
     if ($108) {
      $109 = HEAP32[$103>>2]|0;
      $110 = ((($109)) + 40|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (FUNCTION_TABLE_ii[$111 & 127]($103)|0);
      $$0$i$i173 = $112;
     } else {
      $113 = ((($105)) + 1|0);
      HEAP32[$104>>2] = $113;
      $114 = HEAP8[$105>>0]|0;
      $115 = $114&255;
      $$0$i$i173 = $115;
     }
     $116 = $$0$i$i173&255;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($23,$116);
     $$pre$i3$i$i179 = $736;$135 = $736;
     label = 43;
    }
    break;
   }
   case 0:  {
    $119 = ($$0131|0)==(3);
    if ($119) {
     $$1130 = $$0129;
    } else {
     $$pre$i3$i$i179 = $736;$135 = $736;
     label = 43;
    }
    break;
   }
   case 3:  {
    $180 = HEAP8[$41>>0]|0;
    $181 = ($180<<24>>24)<(0);
    $182 = HEAP32[$42>>2]|0;
    $183 = $180&255;
    $184 = $181 ? $182 : $183;
    $185 = HEAP8[$43>>0]|0;
    $186 = ($185<<24>>24)<(0);
    $187 = HEAP32[$44>>2]|0;
    $188 = $185&255;
    $189 = $186 ? $187 : $188;
    $190 = (0 - ($189))|0;
    $191 = ($184|0)==($190|0);
    if ($191) {
     $$1130 = $$0129;
    } else {
     $192 = ($184|0)==(0);
     $193 = ($189|0)==(0);
     $or$cond392 = $192 | $193;
     $194 = HEAP32[$0>>2]|0;
     $195 = ((($194)) + 12|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ((($194)) + 16|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = ($196|0)==($198|0);
     if ($or$cond392) {
      if ($199) {
       $200 = HEAP32[$194>>2]|0;
       $201 = ((($200)) + 36|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = (FUNCTION_TABLE_ii[$202 & 127]($194)|0);
       $$0$i$i221 = $203;
      } else {
       $204 = HEAP8[$196>>0]|0;
       $205 = $204&255;
       $$0$i$i221 = $205;
      }
      $206 = $$0$i$i221&255;
      if ($192) {
       $229 = HEAP8[$43>>0]|0;
       $230 = ($229<<24>>24)<(0);
       $231 = HEAP32[$22>>2]|0;
       $232 = $230 ? $231 : $22;
       $233 = HEAP8[$232>>0]|0;
       $234 = ($206<<24>>24)==($233<<24>>24);
       if (!($234)) {
        $$1130 = $$0129;
        break L42;
       }
       $235 = HEAP32[$0>>2]|0;
       $236 = ((($235)) + 12|0);
       $237 = HEAP32[$236>>2]|0;
       $238 = ((($235)) + 16|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = ($237|0)==($239|0);
       if ($240) {
        $241 = HEAP32[$235>>2]|0;
        $242 = ((($241)) + 40|0);
        $243 = HEAP32[$242>>2]|0;
        (FUNCTION_TABLE_ii[$243 & 127]($235)|0);
        $$pre377 = HEAP8[$43>>0]|0;
        $246 = $$pre377;
       } else {
        $244 = ((($237)) + 1|0);
        HEAP32[$236>>2] = $244;
        $246 = $229;
       }
       HEAP8[$6>>0] = 1;
       $245 = ($246<<24>>24)<(0);
       $247 = HEAP32[$44>>2]|0;
       $248 = $246&255;
       $249 = $245 ? $247 : $248;
       $250 = ($249>>>0)>(1);
       $$$0129139 = $250 ? $22 : $$0129;
       $$1130 = $$$0129139;
       break L42;
      }
      $207 = HEAP8[$41>>0]|0;
      $208 = ($207<<24>>24)<(0);
      $209 = HEAP32[$21>>2]|0;
      $210 = $208 ? $209 : $21;
      $211 = HEAP8[$210>>0]|0;
      $212 = ($206<<24>>24)==($211<<24>>24);
      if (!($212)) {
       HEAP8[$6>>0] = 1;
       $$1130 = $$0129;
       break L42;
      }
      $213 = HEAP32[$0>>2]|0;
      $214 = ((($213)) + 12|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = ((($213)) + 16|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = ($215|0)==($217|0);
      if ($218) {
       $219 = HEAP32[$213>>2]|0;
       $220 = ((($219)) + 40|0);
       $221 = HEAP32[$220>>2]|0;
       (FUNCTION_TABLE_ii[$221 & 127]($213)|0);
       $$pre376 = HEAP8[$41>>0]|0;
       $224 = $$pre376;
      } else {
       $222 = ((($215)) + 1|0);
       HEAP32[$214>>2] = $222;
       $224 = $207;
      }
      $223 = ($224<<24>>24)<(0);
      $225 = HEAP32[$42>>2]|0;
      $226 = $224&255;
      $227 = $223 ? $225 : $226;
      $228 = ($227>>>0)>(1);
      $$$0129 = $228 ? $21 : $$0129;
      $$1130 = $$$0129;
      break L42;
     }
     if ($199) {
      $251 = HEAP32[$194>>2]|0;
      $252 = ((($251)) + 36|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = (FUNCTION_TABLE_ii[$253 & 127]($194)|0);
      $$pre369 = HEAP8[$41>>0]|0;
      $$pre370 = HEAP32[$0>>2]|0;
      $$phi$trans$insert = ((($$pre370)) + 12|0);
      $$pre371 = HEAP32[$$phi$trans$insert>>2]|0;
      $$phi$trans$insert372 = ((($$pre370)) + 16|0);
      $$pre373 = HEAP32[$$phi$trans$insert372>>2]|0;
      $$0$i$i229 = $254;$259 = $$pre369;$265 = $$pre370;$267 = $$pre371;$268 = $$pre373;
     } else {
      $255 = HEAP8[$196>>0]|0;
      $256 = $255&255;
      $$0$i$i229 = $256;$259 = $180;$265 = $194;$267 = $196;$268 = $198;
     }
     $257 = $$0$i$i229&255;
     $258 = ($259<<24>>24)<(0);
     $260 = HEAP32[$21>>2]|0;
     $261 = $258 ? $260 : $21;
     $262 = HEAP8[$261>>0]|0;
     $263 = ($257<<24>>24)==($262<<24>>24);
     $264 = ((($265)) + 12|0);
     $266 = ($267|0)==($268|0);
     if ($263) {
      if ($266) {
       $269 = HEAP32[$265>>2]|0;
       $270 = ((($269)) + 40|0);
       $271 = HEAP32[$270>>2]|0;
       (FUNCTION_TABLE_ii[$271 & 127]($265)|0);
       $$pre375 = HEAP8[$41>>0]|0;
       $274 = $$pre375;
      } else {
       $272 = ((($267)) + 1|0);
       HEAP32[$264>>2] = $272;
       $274 = $259;
      }
      $273 = ($274<<24>>24)<(0);
      $275 = HEAP32[$42>>2]|0;
      $276 = $274&255;
      $277 = $273 ? $275 : $276;
      $278 = ($277>>>0)>(1);
      $$$0129140 = $278 ? $21 : $$0129;
      $$1130 = $$$0129140;
      break L42;
     }
     if ($266) {
      $279 = HEAP32[$265>>2]|0;
      $280 = ((($279)) + 36|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = (FUNCTION_TABLE_ii[$281 & 127]($265)|0);
      $$0$i$i239 = $282;
     } else {
      $283 = HEAP8[$267>>0]|0;
      $284 = $283&255;
      $$0$i$i239 = $284;
     }
     $285 = $$0$i$i239&255;
     $286 = HEAP8[$43>>0]|0;
     $287 = ($286<<24>>24)<(0);
     $288 = HEAP32[$22>>2]|0;
     $289 = $287 ? $288 : $22;
     $290 = HEAP8[$289>>0]|0;
     $291 = ($285<<24>>24)==($290<<24>>24);
     if (!($291)) {
      label = 97;
      break L21;
     }
     $292 = HEAP32[$0>>2]|0;
     $293 = ((($292)) + 12|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = ((($292)) + 16|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = ($294|0)==($296|0);
     if ($297) {
      $298 = HEAP32[$292>>2]|0;
      $299 = ((($298)) + 40|0);
      $300 = HEAP32[$299>>2]|0;
      (FUNCTION_TABLE_ii[$300 & 127]($292)|0);
      $$pre374 = HEAP8[$43>>0]|0;
      $303 = $$pre374;
     } else {
      $301 = ((($294)) + 1|0);
      HEAP32[$293>>2] = $301;
      $303 = $286;
     }
     HEAP8[$6>>0] = 1;
     $302 = ($303<<24>>24)<(0);
     $304 = HEAP32[$44>>2]|0;
     $305 = $303&255;
     $306 = $302 ? $304 : $305;
     $307 = ($306>>>0)>(1);
     $$$0129141 = $307 ? $22 : $$0129;
     $$1130 = $$$0129141;
    }
    break;
   }
   case 2:  {
    $310 = ($$0129|0)!=(0|0);
    $311 = ($$0131>>>0)<(2);
    $or$cond = $311 | $310;
    if (!($or$cond)) {
     $312 = ($$0131|0)==(2);
     $313 = HEAP8[$51>>0]|0;
     $314 = ($313<<24>>24)!=(0);
     $315 = $312 & $314;
     $brmerge = $46 | $315;
     if (!($brmerge)) {
      $$1130 = 0;
      break L42;
     }
    }
    $316 = HEAP8[$47>>0]|0;
    $317 = ($316<<24>>24)<(0);
    $318 = HEAP32[$20>>2]|0;
    $319 = $317 ? $318 : $20;
    $320 = $319;
    $321 = ($$0131|0)==(0);
    L104: do {
     if ($321) {
      $$pre$i3$i$i262 = $736;$$sroa$0281$0 = $320;$360 = $316;$364 = $318;$384 = $736;
     } else {
      $322 = (($$0131) + -1)|0;
      $323 = (($16) + ($322)|0);
      $324 = HEAP8[$323>>0]|0;
      $switch = ($324&255)<(2);
      if ($switch) {
       $325 = HEAP32[$48>>2]|0;
       $326 = $316&255;
       $327 = $317 ? $325 : $326;
       $328 = (($319) + ($327)|0);
       $$sroa$0301$0 = $320;
       while(1) {
        $329 = $$sroa$0301$0;
        $330 = ($329|0)==($328|0);
        if ($330) {
         break;
        }
        $331 = HEAP8[$329>>0]|0;
        $isascii3$i274 = ($331<<24>>24)>(-1);
        if (!($isascii3$i274)) {
         break;
        }
        $332 = $331 << 24 >> 24;
        $333 = HEAP32[$40>>2]|0;
        $334 = (($333) + ($332<<1)|0);
        $335 = HEAP16[$334>>1]|0;
        $336 = $335 & 8192;
        $337 = ($336<<16>>16)==(0);
        if ($337) {
         break;
        }
        $338 = ((($329)) + 1|0);
        $339 = $338;
        $$sroa$0301$0 = $339;
       }
       $340 = (($$sroa$0301$0) - ($320))|0;
       $341 = HEAP8[$49>>0]|0;
       $342 = ($341<<24>>24)<(0);
       $343 = HEAP32[$50>>2]|0;
       $344 = $341&255;
       $345 = $342 ? $343 : $344;
       $346 = ($340>>>0)>($345>>>0);
       if ($346) {
        $$pre$i3$i$i262 = $736;$$sroa$0281$0 = $320;$360 = $316;$364 = $318;$384 = $736;
       } else {
        $347 = HEAP32[$23>>2]|0;
        $348 = $342 ? $347 : $23;
        $349 = (($348) + ($345)|0);
        $350 = (0 - ($340))|0;
        $351 = (($349) + ($350)|0);
        $$sink = $319;$353 = $351;
        while(1) {
         $352 = ($353|0)==($349|0);
         if ($352) {
          $$pre$i3$i$i262 = $736;$$sroa$0281$0 = $$sroa$0301$0;$360 = $316;$364 = $318;$384 = $736;
          break L104;
         }
         $354 = HEAP8[$353>>0]|0;
         $355 = HEAP8[$$sink>>0]|0;
         $356 = ($354<<24>>24)==($355<<24>>24);
         if (!($356)) {
          $$pre$i3$i$i262 = $736;$$sroa$0281$0 = $320;$360 = $316;$364 = $318;$384 = $736;
          break L104;
         }
         $357 = ((($353)) + 1|0);
         $358 = ((($$sink)) + 1|0);
         $$sink = $358;$353 = $357;
        }
       }
      } else {
       $$pre$i3$i$i262 = $736;$$sroa$0281$0 = $320;$360 = $316;$364 = $318;$384 = $736;
      }
     }
    } while(0);
    L118: while(1) {
     $359 = ($360<<24>>24)<(0);
     $361 = HEAP32[$48>>2]|0;
     $362 = $360&255;
     $363 = $359 ? $364 : $20;
     $365 = $359 ? $361 : $362;
     $366 = (($363) + ($365)|0);
     $367 = $$sroa$0281$0;
     $368 = ($367|0)==($366|0);
     if ($368) {
      $$lcssa = $366;
      break;
     }
     $369 = HEAP32[$0>>2]|0;
     $370 = ($369|0)==(0|0);
     do {
      if ($370) {
       $382 = 0;
      } else {
       $371 = ((($369)) + 12|0);
       $372 = HEAP32[$371>>2]|0;
       $373 = ((($369)) + 16|0);
       $374 = HEAP32[$373>>2]|0;
       $375 = ($372|0)==($374|0);
       if ($375) {
        $376 = HEAP32[$369>>2]|0;
        $377 = ((($376)) + 36|0);
        $378 = HEAP32[$377>>2]|0;
        $379 = (FUNCTION_TABLE_ii[$378 & 127]($369)|0);
        $380 = ($379|0)==(-1);
        if ($380) {
         HEAP32[$0>>2] = 0;
         $382 = 0;
         break;
        } else {
         $$pre$i$i$i258 = HEAP32[$0>>2]|0;
         $382 = $$pre$i$i$i258;
         break;
        }
       } else {
        $382 = $369;
       }
      }
     } while(0);
     $381 = ($382|0)==(0|0);
     $383 = ($384|0)==(0|0);
     do {
      if ($383) {
       $$pre$i3$i$i262367 = $$pre$i3$i$i262;
       label = 123;
      } else {
       $385 = ((($384)) + 12|0);
       $386 = HEAP32[$385>>2]|0;
       $387 = ((($384)) + 16|0);
       $388 = HEAP32[$387>>2]|0;
       $389 = ($386|0)==($388|0);
       if (!($389)) {
        if ($381) {
         $$pre$i3$i$i262366 = $$pre$i3$i$i262;$738 = $384;
         break;
        } else {
         $$lcssa = $367;
         break L118;
        }
       }
       $390 = HEAP32[$384>>2]|0;
       $391 = ((($390)) + 36|0);
       $392 = HEAP32[$391>>2]|0;
       $393 = (FUNCTION_TABLE_ii[$392 & 127]($384)|0);
       $394 = ($393|0)==(-1);
       if ($394) {
        HEAP32[$1>>2] = 0;
        $$pre$i3$i$i262367 = 0;
        label = 123;
        break;
       } else {
        $395 = ($$pre$i3$i$i262|0)==(0|0);
        $tmp$i$i264 = $381 ^ $395;
        if ($tmp$i$i264) {
         $$pre$i3$i$i262366 = $$pre$i3$i$i262;$738 = $$pre$i3$i$i262;
         break;
        } else {
         $$lcssa = $367;
         break L118;
        }
       }
      }
     } while(0);
     if ((label|0) == 123) {
      label = 0;
      if ($381) {
       $$lcssa = $367;
       break;
      } else {
       $$pre$i3$i$i262366 = $$pre$i3$i$i262367;$738 = 0;
      }
     }
     $396 = HEAP32[$0>>2]|0;
     $397 = ((($396)) + 12|0);
     $398 = HEAP32[$397>>2]|0;
     $399 = ((($396)) + 16|0);
     $400 = HEAP32[$399>>2]|0;
     $401 = ($398|0)==($400|0);
     if ($401) {
      $402 = HEAP32[$396>>2]|0;
      $403 = ((($402)) + 36|0);
      $404 = HEAP32[$403>>2]|0;
      $405 = (FUNCTION_TABLE_ii[$404 & 127]($396)|0);
      $$0$i$i254 = $405;
     } else {
      $406 = HEAP8[$398>>0]|0;
      $407 = $406&255;
      $$0$i$i254 = $407;
     }
     $408 = $$0$i$i254&255;
     $409 = HEAP8[$367>>0]|0;
     $410 = ($408<<24>>24)==($409<<24>>24);
     if (!($410)) {
      $$lcssa = $367;
      break;
     }
     $411 = HEAP32[$0>>2]|0;
     $412 = ((($411)) + 12|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = ((($411)) + 16|0);
     $415 = HEAP32[$414>>2]|0;
     $416 = ($413|0)==($415|0);
     if ($416) {
      $417 = HEAP32[$411>>2]|0;
      $418 = ((($417)) + 40|0);
      $419 = HEAP32[$418>>2]|0;
      (FUNCTION_TABLE_ii[$419 & 127]($411)|0);
     } else {
      $420 = ((($413)) + 1|0);
      HEAP32[$412>>2] = $420;
     }
     $421 = ((($367)) + 1|0);
     $422 = $421;
     $$pre364 = HEAP8[$47>>0]|0;
     $$pre365 = HEAP32[$20>>2]|0;
     $$pre$i3$i$i262 = $$pre$i3$i$i262366;$$sroa$0281$0 = $422;$360 = $$pre364;$364 = $$pre365;$384 = $738;
    }
    if ($46) {
     $423 = HEAP8[$47>>0]|0;
     $424 = ($423<<24>>24)<(0);
     $425 = HEAP32[$20>>2]|0;
     $426 = HEAP32[$48>>2]|0;
     $427 = $423&255;
     $428 = $424 ? $425 : $20;
     $429 = $424 ? $426 : $427;
     $430 = (($428) + ($429)|0);
     $431 = ($$lcssa|0)==($430|0);
     if ($431) {
      $$1130 = $$0129;
     } else {
      label = 135;
      break L21;
     }
    } else {
     $$1130 = $$0129;
    }
    break;
   }
   case 4:  {
    $$0124 = 0;$$pre$i3$i$i247 = $736;$449 = $736;
    L150: while(1) {
     $434 = HEAP32[$0>>2]|0;
     $435 = ($434|0)==(0|0);
     do {
      if ($435) {
       $447 = 0;
      } else {
       $436 = ((($434)) + 12|0);
       $437 = HEAP32[$436>>2]|0;
       $438 = ((($434)) + 16|0);
       $439 = HEAP32[$438>>2]|0;
       $440 = ($437|0)==($439|0);
       if ($440) {
        $441 = HEAP32[$434>>2]|0;
        $442 = ((($441)) + 36|0);
        $443 = HEAP32[$442>>2]|0;
        $444 = (FUNCTION_TABLE_ii[$443 & 127]($434)|0);
        $445 = ($444|0)==(-1);
        if ($445) {
         HEAP32[$0>>2] = 0;
         $447 = 0;
         break;
        } else {
         $$pre$i$i$i243 = HEAP32[$0>>2]|0;
         $447 = $$pre$i$i$i243;
         break;
        }
       } else {
        $447 = $434;
       }
      }
     } while(0);
     $446 = ($447|0)==(0|0);
     $448 = ($449|0)==(0|0);
     do {
      if ($448) {
       $$pre$i3$i$i247357 = $$pre$i3$i$i247;
       label = 146;
      } else {
       $450 = ((($449)) + 12|0);
       $451 = HEAP32[$450>>2]|0;
       $452 = ((($449)) + 16|0);
       $453 = HEAP32[$452>>2]|0;
       $454 = ($451|0)==($453|0);
       if (!($454)) {
        if ($446) {
         $$pre$i3$i$i247359 = $$pre$i3$i$i247;$739 = $449;
         break;
        } else {
         $$pre$i3$i$i217 = $$pre$i3$i$i247;
         break L150;
        }
       }
       $455 = HEAP32[$449>>2]|0;
       $456 = ((($455)) + 36|0);
       $457 = HEAP32[$456>>2]|0;
       $458 = (FUNCTION_TABLE_ii[$457 & 127]($449)|0);
       $459 = ($458|0)==(-1);
       if ($459) {
        HEAP32[$1>>2] = 0;
        $$pre$i3$i$i247357 = 0;
        label = 146;
        break;
       } else {
        $460 = ($$pre$i3$i$i247|0)==(0|0);
        $tmp$i$i249 = $446 ^ $460;
        if ($tmp$i$i249) {
         $$pre$i3$i$i247359 = $$pre$i3$i$i247;$739 = $$pre$i3$i$i247;
         break;
        } else {
         $$pre$i3$i$i217 = $$pre$i3$i$i247;
         break L150;
        }
       }
      }
     } while(0);
     if ((label|0) == 146) {
      label = 0;
      if ($446) {
       $$pre$i3$i$i217 = $$pre$i3$i$i247357;
       break;
      } else {
       $$pre$i3$i$i247359 = $$pre$i3$i$i247357;$739 = 0;
      }
     }
     $461 = HEAP32[$0>>2]|0;
     $462 = ((($461)) + 12|0);
     $463 = HEAP32[$462>>2]|0;
     $464 = ((($461)) + 16|0);
     $465 = HEAP32[$464>>2]|0;
     $466 = ($463|0)==($465|0);
     if ($466) {
      $467 = HEAP32[$461>>2]|0;
      $468 = ((($467)) + 36|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = (FUNCTION_TABLE_ii[$469 & 127]($461)|0);
      $$0$i$i237 = $470;
     } else {
      $471 = HEAP8[$463>>0]|0;
      $472 = $471&255;
      $$0$i$i237 = $472;
     }
     $473 = $$0$i$i237&255;
     $isascii3$i235 = ($473<<24>>24)>(-1);
     if ($isascii3$i235) {
      $sext341 = $$0$i$i237 << 24;
      $474 = $sext341 >> 24;
      $475 = HEAP32[$40>>2]|0;
      $476 = (($475) + ($474<<1)|0);
      $477 = HEAP16[$476>>1]|0;
      $478 = $477 & 2048;
      $479 = ($478<<16>>16)==(0);
      if ($479) {
       label = 156;
      } else {
       $480 = HEAP32[$9>>2]|0;
       $481 = HEAP32[$11>>2]|0;
       $482 = ($480|0)==($481|0);
       if ($482) {
        __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
        $$pre = HEAP32[$9>>2]|0;
        $484 = $$pre;
       } else {
        $484 = $480;
       }
       $483 = ((($484)) + 1|0);
       HEAP32[$9>>2] = $483;
       HEAP8[$484>>0] = $473;
       $485 = (($$0124) + 1)|0;
       $$2126$ph = $485;
      }
     } else {
      label = 156;
     }
     if ((label|0) == 156) {
      label = 0;
      $486 = HEAP8[$52>>0]|0;
      $487 = ($486<<24>>24)<(0);
      $488 = HEAP32[$53>>2]|0;
      $489 = $486&255;
      $490 = $487 ? $488 : $489;
      $491 = ($490|0)!=(0);
      $492 = ($$0124|0)!=(0);
      $or$cond13 = $492 & $491;
      $493 = HEAP8[$18>>0]|0;
      $494 = ($473<<24>>24)==($493<<24>>24);
      $or$cond143 = $494 & $or$cond13;
      if (!($or$cond143)) {
       $$pre$i3$i$i217 = $$pre$i3$i$i247359;
       break;
      }
      $495 = HEAP32[$14>>2]|0;
      $496 = HEAP32[$15>>2]|0;
      $497 = ($495|0)==($496|0);
      if ($497) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
       $$pre360 = HEAP32[$14>>2]|0;
       $499 = $$pre360;
      } else {
       $499 = $495;
      }
      $498 = ((($499)) + 4|0);
      HEAP32[$14>>2] = $498;
      HEAP32[$499>>2] = $$0124;
      $$2126$ph = 0;
     }
     $500 = HEAP32[$0>>2]|0;
     $501 = ((($500)) + 12|0);
     $502 = HEAP32[$501>>2]|0;
     $503 = ((($500)) + 16|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = ($502|0)==($504|0);
     if ($505) {
      $506 = HEAP32[$500>>2]|0;
      $507 = ((($506)) + 40|0);
      $508 = HEAP32[$507>>2]|0;
      (FUNCTION_TABLE_ii[$508 & 127]($500)|0);
      $$0124 = $$2126$ph;$$pre$i3$i$i247 = $$pre$i3$i$i247359;$449 = $739;
      continue;
     } else {
      $509 = ((($502)) + 1|0);
      HEAP32[$501>>2] = $509;
      $$0124 = $$2126$ph;$$pre$i3$i$i247 = $$pre$i3$i$i247359;$449 = $739;
      continue;
     }
    }
    $510 = HEAP32[$13>>2]|0;
    $511 = HEAP32[$14>>2]|0;
    $512 = ($510|0)!=($511|0);
    $513 = ($$0124|0)!=(0);
    $or$cond15 = $513 & $512;
    if ($or$cond15) {
     $514 = HEAP32[$15>>2]|0;
     $515 = ($511|0)==($514|0);
     if ($515) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
      $$pre361 = HEAP32[$14>>2]|0;
      $517 = $$pre361;
     } else {
      $517 = $511;
     }
     $516 = ((($517)) + 4|0);
     HEAP32[$14>>2] = $516;
     HEAP32[$517>>2] = $$0124;
    }
    $518 = HEAP32[$24>>2]|0;
    $519 = ($518|0)>(0);
    L197: do {
     if ($519) {
      $520 = HEAP32[$0>>2]|0;
      $521 = ($520|0)==(0|0);
      do {
       if ($521) {
        $533 = 0;
       } else {
        $522 = ((($520)) + 12|0);
        $523 = HEAP32[$522>>2]|0;
        $524 = ((($520)) + 16|0);
        $525 = HEAP32[$524>>2]|0;
        $526 = ($523|0)==($525|0);
        if ($526) {
         $527 = HEAP32[$520>>2]|0;
         $528 = ((($527)) + 36|0);
         $529 = HEAP32[$528>>2]|0;
         $530 = (FUNCTION_TABLE_ii[$529 & 127]($520)|0);
         $531 = ($530|0)==(-1);
         if ($531) {
          HEAP32[$0>>2] = 0;
          $533 = 0;
          break;
         } else {
          $$pre$i$i$i213 = HEAP32[$0>>2]|0;
          $533 = $$pre$i$i$i213;
          break;
         }
        } else {
         $533 = $520;
        }
       }
      } while(0);
      $532 = ($533|0)==(0|0);
      $534 = ($$pre$i3$i$i217|0)==(0|0);
      do {
       if ($534) {
        label = 178;
       } else {
        $535 = ((($$pre$i3$i$i217)) + 12|0);
        $536 = HEAP32[$535>>2]|0;
        $537 = ((($$pre$i3$i$i217)) + 16|0);
        $538 = HEAP32[$537>>2]|0;
        $539 = ($536|0)==($538|0);
        if ($539) {
         $540 = HEAP32[$$pre$i3$i$i217>>2]|0;
         $541 = ((($540)) + 36|0);
         $542 = HEAP32[$541>>2]|0;
         $543 = (FUNCTION_TABLE_ii[$542 & 127]($$pre$i3$i$i217)|0);
         $544 = ($543|0)==(-1);
         if ($544) {
          HEAP32[$1>>2] = 0;
          label = 178;
          break;
         }
        }
        if ($532) {
         $740 = $$pre$i3$i$i217;
        } else {
         label = 183;
         break L21;
        }
       }
      } while(0);
      if ((label|0) == 178) {
       label = 0;
       if ($532) {
        label = 183;
        break L21;
       } else {
        $740 = 0;
       }
      }
      $545 = HEAP32[$0>>2]|0;
      $546 = ((($545)) + 12|0);
      $547 = HEAP32[$546>>2]|0;
      $548 = ((($545)) + 16|0);
      $549 = HEAP32[$548>>2]|0;
      $550 = ($547|0)==($549|0);
      if ($550) {
       $551 = HEAP32[$545>>2]|0;
       $552 = ((($551)) + 36|0);
       $553 = HEAP32[$552>>2]|0;
       $554 = (FUNCTION_TABLE_ii[$553 & 127]($545)|0);
       $$0$i$i209 = $554;
      } else {
       $555 = HEAP8[$547>>0]|0;
       $556 = $555&255;
       $$0$i$i209 = $556;
      }
      $557 = $$0$i$i209&255;
      $558 = HEAP8[$17>>0]|0;
      $559 = ($557<<24>>24)==($558<<24>>24);
      if (!($559)) {
       label = 183;
       break L21;
      }
      $562 = HEAP32[$0>>2]|0;
      $563 = ((($562)) + 12|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ((($562)) + 16|0);
      $566 = HEAP32[$565>>2]|0;
      $567 = ($564|0)==($566|0);
      if ($567) {
       $568 = HEAP32[$562>>2]|0;
       $569 = ((($568)) + 40|0);
       $570 = HEAP32[$569>>2]|0;
       (FUNCTION_TABLE_ii[$570 & 127]($562)|0);
       $$pre$i3$i$i201 = $740;$589 = $740;
      } else {
       $571 = ((($564)) + 1|0);
       HEAP32[$563>>2] = $571;
       $$pre$i3$i$i201 = $740;$589 = $740;
      }
      while(1) {
       $572 = HEAP32[$24>>2]|0;
       $573 = ($572|0)>(0);
       if (!($573)) {
        break L197;
       }
       $574 = HEAP32[$0>>2]|0;
       $575 = ($574|0)==(0|0);
       do {
        if ($575) {
         $587 = 0;
        } else {
         $576 = ((($574)) + 12|0);
         $577 = HEAP32[$576>>2]|0;
         $578 = ((($574)) + 16|0);
         $579 = HEAP32[$578>>2]|0;
         $580 = ($577|0)==($579|0);
         if ($580) {
          $581 = HEAP32[$574>>2]|0;
          $582 = ((($581)) + 36|0);
          $583 = HEAP32[$582>>2]|0;
          $584 = (FUNCTION_TABLE_ii[$583 & 127]($574)|0);
          $585 = ($584|0)==(-1);
          if ($585) {
           HEAP32[$0>>2] = 0;
           $587 = 0;
           break;
          } else {
           $$pre$i$i$i197 = HEAP32[$0>>2]|0;
           $587 = $$pre$i$i$i197;
           break;
          }
         } else {
          $587 = $574;
         }
        }
       } while(0);
       $586 = ($587|0)==(0|0);
       $588 = ($589|0)==(0|0);
       do {
        if ($588) {
         $$pre$i3$i$i201362$ph = $$pre$i3$i$i201;
         label = 198;
        } else {
         $590 = ((($589)) + 12|0);
         $591 = HEAP32[$590>>2]|0;
         $592 = ((($589)) + 16|0);
         $593 = HEAP32[$592>>2]|0;
         $594 = ($591|0)==($593|0);
         if (!($594)) {
          if ($586) {
           $$pre$i3$i$i201362383 = $$pre$i3$i$i201;$741 = $589;
           break;
          } else {
           label = 205;
           break L21;
          }
         }
         $595 = HEAP32[$589>>2]|0;
         $596 = ((($595)) + 36|0);
         $597 = HEAP32[$596>>2]|0;
         $598 = (FUNCTION_TABLE_ii[$597 & 127]($589)|0);
         $599 = ($598|0)==(-1);
         if ($599) {
          HEAP32[$1>>2] = 0;
          $$pre$i3$i$i201362$ph = 0;
          label = 198;
          break;
         } else {
          $600 = ($$pre$i3$i$i201|0)==(0|0);
          $tmp$i$i203 = $586 ^ $600;
          if ($tmp$i$i203) {
           $$pre$i3$i$i201362383 = $$pre$i3$i$i201;$741 = $$pre$i3$i$i201;
           break;
          } else {
           label = 205;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 198) {
        label = 0;
        if ($586) {
         label = 205;
         break L21;
        } else {
         $$pre$i3$i$i201362383 = $$pre$i3$i$i201362$ph;$741 = 0;
        }
       }
       $601 = HEAP32[$0>>2]|0;
       $602 = ((($601)) + 12|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = ((($601)) + 16|0);
       $605 = HEAP32[$604>>2]|0;
       $606 = ($603|0)==($605|0);
       if ($606) {
        $607 = HEAP32[$601>>2]|0;
        $608 = ((($607)) + 36|0);
        $609 = HEAP32[$608>>2]|0;
        $610 = (FUNCTION_TABLE_ii[$609 & 127]($601)|0);
        $$0$i$i193 = $610;
       } else {
        $611 = HEAP8[$603>>0]|0;
        $612 = $611&255;
        $$0$i$i193 = $612;
       }
       $613 = $$0$i$i193&255;
       $isascii3$i191 = ($613<<24>>24)>(-1);
       if (!($isascii3$i191)) {
        label = 205;
        break L21;
       }
       $sext = $$0$i$i193 << 24;
       $614 = $sext >> 24;
       $615 = HEAP32[$40>>2]|0;
       $616 = (($615) + ($614<<1)|0);
       $617 = HEAP16[$616>>1]|0;
       $618 = $617 & 2048;
       $619 = ($618<<16>>16)==(0);
       if ($619) {
        label = 205;
        break L21;
       }
       $622 = HEAP32[$9>>2]|0;
       $623 = HEAP32[$11>>2]|0;
       $624 = ($622|0)==($623|0);
       if ($624) {
        __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
       }
       $625 = HEAP32[$0>>2]|0;
       $626 = ((($625)) + 12|0);
       $627 = HEAP32[$626>>2]|0;
       $628 = ((($625)) + 16|0);
       $629 = HEAP32[$628>>2]|0;
       $630 = ($627|0)==($629|0);
       if ($630) {
        $631 = HEAP32[$625>>2]|0;
        $632 = ((($631)) + 36|0);
        $633 = HEAP32[$632>>2]|0;
        $634 = (FUNCTION_TABLE_ii[$633 & 127]($625)|0);
        $$0$i$i161 = $634;
       } else {
        $635 = HEAP8[$627>>0]|0;
        $636 = $635&255;
        $$0$i$i161 = $636;
       }
       $637 = $$0$i$i161&255;
       $638 = HEAP32[$9>>2]|0;
       $639 = ((($638)) + 1|0);
       HEAP32[$9>>2] = $639;
       HEAP8[$638>>0] = $637;
       $640 = HEAP32[$24>>2]|0;
       $641 = (($640) + -1)|0;
       HEAP32[$24>>2] = $641;
       $642 = HEAP32[$0>>2]|0;
       $643 = ((($642)) + 12|0);
       $644 = HEAP32[$643>>2]|0;
       $645 = ((($642)) + 16|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = ($644|0)==($646|0);
       if ($647) {
        $648 = HEAP32[$642>>2]|0;
        $649 = ((($648)) + 40|0);
        $650 = HEAP32[$649>>2]|0;
        (FUNCTION_TABLE_ii[$650 & 127]($642)|0);
        $$pre$i3$i$i201 = $$pre$i3$i$i201362383;$589 = $741;
        continue;
       } else {
        $651 = ((($644)) + 1|0);
        HEAP32[$643>>2] = $651;
        $$pre$i3$i$i201 = $$pre$i3$i$i201362383;$589 = $741;
        continue;
       }
      }
     }
    } while(0);
    $652 = HEAP32[$9>>2]|0;
    $653 = HEAP32[$8>>2]|0;
    $654 = ($652|0)==($653|0);
    if ($654) {
     label = 215;
     break L21;
    } else {
     $$1130 = $$0129;
    }
    break;
   }
   default: {
    $$1130 = $$0129;
   }
   }
  } while(0);
  L261: do {
   if ((label|0) == 43) {
    while(1) {
     label = 0;
     $120 = HEAP32[$0>>2]|0;
     $121 = ($120|0)==(0|0);
     do {
      if ($121) {
       $133 = 0;
      } else {
       $122 = ((($120)) + 12|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = ((($120)) + 16|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = ($123|0)==($125|0);
       if ($126) {
        $127 = HEAP32[$120>>2]|0;
        $128 = ((($127)) + 36|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = (FUNCTION_TABLE_ii[$129 & 127]($120)|0);
        $131 = ($130|0)==(-1);
        if ($131) {
         HEAP32[$0>>2] = 0;
         $133 = 0;
         break;
        } else {
         $$pre$i$i$i175 = HEAP32[$0>>2]|0;
         $133 = $$pre$i$i$i175;
         break;
        }
       } else {
        $133 = $120;
       }
      }
     } while(0);
     $132 = ($133|0)==(0|0);
     $134 = ($135|0)==(0|0);
     do {
      if ($134) {
       $$pre$i3$i$i179378 = $$pre$i3$i$i179;
       label = 53;
      } else {
       $136 = ((($135)) + 12|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = ((($135)) + 16|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($137|0)==($139|0);
       if (!($140)) {
        if ($132) {
         $$pre$i3$i$i179380 = $$pre$i3$i$i179;$737 = $135;
         break;
        } else {
         $$1130 = $$0129;
         break L261;
        }
       }
       $141 = HEAP32[$135>>2]|0;
       $142 = ((($141)) + 36|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (FUNCTION_TABLE_ii[$143 & 127]($135)|0);
       $145 = ($144|0)==(-1);
       if ($145) {
        HEAP32[$1>>2] = 0;
        $$pre$i3$i$i179378 = 0;
        label = 53;
        break;
       } else {
        $146 = ($$pre$i3$i$i179|0)==(0|0);
        $tmp$i$i181 = $132 ^ $146;
        if ($tmp$i$i181) {
         $$pre$i3$i$i179380 = $$pre$i3$i$i179;$737 = $$pre$i3$i$i179;
         break;
        } else {
         $$1130 = $$0129;
         break L261;
        }
       }
      }
     } while(0);
     if ((label|0) == 53) {
      label = 0;
      if ($132) {
       $$1130 = $$0129;
       break L261;
      } else {
       $$pre$i3$i$i179380 = $$pre$i3$i$i179378;$737 = 0;
      }
     }
     $147 = HEAP32[$0>>2]|0;
     $148 = ((($147)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ((($147)) + 16|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($149|0)==($151|0);
     if ($152) {
      $153 = HEAP32[$147>>2]|0;
      $154 = ((($153)) + 36|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (FUNCTION_TABLE_ii[$155 & 127]($147)|0);
      $$0$i$i183 = $156;
     } else {
      $157 = HEAP8[$149>>0]|0;
      $158 = $157&255;
      $$0$i$i183 = $158;
     }
     $159 = $$0$i$i183&255;
     $isascii3$i185 = ($159<<24>>24)>(-1);
     if (!($isascii3$i185)) {
      $$1130 = $$0129;
      break L261;
     }
     $sext342 = $$0$i$i183 << 24;
     $160 = $sext342 >> 24;
     $161 = HEAP32[$40>>2]|0;
     $162 = (($161) + ($160<<1)|0);
     $163 = HEAP16[$162>>1]|0;
     $164 = $163 & 8192;
     $165 = ($164<<16>>16)==(0);
     if ($165) {
      $$1130 = $$0129;
      break L261;
     }
     $166 = HEAP32[$0>>2]|0;
     $167 = ((($166)) + 12|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ((($166)) + 16|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ($168|0)==($170|0);
     if ($171) {
      $172 = HEAP32[$166>>2]|0;
      $173 = ((($172)) + 40|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (FUNCTION_TABLE_ii[$174 & 127]($166)|0);
      $$0$i$i189 = $175;
     } else {
      $176 = ((($168)) + 1|0);
      HEAP32[$167>>2] = $176;
      $177 = HEAP8[$168>>0]|0;
      $178 = $177&255;
      $$0$i$i189 = $178;
     }
     $179 = $$0$i$i189&255;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($23,$179);
     $$pre$i3$i$i179 = $$pre$i3$i$i179380;$135 = $737;
     label = 43;
    }
   }
  } while(0);
  $657 = (($$0131) + 1)|0;
  $$0129 = $$1130;$$0131 = $657;
 }
 L293: do {
  if ((label|0) == 41) {
   $117 = HEAP32[$5>>2]|0;
   $118 = $117 | 4;
   HEAP32[$5>>2] = $118;
   $$10 = 0;
  }
  else if ((label|0) == 97) {
   $308 = HEAP32[$5>>2]|0;
   $309 = $308 | 4;
   HEAP32[$5>>2] = $309;
   $$10 = 0;
  }
  else if ((label|0) == 135) {
   $432 = HEAP32[$5>>2]|0;
   $433 = $432 | 4;
   HEAP32[$5>>2] = $433;
   $$10 = 0;
  }
  else if ((label|0) == 183) {
   $560 = HEAP32[$5>>2]|0;
   $561 = $560 | 4;
   HEAP32[$5>>2] = $561;
   $$10 = 0;
  }
  else if ((label|0) == 205) {
   $620 = HEAP32[$5>>2]|0;
   $621 = $620 | 4;
   HEAP32[$5>>2] = $621;
   $$10 = 0;
  }
  else if ((label|0) == 215) {
   $655 = HEAP32[$5>>2]|0;
   $656 = $655 | 4;
   HEAP32[$5>>2] = $656;
   $$10 = 0;
  }
  else if ((label|0) == 217) {
   $658 = ($$0129|0)==(0|0);
   L295: do {
    if (!($658)) {
     $659 = ((($$0129)) + 11|0);
     $660 = ((($$0129)) + 4|0);
     $$0 = 1;
     L297: while(1) {
      $661 = HEAP8[$659>>0]|0;
      $662 = ($661<<24>>24)<(0);
      if ($662) {
       $663 = HEAP32[$660>>2]|0;
       $666 = $663;
      } else {
       $664 = $661&255;
       $666 = $664;
      }
      $665 = ($$0>>>0)<($666>>>0);
      if (!($665)) {
       break L295;
      }
      $667 = HEAP32[$0>>2]|0;
      $668 = ($667|0)==(0|0);
      do {
       if ($668) {
        $680 = 0;
       } else {
        $669 = ((($667)) + 12|0);
        $670 = HEAP32[$669>>2]|0;
        $671 = ((($667)) + 16|0);
        $672 = HEAP32[$671>>2]|0;
        $673 = ($670|0)==($672|0);
        if ($673) {
         $674 = HEAP32[$667>>2]|0;
         $675 = ((($674)) + 36|0);
         $676 = HEAP32[$675>>2]|0;
         $677 = (FUNCTION_TABLE_ii[$676 & 127]($667)|0);
         $678 = ($677|0)==(-1);
         if ($678) {
          HEAP32[$0>>2] = 0;
          $680 = 0;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$0>>2]|0;
          $680 = $$pre$i$i$i;
          break;
         }
        } else {
         $680 = $667;
        }
       }
      } while(0);
      $679 = ($680|0)==(0|0);
      $681 = HEAP32[$1>>2]|0;
      $682 = ($681|0)==(0|0);
      do {
       if ($682) {
        label = 233;
       } else {
        $683 = ((($681)) + 12|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = ((($681)) + 16|0);
        $686 = HEAP32[$685>>2]|0;
        $687 = ($684|0)==($686|0);
        if ($687) {
         $688 = HEAP32[$681>>2]|0;
         $689 = ((($688)) + 36|0);
         $690 = HEAP32[$689>>2]|0;
         $691 = (FUNCTION_TABLE_ii[$690 & 127]($681)|0);
         $692 = ($691|0)==(-1);
         if ($692) {
          HEAP32[$1>>2] = 0;
          label = 233;
          break;
         }
        }
        if (!($679)) {
         break L297;
        }
       }
      } while(0);
      if ((label|0) == 233) {
       label = 0;
       if ($679) {
        break;
       }
      }
      $693 = HEAP32[$0>>2]|0;
      $694 = ((($693)) + 12|0);
      $695 = HEAP32[$694>>2]|0;
      $696 = ((($693)) + 16|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = ($695|0)==($697|0);
      if ($698) {
       $699 = HEAP32[$693>>2]|0;
       $700 = ((($699)) + 36|0);
       $701 = HEAP32[$700>>2]|0;
       $702 = (FUNCTION_TABLE_ii[$701 & 127]($693)|0);
       $$0$i$i150 = $702;
      } else {
       $703 = HEAP8[$695>>0]|0;
       $704 = $703&255;
       $$0$i$i150 = $704;
      }
      $705 = $$0$i$i150&255;
      $706 = HEAP8[$659>>0]|0;
      $707 = ($706<<24>>24)<(0);
      if ($707) {
       $708 = HEAP32[$$0129>>2]|0;
       $710 = $708;
      } else {
       $710 = $$0129;
      }
      $709 = (($710) + ($$0)|0);
      $711 = HEAP8[$709>>0]|0;
      $712 = ($705<<24>>24)==($711<<24>>24);
      if (!($712)) {
       break;
      }
      $715 = (($$0) + 1)|0;
      $716 = HEAP32[$0>>2]|0;
      $717 = ((($716)) + 12|0);
      $718 = HEAP32[$717>>2]|0;
      $719 = ((($716)) + 16|0);
      $720 = HEAP32[$719>>2]|0;
      $721 = ($718|0)==($720|0);
      if ($721) {
       $722 = HEAP32[$716>>2]|0;
       $723 = ((($722)) + 40|0);
       $724 = HEAP32[$723>>2]|0;
       (FUNCTION_TABLE_ii[$724 & 127]($716)|0);
       $$0 = $715;
       continue;
      } else {
       $725 = ((($718)) + 1|0);
       HEAP32[$717>>2] = $725;
       $$0 = $715;
       continue;
      }
     }
     $713 = HEAP32[$5>>2]|0;
     $714 = $713 | 4;
     HEAP32[$5>>2] = $714;
     $$10 = 0;
     break L293;
    }
   } while(0);
   $726 = HEAP32[$13>>2]|0;
   $727 = HEAP32[$14>>2]|0;
   $728 = ($726|0)==($727|0);
   if ($728) {
    $$10 = 1;
   } else {
    HEAP32[$25>>2] = 0;
    __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($19,$726,$727,$25);
    $729 = HEAP32[$25>>2]|0;
    $730 = ($729|0)==(0);
    if ($730) {
     $$10 = 1;
     break;
    } else {
     $731 = HEAP32[$5>>2]|0;
     $732 = $731 | 4;
     HEAP32[$5>>2] = $732;
     $$10 = 0;
     break;
    }
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $733 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $734 = ($733|0)==(0|0);
 if (!($734)) {
  $735 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$735 & 255]($733);
 }
 STACKTOP = sp;return ($$10|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$028 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep29 = 0;
 var $scevgep30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 2147483647;
  $phitmp$i = (($12) + -1)|0;
  $17 = $phitmp$i;$18 = $9;
 } else {
  $7 = $5&255;
  $17 = 10;$18 = $7;
 }
 $13 = $2;
 $14 = (($13) - ($3))|0;
 $15 = ($14|0)==(0);
 do {
  if (!($15)) {
   $16 = (($17) - ($18))|0;
   $19 = ($16>>>0)<($14>>>0);
   if ($19) {
    $20 = (($18) + ($14))|0;
    $21 = (($20) - ($17))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$17,$21,$18,$18,0,0);
    $$pre = HEAP8[$4>>0]|0;
    $23 = $$pre;
   } else {
    $23 = $5;
   }
   $22 = ($23<<24>>24)<(0);
   if ($22) {
    $24 = HEAP32[$0>>2]|0;
    $26 = $24;
   } else {
    $26 = $0;
   }
   $25 = (($26) + ($18)|0);
   $27 = (($18) - ($3))|0;
   $scevgep = (($2) + ($27)|0);
   $scevgep29 = $scevgep;
   $$0 = $25;$$028 = $1;
   while(1) {
    $28 = ($$028|0)==($2|0);
    if ($28) {
     break;
    }
    $29 = HEAP8[$$028>>0]|0;
    HEAP8[$$0>>0] = $29;
    $30 = ((($$0)) + 1|0);
    $31 = ((($$028)) + 1|0);
    $$0 = $30;$$028 = $31;
   }
   $scevgep30 = (($26) + ($scevgep29)|0);
   HEAP8[$scevgep30>>0] = 0;
   $32 = (($18) + ($14))|0;
   $33 = HEAP8[$4>>0]|0;
   $34 = ($33<<24>>24)<(0);
   if ($34) {
    $35 = ((($0)) + 4|0);
    HEAP32[$35>>2] = $32;
    break;
   } else {
    $36 = $32&255;
    HEAP8[$4>>0] = $36;
    break;
   }
  }
 } while(0);
 return ($0|0);
}
function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i41 = 0, $$0$i$i$i47 = 0, $$0$i$i$i53 = 0, $$0$i$i$i59 = 0, $$0$i$i$i65 = 0, $$0$i$i$i71 = 0, $$0$i$i$i77 = 0, $$pre$phi$i$i39Z2D = 0, $$pre$phi$i$i45Z2D = 0, $$pre$phi$i$i51Z2D = 0, $$pre$phi$i$i57Z2D = 0, $$pre$phi$i$i63Z2D = 0, $$pre$phi$i$i69Z2D = 0, $$pre$phi$i$i75Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i42 = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i60 = 0, $exitcond$i$i$i66 = 0, $exitcond$i$i$i72 = 0, $exitcond$i$i$i78 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $10 = sp;
 if ($0) {
  $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,40128)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vii[$14 & 127]($10,$11);
  $15 = HEAP32[$10>>2]|0;
  HEAP8[$2>>0]=$15&255;HEAP8[$2+1>>0]=($15>>8)&255;HEAP8[$2+2>>0]=($15>>16)&255;HEAP8[$2+3>>0]=$15>>24;
  $16 = HEAP32[$11>>2]|0;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vii[$18 & 127]($10,$11);
  $19 = ((($8)) + 11|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20<<24>>24)<(0);
  if ($21) {
   $22 = HEAP32[$8>>2]|0;
   HEAP8[$22>>0] = 0;
   $23 = ((($8)) + 4|0);
   HEAP32[$23>>2] = 0;
   $$pre$phi$i$iZ2D = $8;
  } else {
   HEAP8[$8>>0] = 0;
   HEAP8[$19>>0] = 0;
   $$pre$phi$i$iZ2D = $8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $24 = (($10) + ($$0$i$i$i<<2)|0);
   HEAP32[$24>>2] = 0;
   $25 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $25;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $26 = HEAP32[$11>>2]|0;
  $27 = ((($26)) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vii[$28 & 127]($10,$11);
  $29 = ((($7)) + 11|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)<(0);
  if ($31) {
   $32 = HEAP32[$7>>2]|0;
   HEAP8[$32>>0] = 0;
   $33 = ((($7)) + 4|0);
   HEAP32[$33>>2] = 0;
   $$pre$phi$i$i39Z2D = $7;
  } else {
   HEAP8[$7>>0] = 0;
   HEAP8[$29>>0] = 0;
   $$pre$phi$i$i39Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($7,0);
  ;HEAP32[$$pre$phi$i$i39Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i39Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i39Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i41 = 0;
  while(1) {
   $exitcond$i$i$i42 = ($$0$i$i$i41|0)==(3);
   if ($exitcond$i$i$i42) {
    break;
   }
   $34 = (($10) + ($$0$i$i$i41<<2)|0);
   HEAP32[$34>>2] = 0;
   $35 = (($$0$i$i$i41) + 1)|0;
   $$0$i$i$i41 = $35;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $36 = HEAP32[$11>>2]|0;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (FUNCTION_TABLE_ii[$38 & 127]($11)|0);
  HEAP8[$3>>0] = $39;
  $40 = HEAP32[$11>>2]|0;
  $41 = ((($40)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (FUNCTION_TABLE_ii[$42 & 127]($11)|0);
  HEAP8[$4>>0] = $43;
  $44 = HEAP32[$11>>2]|0;
  $45 = ((($44)) + 20|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_vii[$46 & 127]($10,$11);
  $47 = ((($5)) + 11|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = ($48<<24>>24)<(0);
  if ($49) {
   $50 = HEAP32[$5>>2]|0;
   HEAP8[$50>>0] = 0;
   $51 = ((($5)) + 4|0);
   HEAP32[$51>>2] = 0;
   $$pre$phi$i$i45Z2D = $5;
  } else {
   HEAP8[$5>>0] = 0;
   HEAP8[$47>>0] = 0;
   $$pre$phi$i$i45Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($5,0);
  ;HEAP32[$$pre$phi$i$i45Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i45Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i45Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i47 = 0;
  while(1) {
   $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
   if ($exitcond$i$i$i48) {
    break;
   }
   $52 = (($10) + ($$0$i$i$i47<<2)|0);
   HEAP32[$52>>2] = 0;
   $53 = (($$0$i$i$i47) + 1)|0;
   $$0$i$i$i47 = $53;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $54 = HEAP32[$11>>2]|0;
  $55 = ((($54)) + 24|0);
  $56 = HEAP32[$55>>2]|0;
  FUNCTION_TABLE_vii[$56 & 127]($10,$11);
  $57 = ((($6)) + 11|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = ($58<<24>>24)<(0);
  if ($59) {
   $60 = HEAP32[$6>>2]|0;
   HEAP8[$60>>0] = 0;
   $61 = ((($6)) + 4|0);
   HEAP32[$61>>2] = 0;
   $$pre$phi$i$i51Z2D = $6;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$57>>0] = 0;
   $$pre$phi$i$i51Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$i51Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i51Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i51Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $62 = (($10) + ($$0$i$i$i53<<2)|0);
   HEAP32[$62>>2] = 0;
   $63 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $63;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $64 = HEAP32[$11>>2]|0;
  $65 = ((($64)) + 36|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (FUNCTION_TABLE_ii[$66 & 127]($11)|0);
  $storemerge = $67;
 } else {
  $68 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,40120)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 44|0);
  $71 = HEAP32[$70>>2]|0;
  FUNCTION_TABLE_vii[$71 & 127]($10,$68);
  $72 = HEAP32[$10>>2]|0;
  HEAP8[$2>>0]=$72&255;HEAP8[$2+1>>0]=($72>>8)&255;HEAP8[$2+2>>0]=($72>>16)&255;HEAP8[$2+3>>0]=$72>>24;
  $73 = HEAP32[$68>>2]|0;
  $74 = ((($73)) + 32|0);
  $75 = HEAP32[$74>>2]|0;
  FUNCTION_TABLE_vii[$75 & 127]($10,$68);
  $76 = ((($8)) + 11|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = ($77<<24>>24)<(0);
  if ($78) {
   $79 = HEAP32[$8>>2]|0;
   HEAP8[$79>>0] = 0;
   $80 = ((($8)) + 4|0);
   HEAP32[$80>>2] = 0;
   $$pre$phi$i$i57Z2D = $8;
  } else {
   HEAP8[$8>>0] = 0;
   HEAP8[$76>>0] = 0;
   $$pre$phi$i$i57Z2D = $8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
  ;HEAP32[$$pre$phi$i$i57Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i59 = 0;
  while(1) {
   $exitcond$i$i$i60 = ($$0$i$i$i59|0)==(3);
   if ($exitcond$i$i$i60) {
    break;
   }
   $81 = (($10) + ($$0$i$i$i59<<2)|0);
   HEAP32[$81>>2] = 0;
   $82 = (($$0$i$i$i59) + 1)|0;
   $$0$i$i$i59 = $82;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $83 = HEAP32[$68>>2]|0;
  $84 = ((($83)) + 28|0);
  $85 = HEAP32[$84>>2]|0;
  FUNCTION_TABLE_vii[$85 & 127]($10,$68);
  $86 = ((($7)) + 11|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = ($87<<24>>24)<(0);
  if ($88) {
   $89 = HEAP32[$7>>2]|0;
   HEAP8[$89>>0] = 0;
   $90 = ((($7)) + 4|0);
   HEAP32[$90>>2] = 0;
   $$pre$phi$i$i63Z2D = $7;
  } else {
   HEAP8[$7>>0] = 0;
   HEAP8[$86>>0] = 0;
   $$pre$phi$i$i63Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($7,0);
  ;HEAP32[$$pre$phi$i$i63Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i63Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i63Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i65 = 0;
  while(1) {
   $exitcond$i$i$i66 = ($$0$i$i$i65|0)==(3);
   if ($exitcond$i$i$i66) {
    break;
   }
   $91 = (($10) + ($$0$i$i$i65<<2)|0);
   HEAP32[$91>>2] = 0;
   $92 = (($$0$i$i$i65) + 1)|0;
   $$0$i$i$i65 = $92;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $93 = HEAP32[$68>>2]|0;
  $94 = ((($93)) + 12|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (FUNCTION_TABLE_ii[$95 & 127]($68)|0);
  HEAP8[$3>>0] = $96;
  $97 = HEAP32[$68>>2]|0;
  $98 = ((($97)) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (FUNCTION_TABLE_ii[$99 & 127]($68)|0);
  HEAP8[$4>>0] = $100;
  $101 = HEAP32[$68>>2]|0;
  $102 = ((($101)) + 20|0);
  $103 = HEAP32[$102>>2]|0;
  FUNCTION_TABLE_vii[$103 & 127]($10,$68);
  $104 = ((($5)) + 11|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = ($105<<24>>24)<(0);
  if ($106) {
   $107 = HEAP32[$5>>2]|0;
   HEAP8[$107>>0] = 0;
   $108 = ((($5)) + 4|0);
   HEAP32[$108>>2] = 0;
   $$pre$phi$i$i69Z2D = $5;
  } else {
   HEAP8[$5>>0] = 0;
   HEAP8[$104>>0] = 0;
   $$pre$phi$i$i69Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($5,0);
  ;HEAP32[$$pre$phi$i$i69Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i69Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i69Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i71 = 0;
  while(1) {
   $exitcond$i$i$i72 = ($$0$i$i$i71|0)==(3);
   if ($exitcond$i$i$i72) {
    break;
   }
   $109 = (($10) + ($$0$i$i$i71<<2)|0);
   HEAP32[$109>>2] = 0;
   $110 = (($$0$i$i$i71) + 1)|0;
   $$0$i$i$i71 = $110;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $111 = HEAP32[$68>>2]|0;
  $112 = ((($111)) + 24|0);
  $113 = HEAP32[$112>>2]|0;
  FUNCTION_TABLE_vii[$113 & 127]($10,$68);
  $114 = ((($6)) + 11|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = ($115<<24>>24)<(0);
  if ($116) {
   $117 = HEAP32[$6>>2]|0;
   HEAP8[$117>>0] = 0;
   $118 = ((($6)) + 4|0);
   HEAP32[$118>>2] = 0;
   $$pre$phi$i$i75Z2D = $6;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$114>>0] = 0;
   $$pre$phi$i$i75Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$i75Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i75Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i75Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i77 = 0;
  while(1) {
   $exitcond$i$i$i78 = ($$0$i$i$i77|0)==(3);
   if ($exitcond$i$i$i78) {
    break;
   }
   $119 = (($10) + ($$0$i$i$i77<<2)|0);
   HEAP32[$119>>2] = 0;
   $120 = (($$0$i$i$i77) + 1)|0;
   $$0$i$i$i77 = $120;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $121 = HEAP32[$68>>2]|0;
  $122 = ((($121)) + 36|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (FUNCTION_TABLE_ii[$123 & 127]($68)|0);
  $storemerge = $124;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(156|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 1 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = $7;
 $14 = (($12) - ($7))|0;
 $15 = $5 ? $13 : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
 }
 if ($5) {
  $18 = $16;
  HEAP32[$0>>2] = $18;
  $23 = $16;
 } else {
  $$pr = HEAP32[$0>>2]|0;
  $19 = $16;
  HEAP32[$0>>2] = $19;
  $20 = ($$pr|0)==(0|0);
  if ($20) {
   $23 = $16;
  } else {
   $21 = HEAP32[$3>>2]|0;
   FUNCTION_TABLE_vi[$21 & 255]($$pr);
   $$pre = HEAP32[$0>>2]|0;
   $23 = $$pre;
  }
 }
 HEAP32[$3>>2] = (157);
 $22 = (($23) + ($14)|0);
 HEAP32[$1>>2] = $22;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + ($$)|0);
 HEAP32[$2>>2] = $25;
 return;
}
function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(156|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 4 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) - ($7))|0;
 $14 = $13 >> 2;
 $phitmp = $7;
 $15 = $5 ? $phitmp : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
 }
 if ($5) {
  $18 = $16;
  HEAP32[$0>>2] = $18;
  $24 = $16;
 } else {
  $$pr = HEAP32[$0>>2]|0;
  $19 = $16;
  HEAP32[$0>>2] = $19;
  $20 = ($$pr|0)==(0|0);
  if ($20) {
   $24 = $16;
  } else {
   $21 = HEAP32[$3>>2]|0;
   FUNCTION_TABLE_vi[$21 & 255]($$pr);
   $$pre = HEAP32[$0>>2]|0;
   $24 = $$pre;
  }
 }
 HEAP32[$3>>2] = (157);
 $22 = $$ >>> 2;
 $23 = (($24) + ($14<<2)|0);
 HEAP32[$1>>2] = $23;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAP32[$2>>2] = $26;
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$025 = 0, $$1 = 0, $$2 = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $$sroa$027$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(576|0);
 $$byval_copy = sp + 424|0;
 $vararg_buffer = sp;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 564|0;
 $12 = sp + 4|0;
 $13 = sp + 464|0;
 $14 = $7;
 HEAP32[$8>>2] = $14;
 $15 = ((($8)) + 4|0);
 HEAP32[$15>>2] = (156);
 $16 = ((($7)) + 400|0);
 $17 = (__ZNKSt3__28ios_base6getlocEv($4)|0);
 HEAP32[$10>>2] = $17;
 $18 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,38440)|0);
 HEAP8[$11>>0] = 0;
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$12>>2] = $19;
 $20 = ((($4)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $22 = (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($1,$$byval_copy,$3,$10,$21,$5,$11,$18,$8,$9,$16)|0);
 if ($22) {
  $23 = HEAP32[$18>>2]|0;
  $24 = ((($23)) + 48|0);
  $25 = HEAP32[$24>>2]|0;
  (FUNCTION_TABLE_iiiii[$25 & 7]($18,29897,(29907),$$byval_copy)|0);
  $26 = HEAP32[$9>>2]|0;
  $27 = HEAP32[$8>>2]|0;
  $28 = (($26) - ($27))|0;
  $29 = ($28|0)>(392);
  if ($29) {
   $30 = $28 >> 2;
   $31 = (($30) + 2)|0;
   $32 = (_malloc($31)|0);
   $33 = $32;
   $34 = ($32|0)==(0|0);
   if ($34) {
    $$025 = 0;$$sroa$027$0 = $33;
   } else {
    $$025 = $32;$$sroa$027$0 = $33;
   }
  } else {
   $$025 = $13;$$sroa$027$0 = 0;
  }
  $35 = HEAP8[$11>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   $$1 = $$025;
  } else {
   $37 = ((($$025)) + 1|0);
   HEAP8[$$025>>0] = 45;
   $$1 = $37;
  }
  $38 = HEAP32[$8>>2]|0;
  $39 = ((($$byval_copy)) + 40|0);
  $40 = $$byval_copy;
  $$0 = $38;$$2 = $$1;
  while(1) {
   $41 = HEAP32[$9>>2]|0;
   $42 = ($$0>>>0)<($41>>>0);
   if (!($42)) {
    break;
   }
   $44 = HEAP32[$$0>>2]|0;
   $$0$i = $$byval_copy;
   while(1) {
    $45 = ($$0$i|0)==($39|0);
    if ($45) {
     $$0$lcssa$i = $39;
     break;
    }
    $46 = HEAP32[$$0$i>>2]|0;
    $47 = ($46|0)==($44|0);
    if ($47) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $48 = ((($$0$i)) + 4|0);
    $$0$i = $48;
   }
   $49 = $$0$lcssa$i;
   $50 = (($49) - ($40))|0;
   $51 = $50 >> 2;
   $52 = (29897 + ($51)|0);
   $53 = HEAP8[$52>>0]|0;
   HEAP8[$$2>>0] = $53;
   $54 = ((($$0)) + 4|0);
   $55 = ((($$2)) + 1|0);
   $$0 = $54;$$2 = $55;
  }
  HEAP8[$$2>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $6;
  (_sscanf($13,29798,$vararg_buffer)|0);
  $43 = ($$sroa$027$0|0)==(0);
  if (!($43)) {
   $56 = $$sroa$027$0;
   _free($56);
  }
 }
 $57 = HEAP32[$1>>2]|0;
 $58 = ($57|0)==(0|0);
 do {
  if ($58) {
   $89 = 1;
  } else {
   $59 = ((($57)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($57)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($60|0)==($62|0);
   if ($63) {
    $64 = HEAP32[$57>>2]|0;
    $65 = ((($64)) + 36|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (FUNCTION_TABLE_ii[$66 & 127]($57)|0);
    $$0$i$i$i$i = $67;
   } else {
    $68 = HEAP32[$60>>2]|0;
    $$0$i$i$i$i = $68;
   }
   $69 = ($$0$i$i$i$i|0)==(-1);
   if ($69) {
    HEAP32[$1>>2] = 0;
    $89 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $89 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $70 = HEAP32[$2>>2]|0;
 $71 = ($70|0)==(0|0);
 do {
  if ($71) {
   label = 30;
  } else {
   $72 = ((($70)) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ((($70)) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($73|0)==($75|0);
   if ($76) {
    $77 = HEAP32[$70>>2]|0;
    $78 = ((($77)) + 36|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (FUNCTION_TABLE_ii[$79 & 127]($70)|0);
    $$0$i$i2$i$i = $80;
   } else {
    $81 = HEAP32[$73>>2]|0;
    $$0$i$i2$i$i = $81;
   }
   $82 = ($$0$i$i2$i$i|0)==(-1);
   if ($82) {
    HEAP32[$2>>2] = 0;
    label = 30;
    break;
   } else {
    if ($89) {
     break;
    } else {
     label = 32;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 30) {
  if ($89) {
   label = 32;
  }
 }
 if ((label|0) == 32) {
  $83 = HEAP32[$5>>2]|0;
  $84 = $83 | 2;
  HEAP32[$5>>2] = $84;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 $85 = HEAP32[$10>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($85)|0);
 $86 = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $87 = ($86|0)==(0|0);
 if (!($87)) {
  $88 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_vi[$88 & 255]($86);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $phitmp$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $$byval_copy = sp + 424|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp + 4|0;
 $11 = sp + 428|0;
 $12 = sp;
 $13 = $7;
 HEAP32[$8>>2] = $13;
 $14 = ((($8)) + 4|0);
 HEAP32[$14>>2] = (156);
 $15 = ((($7)) + 400|0);
 $16 = (__ZNKSt3__28ios_base6getlocEv($4)|0);
 HEAP32[$10>>2] = $16;
 $17 = (__ZNKSt3__26locale9use_facetERNS0_2idE($10,38440)|0);
 HEAP8[$11>>0] = 0;
 $18 = HEAP32[$2>>2]|0;
 HEAP32[$12>>2] = $18;
 $19 = ((($4)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
 $21 = (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($1,$$byval_copy,$3,$10,$20,$5,$11,$17,$8,$9,$15)|0);
 $22 = $18;
 if ($21) {
  $23 = ((($6)) + 8|0);
  $24 = ((($23)) + 3|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)<(0);
  if ($26) {
   $27 = HEAP32[$6>>2]|0;
   HEAP32[$27>>2] = 0;
   $28 = ((($6)) + 4|0);
   HEAP32[$28>>2] = 0;
  } else {
   HEAP32[$6>>2] = 0;
   HEAP8[$24>>0] = 0;
  }
  $29 = HEAP8[$11>>0]|0;
  $30 = ($29<<24>>24)==(0);
  if (!($30)) {
   $31 = HEAP32[$17>>2]|0;
   $32 = ((($31)) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (FUNCTION_TABLE_iii[$33 & 31]($17,45)|0);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($6,$34);
  }
  $35 = HEAP32[$17>>2]|0;
  $36 = ((($35)) + 44|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iii[$37 & 31]($17,48)|0);
  $39 = HEAP32[$8>>2]|0;
  $40 = HEAP32[$9>>2]|0;
  $41 = ((($40)) + -4|0);
  $$0 = $39;
  while(1) {
   $42 = ($$0>>>0)<($41>>>0);
   if (!($42)) {
    break;
   }
   $43 = HEAP32[$$0>>2]|0;
   $44 = ($43|0)==($38|0);
   if (!($44)) {
    break;
   }
   $45 = ((($$0)) + 4|0);
   $$0 = $45;
  }
  (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_($6,$$0,$40)|0);
 }
 $46 = HEAP32[$1>>2]|0;
 $47 = ($46|0)==(0|0);
 do {
  if ($47) {
   $78 = 1;
  } else {
   $48 = ((($46)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($46)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($49|0)==($51|0);
   if ($52) {
    $53 = HEAP32[$46>>2]|0;
    $54 = ((($53)) + 36|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (FUNCTION_TABLE_ii[$55 & 127]($46)|0);
    $$0$i$i$i$i = $56;
   } else {
    $57 = HEAP32[$49>>2]|0;
    $$0$i$i$i$i = $57;
   }
   $58 = ($$0$i$i$i$i|0)==(-1);
   if ($58) {
    HEAP32[$1>>2] = 0;
    $78 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $78 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $59 = ($18|0)==(0);
 do {
  if ($59) {
   label = 25;
  } else {
   $60 = ((($22)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($22)) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = $18;
    $66 = HEAP32[$65>>2]|0;
    $67 = ((($66)) + 36|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (FUNCTION_TABLE_ii[$68 & 127]($22)|0);
    $$0$i$i2$i$i = $69;
   } else {
    $70 = HEAP32[$61>>2]|0;
    $$0$i$i2$i$i = $70;
   }
   $71 = ($$0$i$i2$i$i|0)==(-1);
   if ($71) {
    HEAP32[$2>>2] = 0;
    label = 25;
    break;
   } else {
    if ($78) {
     break;
    } else {
     label = 27;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  if ($78) {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $72 = HEAP32[$5>>2]|0;
  $73 = $72 | 2;
  HEAP32[$5>>2] = $73;
 }
 $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 $74 = HEAP32[$10>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($74)|0);
 $75 = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $76 = ($75|0)==(0|0);
 if (!($76)) {
  $77 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$77 & 255]($75);
 }
 STACKTOP = sp;return ($$sroa$0$0$copyload|0);
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$$0131 = 0, $$$0131141 = 0, $$$0131142 = 0, $$$0131143 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i164 = 0, $$0$i$i$i$i179 = 0, $$0$i$i$i$i204 = 0, $$0$i$i$i$i226 = 0, $$0$i$i$i$i254 = 0, $$0$i$i$i$i272 = 0, $$0$i$i149 = 0, $$0$i$i151 = 0, $$0$i$i152 = 0, $$0$i$i155 = 0, $$0$i$i158 = 0, $$0$i$i162 = 0, $$0$i$i176 = 0;
 var $$0$i$i178 = 0, $$0$i$i192 = 0, $$0$i$i196 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i170 = 0, $$0$i$i2$i$i185 = 0, $$0$i$i2$i$i210 = 0, $$0$i$i2$i$i232 = 0, $$0$i$i2$i$i260 = 0, $$0$i$i2$i$i278 = 0, $$0$i$i201 = 0, $$0$i$i218 = 0, $$0$i$i223 = 0, $$0$i$i241 = 0, $$0$i$i247 = 0, $$0$i$i252 = 0, $$0$i$i269 = 0, $$0126 = 0, $$0131 = 0, $$0133 = 0;
 var $$10 = 0, $$1132 = 0, $$2128$ph = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$phi$trans$insert385 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i166 = 0, $$pre$i$i$i181 = 0, $$pre$i$i$i206 = 0, $$pre$i$i$i228 = 0, $$pre$i$i$i256 = 0, $$pre$i$i$i274 = 0, $$pre$i4$i$i187 = 0, $$pre$i4$i$i187391 = 0, $$pre$i4$i$i187393 = 0, $$pre$i4$i$i212 = 0, $$pre$i4$i$i212371$ph = 0, $$pre$i4$i$i212371396 = 0;
 var $$pre$i4$i$i234 = 0, $$pre$i4$i$i262 = 0, $$pre$i4$i$i262366 = 0, $$pre$i4$i$i262368 = 0, $$pre$i4$i$i280 = 0, $$pre$i4$i$i280379 = 0, $$pre$i4$i$i280380 = 0, $$pre369 = 0, $$pre370 = 0, $$pre373 = 0, $$pre374 = 0, $$pre375 = 0, $$pre376 = 0, $$pre377 = 0, $$pre378 = 0, $$pre382 = 0, $$pre383 = 0, $$pre384 = 0, $$pre386 = 0, $$pre387 = 0;
 var $$pre388 = 0, $$pre389 = 0, $$pre390 = 0, $$sink = 0, $$sroa$0297$0 = 0, $$sroa$0317$0 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cond148 = 0;
 var $exitcond$i$i = 0, $exitcond$i$i150 = 0, $exitcond$i$i153 = 0, $exitcond$i$i156 = 0, $exitcond$i$i159 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond145 = 0, $or$cond15 = 0, $or$cond411 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i167 = 0, $phitmp$i$i$i182 = 0, $phitmp$i$i$i207 = 0, $phitmp$i$i$i229 = 0, $phitmp$i$i$i257 = 0, $phitmp$i$i$i275 = 0, $phitmp$i5$i$i188 = 0, $phitmp$i5$i$i213 = 0, $phitmp$i5$i$i263 = 0;
 var $phitmp$i5$i$i281 = 0, $switch = 0, $tmp$i$i190 = 0, $tmp$i$i215 = 0, $tmp$i$i265 = 0, $tmp$i$i283 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 96|0;
 $12 = sp + 104|0;
 $13 = sp + 88|0;
 $14 = sp + 80|0;
 $15 = sp + 76|0;
 $16 = sp + 504|0;
 $17 = sp + 72|0;
 $18 = sp + 68|0;
 $19 = sp + 56|0;
 $20 = sp + 44|0;
 $21 = sp + 32|0;
 $22 = sp + 20|0;
 $23 = sp + 8|0;
 $24 = sp + 4|0;
 $25 = sp;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (156);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i149 = 0;
 while(1) {
  $exitcond$i$i150 = ($$0$i$i149|0)==(3);
  if ($exitcond$i$i150) {
   break;
  }
  $31 = (($20) + ($$0$i$i149<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i149) + 1)|0;
  $$0$i$i149 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i152 = 0;
 while(1) {
  $exitcond$i$i153 = ($$0$i$i152|0)==(3);
  if ($exitcond$i$i153) {
   break;
  }
  $33 = (($21) + ($$0$i$i152<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i152) + 1)|0;
  $$0$i$i152 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i155 = 0;
 while(1) {
  $exitcond$i$i156 = ($$0$i$i155|0)==(3);
  if ($exitcond$i$i156) {
   break;
  }
  $35 = (($22) + ($$0$i$i155<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i155) + 1)|0;
  $$0$i$i155 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i158 = 0;
 while(1) {
  $exitcond$i$i159 = ($$0$i$i158|0)==(3);
  if ($exitcond$i$i159) {
   break;
  }
  $37 = (($23) + ($$0$i$i158<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i158) + 1)|0;
  $$0$i$i158 = $38;
 }
 __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($2,$3,$16,$17,$18,$19,$20,$21,$22,$24);
 $39 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $39;
 $40 = ((($21)) + 8|0);
 $41 = ((($40)) + 3|0);
 $42 = ((($21)) + 4|0);
 $43 = ((($22)) + 8|0);
 $44 = ((($43)) + 3|0);
 $45 = ((($22)) + 4|0);
 $46 = $4 & 512;
 $47 = ($46|0)!=(0);
 $48 = ((($20)) + 8|0);
 $49 = ((($48)) + 3|0);
 $50 = ((($20)) + 4|0);
 $51 = ((($23)) + 8|0);
 $52 = ((($51)) + 3|0);
 $53 = ((($23)) + 4|0);
 $54 = ((($16)) + 3|0);
 $55 = ((($19)) + 11|0);
 $56 = ((($19)) + 4|0);
 $$0131 = 0;$$0133 = 0;
 L21: while(1) {
  $57 = ($$0133>>>0)<(4);
  if (!($57)) {
   label = 231;
   break;
  }
  $58 = HEAP32[$0>>2]|0;
  $59 = ($58|0)==(0|0);
  do {
   if ($59) {
    $714 = 1;
   } else {
    $60 = ((($58)) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($58)) + 16|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($61|0)==($63|0);
    if ($64) {
     $65 = HEAP32[$58>>2]|0;
     $66 = ((($65)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (FUNCTION_TABLE_ii[$67 & 127]($58)|0);
     $$0$i$i$i$i164 = $68;
    } else {
     $69 = HEAP32[$61>>2]|0;
     $$0$i$i$i$i164 = $69;
    }
    $70 = ($$0$i$i$i$i164|0)==(-1);
    if ($70) {
     HEAP32[$0>>2] = 0;
     $714 = 1;
     break;
    } else {
     $$pre$i$i$i166 = HEAP32[$0>>2]|0;
     $phitmp$i$i$i167 = ($$pre$i$i$i166|0)==(0|0);
     $714 = $phitmp$i$i$i167;
     break;
    }
   }
  } while(0);
  $71 = HEAP32[$1>>2]|0;
  $72 = ($71|0)==(0|0);
  do {
   if ($72) {
    label = 31;
   } else {
    $73 = ((($71)) + 12|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ((($71)) + 16|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($74|0)==($76|0);
    if ($77) {
     $78 = HEAP32[$71>>2]|0;
     $79 = ((($78)) + 36|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (FUNCTION_TABLE_ii[$80 & 127]($71)|0);
     $$0$i$i2$i$i170 = $81;
    } else {
     $82 = HEAP32[$74>>2]|0;
     $$0$i$i2$i$i170 = $82;
    }
    $83 = ($$0$i$i2$i$i170|0)==(-1);
    if ($83) {
     HEAP32[$1>>2] = 0;
     label = 31;
     break;
    } else {
     if ($714) {
      $715 = $71;
      break;
     } else {
      label = 231;
      break L21;
     }
    }
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   if ($714) {
    label = 231;
    break;
   } else {
    $715 = 0;
   }
  }
  $84 = (($16) + ($$0133)|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85 << 24 >> 24;
  L46: do {
   switch ($86|0) {
   case 1:  {
    $cond148 = ($$0133|0)==(3);
    if ($cond148) {
     $$1132 = $$0131;
    } else {
     $87 = HEAP32[$0>>2]|0;
     $88 = ((($87)) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ((($87)) + 16|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($89|0)==($91|0);
     if ($92) {
      $93 = HEAP32[$87>>2]|0;
      $94 = ((($93)) + 36|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (FUNCTION_TABLE_ii[$95 & 127]($87)|0);
      $$0$i$i176 = $96;
     } else {
      $97 = HEAP32[$89>>2]|0;
      $$0$i$i176 = $97;
     }
     $98 = HEAP32[$7>>2]|0;
     $99 = ((($98)) + 12|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (FUNCTION_TABLE_iiii[$100 & 31]($7,8192,$$0$i$i176)|0);
     if (!($101)) {
      label = 43;
      break L21;
     }
     $102 = HEAP32[$0>>2]|0;
     $103 = ((($102)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ((($102)) + 16|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($104|0)==($106|0);
     if ($107) {
      $108 = HEAP32[$102>>2]|0;
      $109 = ((($108)) + 40|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (FUNCTION_TABLE_ii[$110 & 127]($102)|0);
      $$0$i$i178 = $111;
     } else {
      $112 = ((($104)) + 4|0);
      HEAP32[$103>>2] = $112;
      $113 = HEAP32[$104>>2]|0;
      $$0$i$i178 = $113;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($23,$$0$i$i178);
     $$pre$i4$i$i187 = $715;$131 = $715;
     label = 45;
    }
    break;
   }
   case 0:  {
    $116 = ($$0133|0)==(3);
    if ($116) {
     $$1132 = $$0131;
    } else {
     $$pre$i4$i$i187 = $715;$131 = $715;
     label = 45;
    }
    break;
   }
   case 3:  {
    $171 = HEAP8[$41>>0]|0;
    $172 = ($171<<24>>24)<(0);
    $173 = HEAP32[$42>>2]|0;
    $174 = $171&255;
    $175 = $172 ? $173 : $174;
    $176 = HEAP8[$44>>0]|0;
    $177 = ($176<<24>>24)<(0);
    $178 = HEAP32[$45>>2]|0;
    $179 = $176&255;
    $180 = $177 ? $178 : $179;
    $181 = (0 - ($180))|0;
    $182 = ($175|0)==($181|0);
    if ($182) {
     $$1132 = $$0131;
    } else {
     $183 = ($175|0)==(0);
     $184 = ($180|0)==(0);
     $or$cond411 = $183 | $184;
     $185 = HEAP32[$0>>2]|0;
     $186 = ((($185)) + 12|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ((($185)) + 16|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = ($187|0)==($189|0);
     if ($or$cond411) {
      if ($190) {
       $191 = HEAP32[$185>>2]|0;
       $192 = ((($191)) + 36|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = (FUNCTION_TABLE_ii[$193 & 127]($185)|0);
       $$0$i$i218 = $194;
      } else {
       $195 = HEAP32[$187>>2]|0;
       $$0$i$i218 = $195;
      }
      if ($183) {
       $218 = HEAP8[$44>>0]|0;
       $219 = ($218<<24>>24)<(0);
       $220 = HEAP32[$22>>2]|0;
       $221 = $219 ? $220 : $22;
       $222 = HEAP32[$221>>2]|0;
       $223 = ($$0$i$i218|0)==($222|0);
       if (!($223)) {
        $$1132 = $$0131;
        break L46;
       }
       $224 = HEAP32[$0>>2]|0;
       $225 = ((($224)) + 12|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ((($224)) + 16|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = ($226|0)==($228|0);
       if ($229) {
        $230 = HEAP32[$224>>2]|0;
        $231 = ((($230)) + 40|0);
        $232 = HEAP32[$231>>2]|0;
        (FUNCTION_TABLE_ii[$232 & 127]($224)|0);
        $$pre390 = HEAP8[$44>>0]|0;
        $235 = $$pre390;
       } else {
        $233 = ((($226)) + 4|0);
        HEAP32[$225>>2] = $233;
        $235 = $218;
       }
       HEAP8[$6>>0] = 1;
       $234 = ($235<<24>>24)<(0);
       $236 = HEAP32[$45>>2]|0;
       $237 = $235&255;
       $238 = $234 ? $236 : $237;
       $239 = ($238>>>0)>(1);
       $$$0131141 = $239 ? $22 : $$0131;
       $$1132 = $$$0131141;
       break L46;
      }
      $196 = HEAP8[$41>>0]|0;
      $197 = ($196<<24>>24)<(0);
      $198 = HEAP32[$21>>2]|0;
      $199 = $197 ? $198 : $21;
      $200 = HEAP32[$199>>2]|0;
      $201 = ($$0$i$i218|0)==($200|0);
      if (!($201)) {
       HEAP8[$6>>0] = 1;
       $$1132 = $$0131;
       break L46;
      }
      $202 = HEAP32[$0>>2]|0;
      $203 = ((($202)) + 12|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ((($202)) + 16|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = ($204|0)==($206|0);
      if ($207) {
       $208 = HEAP32[$202>>2]|0;
       $209 = ((($208)) + 40|0);
       $210 = HEAP32[$209>>2]|0;
       (FUNCTION_TABLE_ii[$210 & 127]($202)|0);
       $$pre389 = HEAP8[$41>>0]|0;
       $213 = $$pre389;
      } else {
       $211 = ((($204)) + 4|0);
       HEAP32[$203>>2] = $211;
       $213 = $196;
      }
      $212 = ($213<<24>>24)<(0);
      $214 = HEAP32[$42>>2]|0;
      $215 = $213&255;
      $216 = $212 ? $214 : $215;
      $217 = ($216>>>0)>(1);
      $$$0131 = $217 ? $21 : $$0131;
      $$1132 = $$$0131;
      break L46;
     }
     if ($190) {
      $240 = HEAP32[$185>>2]|0;
      $241 = ((($240)) + 36|0);
      $242 = HEAP32[$241>>2]|0;
      $243 = (FUNCTION_TABLE_ii[$242 & 127]($185)|0);
      $$pre382 = HEAP8[$41>>0]|0;
      $$pre383 = HEAP32[$0>>2]|0;
      $$phi$trans$insert = ((($$pre383)) + 12|0);
      $$pre384 = HEAP32[$$phi$trans$insert>>2]|0;
      $$phi$trans$insert385 = ((($$pre383)) + 16|0);
      $$pre386 = HEAP32[$$phi$trans$insert385>>2]|0;
      $$0$i$i241 = $243;$246 = $$pre382;$252 = $$pre383;$254 = $$pre384;$255 = $$pre386;
     } else {
      $244 = HEAP32[$187>>2]|0;
      $$0$i$i241 = $244;$246 = $171;$252 = $185;$254 = $187;$255 = $189;
     }
     $245 = ($246<<24>>24)<(0);
     $247 = HEAP32[$21>>2]|0;
     $248 = $245 ? $247 : $21;
     $249 = HEAP32[$248>>2]|0;
     $250 = ($$0$i$i241|0)==($249|0);
     $251 = ((($252)) + 12|0);
     $253 = ($254|0)==($255|0);
     if ($250) {
      if ($253) {
       $256 = HEAP32[$252>>2]|0;
       $257 = ((($256)) + 40|0);
       $258 = HEAP32[$257>>2]|0;
       (FUNCTION_TABLE_ii[$258 & 127]($252)|0);
       $$pre388 = HEAP8[$41>>0]|0;
       $261 = $$pre388;
      } else {
       $259 = ((($254)) + 4|0);
       HEAP32[$251>>2] = $259;
       $261 = $246;
      }
      $260 = ($261<<24>>24)<(0);
      $262 = HEAP32[$42>>2]|0;
      $263 = $261&255;
      $264 = $260 ? $262 : $263;
      $265 = ($264>>>0)>(1);
      $$$0131142 = $265 ? $21 : $$0131;
      $$1132 = $$$0131142;
      break L46;
     }
     if ($253) {
      $266 = HEAP32[$252>>2]|0;
      $267 = ((($266)) + 36|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = (FUNCTION_TABLE_ii[$268 & 127]($252)|0);
      $$0$i$i247 = $269;
     } else {
      $270 = HEAP32[$254>>2]|0;
      $$0$i$i247 = $270;
     }
     $271 = HEAP8[$44>>0]|0;
     $272 = ($271<<24>>24)<(0);
     $273 = HEAP32[$22>>2]|0;
     $274 = $272 ? $273 : $22;
     $275 = HEAP32[$274>>2]|0;
     $276 = ($$0$i$i247|0)==($275|0);
     if (!($276)) {
      label = 101;
      break L21;
     }
     $277 = HEAP32[$0>>2]|0;
     $278 = ((($277)) + 12|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ((($277)) + 16|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = ($279|0)==($281|0);
     if ($282) {
      $283 = HEAP32[$277>>2]|0;
      $284 = ((($283)) + 40|0);
      $285 = HEAP32[$284>>2]|0;
      (FUNCTION_TABLE_ii[$285 & 127]($277)|0);
      $$pre387 = HEAP8[$44>>0]|0;
      $288 = $$pre387;
     } else {
      $286 = ((($279)) + 4|0);
      HEAP32[$278>>2] = $286;
      $288 = $271;
     }
     HEAP8[$6>>0] = 1;
     $287 = ($288<<24>>24)<(0);
     $289 = HEAP32[$45>>2]|0;
     $290 = $288&255;
     $291 = $287 ? $289 : $290;
     $292 = ($291>>>0)>(1);
     $$$0131143 = $292 ? $22 : $$0131;
     $$1132 = $$$0131143;
    }
    break;
   }
   case 2:  {
    $295 = ($$0131|0)!=(0|0);
    $296 = ($$0133>>>0)<(2);
    $or$cond = $296 | $295;
    if (!($or$cond)) {
     $297 = ($$0133|0)==(2);
     $298 = HEAP8[$54>>0]|0;
     $299 = ($298<<24>>24)!=(0);
     $300 = $297 & $299;
     $brmerge = $47 | $300;
     if (!($brmerge)) {
      $$1132 = 0;
      break L46;
     }
    }
    $301 = HEAP8[$49>>0]|0;
    $302 = ($301<<24>>24)<(0);
    $303 = HEAP32[$20>>2]|0;
    $304 = $302 ? $303 : $20;
    $305 = $304;
    $306 = ($$0133|0)==(0);
    L107: do {
     if ($306) {
      $$pre$i4$i$i280 = $715;$$sroa$0297$0 = $305;$353 = $301;$357 = $303;$376 = $715;
     } else {
      $307 = (($$0133) + -1)|0;
      $308 = (($16) + ($307)|0);
      $309 = HEAP8[$308>>0]|0;
      $switch = ($309&255)<(2);
      if ($switch) {
       $$sroa$0317$0 = $305;$311 = $301;$315 = $303;
       while(1) {
        $310 = ($311<<24>>24)<(0);
        $312 = HEAP32[$50>>2]|0;
        $313 = $311&255;
        $314 = $310 ? $315 : $20;
        $316 = $310 ? $312 : $313;
        $317 = (($314) + ($316<<2)|0);
        $318 = $$sroa$0317$0;
        $319 = ($318|0)==($317|0);
        if ($319) {
         $328 = $311;$330 = $315;
         break;
        }
        $320 = HEAP32[$318>>2]|0;
        $321 = HEAP32[$7>>2]|0;
        $322 = ((($321)) + 12|0);
        $323 = HEAP32[$322>>2]|0;
        $324 = (FUNCTION_TABLE_iiii[$323 & 31]($7,8192,$320)|0);
        if (!($324)) {
         label = 108;
         break;
        }
        $325 = ((($318)) + 4|0);
        $326 = $325;
        $$pre373 = HEAP8[$49>>0]|0;
        $$pre374 = HEAP32[$20>>2]|0;
        $$sroa$0317$0 = $326;$311 = $$pre373;$315 = $$pre374;
       }
       if ((label|0) == 108) {
        label = 0;
        $$pre375 = HEAP8[$49>>0]|0;
        $$pre376 = HEAP32[$20>>2]|0;
        $328 = $$pre375;$330 = $$pre376;
       }
       $327 = ($328<<24>>24)<(0);
       $329 = $327 ? $330 : $20;
       $331 = $329;
       $332 = (($$sroa$0317$0) - ($331))|0;
       $333 = $332 >> 2;
       $334 = HEAP8[$52>>0]|0;
       $335 = ($334<<24>>24)<(0);
       $336 = HEAP32[$53>>2]|0;
       $337 = $334&255;
       $338 = $335 ? $336 : $337;
       $339 = ($333>>>0)>($338>>>0);
       if ($339) {
        $$pre$i4$i$i280 = $715;$$sroa$0297$0 = $331;$353 = $328;$357 = $330;$376 = $715;
       } else {
        $340 = HEAP32[$23>>2]|0;
        $341 = $335 ? $340 : $23;
        $342 = (($341) + ($338<<2)|0);
        $343 = (0 - ($333))|0;
        $344 = (($342) + ($343<<2)|0);
        $$sink = $329;$346 = $344;
        while(1) {
         $345 = ($346|0)==($342|0);
         if ($345) {
          $$pre$i4$i$i280 = $715;$$sroa$0297$0 = $$sroa$0317$0;$353 = $328;$357 = $330;$376 = $715;
          break L107;
         }
         $347 = HEAP32[$346>>2]|0;
         $348 = HEAP32[$$sink>>2]|0;
         $349 = ($347|0)==($348|0);
         if (!($349)) {
          $$pre$i4$i$i280 = $715;$$sroa$0297$0 = $331;$353 = $328;$357 = $330;$376 = $715;
          break L107;
         }
         $350 = ((($346)) + 4|0);
         $351 = ((($$sink)) + 4|0);
         $$sink = $351;$346 = $350;
        }
       }
      } else {
       $$pre$i4$i$i280 = $715;$$sroa$0297$0 = $305;$353 = $301;$357 = $303;$376 = $715;
      }
     }
    } while(0);
    L121: while(1) {
     $352 = ($353<<24>>24)<(0);
     $354 = HEAP32[$50>>2]|0;
     $355 = $353&255;
     $356 = $352 ? $357 : $20;
     $358 = $352 ? $354 : $355;
     $359 = (($356) + ($358<<2)|0);
     $360 = $$sroa$0297$0;
     $361 = ($360|0)==($359|0);
     if ($361) {
      $$lcssa = $359;
      break;
     }
     $362 = HEAP32[$0>>2]|0;
     $363 = ($362|0)==(0|0);
     do {
      if ($363) {
       $388 = 1;
      } else {
       $364 = ((($362)) + 12|0);
       $365 = HEAP32[$364>>2]|0;
       $366 = ((($362)) + 16|0);
       $367 = HEAP32[$366>>2]|0;
       $368 = ($365|0)==($367|0);
       if ($368) {
        $369 = HEAP32[$362>>2]|0;
        $370 = ((($369)) + 36|0);
        $371 = HEAP32[$370>>2]|0;
        $372 = (FUNCTION_TABLE_ii[$371 & 127]($362)|0);
        $$0$i$i$i$i272 = $372;
       } else {
        $373 = HEAP32[$365>>2]|0;
        $$0$i$i$i$i272 = $373;
       }
       $374 = ($$0$i$i$i$i272|0)==(-1);
       if ($374) {
        HEAP32[$0>>2] = 0;
        $388 = 1;
        break;
       } else {
        $$pre$i$i$i274 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i275 = ($$pre$i$i$i274|0)==(0|0);
        $388 = $phitmp$i$i$i275;
        break;
       }
      }
     } while(0);
     $375 = ($376|0)==(0|0);
     do {
      if ($375) {
       $$pre$i4$i$i280380 = $$pre$i4$i$i280;
       label = 129;
      } else {
       $377 = ((($376)) + 12|0);
       $378 = HEAP32[$377>>2]|0;
       $379 = ((($376)) + 16|0);
       $380 = HEAP32[$379>>2]|0;
       $381 = ($378|0)==($380|0);
       if ($381) {
        $382 = HEAP32[$376>>2]|0;
        $383 = ((($382)) + 36|0);
        $384 = HEAP32[$383>>2]|0;
        $385 = (FUNCTION_TABLE_ii[$384 & 127]($376)|0);
        $$0$i$i2$i$i278 = $385;
       } else {
        $386 = HEAP32[$378>>2]|0;
        $$0$i$i2$i$i278 = $386;
       }
       $387 = ($$0$i$i2$i$i278|0)==(-1);
       if ($387) {
        HEAP32[$1>>2] = 0;
        $$pre$i4$i$i280380 = 0;
        label = 129;
        break;
       } else {
        $phitmp$i5$i$i281 = ($$pre$i4$i$i280|0)==(0|0);
        $tmp$i$i283 = $388 ^ $phitmp$i5$i$i281;
        if ($tmp$i$i283) {
         $$pre$i4$i$i280379 = $$pre$i4$i$i280;$717 = $$pre$i4$i$i280;
         break;
        } else {
         $$lcssa = $360;
         break L121;
        }
       }
      }
     } while(0);
     if ((label|0) == 129) {
      label = 0;
      if ($388) {
       $$lcssa = $360;
       break;
      } else {
       $$pre$i4$i$i280379 = $$pre$i4$i$i280380;$717 = 0;
      }
     }
     $389 = HEAP32[$0>>2]|0;
     $390 = ((($389)) + 12|0);
     $391 = HEAP32[$390>>2]|0;
     $392 = ((($389)) + 16|0);
     $393 = HEAP32[$392>>2]|0;
     $394 = ($391|0)==($393|0);
     if ($394) {
      $395 = HEAP32[$389>>2]|0;
      $396 = ((($395)) + 36|0);
      $397 = HEAP32[$396>>2]|0;
      $398 = (FUNCTION_TABLE_ii[$397 & 127]($389)|0);
      $$0$i$i269 = $398;
     } else {
      $399 = HEAP32[$391>>2]|0;
      $$0$i$i269 = $399;
     }
     $400 = HEAP32[$360>>2]|0;
     $401 = ($$0$i$i269|0)==($400|0);
     if (!($401)) {
      $$lcssa = $360;
      break;
     }
     $402 = HEAP32[$0>>2]|0;
     $403 = ((($402)) + 12|0);
     $404 = HEAP32[$403>>2]|0;
     $405 = ((($402)) + 16|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = ($404|0)==($406|0);
     if ($407) {
      $408 = HEAP32[$402>>2]|0;
      $409 = ((($408)) + 40|0);
      $410 = HEAP32[$409>>2]|0;
      (FUNCTION_TABLE_ii[$410 & 127]($402)|0);
     } else {
      $411 = ((($404)) + 4|0);
      HEAP32[$403>>2] = $411;
     }
     $412 = ((($360)) + 4|0);
     $413 = $412;
     $$pre377 = HEAP8[$49>>0]|0;
     $$pre378 = HEAP32[$20>>2]|0;
     $$pre$i4$i$i280 = $$pre$i4$i$i280379;$$sroa$0297$0 = $413;$353 = $$pre377;$357 = $$pre378;$376 = $717;
    }
    if ($47) {
     $414 = HEAP8[$49>>0]|0;
     $415 = ($414<<24>>24)<(0);
     $416 = HEAP32[$20>>2]|0;
     $417 = HEAP32[$50>>2]|0;
     $418 = $414&255;
     $419 = $415 ? $416 : $20;
     $420 = $415 ? $417 : $418;
     $421 = (($419) + ($420<<2)|0);
     $422 = ($$lcssa|0)==($421|0);
     if ($422) {
      $$1132 = $$0131;
     } else {
      label = 141;
      break L21;
     }
    } else {
     $$1132 = $$0131;
    }
    break;
   }
   case 4:  {
    $$0126 = 0;$$pre$i4$i$i262 = $715;$439 = $715;
    L157: while(1) {
     $425 = HEAP32[$0>>2]|0;
     $426 = ($425|0)==(0|0);
     do {
      if ($426) {
       $451 = 1;
      } else {
       $427 = ((($425)) + 12|0);
       $428 = HEAP32[$427>>2]|0;
       $429 = ((($425)) + 16|0);
       $430 = HEAP32[$429>>2]|0;
       $431 = ($428|0)==($430|0);
       if ($431) {
        $432 = HEAP32[$425>>2]|0;
        $433 = ((($432)) + 36|0);
        $434 = HEAP32[$433>>2]|0;
        $435 = (FUNCTION_TABLE_ii[$434 & 127]($425)|0);
        $$0$i$i$i$i254 = $435;
       } else {
        $436 = HEAP32[$428>>2]|0;
        $$0$i$i$i$i254 = $436;
       }
       $437 = ($$0$i$i$i$i254|0)==(-1);
       if ($437) {
        HEAP32[$0>>2] = 0;
        $451 = 1;
        break;
       } else {
        $$pre$i$i$i256 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i257 = ($$pre$i$i$i256|0)==(0|0);
        $451 = $phitmp$i$i$i257;
        break;
       }
      }
     } while(0);
     $438 = ($439|0)==(0|0);
     do {
      if ($438) {
       $$pre$i4$i$i262366 = $$pre$i4$i$i262;
       label = 155;
      } else {
       $440 = ((($439)) + 12|0);
       $441 = HEAP32[$440>>2]|0;
       $442 = ((($439)) + 16|0);
       $443 = HEAP32[$442>>2]|0;
       $444 = ($441|0)==($443|0);
       if ($444) {
        $445 = HEAP32[$439>>2]|0;
        $446 = ((($445)) + 36|0);
        $447 = HEAP32[$446>>2]|0;
        $448 = (FUNCTION_TABLE_ii[$447 & 127]($439)|0);
        $$0$i$i2$i$i260 = $448;
       } else {
        $449 = HEAP32[$441>>2]|0;
        $$0$i$i2$i$i260 = $449;
       }
       $450 = ($$0$i$i2$i$i260|0)==(-1);
       if ($450) {
        HEAP32[$1>>2] = 0;
        $$pre$i4$i$i262366 = 0;
        label = 155;
        break;
       } else {
        $phitmp$i5$i$i263 = ($$pre$i4$i$i262|0)==(0|0);
        $tmp$i$i265 = $451 ^ $phitmp$i5$i$i263;
        if ($tmp$i$i265) {
         $$pre$i4$i$i262368 = $$pre$i4$i$i262;$718 = $$pre$i4$i$i262;
         break;
        } else {
         $$pre$i4$i$i234 = $$pre$i4$i$i262;
         break L157;
        }
       }
      }
     } while(0);
     if ((label|0) == 155) {
      label = 0;
      if ($451) {
       $$pre$i4$i$i234 = $$pre$i4$i$i262366;
       break;
      } else {
       $$pre$i4$i$i262368 = $$pre$i4$i$i262366;$718 = 0;
      }
     }
     $452 = HEAP32[$0>>2]|0;
     $453 = ((($452)) + 12|0);
     $454 = HEAP32[$453>>2]|0;
     $455 = ((($452)) + 16|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = ($454|0)==($456|0);
     if ($457) {
      $458 = HEAP32[$452>>2]|0;
      $459 = ((($458)) + 36|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = (FUNCTION_TABLE_ii[$460 & 127]($452)|0);
      $$0$i$i252 = $461;
     } else {
      $462 = HEAP32[$454>>2]|0;
      $$0$i$i252 = $462;
     }
     $463 = HEAP32[$7>>2]|0;
     $464 = ((($463)) + 12|0);
     $465 = HEAP32[$464>>2]|0;
     $466 = (FUNCTION_TABLE_iiii[$465 & 31]($7,2048,$$0$i$i252)|0);
     if ($466) {
      $467 = HEAP32[$9>>2]|0;
      $468 = HEAP32[$11>>2]|0;
      $469 = ($467|0)==($468|0);
      if ($469) {
       __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
       $$pre369 = HEAP32[$9>>2]|0;
       $471 = $$pre369;
      } else {
       $471 = $467;
      }
      $470 = ((($471)) + 4|0);
      HEAP32[$9>>2] = $470;
      HEAP32[$471>>2] = $$0$i$i252;
      $472 = (($$0126) + 1)|0;
      $$2128$ph = $472;
     } else {
      $473 = HEAP8[$55>>0]|0;
      $474 = ($473<<24>>24)<(0);
      $475 = HEAP32[$56>>2]|0;
      $476 = $473&255;
      $477 = $474 ? $475 : $476;
      $478 = ($477|0)!=(0);
      $479 = ($$0126|0)!=(0);
      $or$cond13 = $479 & $478;
      $480 = HEAP32[$18>>2]|0;
      $481 = ($$0$i$i252|0)==($480|0);
      $or$cond145 = $481 & $or$cond13;
      if (!($or$cond145)) {
       $$pre$i4$i$i234 = $$pre$i4$i$i262368;
       break;
      }
      $482 = HEAP32[$14>>2]|0;
      $483 = HEAP32[$15>>2]|0;
      $484 = ($482|0)==($483|0);
      if ($484) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
       $$pre = HEAP32[$14>>2]|0;
       $486 = $$pre;
      } else {
       $486 = $482;
      }
      $485 = ((($486)) + 4|0);
      HEAP32[$14>>2] = $485;
      HEAP32[$486>>2] = $$0126;
      $$2128$ph = 0;
     }
     $487 = HEAP32[$0>>2]|0;
     $488 = ((($487)) + 12|0);
     $489 = HEAP32[$488>>2]|0;
     $490 = ((($487)) + 16|0);
     $491 = HEAP32[$490>>2]|0;
     $492 = ($489|0)==($491|0);
     if ($492) {
      $493 = HEAP32[$487>>2]|0;
      $494 = ((($493)) + 40|0);
      $495 = HEAP32[$494>>2]|0;
      (FUNCTION_TABLE_ii[$495 & 127]($487)|0);
      $$0126 = $$2128$ph;$$pre$i4$i$i262 = $$pre$i4$i$i262368;$439 = $718;
      continue;
     } else {
      $496 = ((($489)) + 4|0);
      HEAP32[$488>>2] = $496;
      $$0126 = $$2128$ph;$$pre$i4$i$i262 = $$pre$i4$i$i262368;$439 = $718;
      continue;
     }
    }
    $497 = HEAP32[$13>>2]|0;
    $498 = HEAP32[$14>>2]|0;
    $499 = ($497|0)!=($498|0);
    $500 = ($$0126|0)!=(0);
    $or$cond15 = $500 & $499;
    if ($or$cond15) {
     $501 = HEAP32[$15>>2]|0;
     $502 = ($498|0)==($501|0);
     if ($502) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($13,$14,$15);
      $$pre370 = HEAP32[$14>>2]|0;
      $504 = $$pre370;
     } else {
      $504 = $498;
     }
     $503 = ((($504)) + 4|0);
     HEAP32[$14>>2] = $503;
     HEAP32[$504>>2] = $$0126;
    }
    $505 = HEAP32[$24>>2]|0;
    $506 = ($505|0)>(0);
    L206: do {
     if ($506) {
      $507 = HEAP32[$0>>2]|0;
      $508 = ($507|0)==(0|0);
      do {
       if ($508) {
        $719 = 1;
       } else {
        $509 = ((($507)) + 12|0);
        $510 = HEAP32[$509>>2]|0;
        $511 = ((($507)) + 16|0);
        $512 = HEAP32[$511>>2]|0;
        $513 = ($510|0)==($512|0);
        if ($513) {
         $514 = HEAP32[$507>>2]|0;
         $515 = ((($514)) + 36|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = (FUNCTION_TABLE_ii[$516 & 127]($507)|0);
         $$0$i$i$i$i226 = $517;
        } else {
         $518 = HEAP32[$510>>2]|0;
         $$0$i$i$i$i226 = $518;
        }
        $519 = ($$0$i$i$i$i226|0)==(-1);
        if ($519) {
         HEAP32[$0>>2] = 0;
         $719 = 1;
         break;
        } else {
         $$pre$i$i$i228 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i229 = ($$pre$i$i$i228|0)==(0|0);
         $719 = $phitmp$i$i$i229;
         break;
        }
       }
      } while(0);
      $520 = ($$pre$i4$i$i234|0)==(0|0);
      do {
       if ($520) {
        label = 189;
       } else {
        $521 = ((($$pre$i4$i$i234)) + 12|0);
        $522 = HEAP32[$521>>2]|0;
        $523 = ((($$pre$i4$i$i234)) + 16|0);
        $524 = HEAP32[$523>>2]|0;
        $525 = ($522|0)==($524|0);
        if ($525) {
         $526 = HEAP32[$$pre$i4$i$i234>>2]|0;
         $527 = ((($526)) + 36|0);
         $528 = HEAP32[$527>>2]|0;
         $529 = (FUNCTION_TABLE_ii[$528 & 127]($$pre$i4$i$i234)|0);
         $$0$i$i2$i$i232 = $529;
        } else {
         $530 = HEAP32[$522>>2]|0;
         $$0$i$i2$i$i232 = $530;
        }
        $531 = ($$0$i$i2$i$i232|0)==(-1);
        if ($531) {
         HEAP32[$1>>2] = 0;
         label = 189;
         break;
        } else {
         if ($719) {
          $720 = $$pre$i4$i$i234;
          break;
         } else {
          label = 195;
          break L21;
         }
        }
       }
      } while(0);
      if ((label|0) == 189) {
       label = 0;
       if ($719) {
        label = 195;
        break L21;
       } else {
        $720 = 0;
       }
      }
      $532 = HEAP32[$0>>2]|0;
      $533 = ((($532)) + 12|0);
      $534 = HEAP32[$533>>2]|0;
      $535 = ((($532)) + 16|0);
      $536 = HEAP32[$535>>2]|0;
      $537 = ($534|0)==($536|0);
      if ($537) {
       $538 = HEAP32[$532>>2]|0;
       $539 = ((($538)) + 36|0);
       $540 = HEAP32[$539>>2]|0;
       $541 = (FUNCTION_TABLE_ii[$540 & 127]($532)|0);
       $$0$i$i223 = $541;
      } else {
       $542 = HEAP32[$534>>2]|0;
       $$0$i$i223 = $542;
      }
      $543 = HEAP32[$17>>2]|0;
      $544 = ($$0$i$i223|0)==($543|0);
      if (!($544)) {
       label = 195;
       break L21;
      }
      $547 = HEAP32[$0>>2]|0;
      $548 = ((($547)) + 12|0);
      $549 = HEAP32[$548>>2]|0;
      $550 = ((($547)) + 16|0);
      $551 = HEAP32[$550>>2]|0;
      $552 = ($549|0)==($551|0);
      if ($552) {
       $553 = HEAP32[$547>>2]|0;
       $554 = ((($553)) + 40|0);
       $555 = HEAP32[$554>>2]|0;
       (FUNCTION_TABLE_ii[$555 & 127]($547)|0);
       $$pre$i4$i$i212 = $720;$573 = $720;
      } else {
       $556 = ((($549)) + 4|0);
       HEAP32[$548>>2] = $556;
       $$pre$i4$i$i212 = $720;$573 = $720;
      }
      while(1) {
       $557 = HEAP32[$24>>2]|0;
       $558 = ($557|0)>(0);
       if (!($558)) {
        break L206;
       }
       $559 = HEAP32[$0>>2]|0;
       $560 = ($559|0)==(0|0);
       do {
        if ($560) {
         $585 = 1;
        } else {
         $561 = ((($559)) + 12|0);
         $562 = HEAP32[$561>>2]|0;
         $563 = ((($559)) + 16|0);
         $564 = HEAP32[$563>>2]|0;
         $565 = ($562|0)==($564|0);
         if ($565) {
          $566 = HEAP32[$559>>2]|0;
          $567 = ((($566)) + 36|0);
          $568 = HEAP32[$567>>2]|0;
          $569 = (FUNCTION_TABLE_ii[$568 & 127]($559)|0);
          $$0$i$i$i$i204 = $569;
         } else {
          $570 = HEAP32[$562>>2]|0;
          $$0$i$i$i$i204 = $570;
         }
         $571 = ($$0$i$i$i$i204|0)==(-1);
         if ($571) {
          HEAP32[$0>>2] = 0;
          $585 = 1;
          break;
         } else {
          $$pre$i$i$i206 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i207 = ($$pre$i$i$i206|0)==(0|0);
          $585 = $phitmp$i$i$i207;
          break;
         }
        }
       } while(0);
       $572 = ($573|0)==(0|0);
       do {
        if ($572) {
         $$pre$i4$i$i212371$ph = $$pre$i4$i$i212;
         label = 213;
        } else {
         $574 = ((($573)) + 12|0);
         $575 = HEAP32[$574>>2]|0;
         $576 = ((($573)) + 16|0);
         $577 = HEAP32[$576>>2]|0;
         $578 = ($575|0)==($577|0);
         if ($578) {
          $579 = HEAP32[$573>>2]|0;
          $580 = ((($579)) + 36|0);
          $581 = HEAP32[$580>>2]|0;
          $582 = (FUNCTION_TABLE_ii[$581 & 127]($573)|0);
          $$0$i$i2$i$i210 = $582;
         } else {
          $583 = HEAP32[$575>>2]|0;
          $$0$i$i2$i$i210 = $583;
         }
         $584 = ($$0$i$i2$i$i210|0)==(-1);
         if ($584) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i212371$ph = 0;
          label = 213;
          break;
         } else {
          $phitmp$i5$i$i213 = ($$pre$i4$i$i212|0)==(0|0);
          $tmp$i$i215 = $585 ^ $phitmp$i5$i$i213;
          if ($tmp$i$i215) {
           $$pre$i4$i$i212371396 = $$pre$i4$i$i212;$721 = $$pre$i4$i$i212;
           break;
          } else {
           label = 219;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 213) {
        label = 0;
        if ($585) {
         label = 219;
         break L21;
        } else {
         $$pre$i4$i$i212371396 = $$pre$i4$i$i212371$ph;$721 = 0;
        }
       }
       $586 = HEAP32[$0>>2]|0;
       $587 = ((($586)) + 12|0);
       $588 = HEAP32[$587>>2]|0;
       $589 = ((($586)) + 16|0);
       $590 = HEAP32[$589>>2]|0;
       $591 = ($588|0)==($590|0);
       if ($591) {
        $592 = HEAP32[$586>>2]|0;
        $593 = ((($592)) + 36|0);
        $594 = HEAP32[$593>>2]|0;
        $595 = (FUNCTION_TABLE_ii[$594 & 127]($586)|0);
        $$0$i$i201 = $595;
       } else {
        $596 = HEAP32[$588>>2]|0;
        $$0$i$i201 = $596;
       }
       $597 = HEAP32[$7>>2]|0;
       $598 = ((($597)) + 12|0);
       $599 = HEAP32[$598>>2]|0;
       $600 = (FUNCTION_TABLE_iiii[$599 & 31]($7,2048,$$0$i$i201)|0);
       if (!($600)) {
        label = 219;
        break L21;
       }
       $603 = HEAP32[$9>>2]|0;
       $604 = HEAP32[$11>>2]|0;
       $605 = ($603|0)==($604|0);
       if ($605) {
        __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($8,$9,$11);
       }
       $606 = HEAP32[$0>>2]|0;
       $607 = ((($606)) + 12|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ((($606)) + 16|0);
       $610 = HEAP32[$609>>2]|0;
       $611 = ($608|0)==($610|0);
       if ($611) {
        $612 = HEAP32[$606>>2]|0;
        $613 = ((($612)) + 36|0);
        $614 = HEAP32[$613>>2]|0;
        $615 = (FUNCTION_TABLE_ii[$614 & 127]($606)|0);
        $$0$i$i162 = $615;
       } else {
        $616 = HEAP32[$608>>2]|0;
        $$0$i$i162 = $616;
       }
       $617 = HEAP32[$9>>2]|0;
       $618 = ((($617)) + 4|0);
       HEAP32[$9>>2] = $618;
       HEAP32[$617>>2] = $$0$i$i162;
       $619 = HEAP32[$24>>2]|0;
       $620 = (($619) + -1)|0;
       HEAP32[$24>>2] = $620;
       $621 = HEAP32[$0>>2]|0;
       $622 = ((($621)) + 12|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ((($621)) + 16|0);
       $625 = HEAP32[$624>>2]|0;
       $626 = ($623|0)==($625|0);
       if ($626) {
        $627 = HEAP32[$621>>2]|0;
        $628 = ((($627)) + 40|0);
        $629 = HEAP32[$628>>2]|0;
        (FUNCTION_TABLE_ii[$629 & 127]($621)|0);
        $$pre$i4$i$i212 = $$pre$i4$i$i212371396;$573 = $721;
        continue;
       } else {
        $630 = ((($623)) + 4|0);
        HEAP32[$622>>2] = $630;
        $$pre$i4$i$i212 = $$pre$i4$i$i212371396;$573 = $721;
        continue;
       }
      }
     }
    } while(0);
    $631 = HEAP32[$9>>2]|0;
    $632 = HEAP32[$8>>2]|0;
    $633 = ($631|0)==($632|0);
    if ($633) {
     label = 229;
     break L21;
    } else {
     $$1132 = $$0131;
    }
    break;
   }
   default: {
    $$1132 = $$0131;
   }
   }
  } while(0);
  L279: do {
   if ((label|0) == 45) {
    while(1) {
     label = 0;
     $117 = HEAP32[$0>>2]|0;
     $118 = ($117|0)==(0|0);
     do {
      if ($118) {
       $143 = 1;
      } else {
       $119 = ((($117)) + 12|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = ((($117)) + 16|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = ($120|0)==($122|0);
       if ($123) {
        $124 = HEAP32[$117>>2]|0;
        $125 = ((($124)) + 36|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = (FUNCTION_TABLE_ii[$126 & 127]($117)|0);
        $$0$i$i$i$i179 = $127;
       } else {
        $128 = HEAP32[$120>>2]|0;
        $$0$i$i$i$i179 = $128;
       }
       $129 = ($$0$i$i$i$i179|0)==(-1);
       if ($129) {
        HEAP32[$0>>2] = 0;
        $143 = 1;
        break;
       } else {
        $$pre$i$i$i181 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i182 = ($$pre$i$i$i181|0)==(0|0);
        $143 = $phitmp$i$i$i182;
        break;
       }
      }
     } while(0);
     $130 = ($131|0)==(0|0);
     do {
      if ($130) {
       $$pre$i4$i$i187391 = $$pre$i4$i$i187;
       label = 58;
      } else {
       $132 = ((($131)) + 12|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ((($131)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($133|0)==($135|0);
       if ($136) {
        $137 = HEAP32[$131>>2]|0;
        $138 = ((($137)) + 36|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (FUNCTION_TABLE_ii[$139 & 127]($131)|0);
        $$0$i$i2$i$i185 = $140;
       } else {
        $141 = HEAP32[$133>>2]|0;
        $$0$i$i2$i$i185 = $141;
       }
       $142 = ($$0$i$i2$i$i185|0)==(-1);
       if ($142) {
        HEAP32[$1>>2] = 0;
        $$pre$i4$i$i187391 = 0;
        label = 58;
        break;
       } else {
        $phitmp$i5$i$i188 = ($$pre$i4$i$i187|0)==(0|0);
        $tmp$i$i190 = $143 ^ $phitmp$i5$i$i188;
        if ($tmp$i$i190) {
         $$pre$i4$i$i187393 = $$pre$i4$i$i187;$716 = $$pre$i4$i$i187;
         break;
        } else {
         $$1132 = $$0131;
         break L279;
        }
       }
      }
     } while(0);
     if ((label|0) == 58) {
      label = 0;
      if ($143) {
       $$1132 = $$0131;
       break L279;
      } else {
       $$pre$i4$i$i187393 = $$pre$i4$i$i187391;$716 = 0;
      }
     }
     $144 = HEAP32[$0>>2]|0;
     $145 = ((($144)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ((($144)) + 16|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     if ($149) {
      $150 = HEAP32[$144>>2]|0;
      $151 = ((($150)) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = (FUNCTION_TABLE_ii[$152 & 127]($144)|0);
      $$0$i$i192 = $153;
     } else {
      $154 = HEAP32[$146>>2]|0;
      $$0$i$i192 = $154;
     }
     $155 = HEAP32[$7>>2]|0;
     $156 = ((($155)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (FUNCTION_TABLE_iiii[$157 & 31]($7,8192,$$0$i$i192)|0);
     if (!($158)) {
      $$1132 = $$0131;
      break L279;
     }
     $159 = HEAP32[$0>>2]|0;
     $160 = ((($159)) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ((($159)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($161|0)==($163|0);
     if ($164) {
      $165 = HEAP32[$159>>2]|0;
      $166 = ((($165)) + 40|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (FUNCTION_TABLE_ii[$167 & 127]($159)|0);
      $$0$i$i196 = $168;
     } else {
      $169 = ((($161)) + 4|0);
      HEAP32[$160>>2] = $169;
      $170 = HEAP32[$161>>2]|0;
      $$0$i$i196 = $170;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($23,$$0$i$i196);
     $$pre$i4$i$i187 = $$pre$i4$i$i187393;$131 = $716;
     label = 45;
    }
   }
  } while(0);
  $636 = (($$0133) + 1)|0;
  $$0131 = $$1132;$$0133 = $636;
 }
 L314: do {
  if ((label|0) == 43) {
   $114 = HEAP32[$5>>2]|0;
   $115 = $114 | 4;
   HEAP32[$5>>2] = $115;
   $$10 = 0;
  }
  else if ((label|0) == 101) {
   $293 = HEAP32[$5>>2]|0;
   $294 = $293 | 4;
   HEAP32[$5>>2] = $294;
   $$10 = 0;
  }
  else if ((label|0) == 141) {
   $423 = HEAP32[$5>>2]|0;
   $424 = $423 | 4;
   HEAP32[$5>>2] = $424;
   $$10 = 0;
  }
  else if ((label|0) == 195) {
   $545 = HEAP32[$5>>2]|0;
   $546 = $545 | 4;
   HEAP32[$5>>2] = $546;
   $$10 = 0;
  }
  else if ((label|0) == 219) {
   $601 = HEAP32[$5>>2]|0;
   $602 = $601 | 4;
   HEAP32[$5>>2] = $602;
   $$10 = 0;
  }
  else if ((label|0) == 229) {
   $634 = HEAP32[$5>>2]|0;
   $635 = $634 | 4;
   HEAP32[$5>>2] = $635;
   $$10 = 0;
  }
  else if ((label|0) == 231) {
   $637 = ($$0131|0)==(0|0);
   L316: do {
    if (!($637)) {
     $638 = ((($$0131)) + 8|0);
     $639 = ((($638)) + 3|0);
     $640 = ((($$0131)) + 4|0);
     $$0 = 1;
     L318: while(1) {
      $641 = HEAP8[$639>>0]|0;
      $642 = ($641<<24>>24)<(0);
      if ($642) {
       $643 = HEAP32[$640>>2]|0;
       $646 = $643;
      } else {
       $644 = $641&255;
       $646 = $644;
      }
      $645 = ($$0>>>0)<($646>>>0);
      if (!($645)) {
       break L316;
      }
      $647 = HEAP32[$0>>2]|0;
      $648 = ($647|0)==(0|0);
      do {
       if ($648) {
        $722 = 1;
       } else {
        $649 = ((($647)) + 12|0);
        $650 = HEAP32[$649>>2]|0;
        $651 = ((($647)) + 16|0);
        $652 = HEAP32[$651>>2]|0;
        $653 = ($650|0)==($652|0);
        if ($653) {
         $654 = HEAP32[$647>>2]|0;
         $655 = ((($654)) + 36|0);
         $656 = HEAP32[$655>>2]|0;
         $657 = (FUNCTION_TABLE_ii[$656 & 127]($647)|0);
         $$0$i$i$i$i = $657;
        } else {
         $658 = HEAP32[$650>>2]|0;
         $$0$i$i$i$i = $658;
        }
        $659 = ($$0$i$i$i$i|0)==(-1);
        if ($659) {
         HEAP32[$0>>2] = 0;
         $722 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$0>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $722 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $660 = HEAP32[$1>>2]|0;
      $661 = ($660|0)==(0|0);
      do {
       if ($661) {
        label = 250;
       } else {
        $662 = ((($660)) + 12|0);
        $663 = HEAP32[$662>>2]|0;
        $664 = ((($660)) + 16|0);
        $665 = HEAP32[$664>>2]|0;
        $666 = ($663|0)==($665|0);
        if ($666) {
         $667 = HEAP32[$660>>2]|0;
         $668 = ((($667)) + 36|0);
         $669 = HEAP32[$668>>2]|0;
         $670 = (FUNCTION_TABLE_ii[$669 & 127]($660)|0);
         $$0$i$i2$i$i = $670;
        } else {
         $671 = HEAP32[$663>>2]|0;
         $$0$i$i2$i$i = $671;
        }
        $672 = ($$0$i$i2$i$i|0)==(-1);
        if ($672) {
         HEAP32[$1>>2] = 0;
         label = 250;
         break;
        } else {
         if ($722) {
          break;
         } else {
          break L318;
         }
        }
       }
      } while(0);
      if ((label|0) == 250) {
       label = 0;
       if ($722) {
        break;
       }
      }
      $673 = HEAP32[$0>>2]|0;
      $674 = ((($673)) + 12|0);
      $675 = HEAP32[$674>>2]|0;
      $676 = ((($673)) + 16|0);
      $677 = HEAP32[$676>>2]|0;
      $678 = ($675|0)==($677|0);
      if ($678) {
       $679 = HEAP32[$673>>2]|0;
       $680 = ((($679)) + 36|0);
       $681 = HEAP32[$680>>2]|0;
       $682 = (FUNCTION_TABLE_ii[$681 & 127]($673)|0);
       $$0$i$i151 = $682;
      } else {
       $683 = HEAP32[$675>>2]|0;
       $$0$i$i151 = $683;
      }
      $684 = HEAP8[$639>>0]|0;
      $685 = ($684<<24>>24)<(0);
      if ($685) {
       $686 = HEAP32[$$0131>>2]|0;
       $688 = $686;
      } else {
       $688 = $$0131;
      }
      $687 = (($688) + ($$0<<2)|0);
      $689 = HEAP32[$687>>2]|0;
      $690 = ($$0$i$i151|0)==($689|0);
      if (!($690)) {
       break;
      }
      $693 = (($$0) + 1)|0;
      $694 = HEAP32[$0>>2]|0;
      $695 = ((($694)) + 12|0);
      $696 = HEAP32[$695>>2]|0;
      $697 = ((($694)) + 16|0);
      $698 = HEAP32[$697>>2]|0;
      $699 = ($696|0)==($698|0);
      if ($699) {
       $700 = HEAP32[$694>>2]|0;
       $701 = ((($700)) + 40|0);
       $702 = HEAP32[$701>>2]|0;
       (FUNCTION_TABLE_ii[$702 & 127]($694)|0);
       $$0 = $693;
       continue;
      } else {
       $703 = ((($696)) + 4|0);
       HEAP32[$695>>2] = $703;
       $$0 = $693;
       continue;
      }
     }
     $691 = HEAP32[$5>>2]|0;
     $692 = $691 | 4;
     HEAP32[$5>>2] = $692;
     $$10 = 0;
     break L314;
    }
   } while(0);
   $704 = HEAP32[$13>>2]|0;
   $705 = HEAP32[$14>>2]|0;
   $706 = ($704|0)==($705|0);
   if ($706) {
    $$10 = 1;
   } else {
    HEAP32[$25>>2] = 0;
    __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($19,$704,$705,$25);
    $707 = HEAP32[$25>>2]|0;
    $708 = ($707|0)==(0);
    if ($708) {
     $$10 = 1;
     break;
    } else {
     $709 = HEAP32[$5>>2]|0;
     $710 = $709 | 4;
     HEAP32[$5>>2] = $710;
     $$10 = 0;
     break;
    }
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $711 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $712 = ($711|0)==(0|0);
 if (!($712)) {
  $713 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$713 & 255]($711);
 }
 STACKTOP = sp;return ($$10|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$028 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0;
 var $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$4>>2]|0;
  $12 = $11 & 2147483647;
  $phitmp$i = (($12) + -1)|0;
  $18 = $phitmp$i;$19 = $10;
 } else {
  $8 = $6&255;
  $18 = 1;$19 = $8;
 }
 $13 = $2;
 $14 = (($13) - ($3))|0;
 $15 = $14 >> 2;
 $16 = ($15|0)==(0);
 do {
  if (!($16)) {
   $17 = (($18) - ($19))|0;
   $20 = ($17>>>0)<($15>>>0);
   if ($20) {
    $21 = (($19) + ($15))|0;
    $22 = (($21) - ($18))|0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$18,$22,$19,$19,0,0);
    $$pre = HEAP8[$5>>0]|0;
    $24 = $$pre;
   } else {
    $24 = $6;
   }
   $23 = ($24<<24>>24)<(0);
   if ($23) {
    $25 = HEAP32[$0>>2]|0;
    $27 = $25;
   } else {
    $27 = $0;
   }
   $26 = (($27) + ($19<<2)|0);
   $28 = $2;
   $29 = (($28) - ($3))|0;
   $30 = $29 >>> 2;
   $31 = (($19) + ($30))|0;
   $$0 = $26;$$028 = $1;
   while(1) {
    $32 = ($$028|0)==($2|0);
    if ($32) {
     break;
    }
    $33 = HEAP32[$$028>>2]|0;
    HEAP32[$$0>>2] = $33;
    $34 = ((($$0)) + 4|0);
    $35 = ((($$028)) + 4|0);
    $$0 = $34;$$028 = $35;
   }
   $scevgep = (($27) + ($31<<2)|0);
   HEAP32[$scevgep>>2] = 0;
   $36 = (($19) + ($15))|0;
   if ($23) {
    $37 = ((($0)) + 4|0);
    HEAP32[$37>>2] = $36;
    break;
   } else {
    $38 = $36&255;
    HEAP8[$5>>0] = $38;
    break;
   }
  }
 } while(0);
 return ($0|0);
}
function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i39 = 0, $$0$i$i$i42 = 0, $$0$i$i$i45 = 0, $$0$i$i$i49 = 0, $$0$i$i$i53 = 0, $$0$i$i$i59 = 0, $$0$i$i$i63 = 0, $$pre$phi$i$i57Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i40 = 0, $exitcond$i$i$i43 = 0, $exitcond$i$i$i46 = 0, $exitcond$i$i$i50 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i60 = 0, $exitcond$i$i$i64 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $10 = sp;
 if ($0) {
  $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,40144)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vii[$14 & 127]($10,$11);
  $15 = HEAP32[$10>>2]|0;
  HEAP8[$2>>0]=$15&255;HEAP8[$2+1>>0]=($15>>8)&255;HEAP8[$2+2>>0]=($15>>16)&255;HEAP8[$2+3>>0]=$15>>24;
  $16 = HEAP32[$11>>2]|0;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vii[$18 & 127]($10,$11);
  $19 = ((($8)) + 8|0);
  $20 = ((($19)) + 3|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)<(0);
  if ($22) {
   $23 = HEAP32[$8>>2]|0;
   HEAP32[$23>>2] = 0;
   $24 = ((($8)) + 4|0);
   HEAP32[$24>>2] = 0;
  } else {
   HEAP32[$8>>2] = 0;
   HEAP8[$20>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
  ;HEAP32[$8>>2]=HEAP32[$10>>2]|0;HEAP32[$8+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $25 = (($10) + ($$0$i$i$i<<2)|0);
   HEAP32[$25>>2] = 0;
   $26 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $26;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  $27 = HEAP32[$11>>2]|0;
  $28 = ((($27)) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  FUNCTION_TABLE_vii[$29 & 127]($10,$11);
  $30 = ((($7)) + 8|0);
  $31 = ((($30)) + 3|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = ($32<<24>>24)<(0);
  if ($33) {
   $34 = HEAP32[$7>>2]|0;
   HEAP32[$34>>2] = 0;
   $35 = ((($7)) + 4|0);
   HEAP32[$35>>2] = 0;
  } else {
   HEAP32[$7>>2] = 0;
   HEAP8[$31>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($7,0);
  ;HEAP32[$7>>2]=HEAP32[$10>>2]|0;HEAP32[$7+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i39 = 0;
  while(1) {
   $exitcond$i$i$i40 = ($$0$i$i$i39|0)==(3);
   if ($exitcond$i$i$i40) {
    break;
   }
   $36 = (($10) + ($$0$i$i$i39<<2)|0);
   HEAP32[$36>>2] = 0;
   $37 = (($$0$i$i$i39) + 1)|0;
   $$0$i$i$i39 = $37;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  $38 = HEAP32[$11>>2]|0;
  $39 = ((($38)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (FUNCTION_TABLE_ii[$40 & 127]($11)|0);
  HEAP32[$3>>2] = $41;
  $42 = HEAP32[$11>>2]|0;
  $43 = ((($42)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (FUNCTION_TABLE_ii[$44 & 127]($11)|0);
  HEAP32[$4>>2] = $45;
  $46 = HEAP32[$11>>2]|0;
  $47 = ((($46)) + 20|0);
  $48 = HEAP32[$47>>2]|0;
  FUNCTION_TABLE_vii[$48 & 127]($10,$11);
  $49 = ((($5)) + 11|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50<<24>>24)<(0);
  if ($51) {
   $52 = HEAP32[$5>>2]|0;
   HEAP8[$52>>0] = 0;
   $53 = ((($5)) + 4|0);
   HEAP32[$53>>2] = 0;
   $$pre$phi$i$iZ2D = $5;
  } else {
   HEAP8[$5>>0] = 0;
   HEAP8[$49>>0] = 0;
   $$pre$phi$i$iZ2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($5,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i42 = 0;
  while(1) {
   $exitcond$i$i$i43 = ($$0$i$i$i42|0)==(3);
   if ($exitcond$i$i$i43) {
    break;
   }
   $54 = (($10) + ($$0$i$i$i42<<2)|0);
   HEAP32[$54>>2] = 0;
   $55 = (($$0$i$i$i42) + 1)|0;
   $$0$i$i$i42 = $55;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $56 = HEAP32[$11>>2]|0;
  $57 = ((($56)) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 127]($10,$11);
  $59 = ((($6)) + 8|0);
  $60 = ((($59)) + 3|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = ($61<<24>>24)<(0);
  if ($62) {
   $63 = HEAP32[$6>>2]|0;
   HEAP32[$63>>2] = 0;
   $64 = ((($6)) + 4|0);
   HEAP32[$64>>2] = 0;
  } else {
   HEAP32[$6>>2] = 0;
   HEAP8[$60>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($6,0);
  ;HEAP32[$6>>2]=HEAP32[$10>>2]|0;HEAP32[$6+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i45 = 0;
  while(1) {
   $exitcond$i$i$i46 = ($$0$i$i$i45|0)==(3);
   if ($exitcond$i$i$i46) {
    break;
   }
   $65 = (($10) + ($$0$i$i$i45<<2)|0);
   HEAP32[$65>>2] = 0;
   $66 = (($$0$i$i$i45) + 1)|0;
   $$0$i$i$i45 = $66;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  $67 = HEAP32[$11>>2]|0;
  $68 = ((($67)) + 36|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 127]($11)|0);
  $storemerge = $70;
 } else {
  $71 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,40136)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($72)) + 44|0);
  $74 = HEAP32[$73>>2]|0;
  FUNCTION_TABLE_vii[$74 & 127]($10,$71);
  $75 = HEAP32[$10>>2]|0;
  HEAP8[$2>>0]=$75&255;HEAP8[$2+1>>0]=($75>>8)&255;HEAP8[$2+2>>0]=($75>>16)&255;HEAP8[$2+3>>0]=$75>>24;
  $76 = HEAP32[$71>>2]|0;
  $77 = ((($76)) + 32|0);
  $78 = HEAP32[$77>>2]|0;
  FUNCTION_TABLE_vii[$78 & 127]($10,$71);
  $79 = ((($8)) + 8|0);
  $80 = ((($79)) + 3|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = ($81<<24>>24)<(0);
  if ($82) {
   $83 = HEAP32[$8>>2]|0;
   HEAP32[$83>>2] = 0;
   $84 = ((($8)) + 4|0);
   HEAP32[$84>>2] = 0;
  } else {
   HEAP32[$8>>2] = 0;
   HEAP8[$80>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
  ;HEAP32[$8>>2]=HEAP32[$10>>2]|0;HEAP32[$8+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i49 = 0;
  while(1) {
   $exitcond$i$i$i50 = ($$0$i$i$i49|0)==(3);
   if ($exitcond$i$i$i50) {
    break;
   }
   $85 = (($10) + ($$0$i$i$i49<<2)|0);
   HEAP32[$85>>2] = 0;
   $86 = (($$0$i$i$i49) + 1)|0;
   $$0$i$i$i49 = $86;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  $87 = HEAP32[$71>>2]|0;
  $88 = ((($87)) + 28|0);
  $89 = HEAP32[$88>>2]|0;
  FUNCTION_TABLE_vii[$89 & 127]($10,$71);
  $90 = ((($7)) + 8|0);
  $91 = ((($90)) + 3|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = ($92<<24>>24)<(0);
  if ($93) {
   $94 = HEAP32[$7>>2]|0;
   HEAP32[$94>>2] = 0;
   $95 = ((($7)) + 4|0);
   HEAP32[$95>>2] = 0;
  } else {
   HEAP32[$7>>2] = 0;
   HEAP8[$91>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($7,0);
  ;HEAP32[$7>>2]=HEAP32[$10>>2]|0;HEAP32[$7+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $96 = (($10) + ($$0$i$i$i53<<2)|0);
   HEAP32[$96>>2] = 0;
   $97 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $97;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  $98 = HEAP32[$71>>2]|0;
  $99 = ((($98)) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 127]($71)|0);
  HEAP32[$3>>2] = $101;
  $102 = HEAP32[$71>>2]|0;
  $103 = ((($102)) + 16|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (FUNCTION_TABLE_ii[$104 & 127]($71)|0);
  HEAP32[$4>>2] = $105;
  $106 = HEAP32[$71>>2]|0;
  $107 = ((($106)) + 20|0);
  $108 = HEAP32[$107>>2]|0;
  FUNCTION_TABLE_vii[$108 & 127]($10,$71);
  $109 = ((($5)) + 11|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = ($110<<24>>24)<(0);
  if ($111) {
   $112 = HEAP32[$5>>2]|0;
   HEAP8[$112>>0] = 0;
   $113 = ((($5)) + 4|0);
   HEAP32[$113>>2] = 0;
   $$pre$phi$i$i57Z2D = $5;
  } else {
   HEAP8[$5>>0] = 0;
   HEAP8[$109>>0] = 0;
   $$pre$phi$i$i57Z2D = $5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($5,0);
  ;HEAP32[$$pre$phi$i$i57Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i59 = 0;
  while(1) {
   $exitcond$i$i$i60 = ($$0$i$i$i59|0)==(3);
   if ($exitcond$i$i$i60) {
    break;
   }
   $114 = (($10) + ($$0$i$i$i59<<2)|0);
   HEAP32[$114>>2] = 0;
   $115 = (($$0$i$i$i59) + 1)|0;
   $$0$i$i$i59 = $115;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $116 = HEAP32[$71>>2]|0;
  $117 = ((($116)) + 24|0);
  $118 = HEAP32[$117>>2]|0;
  FUNCTION_TABLE_vii[$118 & 127]($10,$71);
  $119 = ((($6)) + 8|0);
  $120 = ((($119)) + 3|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = ($121<<24>>24)<(0);
  if ($122) {
   $123 = HEAP32[$6>>2]|0;
   HEAP32[$123>>2] = 0;
   $124 = ((($6)) + 4|0);
   HEAP32[$124>>2] = 0;
  } else {
   HEAP32[$6>>2] = 0;
   HEAP8[$120>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($6,0);
  ;HEAP32[$6>>2]=HEAP32[$10>>2]|0;HEAP32[$6+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i63 = 0;
  while(1) {
   $exitcond$i$i$i64 = ($$0$i$i$i63|0)==(3);
   if ($exitcond$i$i$i64) {
    break;
   }
   $125 = (($10) + ($$0$i$i$i63<<2)|0);
   HEAP32[$125>>2] = 0;
   $126 = (($$0$i$i$i63) + 1)|0;
   $$0$i$i$i63 = $126;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  $127 = HEAP32[$71>>2]|0;
  $128 = ((($127)) + 36|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 127]($71)|0);
  $storemerge = $130;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(156|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 4 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) - ($7))|0;
 $14 = $13 >> 2;
 $phitmp = $7;
 $15 = $5 ? $phitmp : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
 }
 if ($5) {
  $18 = $16;
  HEAP32[$0>>2] = $18;
  $24 = $16;
 } else {
  $$pr = HEAP32[$0>>2]|0;
  $19 = $16;
  HEAP32[$0>>2] = $19;
  $20 = ($$pr|0)==(0|0);
  if ($20) {
   $24 = $16;
  } else {
   $21 = HEAP32[$3>>2]|0;
   FUNCTION_TABLE_vi[$21 & 255]($$pr);
   $$pre = HEAP32[$0>>2]|0;
   $24 = $$pre;
  }
 }
 HEAP32[$3>>2] = (157);
 $22 = $$ >>> 2;
 $23 = (($24) + ($14<<2)|0);
 HEAP32[$1>>2] = $23;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAP32[$2>>2] = $26;
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i42 = 0, $$0$i$i45 = 0, $$037 = 0, $$038 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $$pre75 = 0, $$sroa$053$0 = 0, $$sroa$061$0 = 0, $$sroa$070$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i43 = 0, $exitcond$i$i46 = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $$byval_copy = sp + 8|0;
 $vararg_buffer1 = sp;
 $6 = sp + 284|0;
 $7 = sp + 72|0;
 $8 = sp + 184|0;
 $9 = sp + 68|0;
 $10 = sp + 180|0;
 $11 = sp + 177|0;
 $12 = sp + 176|0;
 $13 = sp + 56|0;
 $14 = sp + 44|0;
 $15 = sp + 32|0;
 $16 = sp + 28|0;
 $17 = sp + 76|0;
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $20 = sp + 16|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$$byval_copy>>3] = $5;
 $21 = (_snprintf($6,100,30003,$$byval_copy)|0);
 $22 = ($21>>>0)>(99);
 if ($22) {
  $23 = (__ZNSt3__26__clocEv()|0);
  HEAPF64[$vararg_buffer1>>3] = $5;
  $24 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$23,30003,$vararg_buffer1)|0);
  $25 = HEAP32[$7>>2]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   $$pre = HEAP32[$7>>2]|0;
   $108 = $$pre;
  } else {
   $27 = $25;
   $108 = $27;
  }
  $28 = (_malloc($24)|0);
  $29 = $28;
  $30 = ($28|0)==(0|0);
  if ($30) {
   $$0 = 0;$$038 = $24;$$sroa$061$0 = $29;$$sroa$070$0 = $108;
  } else {
   $$0 = $28;$$038 = $24;$$sroa$061$0 = $29;$$sroa$070$0 = $108;
  }
 } else {
  $$0 = $8;$$038 = $21;$$sroa$061$0 = 0;$$sroa$070$0 = 0;
 }
 $31 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$9>>2] = $31;
 $32 = (__ZNKSt3__26locale9use_facetERNS0_2idE($9,38408)|0);
 $33 = HEAP32[$7>>2]|0;
 $34 = (($33) + ($$038)|0);
 $35 = HEAP32[$32>>2]|0;
 $36 = ((($35)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 (FUNCTION_TABLE_iiiii[$37 & 7]($32,$33,$34,$$0)|0);
 $38 = ($$038|0)==(0);
 if ($38) {
  $48 = 0;
 } else {
  $39 = HEAP32[$7>>2]|0;
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)==(45);
  $48 = $41;
 }
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $42 = (($13) + ($$0$i$i<<2)|0);
  HEAP32[$42>>2] = 0;
  $43 = (($$0$i$i) + 1)|0;
  $$0$i$i = $43;
 }
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $$0$i$i42 = 0;
 while(1) {
  $exitcond$i$i43 = ($$0$i$i42|0)==(3);
  if ($exitcond$i$i43) {
   break;
  }
  $44 = (($14) + ($$0$i$i42<<2)|0);
  HEAP32[$44>>2] = 0;
  $45 = (($$0$i$i42) + 1)|0;
  $$0$i$i42 = $45;
 }
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
 $$0$i$i45 = 0;
 while(1) {
  $exitcond$i$i46 = ($$0$i$i45|0)==(3);
  if ($exitcond$i$i46) {
   break;
  }
  $46 = (($15) + ($$0$i$i45<<2)|0);
  HEAP32[$46>>2] = 0;
  $47 = (($$0$i$i45) + 1)|0;
  $$0$i$i45 = $47;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($2,$48,$9,$10,$11,$12,$13,$14,$15,$16);
 $49 = HEAP32[$16>>2]|0;
 $50 = ($$038|0)>($49|0);
 if ($50) {
  $51 = (($$038) - ($49))|0;
  $52 = $51 << 1;
  $53 = ((($15)) + 11|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = ($54<<24>>24)<(0);
  $56 = ((($15)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $54&255;
  $59 = $55 ? $57 : $58;
  $60 = ((($14)) + 11|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = ($61<<24>>24)<(0);
  $63 = ((($14)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $61&255;
  $66 = $62 ? $64 : $65;
  $67 = $52 | 1;
  $68 = (($59) + ($67))|0;
  $69 = (($68) + ($66))|0;
  $$pn = $69;
 } else {
  $70 = ((($15)) + 11|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = ($71<<24>>24)<(0);
  $73 = ((($15)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $71&255;
  $76 = $72 ? $74 : $75;
  $77 = ((($14)) + 11|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = ($78<<24>>24)<(0);
  $80 = ((($14)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $78&255;
  $83 = $79 ? $81 : $82;
  $84 = (($76) + 2)|0;
  $85 = (($84) + ($83))|0;
  $$pn = $85;
 }
 $86 = (($$pn) + ($49))|0;
 $87 = ($86>>>0)>(100);
 if ($87) {
  $88 = (_malloc($86)|0);
  $89 = $88;
  $90 = ($88|0)==(0|0);
  if ($90) {
   $$pre75 = HEAP32[$16>>2]|0;
   $$037 = 0;$$sroa$053$0 = $89;$96 = $$pre75;
  } else {
   $$037 = $88;$$sroa$053$0 = $89;$96 = $49;
  }
 } else {
  $$037 = $17;$$sroa$053$0 = 0;$96 = $49;
 }
 $91 = ((($3)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($$0) + ($$038)|0);
 $94 = HEAP8[$11>>0]|0;
 $95 = HEAP8[$12>>0]|0;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($$037,$18,$19,$92,$$0,$93,$32,$48,$10,$94,$95,$13,$14,$15,$96);
 $97 = HEAP32[$1>>2]|0;
 HEAP32[$20>>2] = $97;
 $98 = HEAP32[$18>>2]|0;
 $99 = HEAP32[$19>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
 $100 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$98,$99,$3,$4)|0);
 $101 = ($$sroa$053$0|0)==(0);
 if (!($101)) {
  $102 = $$sroa$053$0;
  _free($102);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
 $103 = HEAP32[$9>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($103)|0);
 $104 = ($$sroa$061$0|0)==(0);
 if (!($104)) {
  $105 = $$sroa$061$0;
  _free($105);
 }
 $106 = ($$sroa$070$0|0)==(0);
 if (!($106)) {
  $107 = $$sroa$070$0;
  _free($107);
 }
 STACKTOP = sp;return ($100|0);
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i26 = 0, $$0$i$i29 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$041$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i27 = 0, $exitcond$i$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 164|0;
 $8 = sp + 161|0;
 $9 = sp + 160|0;
 $10 = sp + 40|0;
 $11 = sp + 28|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = sp + 60|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $17 = sp;
 $18 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$6>>2] = $18;
 $19 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,38408)|0);
 $20 = ((($5)) + 11|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)<(0);
 $23 = ((($5)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $21&255;
 $26 = $22 ? $24 : $25;
 $27 = ($26|0)==(0);
 if ($27) {
  $42 = 0;
 } else {
  $28 = HEAP32[$5>>2]|0;
  $29 = $22 ? $28 : $5;
  $30 = HEAP8[$29>>0]|0;
  $31 = HEAP32[$19>>2]|0;
  $32 = ((($31)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_iii[$33 & 31]($19,45)|0);
  $35 = ($30<<24>>24)==($34<<24>>24);
  $42 = $35;
 }
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $36 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$36>>2] = 0;
  $37 = (($$0$i$i) + 1)|0;
  $$0$i$i = $37;
 }
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
 $$0$i$i26 = 0;
 while(1) {
  $exitcond$i$i27 = ($$0$i$i26|0)==(3);
  if ($exitcond$i$i27) {
   break;
  }
  $38 = (($11) + ($$0$i$i26<<2)|0);
  HEAP32[$38>>2] = 0;
  $39 = (($$0$i$i26) + 1)|0;
  $$0$i$i26 = $39;
 }
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
 $$0$i$i29 = 0;
 while(1) {
  $exitcond$i$i30 = ($$0$i$i29|0)==(3);
  if ($exitcond$i$i30) {
   break;
  }
  $40 = (($12) + ($$0$i$i29<<2)|0);
  HEAP32[$40>>2] = 0;
  $41 = (($$0$i$i29) + 1)|0;
  $$0$i$i29 = $41;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($2,$42,$6,$7,$8,$9,$10,$11,$12,$13);
 $43 = HEAP8[$20>>0]|0;
 $44 = ($43<<24>>24)<(0);
 $45 = HEAP32[$23>>2]|0;
 $46 = $43&255;
 $47 = $44 ? $45 : $46;
 $48 = HEAP32[$13>>2]|0;
 $49 = ($47|0)>($48|0);
 if ($49) {
  $50 = (($47) - ($48))|0;
  $51 = $50 << 1;
  $52 = ((($12)) + 11|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = ($53<<24>>24)<(0);
  $55 = ((($12)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $53&255;
  $58 = $54 ? $56 : $57;
  $59 = ((($11)) + 11|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = ($60<<24>>24)<(0);
  $62 = ((($11)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $60&255;
  $65 = $61 ? $63 : $64;
  $66 = $51 | 1;
  $67 = (($58) + ($66))|0;
  $68 = (($67) + ($65))|0;
  $$pn = $68;
 } else {
  $69 = ((($12)) + 11|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = ($70<<24>>24)<(0);
  $72 = ((($12)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $70&255;
  $75 = $71 ? $73 : $74;
  $76 = ((($11)) + 11|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = ($77<<24>>24)<(0);
  $79 = ((($11)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $77&255;
  $82 = $78 ? $80 : $81;
  $83 = (($75) + 2)|0;
  $84 = (($83) + ($82))|0;
  $$pn = $84;
 }
 $85 = (($$pn) + ($48))|0;
 $86 = ($85>>>0)>(100);
 if ($86) {
  $87 = (_malloc($85)|0);
  $88 = $87;
  $89 = ($87|0)==(0|0);
  if ($89) {
   $$pre = HEAP8[$20>>0]|0;
   $$pre47 = HEAP32[$23>>2]|0;
   $$pre48 = HEAP32[$13>>2]|0;
   $$0 = 0;$$sroa$041$0 = $88;$102 = $$pre48;$93 = $$pre;$98 = $$pre47;
  } else {
   $$0 = $87;$$sroa$041$0 = $88;$102 = $48;$93 = $43;$98 = $45;
  }
 } else {
  $$0 = $14;$$sroa$041$0 = 0;$102 = $48;$93 = $43;$98 = $45;
 }
 $90 = ((($3)) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($93<<24>>24)<(0);
 $94 = HEAP32[$5>>2]|0;
 $95 = $92 ? $94 : $5;
 $96 = $93&255;
 $97 = $92 ? $98 : $96;
 $99 = (($95) + ($97)|0);
 $100 = HEAP8[$8>>0]|0;
 $101 = HEAP8[$9>>0]|0;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($$0,$15,$16,$91,$95,$99,$19,$42,$7,$100,$101,$10,$11,$12,$102);
 $103 = HEAP32[$1>>2]|0;
 HEAP32[$17>>2] = $103;
 $104 = HEAP32[$15>>2]|0;
 $105 = HEAP32[$16>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
 $106 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$0,$104,$105,$3,$4)|0);
 $107 = ($$sroa$041$0|0)==(0);
 if (!($107)) {
  $108 = $$sroa$041$0;
  _free($108);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 $109 = HEAP32[$6>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($109)|0);
 STACKTOP = sp;return ($106|0);
}
function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i53 = 0, $$0$i$i$i59 = 0, $$0$i$i$i65 = 0, $$0$i$i$i71 = 0, $$0$i$i$i77 = 0, $$0$i$i$i83 = 0, $$pre$phi$i$i45Z2D = 0, $$pre$phi$i$i51Z2D = 0, $$pre$phi$i$i57Z2D = 0, $$pre$phi$i$i63Z2D = 0, $$pre$phi$i$i69Z2D = 0, $$pre$phi$i$i75Z2D = 0, $$pre$phi$i$i81Z2D = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi86Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i60 = 0, $exitcond$i$i$i66 = 0, $exitcond$i$i$i72 = 0, $exitcond$i$i$i78 = 0, $exitcond$i$i$i84 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $10 = sp;
 if ($0) {
  $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,40128)|0);
  if ($1) {
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 44|0);
   $14 = HEAP32[$13>>2]|0;
   FUNCTION_TABLE_vii[$14 & 127]($10,$11);
   $15 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$15&255;HEAP8[$3+1>>0]=($15>>8)&255;HEAP8[$3+2>>0]=($15>>16)&255;HEAP8[$3+3>>0]=$15>>24;
   $16 = HEAP32[$11>>2]|0;
   $17 = ((($16)) + 32|0);
   $18 = HEAP32[$17>>2]|0;
   FUNCTION_TABLE_vii[$18 & 127]($10,$11);
   $19 = ((($8)) + 11|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = ($20<<24>>24)<(0);
   if ($21) {
    $22 = HEAP32[$8>>2]|0;
    HEAP8[$22>>0] = 0;
    $23 = ((($8)) + 4|0);
    HEAP32[$23>>2] = 0;
    $$pre$phi$i$iZ2D = $8;
   } else {
    HEAP8[$8>>0] = 0;
    HEAP8[$19>>0] = 0;
    $$pre$phi$i$iZ2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
   ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$10+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $24 = (($10) + ($$0$i$i$i<<2)|0);
    HEAP32[$24>>2] = 0;
    $25 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $25;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $$pre$phiZ2D = $11;
  } else {
   $26 = HEAP32[$11>>2]|0;
   $27 = ((($26)) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   FUNCTION_TABLE_vii[$28 & 127]($10,$11);
   $29 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$29&255;HEAP8[$3+1>>0]=($29>>8)&255;HEAP8[$3+2>>0]=($29>>16)&255;HEAP8[$3+3>>0]=$29>>24;
   $30 = HEAP32[$11>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_vii[$32 & 127]($10,$11);
   $33 = ((($8)) + 11|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = ($34<<24>>24)<(0);
   if ($35) {
    $36 = HEAP32[$8>>2]|0;
    HEAP8[$36>>0] = 0;
    $37 = ((($8)) + 4|0);
    HEAP32[$37>>2] = 0;
    $$pre$phi$i$i45Z2D = $8;
   } else {
    HEAP8[$8>>0] = 0;
    HEAP8[$33>>0] = 0;
    $$pre$phi$i$i45Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
   ;HEAP32[$$pre$phi$i$i45Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i45Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i45Z2D+8>>2]=HEAP32[$10+8>>2]|0;
   $$0$i$i$i47 = 0;
   while(1) {
    $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
    if ($exitcond$i$i$i48) {
     break;
    }
    $38 = (($10) + ($$0$i$i$i47<<2)|0);
    HEAP32[$38>>2] = 0;
    $39 = (($$0$i$i$i47) + 1)|0;
    $$0$i$i$i47 = $39;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $$pre$phiZ2D = $11;
  }
  $40 = HEAP32[$11>>2]|0;
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (FUNCTION_TABLE_ii[$42 & 127]($11)|0);
  HEAP8[$4>>0] = $43;
  $44 = HEAP32[$11>>2]|0;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (FUNCTION_TABLE_ii[$46 & 127]($11)|0);
  HEAP8[$5>>0] = $47;
  $48 = HEAP32[$$pre$phiZ2D>>2]|0;
  $49 = ((($48)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vii[$50 & 127]($10,$11);
  $51 = ((($6)) + 11|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = ($52<<24>>24)<(0);
  if ($53) {
   $54 = HEAP32[$6>>2]|0;
   HEAP8[$54>>0] = 0;
   $55 = ((($6)) + 4|0);
   HEAP32[$55>>2] = 0;
   $$pre$phi$i$i51Z2D = $6;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$51>>0] = 0;
   $$pre$phi$i$i51Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$i51Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i51Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i51Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $56 = (($10) + ($$0$i$i$i53<<2)|0);
   HEAP32[$56>>2] = 0;
   $57 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $57;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $58 = HEAP32[$$pre$phiZ2D>>2]|0;
  $59 = ((($58)) + 24|0);
  $60 = HEAP32[$59>>2]|0;
  FUNCTION_TABLE_vii[$60 & 127]($10,$11);
  $61 = ((($7)) + 11|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = ($62<<24>>24)<(0);
  if ($63) {
   $64 = HEAP32[$7>>2]|0;
   HEAP8[$64>>0] = 0;
   $65 = ((($7)) + 4|0);
   HEAP32[$65>>2] = 0;
   $$pre$phi$i$i57Z2D = $7;
  } else {
   HEAP8[$7>>0] = 0;
   HEAP8[$61>>0] = 0;
   $$pre$phi$i$i57Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($7,0);
  ;HEAP32[$$pre$phi$i$i57Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i57Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i59 = 0;
  while(1) {
   $exitcond$i$i$i60 = ($$0$i$i$i59|0)==(3);
   if ($exitcond$i$i$i60) {
    break;
   }
   $66 = (($10) + ($$0$i$i$i59<<2)|0);
   HEAP32[$66>>2] = 0;
   $67 = (($$0$i$i$i59) + 1)|0;
   $$0$i$i$i59 = $67;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $68 = HEAP32[$11>>2]|0;
  $69 = ((($68)) + 36|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (FUNCTION_TABLE_ii[$70 & 127]($11)|0);
  $storemerge = $71;
 } else {
  $72 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,40120)|0);
  if ($1) {
   $73 = HEAP32[$72>>2]|0;
   $74 = ((($73)) + 44|0);
   $75 = HEAP32[$74>>2]|0;
   FUNCTION_TABLE_vii[$75 & 127]($10,$72);
   $76 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$76&255;HEAP8[$3+1>>0]=($76>>8)&255;HEAP8[$3+2>>0]=($76>>16)&255;HEAP8[$3+3>>0]=$76>>24;
   $77 = HEAP32[$72>>2]|0;
   $78 = ((($77)) + 32|0);
   $79 = HEAP32[$78>>2]|0;
   FUNCTION_TABLE_vii[$79 & 127]($10,$72);
   $80 = ((($8)) + 11|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = ($81<<24>>24)<(0);
   if ($82) {
    $83 = HEAP32[$8>>2]|0;
    HEAP8[$83>>0] = 0;
    $84 = ((($8)) + 4|0);
    HEAP32[$84>>2] = 0;
    $$pre$phi$i$i63Z2D = $8;
   } else {
    HEAP8[$8>>0] = 0;
    HEAP8[$80>>0] = 0;
    $$pre$phi$i$i63Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
   ;HEAP32[$$pre$phi$i$i63Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i63Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i63Z2D+8>>2]=HEAP32[$10+8>>2]|0;
   $$0$i$i$i65 = 0;
   while(1) {
    $exitcond$i$i$i66 = ($$0$i$i$i65|0)==(3);
    if ($exitcond$i$i$i66) {
     break;
    }
    $85 = (($10) + ($$0$i$i$i65<<2)|0);
    HEAP32[$85>>2] = 0;
    $86 = (($$0$i$i$i65) + 1)|0;
    $$0$i$i$i65 = $86;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $$pre$phi86Z2D = $72;
  } else {
   $87 = HEAP32[$72>>2]|0;
   $88 = ((($87)) + 40|0);
   $89 = HEAP32[$88>>2]|0;
   FUNCTION_TABLE_vii[$89 & 127]($10,$72);
   $90 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$90&255;HEAP8[$3+1>>0]=($90>>8)&255;HEAP8[$3+2>>0]=($90>>16)&255;HEAP8[$3+3>>0]=$90>>24;
   $91 = HEAP32[$72>>2]|0;
   $92 = ((($91)) + 28|0);
   $93 = HEAP32[$92>>2]|0;
   FUNCTION_TABLE_vii[$93 & 127]($10,$72);
   $94 = ((($8)) + 11|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = ($95<<24>>24)<(0);
   if ($96) {
    $97 = HEAP32[$8>>2]|0;
    HEAP8[$97>>0] = 0;
    $98 = ((($8)) + 4|0);
    HEAP32[$98>>2] = 0;
    $$pre$phi$i$i69Z2D = $8;
   } else {
    HEAP8[$8>>0] = 0;
    HEAP8[$94>>0] = 0;
    $$pre$phi$i$i69Z2D = $8;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($8,0);
   ;HEAP32[$$pre$phi$i$i69Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i69Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i69Z2D+8>>2]=HEAP32[$10+8>>2]|0;
   $$0$i$i$i71 = 0;
   while(1) {
    $exitcond$i$i$i72 = ($$0$i$i$i71|0)==(3);
    if ($exitcond$i$i$i72) {
     break;
    }
    $99 = (($10) + ($$0$i$i$i71<<2)|0);
    HEAP32[$99>>2] = 0;
    $100 = (($$0$i$i$i71) + 1)|0;
    $$0$i$i$i71 = $100;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $$pre$phi86Z2D = $72;
  }
  $101 = HEAP32[$72>>2]|0;
  $102 = ((($101)) + 12|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (FUNCTION_TABLE_ii[$103 & 127]($72)|0);
  HEAP8[$4>>0] = $104;
  $105 = HEAP32[$72>>2]|0;
  $106 = ((($105)) + 16|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_ii[$107 & 127]($72)|0);
  HEAP8[$5>>0] = $108;
  $109 = HEAP32[$$pre$phi86Z2D>>2]|0;
  $110 = ((($109)) + 20|0);
  $111 = HEAP32[$110>>2]|0;
  FUNCTION_TABLE_vii[$111 & 127]($10,$72);
  $112 = ((($6)) + 11|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = ($113<<24>>24)<(0);
  if ($114) {
   $115 = HEAP32[$6>>2]|0;
   HEAP8[$115>>0] = 0;
   $116 = ((($6)) + 4|0);
   HEAP32[$116>>2] = 0;
   $$pre$phi$i$i75Z2D = $6;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$112>>0] = 0;
   $$pre$phi$i$i75Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$i75Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i75Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i75Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i77 = 0;
  while(1) {
   $exitcond$i$i$i78 = ($$0$i$i$i77|0)==(3);
   if ($exitcond$i$i$i78) {
    break;
   }
   $117 = (($10) + ($$0$i$i$i77<<2)|0);
   HEAP32[$117>>2] = 0;
   $118 = (($$0$i$i$i77) + 1)|0;
   $$0$i$i$i77 = $118;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $119 = HEAP32[$$pre$phi86Z2D>>2]|0;
  $120 = ((($119)) + 24|0);
  $121 = HEAP32[$120>>2]|0;
  FUNCTION_TABLE_vii[$121 & 127]($10,$72);
  $122 = ((($7)) + 11|0);
  $123 = HEAP8[$122>>0]|0;
  $124 = ($123<<24>>24)<(0);
  if ($124) {
   $125 = HEAP32[$7>>2]|0;
   HEAP8[$125>>0] = 0;
   $126 = ((($7)) + 4|0);
   HEAP32[$126>>2] = 0;
   $$pre$phi$i$i81Z2D = $7;
  } else {
   HEAP8[$7>>0] = 0;
   HEAP8[$122>>0] = 0;
   $$pre$phi$i$i81Z2D = $7;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($7,0);
  ;HEAP32[$$pre$phi$i$i81Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i81Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i81Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i83 = 0;
  while(1) {
   $exitcond$i$i$i84 = ($$0$i$i$i83|0)==(3);
   if ($exitcond$i$i$i84) {
    break;
   }
   $127 = (($10) + ($$0$i$i$i83<<2)|0);
   HEAP32[$127>>2] = 0;
   $128 = (($$0$i$i$i83) + 1)|0;
   $$0$i$i$i83 = $128;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $129 = HEAP32[$72>>2]|0;
  $130 = ((($129)) + 36|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (FUNCTION_TABLE_ii[$131 & 127]($72)|0);
  $storemerge = $132;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$ = 0, $$$097 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i113 = 0, $$0101 = 0, $$0104 = 0, $$07$i$i = 0, $$093 = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1100 = 0, $$1102 = 0, $$194 = 0, $$196 = 0, $$2 = 0, $$2103 = 0;
 var $$3 = 0, $$pn = 0, $$sroa$08$0$i = 0, $$sroa$08$0$i112 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond = 0, $isascii3$i = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 11|0);
 $16 = ((($13)) + 4|0);
 $17 = ((($12)) + 11|0);
 $18 = ((($12)) + 4|0);
 $19 = $3 & 512;
 $20 = ($19|0)==(0);
 $21 = ((($6)) + 8|0);
 $22 = ($14|0)>(0);
 $23 = ((($11)) + 11|0);
 $24 = ((($11)) + 4|0);
 $$0104 = 0;$$097 = $4;
 while(1) {
  $exitcond = ($$0104|0)==(4);
  if ($exitcond) {
   break;
  }
  $31 = (($8) + ($$0104)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  L4: do {
   switch ($33|0) {
   case 0:  {
    $34 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $34;
    $$2 = $$097;
    break;
   }
   case 1:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $36 = HEAP32[$6>>2]|0;
    $37 = ((($36)) + 28|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iii[$38 & 31]($6,32)|0);
    $40 = HEAP32[$2>>2]|0;
    $41 = ((($40)) + 1|0);
    HEAP32[$2>>2] = $41;
    HEAP8[$40>>0] = $39;
    $$2 = $$097;
    break;
   }
   case 3:  {
    $42 = HEAP8[$15>>0]|0;
    $43 = ($42<<24>>24)<(0);
    $44 = HEAP32[$16>>2]|0;
    $45 = $42&255;
    $46 = $43 ? $44 : $45;
    $47 = ($46|0)==(0);
    if ($47) {
     $$2 = $$097;
    } else {
     $48 = HEAP32[$13>>2]|0;
     $49 = $43 ? $48 : $13;
     $50 = HEAP8[$49>>0]|0;
     $51 = HEAP32[$2>>2]|0;
     $52 = ((($51)) + 1|0);
     HEAP32[$2>>2] = $52;
     HEAP8[$51>>0] = $50;
     $$2 = $$097;
    }
    break;
   }
   case 2:  {
    $53 = HEAP8[$17>>0]|0;
    $54 = ($53<<24>>24)<(0);
    $55 = HEAP32[$18>>2]|0;
    $56 = $53&255;
    $57 = $54 ? $55 : $56;
    $58 = ($57|0)==(0);
    $or$cond = $20 | $58;
    if ($or$cond) {
     $$2 = $$097;
    } else {
     $59 = HEAP32[$12>>2]|0;
     $60 = $54 ? $59 : $12;
     $61 = (($60) + ($57)|0);
     $62 = HEAP32[$2>>2]|0;
     $$0$i$i113 = $62;$$sroa$08$0$i112 = $60;
     while(1) {
      $63 = ($$sroa$08$0$i112|0)==($61|0);
      if ($63) {
       break;
      }
      $64 = HEAP8[$$sroa$08$0$i112>>0]|0;
      HEAP8[$$0$i$i113>>0] = $64;
      $65 = ((($$sroa$08$0$i112)) + 1|0);
      $66 = ((($$0$i$i113)) + 1|0);
      $$0$i$i113 = $66;$$sroa$08$0$i112 = $65;
     }
     HEAP32[$2>>2] = $$0$i$i113;
     $$2 = $$097;
    }
    break;
   }
   case 4:  {
    $67 = HEAP32[$2>>2]|0;
    $68 = ((($$097)) + 1|0);
    $$$097 = $7 ? $68 : $$097;
    $$0101 = $$$097;
    while(1) {
     $69 = ($$0101>>>0)<($5>>>0);
     if (!($69)) {
      break;
     }
     $70 = HEAP8[$$0101>>0]|0;
     $isascii3$i = ($70<<24>>24)>(-1);
     if (!($isascii3$i)) {
      break;
     }
     $71 = $70 << 24 >> 24;
     $72 = HEAP32[$21>>2]|0;
     $73 = (($72) + ($71<<1)|0);
     $74 = HEAP16[$73>>1]|0;
     $75 = $74 & 2048;
     $76 = ($75<<16>>16)==(0);
     if ($76) {
      break;
     }
     $77 = ((($$0101)) + 1|0);
     $$0101 = $77;
    }
    if ($22) {
     $$099 = $14;$$1102 = $$0101;
     while(1) {
      $78 = ($$1102>>>0)>($$$097>>>0);
      $79 = ($$099|0)>(0);
      $80 = $78 & $79;
      if (!($80)) {
       break;
      }
      $81 = ((($$1102)) + -1|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = HEAP32[$2>>2]|0;
      $84 = ((($83)) + 1|0);
      HEAP32[$2>>2] = $84;
      HEAP8[$83>>0] = $82;
      $85 = (($$099) + -1)|0;
      $$099 = $85;$$1102 = $81;
     }
     if ($79) {
      $86 = HEAP32[$6>>2]|0;
      $87 = ((($86)) + 28|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_iii[$88 & 31]($6,48)|0);
      $93 = $89;
     } else {
      $93 = 0;
     }
     $$1100 = $$099;
     while(1) {
      $90 = ($$1100|0)>(0);
      $91 = HEAP32[$2>>2]|0;
      $92 = ((($91)) + 1|0);
      HEAP32[$2>>2] = $92;
      if (!($90)) {
       break;
      }
      HEAP8[$91>>0] = $93;
      $94 = (($$1100) + -1)|0;
      $$1100 = $94;
     }
     HEAP8[$91>>0] = $9;
     $$2103 = $$1102;
    } else {
     $$2103 = $$0101;
    }
    $95 = ($$2103|0)==($$$097|0);
    L35: do {
     if ($95) {
      $96 = HEAP32[$6>>2]|0;
      $97 = ((($96)) + 28|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (FUNCTION_TABLE_iii[$98 & 31]($6,48)|0);
      $100 = HEAP32[$2>>2]|0;
      $101 = ((($100)) + 1|0);
      HEAP32[$2>>2] = $101;
      HEAP8[$100>>0] = $99;
     } else {
      $102 = HEAP8[$23>>0]|0;
      $103 = ($102<<24>>24)<(0);
      $104 = HEAP32[$24>>2]|0;
      $105 = $102&255;
      $106 = $103 ? $104 : $105;
      $107 = ($106|0)==(0);
      if ($107) {
       $$0 = -1;$$093 = 0;$$095 = 0;$$3 = $$2103;
      } else {
       $108 = HEAP32[$11>>2]|0;
       $109 = $103 ? $108 : $11;
       $110 = HEAP8[$109>>0]|0;
       $111 = $110 << 24 >> 24;
       $$0 = $111;$$093 = 0;$$095 = 0;$$3 = $$2103;
      }
      while(1) {
       $112 = ($$3|0)==($$$097|0);
       if ($112) {
        break L35;
       }
       $113 = ($$095|0)==($$0|0);
       if ($113) {
        $114 = HEAP32[$2>>2]|0;
        $115 = ((($114)) + 1|0);
        HEAP32[$2>>2] = $115;
        HEAP8[$114>>0] = $10;
        $116 = (($$093) + 1)|0;
        $117 = HEAP8[$23>>0]|0;
        $118 = ($117<<24>>24)<(0);
        $119 = HEAP32[$24>>2]|0;
        $120 = $117&255;
        $121 = $118 ? $119 : $120;
        $122 = ($116>>>0)<($121>>>0);
        if ($122) {
         $123 = HEAP32[$11>>2]|0;
         $124 = $118 ? $123 : $11;
         $125 = (($124) + ($116)|0);
         $126 = HEAP8[$125>>0]|0;
         $127 = ($126<<24>>24)==(127);
         $128 = $126 << 24 >> 24;
         $$ = $127 ? -1 : $128;
         $$1 = $$;$$194 = $116;$$196 = 0;
        } else {
         $$1 = $$095;$$194 = $116;$$196 = 0;
        }
       } else {
        $$1 = $$0;$$194 = $$093;$$196 = $$095;
       }
       $129 = ((($$3)) + -1|0);
       $130 = HEAP8[$129>>0]|0;
       $131 = HEAP32[$2>>2]|0;
       $132 = ((($131)) + 1|0);
       HEAP32[$2>>2] = $132;
       HEAP8[$131>>0] = $130;
       $133 = (($$196) + 1)|0;
       $$0 = $$1;$$093 = $$194;$$095 = $133;$$3 = $129;
      }
     }
    } while(0);
    $134 = HEAP32[$2>>2]|0;
    $135 = ($67|0)==($134|0);
    if ($135) {
     $$2 = $$$097;
    } else {
     $$0$i$i106 = $134;$$07$i$i = $67;
     while(1) {
      $136 = ((($$0$i$i106)) + -1|0);
      $137 = ($$07$i$i>>>0)<($136>>>0);
      if (!($137)) {
       $$2 = $$$097;
       break L4;
      }
      $138 = HEAP8[$$07$i$i>>0]|0;
      $139 = HEAP8[$136>>0]|0;
      HEAP8[$$07$i$i>>0] = $139;
      HEAP8[$136>>0] = $138;
      $140 = ((($$07$i$i)) + 1|0);
      $$0$i$i106 = $136;$$07$i$i = $140;
     }
    }
    break;
   }
   default: {
    $$2 = $$097;
   }
   }
  } while(0);
  $141 = (($$0104) + 1)|0;
  $$0104 = $141;$$097 = $$2;
 }
 $25 = HEAP8[$15>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$16>>2]|0;
 $28 = $25&255;
 $29 = $26 ? $27 : $28;
 $30 = ($29>>>0)>(1);
 if ($30) {
  $142 = HEAP32[$13>>2]|0;
  $143 = $26 ? $142 : $13;
  $144 = (($143) + ($29)|0);
  $145 = HEAP32[$2>>2]|0;
  $$0$i$i = $145;$$pn = $143;
  while(1) {
   $$sroa$08$0$i = ((($$pn)) + 1|0);
   $146 = ($$sroa$08$0$i|0)==($144|0);
   if ($146) {
    break;
   }
   $147 = HEAP8[$$sroa$08$0$i>>0]|0;
   HEAP8[$$0$i$i>>0] = $147;
   $148 = ((($$0$i$i)) + 1|0);
   $$0$i$i = $148;$$pn = $$sroa$08$0$i;
  }
  HEAP32[$2>>2] = $$0$i$i;
 }
 $149 = $3 & 176;
 $trunc = $149&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $150 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $150;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i40 = 0, $$0$i$i42 = 0, $$037 = 0, $$038 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $$pre72 = 0, $$sroa$050$0 = 0, $$sroa$058$0 = 0, $$sroa$067$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i41 = 0, $exitcond$i$i43 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1008|0);
 $$byval_copy = sp + 8|0;
 $vararg_buffer1 = sp;
 $6 = sp + 896|0;
 $7 = sp + 888|0;
 $8 = sp + 488|0;
 $9 = sp + 480|0;
 $10 = sp + 892|0;
 $11 = sp + 476|0;
 $12 = sp + 472|0;
 $13 = sp + 460|0;
 $14 = sp + 448|0;
 $15 = sp + 436|0;
 $16 = sp + 432|0;
 $17 = sp + 32|0;
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $20 = sp + 16|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$$byval_copy>>3] = $5;
 $21 = (_snprintf($6,100,30003,$$byval_copy)|0);
 $22 = ($21>>>0)>(99);
 if ($22) {
  $23 = (__ZNSt3__26__clocEv()|0);
  HEAPF64[$vararg_buffer1>>3] = $5;
  $24 = (__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($7,$23,30003,$vararg_buffer1)|0);
  $25 = HEAP32[$7>>2]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   $$pre = HEAP32[$7>>2]|0;
   $114 = $$pre;
  } else {
   $27 = $25;
   $114 = $27;
  }
  $28 = $24 << 2;
  $29 = (_malloc($28)|0);
  $30 = $29;
  $31 = ($29|0)==(0|0);
  if ($31) {
   $$0 = 0;$$038 = $24;$$sroa$058$0 = $30;$$sroa$067$0 = $114;
  } else {
   $$0 = $29;$$038 = $24;$$sroa$058$0 = $30;$$sroa$067$0 = $114;
  }
 } else {
  $$0 = $8;$$038 = $21;$$sroa$058$0 = 0;$$sroa$067$0 = 0;
 }
 $32 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$9>>2] = $32;
 $33 = (__ZNKSt3__26locale9use_facetERNS0_2idE($9,38440)|0);
 $34 = HEAP32[$7>>2]|0;
 $35 = (($34) + ($$038)|0);
 $36 = HEAP32[$33>>2]|0;
 $37 = ((($36)) + 48|0);
 $38 = HEAP32[$37>>2]|0;
 (FUNCTION_TABLE_iiiii[$38 & 7]($33,$34,$35,$$0)|0);
 $39 = ($$038|0)==(0);
 if ($39) {
  $49 = 0;
 } else {
  $40 = HEAP32[$7>>2]|0;
  $41 = HEAP8[$40>>0]|0;
  $42 = ($41<<24>>24)==(45);
  $49 = $42;
 }
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $43 = (($13) + ($$0$i$i<<2)|0);
  HEAP32[$43>>2] = 0;
  $44 = (($$0$i$i) + 1)|0;
  $$0$i$i = $44;
 }
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $$0$i$i40 = 0;
 while(1) {
  $exitcond$i$i41 = ($$0$i$i40|0)==(3);
  if ($exitcond$i$i41) {
   break;
  }
  $45 = (($14) + ($$0$i$i40<<2)|0);
  HEAP32[$45>>2] = 0;
  $46 = (($$0$i$i40) + 1)|0;
  $$0$i$i40 = $46;
 }
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
 $$0$i$i42 = 0;
 while(1) {
  $exitcond$i$i43 = ($$0$i$i42|0)==(3);
  if ($exitcond$i$i43) {
   break;
  }
  $47 = (($15) + ($$0$i$i42<<2)|0);
  HEAP32[$47>>2] = 0;
  $48 = (($$0$i$i42) + 1)|0;
  $$0$i$i42 = $48;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($2,$49,$9,$10,$11,$12,$13,$14,$15,$16);
 $50 = HEAP32[$16>>2]|0;
 $51 = ($$038|0)>($50|0);
 if ($51) {
  $52 = (($$038) - ($50))|0;
  $53 = $52 << 1;
  $54 = ((($15)) + 8|0);
  $55 = ((($54)) + 3|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = ($56<<24>>24)<(0);
  $58 = ((($15)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $56&255;
  $61 = $57 ? $59 : $60;
  $62 = ((($14)) + 8|0);
  $63 = ((($62)) + 3|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = ($64<<24>>24)<(0);
  $66 = ((($14)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $64&255;
  $69 = $65 ? $67 : $68;
  $70 = $53 | 1;
  $71 = (($61) + ($70))|0;
  $72 = (($71) + ($69))|0;
  $$pn = $72;
 } else {
  $73 = ((($15)) + 8|0);
  $74 = ((($73)) + 3|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = ($75<<24>>24)<(0);
  $77 = ((($15)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $75&255;
  $80 = $76 ? $78 : $79;
  $81 = ((($14)) + 8|0);
  $82 = ((($81)) + 3|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = ($83<<24>>24)<(0);
  $85 = ((($14)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $83&255;
  $88 = $84 ? $86 : $87;
  $89 = (($80) + 2)|0;
  $90 = (($89) + ($88))|0;
  $$pn = $90;
 }
 $91 = (($$pn) + ($50))|0;
 $92 = ($91>>>0)>(100);
 if ($92) {
  $93 = $91 << 2;
  $94 = (_malloc($93)|0);
  $95 = $94;
  $96 = ($94|0)==(0|0);
  if ($96) {
   $$pre72 = HEAP32[$16>>2]|0;
   $$037 = 0;$$sroa$050$0 = $95;$102 = $$pre72;
  } else {
   $$037 = $94;$$sroa$050$0 = $95;$102 = $50;
  }
 } else {
  $$037 = $17;$$sroa$050$0 = 0;$102 = $50;
 }
 $97 = ((($3)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($$0) + ($$038<<2)|0);
 $100 = HEAP32[$11>>2]|0;
 $101 = HEAP32[$12>>2]|0;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($$037,$18,$19,$98,$$0,$99,$33,$49,$10,$100,$101,$13,$14,$15,$102);
 $103 = HEAP32[$1>>2]|0;
 HEAP32[$20>>2] = $103;
 $104 = HEAP32[$18>>2]|0;
 $105 = HEAP32[$19>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
 $106 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$037,$104,$105,$3,$4)|0);
 $107 = ($$sroa$050$0|0)==(0);
 if (!($107)) {
  $108 = $$sroa$050$0;
  _free($108);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
 $109 = HEAP32[$9>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($109)|0);
 $110 = ($$sroa$058$0|0)==(0);
 if (!($110)) {
  $111 = $$sroa$058$0;
  _free($111);
 }
 $112 = ($$sroa$067$0|0)==(0);
 if (!($112)) {
  $113 = $$sroa$067$0;
  _free($113);
 }
 STACKTOP = sp;return ($106|0);
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i26 = 0, $$0$i$i28 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $$pre46 = 0, $$pre47 = 0, $$sroa$040$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond$i$i = 0, $exitcond$i$i27 = 0, $exitcond$i$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $$byval_copy = sp + 468|0;
 $6 = sp + 464|0;
 $7 = sp + 472|0;
 $8 = sp + 460|0;
 $9 = sp + 456|0;
 $10 = sp + 444|0;
 $11 = sp + 432|0;
 $12 = sp + 420|0;
 $13 = sp + 416|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $17 = sp;
 $18 = (__ZNKSt3__28ios_base6getlocEv($3)|0);
 HEAP32[$6>>2] = $18;
 $19 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,38440)|0);
 $20 = ((($5)) + 8|0);
 $21 = ((($20)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)<(0);
 $24 = ((($5)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $22&255;
 $27 = $23 ? $25 : $26;
 $28 = ($27|0)==(0);
 if ($28) {
  $43 = 0;
 } else {
  $29 = HEAP32[$5>>2]|0;
  $30 = $23 ? $29 : $5;
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$19>>2]|0;
  $33 = ((($32)) + 44|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (FUNCTION_TABLE_iii[$34 & 31]($19,45)|0);
  $36 = ($31|0)==($35|0);
  $43 = $36;
 }
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $37 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i) + 1)|0;
  $$0$i$i = $38;
 }
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
 $$0$i$i26 = 0;
 while(1) {
  $exitcond$i$i27 = ($$0$i$i26|0)==(3);
  if ($exitcond$i$i27) {
   break;
  }
  $39 = (($11) + ($$0$i$i26<<2)|0);
  HEAP32[$39>>2] = 0;
  $40 = (($$0$i$i26) + 1)|0;
  $$0$i$i26 = $40;
 }
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
 $$0$i$i28 = 0;
 while(1) {
  $exitcond$i$i29 = ($$0$i$i28|0)==(3);
  if ($exitcond$i$i29) {
   break;
  }
  $41 = (($12) + ($$0$i$i28<<2)|0);
  HEAP32[$41>>2] = 0;
  $42 = (($$0$i$i28) + 1)|0;
  $$0$i$i28 = $42;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($2,$43,$6,$7,$8,$9,$10,$11,$12,$13);
 $44 = HEAP8[$21>>0]|0;
 $45 = ($44<<24>>24)<(0);
 $46 = HEAP32[$24>>2]|0;
 $47 = $44&255;
 $48 = $45 ? $46 : $47;
 $49 = HEAP32[$13>>2]|0;
 $50 = ($48|0)>($49|0);
 if ($50) {
  $51 = (($48) - ($49))|0;
  $52 = $51 << 1;
  $53 = ((($12)) + 8|0);
  $54 = ((($53)) + 3|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = ($55<<24>>24)<(0);
  $57 = ((($12)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $55&255;
  $60 = $56 ? $58 : $59;
  $61 = ((($11)) + 8|0);
  $62 = ((($61)) + 3|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = ($63<<24>>24)<(0);
  $65 = ((($11)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $63&255;
  $68 = $64 ? $66 : $67;
  $69 = $52 | 1;
  $70 = (($60) + ($69))|0;
  $71 = (($70) + ($68))|0;
  $$pn = $71;
 } else {
  $72 = ((($12)) + 8|0);
  $73 = ((($72)) + 3|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = ($74<<24>>24)<(0);
  $76 = ((($12)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $74&255;
  $79 = $75 ? $77 : $78;
  $80 = ((($11)) + 8|0);
  $81 = ((($80)) + 3|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = ($82<<24>>24)<(0);
  $84 = ((($11)) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $82&255;
  $87 = $83 ? $85 : $86;
  $88 = (($79) + 2)|0;
  $89 = (($88) + ($87))|0;
  $$pn = $89;
 }
 $90 = (($$pn) + ($49))|0;
 $91 = ($90>>>0)>(100);
 if ($91) {
  $92 = $90 << 2;
  $93 = (_malloc($92)|0);
  $94 = $93;
  $95 = ($93|0)==(0|0);
  if ($95) {
   $$pre = HEAP8[$21>>0]|0;
   $$pre46 = HEAP32[$24>>2]|0;
   $$pre47 = HEAP32[$13>>2]|0;
   $$0 = 0;$$sroa$040$0 = $94;$104 = $$pre46;$108 = $$pre47;$99 = $$pre;
  } else {
   $$0 = $93;$$sroa$040$0 = $94;$104 = $46;$108 = $49;$99 = $44;
  }
 } else {
  $$0 = $14;$$sroa$040$0 = 0;$104 = $46;$108 = $49;$99 = $44;
 }
 $96 = ((($3)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($99<<24>>24)<(0);
 $100 = HEAP32[$5>>2]|0;
 $101 = $98 ? $100 : $5;
 $102 = $99&255;
 $103 = $98 ? $104 : $102;
 $105 = (($101) + ($103<<2)|0);
 $106 = HEAP32[$8>>2]|0;
 $107 = HEAP32[$9>>2]|0;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($$0,$15,$16,$97,$101,$105,$19,$43,$7,$106,$107,$10,$11,$12,$108);
 $109 = HEAP32[$1>>2]|0;
 HEAP32[$17>>2] = $109;
 $110 = HEAP32[$15>>2]|0;
 $111 = HEAP32[$16>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
 $112 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$$0,$110,$111,$3,$4)|0);
 $113 = ($$sroa$040$0|0)==(0);
 if (!($113)) {
  $114 = $$sroa$040$0;
  _free($114);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 $115 = HEAP32[$6>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($115)|0);
 STACKTOP = sp;return ($112|0);
}
function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i45 = 0, $$0$i$i$i48 = 0, $$0$i$i$i51 = 0, $$0$i$i$i55 = 0, $$0$i$i$i59 = 0, $$0$i$i$i65 = 0, $$0$i$i$i69 = 0, $$pre$phi$i$i63Z2D = 0, $$pre$phi$i$iZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0;
 var $exitcond$i$i$i46 = 0, $exitcond$i$i$i49 = 0, $exitcond$i$i$i52 = 0, $exitcond$i$i$i56 = 0, $exitcond$i$i$i60 = 0, $exitcond$i$i$i66 = 0, $exitcond$i$i$i70 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $10 = sp;
 if ($0) {
  $11 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,40144)|0);
  if ($1) {
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 44|0);
   $14 = HEAP32[$13>>2]|0;
   FUNCTION_TABLE_vii[$14 & 127]($10,$11);
   $15 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$15&255;HEAP8[$3+1>>0]=($15>>8)&255;HEAP8[$3+2>>0]=($15>>16)&255;HEAP8[$3+3>>0]=$15>>24;
   $16 = HEAP32[$11>>2]|0;
   $17 = ((($16)) + 32|0);
   $18 = HEAP32[$17>>2]|0;
   FUNCTION_TABLE_vii[$18 & 127]($10,$11);
   $19 = ((($8)) + 8|0);
   $20 = ((($19)) + 3|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   if ($22) {
    $23 = HEAP32[$8>>2]|0;
    HEAP32[$23>>2] = 0;
    $24 = ((($8)) + 4|0);
    HEAP32[$24>>2] = 0;
   } else {
    HEAP32[$8>>2] = 0;
    HEAP8[$20>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
   ;HEAP32[$8>>2]=HEAP32[$10>>2]|0;HEAP32[$8+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$10+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $25 = (($10) + ($$0$i$i$i<<2)|0);
    HEAP32[$25>>2] = 0;
    $26 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $26;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  } else {
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($27)) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vii[$29 & 127]($10,$11);
   $30 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$30&255;HEAP8[$3+1>>0]=($30>>8)&255;HEAP8[$3+2>>0]=($30>>16)&255;HEAP8[$3+3>>0]=$30>>24;
   $31 = HEAP32[$11>>2]|0;
   $32 = ((($31)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vii[$33 & 127]($10,$11);
   $34 = ((($8)) + 8|0);
   $35 = ((($34)) + 3|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if ($37) {
    $38 = HEAP32[$8>>2]|0;
    HEAP32[$38>>2] = 0;
    $39 = ((($8)) + 4|0);
    HEAP32[$39>>2] = 0;
   } else {
    HEAP32[$8>>2] = 0;
    HEAP8[$35>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
   ;HEAP32[$8>>2]=HEAP32[$10>>2]|0;HEAP32[$8+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$10+8>>2]|0;
   $$0$i$i$i45 = 0;
   while(1) {
    $exitcond$i$i$i46 = ($$0$i$i$i45|0)==(3);
    if ($exitcond$i$i$i46) {
     break;
    }
    $40 = (($10) + ($$0$i$i$i45<<2)|0);
    HEAP32[$40>>2] = 0;
    $41 = (($$0$i$i$i45) + 1)|0;
    $$0$i$i$i45 = $41;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  }
  $42 = HEAP32[$11>>2]|0;
  $43 = ((($42)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (FUNCTION_TABLE_ii[$44 & 127]($11)|0);
  HEAP32[$4>>2] = $45;
  $46 = HEAP32[$11>>2]|0;
  $47 = ((($46)) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (FUNCTION_TABLE_ii[$48 & 127]($11)|0);
  HEAP32[$5>>2] = $49;
  $50 = HEAP32[$11>>2]|0;
  $51 = ((($50)) + 20|0);
  $52 = HEAP32[$51>>2]|0;
  FUNCTION_TABLE_vii[$52 & 127]($10,$11);
  $53 = ((($6)) + 11|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = ($54<<24>>24)<(0);
  if ($55) {
   $56 = HEAP32[$6>>2]|0;
   HEAP8[$56>>0] = 0;
   $57 = ((($6)) + 4|0);
   HEAP32[$57>>2] = 0;
   $$pre$phi$i$iZ2D = $6;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$53>>0] = 0;
   $$pre$phi$i$iZ2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$iZ2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$iZ2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$iZ2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i48 = 0;
  while(1) {
   $exitcond$i$i$i49 = ($$0$i$i$i48|0)==(3);
   if ($exitcond$i$i$i49) {
    break;
   }
   $58 = (($10) + ($$0$i$i$i48<<2)|0);
   HEAP32[$58>>2] = 0;
   $59 = (($$0$i$i$i48) + 1)|0;
   $$0$i$i$i48 = $59;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $60 = HEAP32[$11>>2]|0;
  $61 = ((($60)) + 24|0);
  $62 = HEAP32[$61>>2]|0;
  FUNCTION_TABLE_vii[$62 & 127]($10,$11);
  $63 = ((($7)) + 8|0);
  $64 = ((($63)) + 3|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = ($65<<24>>24)<(0);
  if ($66) {
   $67 = HEAP32[$7>>2]|0;
   HEAP32[$67>>2] = 0;
   $68 = ((($7)) + 4|0);
   HEAP32[$68>>2] = 0;
  } else {
   HEAP32[$7>>2] = 0;
   HEAP8[$64>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($7,0);
  ;HEAP32[$7>>2]=HEAP32[$10>>2]|0;HEAP32[$7+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i51 = 0;
  while(1) {
   $exitcond$i$i$i52 = ($$0$i$i$i51|0)==(3);
   if ($exitcond$i$i$i52) {
    break;
   }
   $69 = (($10) + ($$0$i$i$i51<<2)|0);
   HEAP32[$69>>2] = 0;
   $70 = (($$0$i$i$i51) + 1)|0;
   $$0$i$i$i51 = $70;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  $71 = HEAP32[$11>>2]|0;
  $72 = ((($71)) + 36|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_ii[$73 & 127]($11)|0);
  $storemerge = $74;
 } else {
  $75 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,40136)|0);
  if ($1) {
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($76)) + 44|0);
   $78 = HEAP32[$77>>2]|0;
   FUNCTION_TABLE_vii[$78 & 127]($10,$75);
   $79 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$79&255;HEAP8[$3+1>>0]=($79>>8)&255;HEAP8[$3+2>>0]=($79>>16)&255;HEAP8[$3+3>>0]=$79>>24;
   $80 = HEAP32[$75>>2]|0;
   $81 = ((($80)) + 32|0);
   $82 = HEAP32[$81>>2]|0;
   FUNCTION_TABLE_vii[$82 & 127]($10,$75);
   $83 = ((($8)) + 8|0);
   $84 = ((($83)) + 3|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = ($85<<24>>24)<(0);
   if ($86) {
    $87 = HEAP32[$8>>2]|0;
    HEAP32[$87>>2] = 0;
    $88 = ((($8)) + 4|0);
    HEAP32[$88>>2] = 0;
   } else {
    HEAP32[$8>>2] = 0;
    HEAP8[$84>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
   ;HEAP32[$8>>2]=HEAP32[$10>>2]|0;HEAP32[$8+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$10+8>>2]|0;
   $$0$i$i$i55 = 0;
   while(1) {
    $exitcond$i$i$i56 = ($$0$i$i$i55|0)==(3);
    if ($exitcond$i$i$i56) {
     break;
    }
    $89 = (($10) + ($$0$i$i$i55<<2)|0);
    HEAP32[$89>>2] = 0;
    $90 = (($$0$i$i$i55) + 1)|0;
    $$0$i$i$i55 = $90;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  } else {
   $91 = HEAP32[$75>>2]|0;
   $92 = ((($91)) + 40|0);
   $93 = HEAP32[$92>>2]|0;
   FUNCTION_TABLE_vii[$93 & 127]($10,$75);
   $94 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$94&255;HEAP8[$3+1>>0]=($94>>8)&255;HEAP8[$3+2>>0]=($94>>16)&255;HEAP8[$3+3>>0]=$94>>24;
   $95 = HEAP32[$75>>2]|0;
   $96 = ((($95)) + 28|0);
   $97 = HEAP32[$96>>2]|0;
   FUNCTION_TABLE_vii[$97 & 127]($10,$75);
   $98 = ((($8)) + 8|0);
   $99 = ((($98)) + 3|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = ($100<<24>>24)<(0);
   if ($101) {
    $102 = HEAP32[$8>>2]|0;
    HEAP32[$102>>2] = 0;
    $103 = ((($8)) + 4|0);
    HEAP32[$103>>2] = 0;
   } else {
    HEAP32[$8>>2] = 0;
    HEAP8[$99>>0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($8,0);
   ;HEAP32[$8>>2]=HEAP32[$10>>2]|0;HEAP32[$8+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$10+8>>2]|0;
   $$0$i$i$i59 = 0;
   while(1) {
    $exitcond$i$i$i60 = ($$0$i$i$i59|0)==(3);
    if ($exitcond$i$i$i60) {
     break;
    }
    $104 = (($10) + ($$0$i$i$i59<<2)|0);
    HEAP32[$104>>2] = 0;
    $105 = (($$0$i$i$i59) + 1)|0;
    $$0$i$i$i59 = $105;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  }
  $106 = HEAP32[$75>>2]|0;
  $107 = ((($106)) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (FUNCTION_TABLE_ii[$108 & 127]($75)|0);
  HEAP32[$4>>2] = $109;
  $110 = HEAP32[$75>>2]|0;
  $111 = ((($110)) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (FUNCTION_TABLE_ii[$112 & 127]($75)|0);
  HEAP32[$5>>2] = $113;
  $114 = HEAP32[$75>>2]|0;
  $115 = ((($114)) + 20|0);
  $116 = HEAP32[$115>>2]|0;
  FUNCTION_TABLE_vii[$116 & 127]($10,$75);
  $117 = ((($6)) + 11|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = ($118<<24>>24)<(0);
  if ($119) {
   $120 = HEAP32[$6>>2]|0;
   HEAP8[$120>>0] = 0;
   $121 = ((($6)) + 4|0);
   HEAP32[$121>>2] = 0;
   $$pre$phi$i$i63Z2D = $6;
  } else {
   HEAP8[$6>>0] = 0;
   HEAP8[$117>>0] = 0;
   $$pre$phi$i$i63Z2D = $6;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($6,0);
  ;HEAP32[$$pre$phi$i$i63Z2D>>2]=HEAP32[$10>>2]|0;HEAP32[$$pre$phi$i$i63Z2D+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$pre$phi$i$i63Z2D+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i65 = 0;
  while(1) {
   $exitcond$i$i$i66 = ($$0$i$i$i65|0)==(3);
   if ($exitcond$i$i$i66) {
    break;
   }
   $122 = (($10) + ($$0$i$i$i65<<2)|0);
   HEAP32[$122>>2] = 0;
   $123 = (($$0$i$i$i65) + 1)|0;
   $$0$i$i$i65 = $123;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $124 = HEAP32[$75>>2]|0;
  $125 = ((($124)) + 24|0);
  $126 = HEAP32[$125>>2]|0;
  FUNCTION_TABLE_vii[$126 & 127]($10,$75);
  $127 = ((($7)) + 8|0);
  $128 = ((($127)) + 3|0);
  $129 = HEAP8[$128>>0]|0;
  $130 = ($129<<24>>24)<(0);
  if ($130) {
   $131 = HEAP32[$7>>2]|0;
   HEAP32[$131>>2] = 0;
   $132 = ((($7)) + 4|0);
   HEAP32[$132>>2] = 0;
  } else {
   HEAP32[$7>>2] = 0;
   HEAP8[$128>>0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($7,0);
  ;HEAP32[$7>>2]=HEAP32[$10>>2]|0;HEAP32[$7+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$10+8>>2]|0;
  $$0$i$i$i69 = 0;
  while(1) {
   $exitcond$i$i$i70 = ($$0$i$i$i69|0)==(3);
   if ($exitcond$i$i$i70) {
    break;
   }
   $133 = (($10) + ($$0$i$i$i69<<2)|0);
   HEAP32[$133>>2] = 0;
   $134 = (($$0$i$i$i69) + 1)|0;
   $$0$i$i$i69 = $134;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($10);
  $135 = HEAP32[$75>>2]|0;
  $136 = ((($135)) + 36|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (FUNCTION_TABLE_ii[$137 & 127]($75)|0);
  $storemerge = $138;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$ = 0, $$$099 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0$i$i112 = 0, $$0101 = 0, $$0103 = 0, $$0106 = 0, $$07$i$i = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1102 = 0, $$1104 = 0, $$196 = 0, $$198 = 0, $$2 = 0, $$2105 = 0;
 var $$3 = 0, $$pre137 = 0, $$promoted = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $or$cond = 0, $scevgep$i = 0, $scevgep$i113 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = ((($13)) + 4|0);
 $18 = ((($12)) + 8|0);
 $19 = ((($18)) + 3|0);
 $20 = ((($12)) + 4|0);
 $21 = $3 & 512;
 $22 = ($21|0)==(0);
 $23 = ($14|0)>(0);
 $24 = ((($11)) + 11|0);
 $25 = ((($11)) + 4|0);
 $$0106 = 0;$$099 = $4;
 while(1) {
  $exitcond = ($$0106|0)==(4);
  if ($exitcond) {
   break;
  }
  $32 = (($8) + ($$0106)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  L4: do {
   switch ($34|0) {
   case 0:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $$2 = $$099;
    break;
   }
   case 1:  {
    $36 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $36;
    $37 = HEAP32[$6>>2]|0;
    $38 = ((($37)) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 31]($6,32)|0);
    $41 = HEAP32[$2>>2]|0;
    $42 = ((($41)) + 4|0);
    HEAP32[$2>>2] = $42;
    HEAP32[$41>>2] = $40;
    $$2 = $$099;
    break;
   }
   case 3:  {
    $43 = HEAP8[$16>>0]|0;
    $44 = ($43<<24>>24)<(0);
    $45 = HEAP32[$17>>2]|0;
    $46 = $43&255;
    $47 = $44 ? $45 : $46;
    $48 = ($47|0)==(0);
    if ($48) {
     $$2 = $$099;
    } else {
     $49 = HEAP32[$13>>2]|0;
     $50 = $44 ? $49 : $13;
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$2>>2]|0;
     $53 = ((($52)) + 4|0);
     HEAP32[$2>>2] = $53;
     HEAP32[$52>>2] = $51;
     $$2 = $$099;
    }
    break;
   }
   case 2:  {
    $54 = HEAP8[$19>>0]|0;
    $55 = ($54<<24>>24)<(0);
    $56 = HEAP32[$20>>2]|0;
    $57 = $54&255;
    $58 = $55 ? $56 : $57;
    $59 = ($58|0)==(0);
    $or$cond = $22 | $59;
    if ($or$cond) {
     $$2 = $$099;
    } else {
     $60 = HEAP32[$12>>2]|0;
     $61 = $55 ? $60 : $12;
     $62 = (($61) + ($58<<2)|0);
     $63 = HEAP32[$2>>2]|0;
     $$0$i$i112 = $63;$65 = $61;
     while(1) {
      $64 = ($65|0)==($62|0);
      if ($64) {
       break;
      }
      $66 = HEAP32[$65>>2]|0;
      HEAP32[$$0$i$i112>>2] = $66;
      $67 = ((($65)) + 4|0);
      $68 = ((($$0$i$i112)) + 4|0);
      $$0$i$i112 = $68;$65 = $67;
     }
     $scevgep$i113 = (($63) + ($58<<2)|0);
     HEAP32[$2>>2] = $scevgep$i113;
     $$2 = $$099;
    }
    break;
   }
   case 4:  {
    $69 = HEAP32[$2>>2]|0;
    $70 = ((($$099)) + 4|0);
    $$$099 = $7 ? $70 : $$099;
    $$0103 = $$$099;
    while(1) {
     $71 = ($$0103>>>0)<($5>>>0);
     if (!($71)) {
      break;
     }
     $72 = HEAP32[$$0103>>2]|0;
     $73 = HEAP32[$6>>2]|0;
     $74 = ((($73)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iiii[$75 & 31]($6,2048,$72)|0);
     if (!($76)) {
      break;
     }
     $77 = ((($$0103)) + 4|0);
     $$0103 = $77;
    }
    if ($23) {
     $$0101 = $14;$$1104 = $$0103;
     while(1) {
      $78 = ($$1104>>>0)>($$$099>>>0);
      $79 = ($$0101|0)>(0);
      $80 = $78 & $79;
      if (!($80)) {
       break;
      }
      $81 = ((($$1104)) + -4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = HEAP32[$2>>2]|0;
      $84 = ((($83)) + 4|0);
      HEAP32[$2>>2] = $84;
      HEAP32[$83>>2] = $82;
      $85 = (($$0101) + -1)|0;
      $$0101 = $85;$$1104 = $81;
     }
     if ($79) {
      $86 = HEAP32[$6>>2]|0;
      $87 = ((($86)) + 44|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_iii[$88 & 31]($6,48)|0);
      $93 = $89;
     } else {
      $93 = 0;
     }
     $$promoted = HEAP32[$2>>2]|0;
     $$1102 = $$0101;$92 = $$promoted;
     while(1) {
      $90 = ($$1102|0)>(0);
      $91 = ((($92)) + 4|0);
      if (!($90)) {
       break;
      }
      HEAP32[$92>>2] = $93;
      $94 = (($$1102) + -1)|0;
      $$1102 = $94;$92 = $91;
     }
     HEAP32[$2>>2] = $91;
     HEAP32[$92>>2] = $9;
     $$2105 = $$1104;
    } else {
     $$2105 = $$0103;
    }
    $95 = ($$2105|0)==($$$099|0);
    if ($95) {
     $96 = HEAP32[$6>>2]|0;
     $97 = ((($96)) + 44|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_iii[$98 & 31]($6,48)|0);
     $100 = HEAP32[$2>>2]|0;
     $101 = ((($100)) + 4|0);
     HEAP32[$2>>2] = $101;
     HEAP32[$100>>2] = $99;
     $130 = $101;
    } else {
     $102 = HEAP8[$24>>0]|0;
     $103 = ($102<<24>>24)<(0);
     $104 = HEAP32[$25>>2]|0;
     $105 = $102&255;
     $106 = $103 ? $104 : $105;
     $107 = ($106|0)==(0);
     if ($107) {
      $$0 = -1;$$095 = 0;$$097 = 0;$$3 = $$2105;
     } else {
      $108 = HEAP32[$11>>2]|0;
      $109 = $103 ? $108 : $11;
      $110 = HEAP8[$109>>0]|0;
      $111 = $110 << 24 >> 24;
      $$0 = $111;$$095 = 0;$$097 = 0;$$3 = $$2105;
     }
     while(1) {
      $112 = ($$3|0)==($$$099|0);
      if ($112) {
       break;
      }
      $113 = ($$097|0)==($$0|0);
      $114 = HEAP32[$2>>2]|0;
      if ($113) {
       $115 = ((($114)) + 4|0);
       HEAP32[$2>>2] = $115;
       HEAP32[$114>>2] = $10;
       $116 = (($$095) + 1)|0;
       $117 = ($116>>>0)<($106>>>0);
       if ($117) {
        $118 = HEAP32[$11>>2]|0;
        $119 = $103 ? $118 : $11;
        $120 = (($119) + ($116)|0);
        $121 = HEAP8[$120>>0]|0;
        $122 = ($121<<24>>24)==(127);
        $123 = $121 << 24 >> 24;
        $$ = $122 ? -1 : $123;
        $$1 = $$;$$196 = $116;$$198 = 0;$127 = $115;
       } else {
        $$1 = $$097;$$196 = $116;$$198 = 0;$127 = $115;
       }
      } else {
       $$1 = $$0;$$196 = $$095;$$198 = $$097;$127 = $114;
      }
      $124 = ((($$3)) + -4|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($127)) + 4|0);
      HEAP32[$2>>2] = $126;
      HEAP32[$127>>2] = $125;
      $128 = (($$198) + 1)|0;
      $$0 = $$1;$$095 = $$196;$$097 = $128;$$3 = $124;
     }
     $$pre137 = HEAP32[$2>>2]|0;
     $130 = $$pre137;
    }
    $129 = ($69|0)==($130|0);
    if ($129) {
     $$2 = $$$099;
    } else {
     $$0$i$i108 = $130;$$07$i$i = $69;
     while(1) {
      $131 = ((($$0$i$i108)) + -4|0);
      $132 = ($$07$i$i>>>0)<($131>>>0);
      if (!($132)) {
       $$2 = $$$099;
       break L4;
      }
      $133 = HEAP32[$$07$i$i>>2]|0;
      $134 = HEAP32[$131>>2]|0;
      HEAP32[$$07$i$i>>2] = $134;
      HEAP32[$131>>2] = $133;
      $135 = ((($$07$i$i)) + 4|0);
      $$0$i$i108 = $131;$$07$i$i = $135;
     }
    }
    break;
   }
   default: {
    $$2 = $$099;
   }
   }
  } while(0);
  $136 = (($$0106) + 1)|0;
  $$0106 = $136;$$099 = $$2;
 }
 $26 = HEAP8[$16>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$17>>2]|0;
 $29 = $26&255;
 $30 = $27 ? $28 : $29;
 $31 = ($30>>>0)>(1);
 if ($31) {
  $137 = HEAP32[$13>>2]|0;
  $138 = $27 ? $137 : $13;
  $139 = ((($138)) + 4|0);
  $140 = (($138) + ($30<<2)|0);
  $141 = HEAP32[$2>>2]|0;
  $142 = $139;
  $143 = $140;
  $144 = (($143) - ($142))|0;
  $$0$i$i = $141;$146 = $139;
  while(1) {
   $145 = ($146|0)==($140|0);
   if ($145) {
    break;
   }
   $147 = HEAP32[$146>>2]|0;
   HEAP32[$$0$i$i>>2] = $147;
   $148 = ((($146)) + 4|0);
   $149 = ((($$0$i$i)) + 4|0);
   $$0$i$i = $149;$146 = $148;
  }
  $150 = $144 >>> 2;
  $scevgep$i = (($141) + ($150<<2)|0);
  HEAP32[$2>>2] = $scevgep$i;
 }
 $151 = $3 & 176;
 $trunc = $151&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $152 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $152;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__28messagesIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i17 = 0, $$0$i21 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i18 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 $9 = ((($5)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 $12 = HEAP32[$5>>2]|0;
 $13 = $11 ? $12 : $5;
 $14 = ((($5)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $10&255;
 $17 = $11 ? $15 : $16;
 $18 = (($13) + ($17)|0);
 $$0$i21 = $13;
 while(1) {
  $19 = ($$0$i21>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = HEAP8[$$0$i21>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($6,$20);
  $21 = ((($$0$i21)) + 1|0);
  $$0$i21 = $21;
 }
 $22 = ($2|0)==(-1);
 $23 = $2 << 1;
 $24 = $23;
 $25 = $22 ? (-1) : $24;
 $26 = ((($6)) + 11|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)<(0);
 $29 = HEAP32[$6>>2]|0;
 $30 = $28 ? $29 : $6;
 $31 = (_catgets($25,$3,$4,$30)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i17 = 0;
 while(1) {
  $exitcond$i$i18 = ($$0$i$i17|0)==(3);
  if ($exitcond$i$i18) {
   break;
  }
  $32 = (($0) + ($$0$i$i17<<2)|0);
  HEAP32[$32>>2] = 0;
  $33 = (($$0$i$i17) + 1)|0;
  $$0$i$i17 = $33;
 }
 $34 = (_strlen($31)|0);
 $35 = (($31) + ($34)|0);
 $$0$i = $31;
 while(1) {
  $36 = ($$0$i>>>0)<($35>>>0);
  if (!($36)) {
   break;
  }
  $37 = HEAP8[$$0$i>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0,$37);
  $38 = ((($$0$i)) + 1|0);
  $$0$i = $38;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 STACKTOP = sp;return;
}
function __ZNKSt3__28messagesIcE8do_closeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i17 = 0, $$0$i20 = 0, $$016$i = 0, $$017$i = 0, $$019$i = 0, $$020$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $6 = sp + 168|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 32|0;
 $10 = sp;
 $11 = sp + 24|0;
 $12 = sp + 16|0;
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $13 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$13>>2] = 0;
  $14 = (($$0$i$i) + 1)|0;
  $$0$i$i = $14;
 }
 $15 = ((($11)) + 4|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$11>>2] = (12212);
 $16 = ((($5)) + 8|0);
 $17 = ((($16)) + 3|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 $20 = HEAP32[$5>>2]|0;
 $21 = $19 ? $20 : $5;
 $22 = ((($5)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $18&255;
 $25 = $19 ? $23 : $24;
 $26 = (($21) + ($25<<2)|0);
 $27 = ((($7)) + 32|0);
 $$016$i = $21;$$017$i = 0;
 while(1) {
  $28 = ($$016$i>>>0)<($26>>>0);
  $29 = ($$017$i|0)!=(2);
  $30 = $29 & $28;
  if (!($30)) {
   break;
  }
  HEAP32[$9>>2] = $$016$i;
  $31 = HEAP32[$11>>2]|0;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_iiiiiiiii[$33 & 15]($11,$6,$$016$i,$26,$9,$7,$27,$8)|0);
  $$0$i20 = $7;
  while(1) {
   $35 = HEAP32[$8>>2]|0;
   $36 = ($$0$i20>>>0)<($35>>>0);
   if (!($36)) {
    break;
   }
   $38 = HEAP8[$$0$i20>>0]|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($10,$38);
   $39 = ((($$0$i20)) + 1|0);
   $$0$i20 = $39;
  }
  $37 = HEAP32[$9>>2]|0;
  $$016$i = $37;$$017$i = $34;
 }
 $40 = ($2|0)==(-1);
 $41 = $2 << 1;
 $42 = $41;
 $43 = $40 ? (-1) : $42;
 $44 = ((($10)) + 11|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = ($45<<24>>24)<(0);
 $47 = HEAP32[$10>>2]|0;
 $48 = $46 ? $47 : $10;
 $49 = (_catgets($43,$3,$4,$48)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i17 = 0;
 while(1) {
  $exitcond$i$i18 = ($$0$i$i17|0)==(3);
  if ($exitcond$i$i18) {
   break;
  }
  $50 = (($0) + ($$0$i$i17<<2)|0);
  HEAP32[$50>>2] = 0;
  $51 = (($$0$i$i17) + 1)|0;
  $$0$i$i17 = $51;
 }
 $52 = ((($12)) + 4|0);
 HEAP32[$52>>2] = 0;
 HEAP32[$12>>2] = (12260);
 $53 = (_strlen($49)|0);
 $54 = (($49) + ($53)|0);
 $55 = $54;
 $56 = ((($7)) + 128|0);
 $$019$i = $49;$$020$i = 0;
 while(1) {
  $57 = ($$019$i>>>0)<($54>>>0);
  $58 = ($$020$i|0)!=(2);
  $59 = $58 & $57;
  if (!($59)) {
   break;
  }
  HEAP32[$9>>2] = $$019$i;
  $60 = HEAP32[$12>>2]|0;
  $61 = ((($60)) + 16|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $$019$i;
  $64 = (($55) - ($63))|0;
  $65 = ($64|0)>(32);
  $66 = ((($$019$i)) + 32|0);
  $67 = $65 ? $66 : $54;
  $68 = (FUNCTION_TABLE_iiiiiiiii[$62 & 15]($12,$6,$$019$i,$67,$9,$7,$56,$8)|0);
  $$0$i = $7;
  while(1) {
   $69 = HEAP32[$8>>2]|0;
   $70 = ($$0$i>>>0)<($69>>>0);
   if (!($70)) {
    break;
   }
   $72 = HEAP32[$$0$i>>2]|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0,$72);
   $73 = ((($$0$i)) + 4|0);
   $$0$i = $73;
  }
  $71 = HEAP32[$9>>2]|0;
  $$019$i = $71;$$020$i = $68;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 STACKTOP = sp;return;
}
function __ZNKSt3__28messagesIwE8do_closeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26locale5facetD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__217__widen_from_utf8ILj32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$091 = 0, $$185 = 0, $$395 = 0, $$589 = 0, $$off = 0, $$pre = 0, $$pre132 = 0, $$pre134 = 0, $$pre136 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 $$pre136 = $1;
 if ($6) {
  $$091 = 0;$$185 = $0;
 } else {
  $7 = $0;
  $8 = (($$pre136) - ($7))|0;
  $9 = ($8|0)>(2);
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(-17);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(-69);
    if ($14) {
     $15 = ((($0)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(-65);
     $18 = ((($0)) + 3|0);
     $$ = $17 ? $18 : $0;
     $$091 = 0;$$185 = $$;
    } else {
     $$091 = 0;$$185 = $0;
    }
   } else {
    $$091 = 0;$$185 = $0;
   }
  } else {
   $$091 = 0;$$185 = $0;
  }
 }
 L6: while(1) {
  $19 = ($$185>>>0)<($1>>>0);
  $20 = ($$091>>>0)<($2>>>0);
  $or$cond = $20 & $19;
  if (!($or$cond)) {
   label = 40;
   break;
  }
  $21 = HEAP8[$$185>>0]|0;
  $22 = $21&255;
  $23 = ($21<<24>>24)>(-1);
  do {
   if ($23) {
    $24 = ($22>>>0)>($3>>>0);
    if ($24) {
     label = 40;
     break L6;
    }
    $25 = ((($$185)) + 1|0);
    $$589 = $25;
   } else {
    $26 = ($21&255)<(194);
    if ($26) {
     label = 40;
     break L6;
    }
    $27 = ($21&255)<(224);
    if ($27) {
     $28 = $$185;
     $29 = (($$pre136) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      label = 40;
      break L6;
     }
     $31 = ((($$185)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 & 192;
     $35 = ($34|0)==(128);
     if (!($35)) {
      label = 40;
      break L6;
     }
     $36 = $22 << 6;
     $37 = $36 & 1984;
     $38 = $33 & 63;
     $39 = $38 | $37;
     $40 = ($39>>>0)>($3>>>0);
     if ($40) {
      label = 40;
      break L6;
     }
     $41 = ((($$185)) + 2|0);
     $$589 = $41;
     break;
    }
    $42 = ($21&255)<(240);
    if ($42) {
     $43 = $$185;
     $44 = (($$pre136) - ($43))|0;
     $45 = ($44|0)<(3);
     if ($45) {
      label = 40;
      break L6;
     }
     $46 = ((($$185)) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ((($$185)) + 2|0);
     $49 = HEAP8[$48>>0]|0;
     switch ($21<<24>>24) {
     case -32:  {
      $50 = $47 & -32;
      $51 = ($50<<24>>24)==(-96);
      if (!($51)) {
       label = 20;
       break L6;
      }
      break;
     }
     case -19:  {
      $54 = $47 & -32;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       label = 22;
       break L6;
      }
      break;
     }
     default: {
      $58 = $47 & -64;
      $59 = ($58<<24>>24)==(-128);
      if (!($59)) {
       label = 24;
       break L6;
      }
     }
     }
     $62 = $49&255;
     $63 = $62 & 192;
     $64 = ($63|0)==(128);
     if (!($64)) {
      label = 40;
      break L6;
     }
     $65 = $22 << 12;
     $66 = $65 & 61440;
     $67 = $47&255;
     $68 = $67 << 6;
     $69 = $68 & 4032;
     $70 = $69 | $66;
     $71 = $62 & 63;
     $72 = $70 | $71;
     $73 = ($72>>>0)>($3>>>0);
     $74 = ((($$185)) + 3|0);
     if ($73) {
      label = 40;
      break L6;
     } else {
      $$589 = $74;
      break;
     }
    }
    $75 = ($21&255)<(245);
    if (!($75)) {
     label = 40;
     break L6;
    }
    $76 = $$185;
    $77 = (($$pre136) - ($76))|0;
    $78 = ($77|0)<(4);
    if ($78) {
     label = 40;
     break L6;
    }
    $79 = ((($$185)) + 1|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ((($$185)) + 2|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = ((($$185)) + 3|0);
    $84 = HEAP8[$83>>0]|0;
    switch ($21<<24>>24) {
    case -16:  {
     $$off = (($80) + 112)<<24>>24;
     $85 = ($$off&255)<(48);
     if (!($85)) {
      label = 31;
      break L6;
     }
     break;
    }
    case -12:  {
     $88 = $80 & -16;
     $89 = ($88<<24>>24)==(-128);
     if (!($89)) {
      label = 33;
      break L6;
     }
     break;
    }
    default: {
     $92 = $80 & -64;
     $93 = ($92<<24>>24)==(-128);
     if (!($93)) {
      label = 35;
      break L6;
     }
    }
    }
    $96 = $82&255;
    $97 = $96 & 192;
    $98 = ($97|0)==(128);
    if (!($98)) {
     label = 40;
     break L6;
    }
    $99 = $84&255;
    $100 = $99 & 192;
    $101 = ($100|0)==(128);
    if (!($101)) {
     label = 40;
     break L6;
    }
    $102 = $22 << 18;
    $103 = $102 & 1835008;
    $104 = $80&255;
    $105 = $104 << 12;
    $106 = $105 & 258048;
    $107 = $106 | $103;
    $108 = $96 << 6;
    $109 = $108 & 4032;
    $110 = $107 | $109;
    $111 = $99 & 63;
    $112 = $110 | $111;
    $113 = ($112>>>0)>($3>>>0);
    $114 = ((($$185)) + 4|0);
    if ($113) {
     label = 40;
     break L6;
    } else {
     $$589 = $114;
    }
   }
  } while(0);
  $115 = (($$091) + 1)|0;
  $$091 = $115;$$185 = $$589;
 }
 if ((label|0) == 20) {
  $52 = $0;
  $53 = (($43) - ($52))|0;
  $$395 = $53;
 }
 else if ((label|0) == 22) {
  $56 = $0;
  $57 = (($43) - ($56))|0;
  $$395 = $57;
 }
 else if ((label|0) == 24) {
  $60 = $0;
  $61 = (($43) - ($60))|0;
  $$395 = $61;
 }
 else if ((label|0) == 31) {
  $86 = $0;
  $87 = (($76) - ($86))|0;
  $$395 = $87;
 }
 else if ((label|0) == 33) {
  $90 = $0;
  $91 = (($76) - ($90))|0;
  $$395 = $91;
 }
 else if ((label|0) == 35) {
  $94 = $0;
  $95 = (($76) - ($94))|0;
  $$395 = $95;
 }
 else if ((label|0) == 40) {
  $$pre = $$185;
  $$pre132 = $0;
  $$pre134 = (($$pre) - ($$pre132))|0;
  $$395 = $$pre134;
 }
 return ($$395|0);
}
function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$9 = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre = $1;
  $$pre$phiZ2D = $$pre;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = $1;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$10>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($10)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($10)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($10)) + 3|0);
      HEAP32[$2>>2] = $23;
      $$pre$phiZ2D = $11;
     } else {
      $$pre$phiZ2D = $11;
     }
    } else {
     $$pre$phiZ2D = $11;
    }
   } else {
    $$pre$phiZ2D = $11;
   }
  } else {
   $$pre$phiZ2D = $11;
  }
 }
 L9: while(1) {
  $24 = HEAP32[$2>>2]|0;
  $25 = ($24>>>0)<($1>>>0);
  if (!($25)) {
   label = 40;
   break;
  }
  $26 = HEAP32[$5>>2]|0;
  $27 = ($26>>>0)<($4>>>0);
  if (!($27)) {
   label = 40;
   break;
  }
  $28 = HEAP8[$24>>0]|0;
  $29 = $28&255;
  $30 = ($28<<24>>24)>(-1);
  do {
   if ($30) {
    $31 = ($29>>>0)>($6>>>0);
    if ($31) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$26>>2] = $29;
    $32 = ((($24)) + 1|0);
    HEAP32[$2>>2] = $32;
   } else {
    $33 = ($28&255)<(194);
    if ($33) {
     $$9 = 2;
     break L9;
    }
    $34 = ($28&255)<(224);
    if ($34) {
     $35 = $24;
     $36 = (($$pre$phiZ2D) - ($35))|0;
     $37 = ($36|0)<(2);
     if ($37) {
      $$9 = 1;
      break L9;
     }
     $38 = ((($24)) + 1|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = $40 & 192;
     $42 = ($41|0)==(128);
     if (!($42)) {
      $$9 = 2;
      break L9;
     }
     $43 = $29 << 6;
     $44 = $43 & 1984;
     $45 = $40 & 63;
     $46 = $45 | $44;
     $47 = ($46>>>0)>($6>>>0);
     if ($47) {
      $$9 = 2;
      break L9;
     }
     HEAP32[$26>>2] = $46;
     $48 = ((($24)) + 2|0);
     HEAP32[$2>>2] = $48;
     break;
    }
    $49 = ($28&255)<(240);
    if ($49) {
     $50 = $24;
     $51 = (($$pre$phiZ2D) - ($50))|0;
     $52 = ($51|0)<(3);
     if ($52) {
      $$9 = 1;
      break L9;
     }
     $53 = ((($24)) + 1|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = ((($24)) + 2|0);
     $56 = HEAP8[$55>>0]|0;
     switch ($28<<24>>24) {
     case -32:  {
      $57 = $54 & -32;
      $58 = ($57<<24>>24)==(-96);
      if (!($58)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $59 = $54 & -32;
      $60 = ($59<<24>>24)==(-128);
      if (!($60)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     default: {
      $61 = $54 & -64;
      $62 = ($61<<24>>24)==(-128);
      if (!($62)) {
       $$9 = 2;
       break L9;
      }
     }
     }
     $63 = $56&255;
     $64 = $63 & 192;
     $65 = ($64|0)==(128);
     if (!($65)) {
      $$9 = 2;
      break L9;
     }
     $66 = $29 << 12;
     $67 = $66 & 61440;
     $68 = $54&255;
     $69 = $68 << 6;
     $70 = $69 & 4032;
     $71 = $70 | $67;
     $72 = $63 & 63;
     $73 = $71 | $72;
     $74 = ($73>>>0)>($6>>>0);
     if ($74) {
      $$9 = 2;
      break L9;
     }
     HEAP32[$26>>2] = $73;
     $75 = ((($24)) + 3|0);
     HEAP32[$2>>2] = $75;
     break;
    }
    $76 = ($28&255)<(245);
    if (!($76)) {
     $$9 = 2;
     break L9;
    }
    $77 = $24;
    $78 = (($$pre$phiZ2D) - ($77))|0;
    $79 = ($78|0)<(4);
    if ($79) {
     $$9 = 1;
     break L9;
    }
    $80 = ((($24)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ((($24)) + 2|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = ((($24)) + 3|0);
    $85 = HEAP8[$84>>0]|0;
    switch ($28<<24>>24) {
    case -16:  {
     $$off = (($81) + 112)<<24>>24;
     $86 = ($$off&255)<(48);
     if (!($86)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $87 = $81 & -16;
     $88 = ($87<<24>>24)==(-128);
     if (!($88)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    default: {
     $89 = $81 & -64;
     $90 = ($89<<24>>24)==(-128);
     if (!($90)) {
      $$9 = 2;
      break L9;
     }
    }
    }
    $91 = $83&255;
    $92 = $91 & 192;
    $93 = ($92|0)==(128);
    if (!($93)) {
     $$9 = 2;
     break L9;
    }
    $94 = $85&255;
    $95 = $94 & 192;
    $96 = ($95|0)==(128);
    if (!($96)) {
     $$9 = 2;
     break L9;
    }
    $97 = $29 << 18;
    $98 = $97 & 1835008;
    $99 = $81&255;
    $100 = $99 << 12;
    $101 = $100 & 258048;
    $102 = $101 | $98;
    $103 = $91 << 6;
    $104 = $103 & 4032;
    $105 = $102 | $104;
    $106 = $94 & 63;
    $107 = $105 | $106;
    $108 = ($107>>>0)>($6>>>0);
    if ($108) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$26>>2] = $107;
    $109 = ((($24)) + 4|0);
    HEAP32[$2>>2] = $109;
   }
  } while(0);
  $110 = HEAP32[$5>>2]|0;
  $111 = ((($110)) + 4|0);
  HEAP32[$5>>2] = $111;
 }
 if ((label|0) == 40) {
  $112 = $25&1;
  $$9 = $112;
 }
 return ($$9|0);
}
function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$2 = 0, $$pre = 0, $$pre49 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $$pre49 = $4;
 if ($9) {
  label = 4;
 } else {
  $10 = $3;
  $11 = (($$pre49) - ($10))|0;
  $12 = ($11|0)<(3);
  if ($12) {
   $$2 = 1;
  } else {
   $13 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $13;
   HEAP8[$3>>0] = -17;
   $14 = HEAP32[$5>>2]|0;
   $15 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $15;
   HEAP8[$14>>0] = -69;
   $16 = HEAP32[$5>>2]|0;
   $17 = ((($16)) + 1|0);
   HEAP32[$5>>2] = $17;
   HEAP8[$16>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$2>>2]|0;
   $19 = $$pre;
   while(1) {
    $18 = ($19>>>0)<($1>>>0);
    if (!($18)) {
     $$2 = 0;
     break L4;
    }
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 & -2048;
    $22 = ($21|0)==(55296);
    $23 = ($20>>>0)>($6>>>0);
    $or$cond = $23 | $22;
    if ($or$cond) {
     $$2 = 2;
     break L4;
    }
    $24 = ($20>>>0)<(128);
    do {
     if ($24) {
      $25 = HEAP32[$5>>2]|0;
      $26 = $25;
      $27 = (($$pre49) - ($26))|0;
      $28 = ($27|0)<(1);
      if ($28) {
       $$2 = 1;
       break L4;
      }
      $29 = $20&255;
      $30 = ((($25)) + 1|0);
      HEAP32[$5>>2] = $30;
      HEAP8[$25>>0] = $29;
     } else {
      $31 = ($20>>>0)<(2048);
      if ($31) {
       $32 = HEAP32[$5>>2]|0;
       $33 = $32;
       $34 = (($$pre49) - ($33))|0;
       $35 = ($34|0)<(2);
       if ($35) {
        $$2 = 1;
        break L4;
       }
       $36 = $20 >>> 6;
       $37 = $36 | 192;
       $38 = $37&255;
       $39 = ((($32)) + 1|0);
       HEAP32[$5>>2] = $39;
       HEAP8[$32>>0] = $38;
       $40 = $20 & 63;
       $41 = $40 | 128;
       $42 = $41&255;
       $43 = HEAP32[$5>>2]|0;
       $44 = ((($43)) + 1|0);
       HEAP32[$5>>2] = $44;
       HEAP8[$43>>0] = $42;
       break;
      }
      $45 = ($20>>>0)<(65536);
      $46 = HEAP32[$5>>2]|0;
      $47 = $46;
      $48 = (($$pre49) - ($47))|0;
      if ($45) {
       $49 = ($48|0)<(3);
       if ($49) {
        $$2 = 1;
        break L4;
       }
       $50 = $20 >>> 12;
       $51 = $50 | 224;
       $52 = $51&255;
       $53 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $53;
       HEAP8[$46>>0] = $52;
       $54 = $20 >>> 6;
       $55 = $54 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$5>>2]|0;
       $59 = ((($58)) + 1|0);
       HEAP32[$5>>2] = $59;
       HEAP8[$58>>0] = $57;
       $60 = $20 & 63;
       $61 = $60 | 128;
       $62 = $61&255;
       $63 = HEAP32[$5>>2]|0;
       $64 = ((($63)) + 1|0);
       HEAP32[$5>>2] = $64;
       HEAP8[$63>>0] = $62;
       break;
      } else {
       $65 = ($48|0)<(4);
       if ($65) {
        $$2 = 1;
        break L4;
       }
       $66 = $20 >>> 18;
       $67 = $66 | 240;
       $68 = $67&255;
       $69 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $69;
       HEAP8[$46>>0] = $68;
       $70 = $20 >>> 12;
       $71 = $70 & 63;
       $72 = $71 | 128;
       $73 = $72&255;
       $74 = HEAP32[$5>>2]|0;
       $75 = ((($74)) + 1|0);
       HEAP32[$5>>2] = $75;
       HEAP8[$74>>0] = $73;
       $76 = $20 >>> 6;
       $77 = $76 & 63;
       $78 = $77 | 128;
       $79 = $78&255;
       $80 = HEAP32[$5>>2]|0;
       $81 = ((($80)) + 1|0);
       HEAP32[$5>>2] = $81;
       HEAP8[$80>>0] = $79;
       $82 = $20 & 63;
       $83 = $82 | 128;
       $84 = $83&255;
       $85 = HEAP32[$5>>2]|0;
       $86 = ((($85)) + 1|0);
       HEAP32[$5>>2] = $86;
       HEAP8[$85>>0] = $84;
       break;
      }
     }
    } while(0);
    $87 = HEAP32[$2>>2]|0;
    $88 = ((($87)) + 4|0);
    HEAP32[$2>>2] = $88;
    $19 = $88;
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__216__narrow_to_utf8ILj32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sroa$speculated = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = $2;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<($4>>>0);
 $$sroa$speculated = $8 ? $7 : $4;
 return ($$sroa$speculated|0);
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$069 = 0, $$070 = 0, $$070$lcssa = 0, $$077 = 0, $$079 = 0, $$171 = 0, $$173 = 0, $$178 = 0, $$2 = 0, $$2$lcssa = 0, $$375$ph = 0, $$476 = 0, $$5$ph85 = 0, $$pre = 0, $$pre113 = 0, $$pre114 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = sp + 8|0;
 $$070 = $2;
 while(1) {
  $10 = ($$070|0)==($3|0);
  if ($10) {
   $$070$lcssa = $3;
   break;
  }
  $11 = HEAP32[$$070>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $$070$lcssa = $$070;
   break;
  }
  $13 = ((($$070)) + 4|0);
  $$070 = $13;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $14 = $6;
 $15 = ((($0)) + 8|0);
 $$077 = $2;$$079 = $5;$$171 = $$070$lcssa;
 L6: while(1) {
  $16 = ($$077|0)==($3|0);
  $17 = ($$079|0)==($6|0);
  $or$cond = $17 | $16;
  if ($or$cond) {
   $74 = $$077;
   label = 35;
   break;
  }
  $18 = $1;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $8;
  $25 = $24;
  HEAP32[$25>>2] = $20;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $23;
  $28 = $$171;
  $29 = $$077;
  $30 = (($28) - ($29))|0;
  $31 = $30 >> 2;
  $32 = $$079;
  $33 = (($14) - ($32))|0;
  $34 = HEAP32[$15>>2]|0;
  $35 = (_uselocale($34)|0);
  $36 = (_wcsnrtombs($$079,$4,$31,$33,$1)|0);
  $37 = ($35|0)==(0|0);
  if (!($37)) {
   (_uselocale($35)|0);
  }
  switch ($36|0) {
  case -1:  {
   label = 10;
   break L6;
   break;
  }
  case 0:  {
   $$375$ph = 1;
   label = 32;
   break L6;
   break;
  }
  default: {
  }
  }
  $50 = HEAP32[$7>>2]|0;
  $51 = (($50) + ($36)|0);
  HEAP32[$7>>2] = $51;
  $52 = ($51|0)==($6|0);
  if ($52) {
   label = 33;
   break;
  }
  $53 = ($$171|0)==($3|0);
  if ($53) {
   $$pre = HEAP32[$4>>2]|0;
   $$5$ph85 = $3;$76 = $51;$77 = $$pre;
  } else {
   $54 = HEAP32[$15>>2]|0;
   $55 = (_uselocale($54)|0);
   $56 = (_wcrtomb($9,0,$1)|0);
   $57 = ($55|0)==(0|0);
   if (!($57)) {
    (_uselocale($55)|0);
   }
   $58 = ($56|0)==(-1);
   if ($58) {
    $$173 = 2;
    label = 31;
    break;
   }
   $59 = HEAP32[$7>>2]|0;
   $60 = (($14) - ($59))|0;
   $61 = ($56>>>0)>($60>>>0);
   if ($61) {
    $$173 = 1;
    label = 31;
    break;
   } else {
    $$0 = $9;$$069 = $56;
   }
   while(1) {
    $62 = ($$069|0)==(0);
    if ($62) {
     break;
    }
    $65 = ((($$0)) + 1|0);
    $66 = HEAP8[$$0>>0]|0;
    $67 = HEAP32[$7>>2]|0;
    $68 = ((($67)) + 1|0);
    HEAP32[$7>>2] = $68;
    HEAP8[$67>>0] = $66;
    $69 = (($$069) + -1)|0;
    $$0 = $65;$$069 = $69;
   }
   $63 = HEAP32[$4>>2]|0;
   $64 = ((($63)) + 4|0);
   HEAP32[$4>>2] = $64;
   $$2 = $64;
   while(1) {
    $70 = ($$2|0)==($3|0);
    if ($70) {
     $$2$lcssa = $3;
     break;
    }
    $71 = HEAP32[$$2>>2]|0;
    $72 = ($71|0)==(0);
    if ($72) {
     $$2$lcssa = $$2;
     break;
    }
    $73 = ((($$2)) + 4|0);
    $$2 = $73;
   }
   $$pre113 = HEAP32[$7>>2]|0;
   $$5$ph85 = $$2$lcssa;$76 = $$pre113;$77 = $64;
  }
  $$077 = $77;$$079 = $76;$$171 = $$5$ph85;
 }
 if ((label|0) == 10) {
  HEAP32[$7>>2] = $$079;
  $$178 = $$077;$43 = $$079;
  while(1) {
   $38 = HEAP32[$4>>2]|0;
   $39 = ($$178|0)==($38|0);
   if ($39) {
    break;
   }
   $40 = HEAP32[$$178>>2]|0;
   $41 = HEAP32[$15>>2]|0;
   $42 = (_uselocale($41)|0);
   $44 = (_wcrtomb($43,$40,$8)|0);
   $45 = ($42|0)==(0|0);
   if (!($45)) {
    (_uselocale($42)|0);
   }
   $46 = ($44|0)==(-1);
   if ($46) {
    break;
   }
   $47 = HEAP32[$7>>2]|0;
   $48 = (($47) + ($44)|0);
   HEAP32[$7>>2] = $48;
   $49 = ((($$178)) + 4|0);
   $$178 = $49;$43 = $48;
  }
  HEAP32[$4>>2] = $$178;
  $$375$ph = 2;
  label = 32;
 }
 else if ((label|0) == 31) {
  $$375$ph = $$173;
  label = 32;
 }
 else if ((label|0) == 33) {
  $$pre114 = HEAP32[$4>>2]|0;
  $74 = $$pre114;
  label = 35;
 }
 if ((label|0) == 32) {
  $$476 = $$375$ph;
 }
 else if ((label|0) == 35) {
  $not$ = ($74|0)!=($3|0);
  $75 = $not$&1;
  $$476 = $75;
 }
 STACKTOP = sp;return ($$476|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$070 = 0, $$070$lcssa = 0, $$074 = 0, $$077 = 0, $$1 = 0, $$172$ph = 0, $$175 = 0, $$2 = 0, $$2$lcssa = 0, $$273 = 0, $$276 = 0, $$4$ph = 0, $$pre = 0, $$pre110 = 0, $$pre111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $not$ = 0;
 var $not$78 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $$070 = $2;
 while(1) {
  $9 = ($$070|0)==($3|0);
  if ($9) {
   $$070$lcssa = $3;
   break;
  }
  $10 = HEAP8[$$070>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $$070$lcssa = $$070;
   break;
  }
  $12 = ((($$070)) + 1|0);
  $$070 = $12;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $13 = $6;
 $14 = ((($0)) + 8|0);
 $$074 = $2;$$077 = $5;$$1 = $$070$lcssa;
 while(1) {
  $15 = ($$074|0)==($3|0);
  $16 = ($$077|0)==($6|0);
  $or$cond = $16 | $15;
  if ($or$cond) {
   $68 = $$074;
   label = 33;
   break;
  }
  $17 = $1;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $8;
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $22;
  $27 = $$1;
  $28 = $$074;
  $29 = (($27) - ($28))|0;
  $30 = $$077;
  $31 = (($13) - ($30))|0;
  $32 = $31 >> 2;
  $33 = HEAP32[$14>>2]|0;
  $34 = (_uselocale($33)|0);
  $35 = (_mbsnrtowcs($$077,$4,$29,$32,$1)|0);
  $36 = ($34|0)==(0|0);
  if (!($36)) {
   (_uselocale($34)|0);
  }
  $37 = ($35|0)==(-1);
  if ($37) {
   $$175 = $$074;$storemerge = $$077;
   label = 10;
   break;
  }
  $51 = HEAP32[$7>>2]|0;
  $52 = (($51) + ($35<<2)|0);
  HEAP32[$7>>2] = $52;
  $53 = ($52|0)==($6|0);
  if ($53) {
   label = 30;
   break;
  }
  $54 = ($$1|0)==($3|0);
  $$pre = HEAP32[$4>>2]|0;
  if ($54) {
   $$4$ph = $3;$70 = $52;$71 = $$pre;
  } else {
   $55 = HEAP32[$14>>2]|0;
   $56 = (_uselocale($55)|0);
   $57 = (_mbrtowc($52,$$pre,1,$1)|0);
   $58 = ($56|0)==(0|0);
   if (!($58)) {
    (_uselocale($56)|0);
   }
   $59 = ($57|0)==(0);
   if (!($59)) {
    $$172$ph = 2;
    label = 29;
    break;
   }
   $60 = HEAP32[$7>>2]|0;
   $61 = ((($60)) + 4|0);
   HEAP32[$7>>2] = $61;
   $62 = HEAP32[$4>>2]|0;
   $63 = ((($62)) + 1|0);
   HEAP32[$4>>2] = $63;
   $$2 = $63;
   while(1) {
    $64 = ($$2|0)==($3|0);
    if ($64) {
     $$2$lcssa = $3;
     break;
    }
    $65 = HEAP8[$$2>>0]|0;
    $66 = ($65<<24>>24)==(0);
    if ($66) {
     $$2$lcssa = $$2;
     break;
    }
    $67 = ((($$2)) + 1|0);
    $$2 = $67;
   }
   $$pre110 = HEAP32[$7>>2]|0;
   $$4$ph = $$2$lcssa;$70 = $$pre110;$71 = $63;
  }
  $$074 = $71;$$077 = $70;$$1 = $$4$ph;
 }
 do {
  if ((label|0) == 10) {
   L28: while(1) {
    label = 0;
    HEAP32[$7>>2] = $storemerge;
    $38 = HEAP32[$4>>2]|0;
    $39 = ($$175|0)==($38|0);
    if ($39) {
     label = 19;
     break;
    }
    $40 = $$175;
    $41 = (($27) - ($40))|0;
    $42 = HEAP32[$14>>2]|0;
    $43 = (_uselocale($42)|0);
    $44 = (_mbrtowc($storemerge,$$175,$41,$8)|0);
    $45 = ($43|0)==(0|0);
    if (!($45)) {
     (_uselocale($43)|0);
    }
    switch ($44|0) {
    case -1:  {
     label = 15;
     break L28;
     break;
    }
    case -2:  {
     label = 16;
     break L28;
     break;
    }
    case 0:  {
     $46 = ((($$175)) + 1|0);
     $$276 = $46;
     break;
    }
    default: {
     $47 = (($$175) + ($44)|0);
     $$276 = $47;
    }
    }
    $48 = HEAP32[$7>>2]|0;
    $49 = ((($48)) + 4|0);
    $$175 = $$276;$storemerge = $49;
    label = 10;
   }
   if ((label|0) == 15) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 2;
    label = 29;
    break;
   }
   else if ((label|0) == 16) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 1;
    label = 29;
    break;
   }
   else if ((label|0) == 19) {
    HEAP32[$4>>2] = $$175;
    $not$78 = ($$175|0)!=($3|0);
    $50 = $not$78&1;
    $$172$ph = $50;
    label = 29;
    break;
   }
  }
  else if ((label|0) == 30) {
   $$pre111 = HEAP32[$4>>2]|0;
   $68 = $$pre111;
   label = 33;
  }
 } while(0);
 if ((label|0) == 29) {
  $$273 = $$172$ph;
 }
 else if ((label|0) == 33) {
  $not$ = ($68|0)!=($3|0);
  $69 = $not$&1;
  $$273 = $69;
 }
 STACKTOP = sp;return ($$273|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$4>>2] = $2;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_uselocale($7)|0);
 $9 = (_wcrtomb($5,0,$1)|0);
 $10 = ($8|0)==(0|0);
 if (!($10)) {
  (_uselocale($8)|0);
 }
 L4: do {
  switch ($9|0) {
  case 0: case -1:  {
   $$019 = 2;
   break;
  }
  default: {
   $11 = (($9) + -1)|0;
   $12 = HEAP32[$4>>2]|0;
   $13 = $3;
   $14 = (($13) - ($12))|0;
   $15 = ($11>>>0)>($14>>>0);
   if ($15) {
    $$019 = 1;
   } else {
    $$0 = $5;$$018 = $11;
    while(1) {
     $16 = ($$018|0)==(0);
     if ($16) {
      $$019 = 0;
      break L4;
     }
     $17 = ((($$0)) + 1|0);
     $18 = HEAP8[$$0>>0]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ((($19)) + 1|0);
     HEAP32[$4>>2] = $20;
     HEAP8[$19>>0] = $18;
     $21 = (($$018) + -1)|0;
     $$0 = $17;$$018 = $21;
    }
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$019|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $merge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_uselocale($2)|0);
 $4 = (_mbtowc(0,0,4)|0);
 $5 = ($3|0)==(0|0);
 if (!($5)) {
  (_uselocale($3)|0);
 }
 $6 = ($4|0)==(0);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $merge = 1;
  } else {
   $9 = (_uselocale($7)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $merge = 0;
   } else {
    (_uselocale($9)|0);
    $merge = 0;
   }
  }
 } else {
  $merge = -1;
 }
 return ($merge|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$029 = 0, $$030 = 0, $$034 = 0, $$131 = 0, $$135 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = ((($0)) + 8|0);
 $$029 = 0;$$030 = 0;$$034 = $2;
 L1: while(1) {
  $7 = ($$029>>>0)>=($4>>>0);
  $8 = ($$034|0)==($3|0);
  $or$cond = $8 | $7;
  if ($or$cond) {
   break;
  }
  $9 = $$034;
  $10 = (($5) - ($9))|0;
  $11 = HEAP32[$6>>2]|0;
  $12 = (_uselocale($11)|0);
  $13 = (_mbrlen($$034,$10,$1)|0);
  $14 = ($12|0)==(0|0);
  if (!($14)) {
   (_uselocale($12)|0);
  }
  switch ($13|0) {
  case -2: case -1:  {
   break L1;
   break;
  }
  case 0:  {
   $15 = ((($$034)) + 1|0);
   $$135 = $15;$$pn = 1;
   break;
  }
  default: {
   $16 = (($$034) + ($13)|0);
   $$135 = $16;$$pn = $13;
  }
  }
  $$131 = (($$pn) + ($$030))|0;
  $17 = (($$029) + 1)|0;
  $$029 = $17;$$030 = $$131;$$034 = $$135;
 }
 return ($$030|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $6 = 1;
 } else {
  $4 = (_uselocale($2)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $6 = 4;
  } else {
   (_uselocale($4)|0);
   $6 = 4;
  }
 }
 return ($6|0);
}
function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (12308);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZNSt3__26__clocEv()|0);
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  _freelocale($5);
 }
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0100 = 0, $$194 = 0, $$2102 = 0, $$598 = 0, $$off = 0, $$pre = 0, $$pre142 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond110 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 $$pre142 = $1;
 if ($6) {
  $$0100 = 0;$$194 = $0;
 } else {
  $7 = $0;
  $8 = (($$pre142) - ($7))|0;
  $9 = ($8|0)>(2);
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(-17);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(-69);
    if ($14) {
     $15 = ((($0)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(-65);
     $18 = ((($0)) + 3|0);
     $$ = $17 ? $18 : $0;
     $$0100 = 0;$$194 = $$;
    } else {
     $$0100 = 0;$$194 = $0;
    }
   } else {
    $$0100 = 0;$$194 = $0;
   }
  } else {
   $$0100 = 0;$$194 = $0;
  }
 }
 L6: while(1) {
  $19 = ($$194>>>0)<($1>>>0);
  $20 = ($$0100>>>0)<($2>>>0);
  $or$cond = $20 & $19;
  if (!($or$cond)) {
   label = 39;
   break;
  }
  $21 = HEAP8[$$194>>0]|0;
  $22 = $21&255;
  $23 = ($22>>>0)>($3>>>0);
  if ($23) {
   label = 39;
   break;
  }
  $24 = ($21<<24>>24)>(-1);
  do {
   if ($24) {
    $25 = ((($$194)) + 1|0);
    $$2102 = $$0100;$$598 = $25;
   } else {
    $26 = ($21&255)<(194);
    if ($26) {
     label = 39;
     break L6;
    }
    $27 = ($21&255)<(224);
    if ($27) {
     $28 = $$194;
     $29 = (($$pre142) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      label = 39;
      break L6;
     }
     $31 = ((($$194)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 & 192;
     $35 = ($34|0)==(128);
     if (!($35)) {
      label = 39;
      break L6;
     }
     $36 = $22 << 6;
     $37 = $36 & 1984;
     $38 = $33 & 63;
     $39 = $38 | $37;
     $40 = ($39>>>0)>($3>>>0);
     $41 = ((($$194)) + 2|0);
     if ($40) {
      label = 39;
      break L6;
     } else {
      $$2102 = $$0100;$$598 = $41;
      break;
     }
    }
    $42 = ($21&255)<(240);
    if ($42) {
     $43 = $$194;
     $44 = (($$pre142) - ($43))|0;
     $45 = ($44|0)<(3);
     if ($45) {
      label = 39;
      break L6;
     }
     $46 = ((($$194)) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ((($$194)) + 2|0);
     $49 = HEAP8[$48>>0]|0;
     switch ($21<<24>>24) {
     case -32:  {
      $50 = $47 & -32;
      $51 = ($50<<24>>24)==(-96);
      if (!($51)) {
       label = 19;
       break L6;
      }
      break;
     }
     case -19:  {
      $54 = $47 & -32;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       label = 21;
       break L6;
      }
      break;
     }
     default: {
      $58 = $47 & -64;
      $59 = ($58<<24>>24)==(-128);
      if (!($59)) {
       label = 23;
       break L6;
      }
     }
     }
     $62 = $49&255;
     $63 = $62 & 192;
     $64 = ($63|0)==(128);
     if (!($64)) {
      label = 39;
      break L6;
     }
     $65 = $22 << 12;
     $66 = $65 & 61440;
     $67 = $47&255;
     $68 = $67 << 6;
     $69 = $68 & 4032;
     $70 = $69 | $66;
     $71 = $62 & 63;
     $72 = $70 | $71;
     $73 = ($72>>>0)>($3>>>0);
     $74 = ((($$194)) + 3|0);
     if ($73) {
      label = 39;
      break L6;
     } else {
      $$2102 = $$0100;$$598 = $74;
      break;
     }
    }
    $75 = ($21&255)<(245);
    if (!($75)) {
     label = 39;
     break L6;
    }
    $76 = $$194;
    $77 = (($$pre142) - ($76))|0;
    $78 = ($77|0)<(4);
    $79 = (($2) - ($$0100))|0;
    $80 = ($79>>>0)<(2);
    $or$cond110 = $80 | $78;
    if ($or$cond110) {
     label = 39;
     break L6;
    }
    $81 = ((($$194)) + 1|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = ((($$194)) + 2|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = ((($$194)) + 3|0);
    $86 = HEAP8[$85>>0]|0;
    switch ($21<<24>>24) {
    case -16:  {
     $$off = (($82) + 112)<<24>>24;
     $87 = ($$off&255)<(48);
     if (!($87)) {
      label = 30;
      break L6;
     }
     break;
    }
    case -12:  {
     $90 = $82 & -16;
     $91 = ($90<<24>>24)==(-128);
     if (!($91)) {
      label = 32;
      break L6;
     }
     break;
    }
    default: {
     $94 = $82 & -64;
     $95 = ($94<<24>>24)==(-128);
     if (!($95)) {
      label = 34;
      break L6;
     }
    }
    }
    $98 = $84&255;
    $99 = $98 & 192;
    $100 = ($99|0)==(128);
    if (!($100)) {
     label = 39;
     break L6;
    }
    $101 = $86&255;
    $102 = $101 & 192;
    $103 = ($102|0)==(128);
    if (!($103)) {
     label = 39;
     break L6;
    }
    $104 = $22 << 18;
    $105 = $104 & 1835008;
    $106 = $82&255;
    $107 = $106 << 12;
    $108 = $107 & 258048;
    $109 = $108 | $105;
    $110 = $98 << 6;
    $111 = $110 & 4032;
    $112 = $109 | $111;
    $113 = $101 & 63;
    $114 = $112 | $113;
    $115 = ($114>>>0)>($3>>>0);
    $116 = (($$0100) + 1)|0;
    $117 = ((($$194)) + 4|0);
    if ($115) {
     label = 39;
     break L6;
    } else {
     $$2102 = $116;$$598 = $117;
    }
   }
  } while(0);
  $118 = (($$2102) + 1)|0;
  $$0100 = $118;$$194 = $$598;
 }
 if ((label|0) == 19) {
  $52 = $0;
  $53 = (($43) - ($52))|0;
  $121 = $53;
 }
 else if ((label|0) == 21) {
  $56 = $0;
  $57 = (($43) - ($56))|0;
  $121 = $57;
 }
 else if ((label|0) == 23) {
  $60 = $0;
  $61 = (($43) - ($60))|0;
  $121 = $61;
 }
 else if ((label|0) == 30) {
  $88 = $0;
  $89 = (($76) - ($88))|0;
  $121 = $89;
 }
 else if ((label|0) == 32) {
  $92 = $0;
  $93 = (($76) - ($92))|0;
  $121 = $93;
 }
 else if ((label|0) == 34) {
  $96 = $0;
  $97 = (($76) - ($96))|0;
  $121 = $97;
 }
 else if ((label|0) == 39) {
  $$pre = $0;
  $119 = $$194;
  $120 = (($119) - ($$pre))|0;
  $121 = $120;
 }
 return ($121|0);
}
function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$8 = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre = $1;
  $$pre$phiZ2D = $$pre;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = $1;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$10>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($10)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($10)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($10)) + 3|0);
      HEAP32[$2>>2] = $23;
      $$pre$phiZ2D = $11;
     } else {
      $$pre$phiZ2D = $11;
     }
    } else {
     $$pre$phiZ2D = $11;
    }
   } else {
    $$pre$phiZ2D = $11;
   }
  } else {
   $$pre$phiZ2D = $11;
  }
 }
 $24 = $4;
 L9: while(1) {
  $25 = HEAP32[$2>>2]|0;
  $26 = ($25>>>0)<($1>>>0);
  if (!($26)) {
   label = 41;
   break;
  }
  $27 = HEAP32[$5>>2]|0;
  $28 = ($27>>>0)<($4>>>0);
  if (!($28)) {
   label = 41;
   break;
  }
  $29 = HEAP8[$25>>0]|0;
  $30 = $29&255;
  $31 = ($30>>>0)>($6>>>0);
  if ($31) {
   $$8 = 2;
   break;
  }
  $32 = ($29<<24>>24)>(-1);
  do {
   if ($32) {
    $33 = $29&255;
    HEAP16[$27>>1] = $33;
    $34 = ((($25)) + 1|0);
    HEAP32[$2>>2] = $34;
   } else {
    $35 = ($29&255)<(194);
    if ($35) {
     $$8 = 2;
     break L9;
    }
    $36 = ($29&255)<(224);
    if ($36) {
     $37 = $25;
     $38 = (($$pre$phiZ2D) - ($37))|0;
     $39 = ($38|0)<(2);
     if ($39) {
      $$8 = 1;
      break L9;
     }
     $40 = ((($25)) + 1|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&255;
     $43 = $42 & 192;
     $44 = ($43|0)==(128);
     if (!($44)) {
      $$8 = 2;
      break L9;
     }
     $45 = $30 << 6;
     $46 = $45 & 1984;
     $47 = $42 & 63;
     $48 = $47 | $46;
     $49 = ($48>>>0)>($6>>>0);
     if ($49) {
      $$8 = 2;
      break L9;
     }
     $50 = $48&65535;
     HEAP16[$27>>1] = $50;
     $51 = ((($25)) + 2|0);
     HEAP32[$2>>2] = $51;
     break;
    }
    $52 = ($29&255)<(240);
    if ($52) {
     $53 = $25;
     $54 = (($$pre$phiZ2D) - ($53))|0;
     $55 = ($54|0)<(3);
     if ($55) {
      $$8 = 1;
      break L9;
     }
     $56 = ((($25)) + 1|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = ((($25)) + 2|0);
     $59 = HEAP8[$58>>0]|0;
     switch ($29<<24>>24) {
     case -32:  {
      $60 = $57 & -32;
      $61 = ($60<<24>>24)==(-96);
      if (!($61)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $62 = $57 & -32;
      $63 = ($62<<24>>24)==(-128);
      if (!($63)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     default: {
      $64 = $57 & -64;
      $65 = ($64<<24>>24)==(-128);
      if (!($65)) {
       $$8 = 2;
       break L9;
      }
     }
     }
     $66 = $59&255;
     $67 = $66 & 192;
     $68 = ($67|0)==(128);
     if (!($68)) {
      $$8 = 2;
      break L9;
     }
     $69 = $30 << 12;
     $70 = $57&255;
     $71 = $70 << 6;
     $72 = $71 & 4032;
     $73 = $72 | $69;
     $74 = $66 & 63;
     $75 = $73 | $74;
     $76 = $75 & 65535;
     $77 = ($76>>>0)>($6>>>0);
     if ($77) {
      $$8 = 2;
      break L9;
     }
     $78 = $75&65535;
     HEAP16[$27>>1] = $78;
     $79 = ((($25)) + 3|0);
     HEAP32[$2>>2] = $79;
     break;
    }
    $80 = ($29&255)<(245);
    if (!($80)) {
     $$8 = 2;
     break L9;
    }
    $81 = $25;
    $82 = (($$pre$phiZ2D) - ($81))|0;
    $83 = ($82|0)<(4);
    if ($83) {
     $$8 = 1;
     break L9;
    }
    $84 = ((($25)) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = ((($25)) + 2|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = ((($25)) + 3|0);
    $89 = HEAP8[$88>>0]|0;
    switch ($29<<24>>24) {
    case -16:  {
     $$off = (($85) + 112)<<24>>24;
     $90 = ($$off&255)<(48);
     if (!($90)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $91 = $85 & -16;
     $92 = ($91<<24>>24)==(-128);
     if (!($92)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    default: {
     $93 = $85 & -64;
     $94 = ($93<<24>>24)==(-128);
     if (!($94)) {
      $$8 = 2;
      break L9;
     }
    }
    }
    $95 = $87&255;
    $96 = $95 & 192;
    $97 = ($96|0)==(128);
    if (!($97)) {
     $$8 = 2;
     break L9;
    }
    $98 = $89&255;
    $99 = $98 & 192;
    $100 = ($99|0)==(128);
    if (!($100)) {
     $$8 = 2;
     break L9;
    }
    $101 = $27;
    $102 = (($24) - ($101))|0;
    $103 = ($102|0)<(4);
    if ($103) {
     $$8 = 1;
     break L9;
    }
    $104 = $30 & 7;
    $105 = $104 << 18;
    $106 = $85&255;
    $107 = $106 << 12;
    $108 = $107 & 258048;
    $109 = $108 | $105;
    $110 = $95 << 6;
    $111 = $110 & 4032;
    $112 = $109 | $111;
    $113 = $98 & 63;
    $114 = $112 | $113;
    $115 = ($114>>>0)>($6>>>0);
    if ($115) {
     $$8 = 2;
     break L9;
    }
    $116 = $104 << 2;
    $117 = $106 >>> 4;
    $118 = $117 & 3;
    $119 = $118 | $116;
    $120 = $119 << 6;
    $121 = (($120) + 16320)|0;
    $122 = $106 << 2;
    $123 = $122 & 60;
    $124 = $95 >>> 4;
    $125 = $124 & 3;
    $126 = $123 | $125;
    $127 = $126 | $121;
    $128 = $127 | 55296;
    $129 = $128&65535;
    HEAP16[$27>>1] = $129;
    $130 = $110 & 960;
    $131 = $113 | $130;
    $132 = $131 | 56320;
    $133 = $132&65535;
    $134 = ((($27)) + 2|0);
    HEAP32[$5>>2] = $134;
    HEAP16[$134>>1] = $133;
    $135 = HEAP32[$2>>2]|0;
    $136 = ((($135)) + 4|0);
    HEAP32[$2>>2] = $136;
   }
  } while(0);
  $137 = HEAP32[$5>>2]|0;
  $138 = ((($137)) + 2|0);
  HEAP32[$5>>2] = $138;
 }
 if ((label|0) == 41) {
  $139 = $26&1;
  $$8 = $139;
 }
 return ($$8|0);
}
function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$4 = 0, $$pre = 0, $$pre80 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $$pre80 = $4;
 if ($9) {
  label = 4;
 } else {
  $10 = $3;
  $11 = (($$pre80) - ($10))|0;
  $12 = ($11|0)<(3);
  if ($12) {
   $$4 = 1;
  } else {
   $13 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $13;
   HEAP8[$3>>0] = -17;
   $14 = HEAP32[$5>>2]|0;
   $15 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $15;
   HEAP8[$14>>0] = -69;
   $16 = HEAP32[$5>>2]|0;
   $17 = ((($16)) + 1|0);
   HEAP32[$5>>2] = $17;
   HEAP8[$16>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $18 = $1;
   $$pre = HEAP32[$2>>2]|0;
   $20 = $$pre;
   while(1) {
    $19 = ($20>>>0)<($1>>>0);
    if (!($19)) {
     $$4 = 0;
     break L4;
    }
    $21 = HEAP16[$20>>1]|0;
    $22 = $21&65535;
    $23 = ($22>>>0)>($6>>>0);
    if ($23) {
     $$4 = 2;
     break L4;
    }
    $24 = ($21&65535)<(128);
    do {
     if ($24) {
      $25 = HEAP32[$5>>2]|0;
      $26 = $25;
      $27 = (($$pre80) - ($26))|0;
      $28 = ($27|0)<(1);
      if ($28) {
       $$4 = 1;
       break L4;
      }
      $29 = $21&255;
      $30 = ((($25)) + 1|0);
      HEAP32[$5>>2] = $30;
      HEAP8[$25>>0] = $29;
     } else {
      $31 = ($21&65535)<(2048);
      if ($31) {
       $32 = HEAP32[$5>>2]|0;
       $33 = $32;
       $34 = (($$pre80) - ($33))|0;
       $35 = ($34|0)<(2);
       if ($35) {
        $$4 = 1;
        break L4;
       }
       $36 = $22 >>> 6;
       $37 = $36 | 192;
       $38 = $37&255;
       $39 = ((($32)) + 1|0);
       HEAP32[$5>>2] = $39;
       HEAP8[$32>>0] = $38;
       $40 = $22 & 63;
       $41 = $40 | 128;
       $42 = $41&255;
       $43 = HEAP32[$5>>2]|0;
       $44 = ((($43)) + 1|0);
       HEAP32[$5>>2] = $44;
       HEAP8[$43>>0] = $42;
       break;
      }
      $45 = ($21&65535)<(55296);
      if ($45) {
       $46 = HEAP32[$5>>2]|0;
       $47 = $46;
       $48 = (($$pre80) - ($47))|0;
       $49 = ($48|0)<(3);
       if ($49) {
        $$4 = 1;
        break L4;
       }
       $50 = $22 >>> 12;
       $51 = $50 | 224;
       $52 = $51&255;
       $53 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $53;
       HEAP8[$46>>0] = $52;
       $54 = $22 >>> 6;
       $55 = $54 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$5>>2]|0;
       $59 = ((($58)) + 1|0);
       HEAP32[$5>>2] = $59;
       HEAP8[$58>>0] = $57;
       $60 = $22 & 63;
       $61 = $60 | 128;
       $62 = $61&255;
       $63 = HEAP32[$5>>2]|0;
       $64 = ((($63)) + 1|0);
       HEAP32[$5>>2] = $64;
       HEAP8[$63>>0] = $62;
       break;
      }
      $65 = ($21&65535)<(56320);
      if (!($65)) {
       $116 = ($21&65535)<(57344);
       if ($116) {
        $$4 = 2;
        break L4;
       }
       $117 = HEAP32[$5>>2]|0;
       $118 = $117;
       $119 = (($$pre80) - ($118))|0;
       $120 = ($119|0)<(3);
       if ($120) {
        $$4 = 1;
        break L4;
       }
       $121 = $22 >>> 12;
       $122 = $121 | 224;
       $123 = $122&255;
       $124 = ((($117)) + 1|0);
       HEAP32[$5>>2] = $124;
       HEAP8[$117>>0] = $123;
       $125 = $22 >>> 6;
       $126 = $125 & 63;
       $127 = $126 | 128;
       $128 = $127&255;
       $129 = HEAP32[$5>>2]|0;
       $130 = ((($129)) + 1|0);
       HEAP32[$5>>2] = $130;
       HEAP8[$129>>0] = $128;
       $131 = $22 & 63;
       $132 = $131 | 128;
       $133 = $132&255;
       $134 = HEAP32[$5>>2]|0;
       $135 = ((($134)) + 1|0);
       HEAP32[$5>>2] = $135;
       HEAP8[$134>>0] = $133;
       break;
      }
      $66 = $20;
      $67 = (($18) - ($66))|0;
      $68 = ($67|0)<(4);
      if ($68) {
       $$4 = 1;
       break L4;
      }
      $69 = ((($20)) + 2|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = $71 & 64512;
      $73 = ($72|0)==(56320);
      if (!($73)) {
       $$4 = 2;
       break L4;
      }
      $74 = HEAP32[$5>>2]|0;
      $75 = (($$pre80) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$4 = 1;
       break L4;
      }
      $77 = $22 & 960;
      $78 = $77 << 10;
      $79 = (($78) + 65536)|0;
      $80 = $22 << 10;
      $81 = $80 & 64512;
      $82 = $79 | $81;
      $83 = $71 & 1023;
      $84 = $82 | $83;
      $85 = ($84>>>0)>($6>>>0);
      if ($85) {
       $$4 = 2;
       break L4;
      }
      HEAP32[$2>>2] = $69;
      $86 = $77 >>> 6;
      $87 = (($86) + 1)|0;
      $88 = $87 >>> 2;
      $89 = $88 | 240;
      $90 = $89&255;
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + 1|0);
      HEAP32[$5>>2] = $92;
      HEAP8[$91>>0] = $90;
      $93 = $87 << 4;
      $94 = $93 & 48;
      $95 = $22 >>> 2;
      $96 = $95 & 15;
      $97 = $96 | $94;
      $98 = $97 | 128;
      $99 = $98&255;
      $100 = HEAP32[$5>>2]|0;
      $101 = ((($100)) + 1|0);
      HEAP32[$5>>2] = $101;
      HEAP8[$100>>0] = $99;
      $102 = $22 << 4;
      $103 = $102 & 48;
      $104 = $71 >>> 6;
      $105 = $104 & 15;
      $106 = $103 | $105;
      $107 = $106 | 128;
      $108 = $107&255;
      $109 = HEAP32[$5>>2]|0;
      $110 = ((($109)) + 1|0);
      HEAP32[$5>>2] = $110;
      HEAP8[$109>>0] = $108;
      $111 = $71 & 63;
      $112 = $111 | 128;
      $113 = $112&255;
      $114 = HEAP32[$5>>2]|0;
      $115 = ((($114)) + 1|0);
      HEAP32[$5>>2] = $115;
      HEAP8[$114>>0] = $113;
     }
    } while(0);
    $136 = HEAP32[$2>>2]|0;
    $137 = ((($136)) + 2|0);
    HEAP32[$2>>2] = $137;
    $20 = $137;
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNSt3__26locale5__impD2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (12356);
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 12|0);
 $$0 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = (($3) - ($4))|0;
  $6 = $5 >> 2;
  $7 = ($$0>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $9 = $4;
  $10 = (($9) + ($$0<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__214__shared_count16__release_sharedEv($11)|0);
  }
  $13 = (($$0) + 1)|0;
  $$0 = $13;
 }
 $8 = ((($0)) + 144|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($1);
 return;
}
function __ZNSt3__26locale5__impD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0) {
 $0 = $0|0;
 var $$pre$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = ((($0)) + 4|0);
   $$pre$i$i = HEAP32[$3>>2]|0;
   $5 = $$pre$i$i;
   while(1) {
    $4 = ($5|0)==($1|0);
    if ($4) {
     break;
    }
    $6 = ((($5)) + -4|0);
    HEAP32[$3>>2] = $6;
    $5 = $6;
   }
   $7 = ((($0)) + 16|0);
   $8 = ($7|0)==($1|0);
   if ($8) {
    $9 = ((($0)) + 128|0);
    HEAP8[$9>>0] = 0;
    break;
   } else {
    __ZdlPv($1);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__25ctypeIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (12376);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 12|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   __ZdaPv($2);
  }
 }
 return;
}
function __ZNSt3__25ctypeIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIcE10do_toupperEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii2 = ($1<<24>>24)>(-1);
 if ($isascii2) {
  $2 = $1&255;
  $3 = (___ctype_toupper_loc()|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + ($2<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&255;
  $8 = $7;
 } else {
  $8 = $1;
 }
 return ($8|0);
}
function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $isascii7 = ($4<<24>>24)>(-1);
  if ($isascii7) {
   $5 = $4 << 24 >> 24;
   $6 = (___ctype_toupper_loc()|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + ($5<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   $11 = $10;
  } else {
   $11 = $4;
  }
  HEAP8[$$0>>0] = $11;
  $12 = ((($$0)) + 1|0);
  $$0 = $12;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii2 = ($1<<24>>24)>(-1);
 if ($isascii2) {
  $2 = $1 << 24 >> 24;
  $3 = (___ctype_tolower_loc()|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + ($2<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&255;
  $8 = $7;
 } else {
  $8 = $1;
 }
 return ($8|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $isascii7 = ($4<<24>>24)>(-1);
  if ($isascii7) {
   $5 = $4 << 24 >> 24;
   $6 = (___ctype_tolower_loc()|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + ($5<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   $11 = $10;
  } else {
   $11 = $4;
  }
  HEAP8[$$0>>0] = $11;
  $12 = ((($$0)) + 1|0);
  $$0 = $12;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($1|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  HEAP8[$$0>>0] = $5;
  $6 = ((($$07)) + 1|0);
  $7 = ((($$0)) + 1|0);
  $$0 = $7;$$07 = $6;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEcc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $isascii4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii4 = ($1<<24>>24)>(-1);
 $$ = $isascii4 ? $1 : $2;
 return ($$|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$09 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $4;$$09 = $1;
 while(1) {
  $5 = ($$09|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = HEAP8[$$09>>0]|0;
  $isascii10 = ($6<<24>>24)>(-1);
  $$ = $isascii10 ? $6 : $3;
  HEAP8[$$0>>0] = $$;
  $7 = ((($$09)) + 1|0);
  $8 = ((($$0)) + 1|0);
  $$0 = $8;$$09 = $7;
 }
 return ($2|0);
}
function __ZNSt3__28numpunctIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (12428);
 $1 = ((($0)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 return;
}
function __ZNSt3__28numpunctIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 9|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIcE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,30580,4);
 return;
}
function __ZNKSt3__28numpunctIcE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,30574,5);
 return;
}
function __ZNSt3__28numpunctIwED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (12468);
 $1 = ((($0)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 return;
}
function __ZNSt3__28numpunctIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIwE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (_wcslen(12524)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($0,12524,$2);
 return;
}
function __ZNKSt3__28numpunctIwE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (_wcslen(12500)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($0,12500,$2);
 return;
}
function __ZNSt3__26locale5facetD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__25ctypeIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIwE5do_isEtw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($2>>>0)<(128);
 if ($isascii) {
  $3 = (___ctype_b_loc()|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + ($2<<1)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 & $1;
  $8 = ($7<<16>>16)!=(0);
  $9 = $8;
 } else {
  $9 = 0;
 }
 return ($9|0);
}
function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$08 = $1;
 while(1) {
  $4 = ($$08|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$$08>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (___ctype_b_loc()|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + ($5<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9&65535;
   $12 = $10;
  } else {
   $12 = 0;
  }
  $11 = $12&65535;
  HEAP16[$$0>>1] = $11;
  $13 = ((($$08)) + 4|0);
  $14 = ((($$0)) + 2|0);
  $$0 = $14;$$08 = $13;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (___ctype_b_loc()|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + ($5<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9 & $1;
   $11 = ($10<<16>>16)==(0);
   if (!($11)) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $12 = ((($$0)) + 4|0);
  $$0 = $12;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $isascii = ($5>>>0)<(128);
  if (!($isascii)) {
   $$0$lcssa = $$0;
   break;
  }
  $6 = (___ctype_b_loc()|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($5<<1)|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 & $1;
  $11 = ($10<<16>>16)==(0);
  if ($11) {
   $$0$lcssa = $$0;
   break;
  }
  $12 = ((($$0)) + 4|0);
  $$0 = $12;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($1>>>0)<(128);
 if ($isascii) {
  $2 = (___ctype_toupper_loc()|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($1<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 return ($6|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (___ctype_toupper_loc()|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($4<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8;
  } else {
   $9 = $4;
  }
  HEAP32[$$0>>2] = $9;
  $10 = ((($$0)) + 4|0);
  $$0 = $10;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($1>>>0)<(128);
 if ($isascii) {
  $2 = (___ctype_tolower_loc()|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($1<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 return ($6|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (___ctype_tolower_loc()|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($4<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8;
  } else {
   $9 = $4;
  }
  HEAP32[$$0>>2] = $9;
  $10 = ((($$0)) + 4|0);
  $$0 = $10;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 24 >> 24;
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  $6 = $5 << 24 >> 24;
  HEAP32[$$0>>2] = $6;
  $7 = ((($$07)) + 1|0);
  $8 = ((($$0)) + 4|0);
  $$0 = $8;$$07 = $7;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEwc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($1>>>0)<(128);
 $3 = $1&255;
 $$0 = $isascii ? $3 : $2;
 return ($$0|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1;
 $6 = $2;
 $7 = (($6) - ($5))|0;
 $8 = $7 >>> 2;
 $$0 = $4;$$09 = $1;
 while(1) {
  $9 = ($$09|0)==($2|0);
  if ($9) {
   break;
  }
  $10 = HEAP32[$$09>>2]|0;
  $isascii = ($10>>>0)<(128);
  $11 = $10&255;
  $$ = $isascii ? $11 : $3;
  HEAP8[$$0>>0] = $$;
  $12 = ((($$09)) + 4|0);
  $13 = ((($$0)) + 1|0);
  $$0 = $13;$$09 = $12;
 }
 $scevgep = (($1) + ($8<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__25ctypeIcEC2EPKtbj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($3) + -1)|0;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$0>>2] = (12376);
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($0)) + 12|0);
 $8 = $2&1;
 HEAP8[$7>>0] = $8;
 $9 = ($1|0)==(0|0);
 if ($9) {
  $10 = (___ctype_b_loc()|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$6>>2] = $11;
 }
 return;
}
function __ZNSt3__221__throw_runtime_errorEPKc($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((30627|0),(30650|0),304,(30899|0));
 // unreachable;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((30736|0),(30650|0),315,(30949|0));
 // unreachable;
}
function __ZNSt3__26locale5__impC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (12356);
 $4 = ((($0)) + 8|0);
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($4,28);
 $5 = ((($0)) + 144|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($5,28519,1);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($0)) + 12|0);
 $$pre$i$i$i = HEAP32[$7>>2]|0;
 $9 = $$pre$i$i$i;
 while(1) {
  $8 = ($9|0)==($6|0);
  if ($8) {
   break;
  }
  $10 = ((($9)) + -4|0);
  HEAP32[$7>>2] = $10;
  $9 = $10;
 }
 HEAP32[(31980)>>2] = 0;
 HEAP32[7994] = (10020);
 __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0,31976);
 HEAP32[(31988)>>2] = 0;
 HEAP32[7996] = (10052);
 __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0,31984);
 __ZNSt3__25ctypeIcEC2EPKtbj(31992,0,0,1);
 __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0,31992);
 HEAP32[(32012)>>2] = 0;
 HEAP32[8002] = (12572);
 __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0,32008);
 HEAP32[(32020)>>2] = 0;
 HEAP32[8004] = (12640);
 __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0,32016);
 HEAP32[(32028)>>2] = 0;
 HEAP32[8006] = (12308);
 $11 = (__ZNSt3__26__clocEv()|0);
 HEAP32[(32032)>>2] = $11;
 __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0,32024);
 HEAP32[(32044)>>2] = 0;
 HEAP32[8010] = (12688);
 __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0,32040);
 HEAP32[(32052)>>2] = 0;
 HEAP32[8012] = (12736);
 __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0,32048);
 __ZNSt3__28numpunctIcEC2Ej(32056,1);
 __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0,32056);
 __ZNSt3__28numpunctIwEC2Ej(32080,1);
 __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0,32080);
 HEAP32[(32116)>>2] = 0;
 HEAP32[8028] = (10084);
 __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,32112);
 HEAP32[(32124)>>2] = 0;
 HEAP32[8030] = (10148);
 __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,32120);
 HEAP32[(32132)>>2] = 0;
 HEAP32[8032] = (10212);
 __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,32128);
 HEAP32[(32140)>>2] = 0;
 HEAP32[8034] = (10264);
 __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,32136);
 HEAP32[(32148)>>2] = 0;
 HEAP32[8036] = (11812);
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0,32144);
 HEAP32[(32156)>>2] = 0;
 HEAP32[8038] = (11868);
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0,32152);
 HEAP32[(32164)>>2] = 0;
 HEAP32[8040] = (11924);
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0,32160);
 HEAP32[(32172)>>2] = 0;
 HEAP32[8042] = (11980);
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0,32168);
 HEAP32[(32180)>>2] = 0;
 HEAP32[8044] = (12036);
 __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,32176);
 HEAP32[(32188)>>2] = 0;
 HEAP32[8046] = (12064);
 __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,32184);
 HEAP32[(32196)>>2] = 0;
 HEAP32[8048] = (12092);
 __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,32192);
 HEAP32[(32204)>>2] = 0;
 HEAP32[8050] = (12120);
 __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,32200);
 HEAP32[(32212)>>2] = 0;
 HEAP32[8052] = (10316);
 HEAP32[(32216)>>2] = (10364);
 __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,32208);
 HEAP32[(32228)>>2] = 0;
 HEAP32[8056] = (10400);
 HEAP32[(32232)>>2] = (10448);
 __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,32224);
 HEAP32[(32244)>>2] = 0;
 HEAP32[8060] = (12552);
 $12 = (__ZNSt3__26__clocEv()|0);
 HEAP32[(32248)>>2] = $12;
 HEAP32[8060] = (11764);
 __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,32240);
 HEAP32[(32260)>>2] = 0;
 HEAP32[8064] = (12552);
 $13 = (__ZNSt3__26__clocEv()|0);
 HEAP32[(32264)>>2] = $13;
 HEAP32[8064] = (11788);
 __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,32256);
 HEAP32[(32276)>>2] = 0;
 HEAP32[8068] = (12148);
 __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0,32272);
 HEAP32[(32284)>>2] = 0;
 HEAP32[8070] = (12180);
 __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0,32280);
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 128|0);
 HEAP8[$4>>0] = 0;
 $5 = ($1|0)==(0);
 if (!($5)) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($0,$1);
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1);
 }
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(38392)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(38400)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(38408)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(38440)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40200)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40208)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40216)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40224)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__28numpunctIcEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (12428);
 $4 = ((($0)) + 8|0);
 HEAP8[$4>>0] = 46;
 $5 = ((($0)) + 9|0);
 HEAP8[$5>>0] = 44;
 $6 = ((($0)) + 12|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(38424)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__28numpunctIwEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (12468);
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 46;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 44;
 $6 = ((($0)) + 16|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(38448)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(38432)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(38456)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(38464)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(38472)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40120)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40128)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40136)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40144)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40152)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40160)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40168)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40176)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(39284)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40096)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40104)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40112)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40184)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(40192)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_count12__add_sharedEv($1);
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)>($2>>>0);
 if ($9) {
  $10 = $6;
  $$pre$phiZ2D = $3;$13 = $10;
 } else {
  $11 = (($2) + 1)|0;
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($3,$11);
  $$pre = HEAP32[$3>>2]|0;
  $$pre$phiZ2D = $3;$13 = $$pre;
 }
 $12 = (($13) + ($2<<2)|0);
 $14 = HEAP32[$12>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  (__ZNSt3__214__shared_count16__release_sharedEv($14)|0);
 }
 $16 = HEAP32[$$pre$phiZ2D>>2]|0;
 $17 = (($16) + ($2<<2)|0);
 HEAP32[$17>>2] = $1;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($1>>>0);
 $8 = $4;
 $9 = $3;
 L1: do {
  if ($7) {
   $10 = (($1) - ($6))|0;
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0,$10);
  } else {
   $11 = ($6>>>0)>($1>>>0);
   if ($11) {
    $12 = (($8) + ($1<<2)|0);
    $14 = $9;
    while(1) {
     $13 = ($14|0)==($12|0);
     if ($13) {
      break L1;
     }
     $15 = ((($14)) + -4|0);
     HEAP32[$2>>2] = $15;
     $14 = $15;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i6 = 0, $$pre$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)<($1>>>0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $11 = (($6) - ($10))|0;
  $12 = $11 >> 2;
  $13 = (($12) + ($1))|0;
  $14 = ($13>>>0)>(1073741823);
  if ($14) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $15 = ((($0)) + 16|0);
  $16 = (($4) - ($10))|0;
  $17 = $16 >> 2;
  $18 = ($17>>>0)<(536870911);
  $19 = $16 >> 1;
  $20 = ($19>>>0)<($13>>>0);
  $$sroa$speculated$i = $20 ? $13 : $19;
  $$0$i6 = $18 ? $$sroa$speculated$i : 1073741823;
  __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($2,$$0$i6,$12,$15);
  $21 = ((($2)) + 8|0);
  $$pre$i = HEAP32[$21>>2]|0;
  $$0$i = $1;$22 = $$pre$i;
  while(1) {
   HEAP32[$22>>2] = 0;
   $23 = HEAP32[$21>>2]|0;
   $24 = ((($23)) + 4|0);
   HEAP32[$21>>2] = $24;
   $25 = (($$0$i) + -1)|0;
   $26 = ($25|0)==(0);
   if ($26) {
    break;
   } else {
    $$0$i = $25;$22 = $24;
   }
  }
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$2);
  __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
 } else {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $$pre = HEAP32[$2>>2]|0;
 $$0 = $1;$3 = $$pre;
 while(1) {
  HEAP32[$3>>2] = 0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  HEAP32[$2>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;$3 = $5;
  }
 }
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$not$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $12 = 0;
  } else {
   $7 = ((($3)) + 112|0);
   $8 = HEAP8[$7>>0]|0;
   $$not$i$i = ($8<<24>>24)==(0);
   $9 = ($1>>>0)<(29);
   $or$cond$i$i = $9 & $$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$7>>0] = 1;
    $12 = $3;
    break;
   } else {
    $10 = $1 << 2;
    $11 = (__Znwj($10)|0);
    $12 = $11;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $12;
 $13 = (($12) + ($2<<2)|0);
 $14 = ((($0)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($0)) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = (($12) + ($1<<2)|0);
 $17 = ((($0)) + 12|0);
 HEAP32[$17>>2] = $16;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
  $$pre = HEAP32[$5>>2]|0;
  $$pre$phiZ2D = $5;$15 = $$pre;
 } else {
  $13 = $11;
  $$pre$phiZ2D = $5;$15 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$$pre$phiZ2D>>2] = $14;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = ((($0)) + 8|0);
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$19>>2]|0;
 $22 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $22;
 HEAP32[$20>>2] = $21;
 $23 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$1>>2] = $23;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($0) {
 $0 = $0|0;
 var $$pre$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $$pre$i$i$i = HEAP32[$3>>2]|0;
 $5 = $$pre$i$i$i;
 while(1) {
  $4 = ($5|0)==($2|0);
  if ($4) {
   break;
  }
  $6 = ((($5)) + -4|0);
  HEAP32[$3>>2] = $6;
  $5 = $6;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($0)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($7|0);
   if ($11) {
    $12 = ((($10)) + 112|0);
    HEAP8[$12>>0] = 0;
    break;
   } else {
    __ZdlPv($7);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$not$i$i = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(1073741823);
 if ($2) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 128|0);
 $4 = HEAP8[$3>>0]|0;
 $$not$i$i = ($4<<24>>24)==(0);
 $5 = ($1>>>0)<(29);
 $or$cond$i$i = $5 & $$not$i$i;
 if ($or$cond$i$i) {
  $6 = ((($0)) + 16|0);
  HEAP8[$3>>0] = 1;
  $$0$i$i = $6;
 } else {
  $7 = $1 << 2;
  $8 = (__Znwj($7)|0);
  $$0$i$i = $8;
 }
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $$0$i$i;
 HEAP32[$0>>2] = $$0$i$i;
 $10 = (($$0$i$i) + ($1<<2)|0);
 $11 = ((($0)) + 8|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZNSt3__26locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32288]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(32288)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (__ZNSt3__26locale5__imp12make_classicEv()|0);
   HEAP32[10059] = 40232;
  }
 }
 $4 = HEAP32[10059]|0;
 return ($4|0);
}
function __ZNSt3__26locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impC2Ej(32296,1);
 HEAP32[10058] = 32296;
 return (40232|0);
}
function __ZNSt3__26locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__26locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[10060] = $1;
 __ZNSt3__214__shared_count12__add_sharedEv($1);
 return (40240|0);
}
function __ZNSt3__26locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[32456]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(32456)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (__ZNSt3__26locale5__imp11make_globalEv()|0);
   HEAP32[10061] = 40240;
  }
 }
 $4 = HEAP32[10061]|0;
 return ($4|0);
}
function __ZNSt3__26localeC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__26locale8__globalEv()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 __ZNSt3__214__shared_count12__add_sharedEv($2);
 return;
}
function __ZNSt3__26localeC2ERKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 __ZNSt3__214__shared_count12__add_sharedEv($2);
 return;
}
function __ZNSt3__26localeD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($1)|0);
 return;
}
function __ZNKSt3__26locale9has_facetERNS0_2idE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZNSt3__26locale2id5__getEv($1)|0);
 $4 = (__ZNKSt3__26locale5__imp9has_facetEl($2,$3)|0);
 return ($4|0);
}
function __ZNKSt3__26locale5__imp9has_facetEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($1>>>0);
 if ($8) {
  $9 = $5;
  $10 = (($9) + ($1<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = $12;
 } else {
  $13 = 0;
 }
 return ($13|0);
}
function __ZNSt3__214__shared_countD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__214__shared_count12__add_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+1)|0);
 return;
}
function __ZNSt3__214__shared_count16__release_sharedEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 255]($0);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((40248|0))|0);
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(1);
  if (!($4)) {
   break;
  }
  (_pthread_cond_wait((40276|0),(40248|0))|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$0>>2] = 1;
  (_pthread_mutex_unlock((40248|0))|0);
  FUNCTION_TABLE_vi[$2 & 255]($1);
  (_pthread_mutex_lock((40248|0))|0);
  HEAP32[$0>>2] = -1;
  (_pthread_mutex_unlock((40248|0))|0);
  (_pthread_cond_broadcast((40276|0))|0);
 } else {
  (_pthread_mutex_unlock((40248|0))|0);
 }
 return;
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $$lcssa = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$lcssa = $2;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 7]();
 }
 return ($$lcssa|0);
}
function __Znaj($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj($0)|0);
 return ($1|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZdaPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZSt17__throw_bad_allocv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((30784|0),(30813|0),1183,(30899|0));
 // unreachable;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((30920|0),(30813|0),1194,(30949|0));
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$5,$7);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016 = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $11 = $2&255;
  $12 = ((($0)) + 11|0);
  HEAP8[$12>>0] = $11;
  $13 = ($2|0)==(0);
  if ($13) {
   $$017 = $0;
  } else {
   $$016 = $0;
   label = 6;
  }
 } else {
  $5 = (($2) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = $6 | -2147483648;
  $9 = ((($0)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = ((($0)) + 4|0);
  HEAP32[$10>>2] = $2;
  $$016 = $7;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($$016|0),($1|0),($2|0))|0;
  $$017 = $$016;
 }
 $14 = (($$017) + ($2)|0);
 HEAP8[$14>>0] = 0;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016 = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)<(11);
 if ($4) {
  $11 = $1&255;
  $12 = ((($0)) + 11|0);
  HEAP8[$12>>0] = $11;
  $13 = ($1|0)==(0);
  if ($13) {
   $$017 = $0;
  } else {
   $$016 = $0;
   label = 6;
  }
 } else {
  $5 = (($1) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = $6 | -2147483648;
  $9 = ((($0)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = ((($0)) + 4|0);
  HEAP32[$10>>2] = $1;
  $$016 = $7;
  label = 6;
 }
 if ((label|0) == 6) {
  _memset(($$016|0),($2|0),($1|0))|0;
  $$017 = $$016;
 }
 $14 = (($$017) + ($1)|0);
 HEAP8[$14>>0] = 0;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $10 = $phitmp$i;
 } else {
  $10 = 10;
 }
 $9 = ($10>>>0)<($2>>>0);
 do {
  if ($9) {
   if ($5) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $4&255;
    $23 = $21;
   }
   $22 = (($2) - ($10))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$10,$22,$23,0,$23,$2,$1);
  } else {
   if ($5) {
    $11 = HEAP32[$0>>2]|0;
    $13 = $11;
   } else {
    $13 = $0;
   }
   $12 = ($2|0)==(0);
   if (!($12)) {
    _memmove(($13|0),($1|0),($2|0))|0;
   }
   $14 = (($13) + ($2)|0);
   HEAP8[$14>>0] = 0;
   $15 = HEAP8[$3>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$3>>0] = $18;
    break;
   }
  }
 } while(0);
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = (-18 - ($1))|0;
 $9 = ($8>>>0)<($2>>>0);
 if ($9) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $10 = ((($0)) + 11|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $24 = $13;
 } else {
  $24 = $0;
 }
 $14 = ($1>>>0)<(2147483623);
 if ($14) {
  $15 = (($2) + ($1))|0;
  $16 = $1 << 1;
  $17 = ($15>>>0)<($16>>>0);
  $$sroa$speculated = $17 ? $16 : $15;
  $18 = ($$sroa$speculated>>>0)<(11);
  $19 = (($$sroa$speculated) + 16)|0;
  $20 = $19 & -16;
  $phitmp = $18 ? 11 : $20;
  $21 = $phitmp;
 } else {
  $21 = -17;
 }
 $22 = (__Znwj($21)|0);
 $23 = ($4|0)==(0);
 if (!($23)) {
  _memcpy(($22|0),($24|0),($4|0))|0;
 }
 $25 = ($6|0)==(0);
 if (!($25)) {
  $26 = (($22) + ($4)|0);
  _memcpy(($26|0),($7|0),($6|0))|0;
 }
 $27 = (($3) - ($5))|0;
 $28 = (($27) - ($4))|0;
 $29 = ($28|0)==(0);
 if (!($29)) {
  $30 = (($22) + ($4)|0);
  $31 = (($30) + ($6)|0);
  $32 = (($24) + ($4)|0);
  $33 = (($32) + ($5)|0);
  _memcpy(($31|0),($33|0),($28|0))|0;
 }
 $34 = ($1|0)==(10);
 if (!($34)) {
  __ZdlPv($24);
 }
 HEAP32[$0>>2] = $22;
 $35 = $21 | -2147483648;
 $36 = ((($0)) + 8|0);
 HEAP32[$36>>2] = $35;
 $37 = (($27) + ($6))|0;
 $38 = ((($0)) + 4|0);
 HEAP32[$38>>2] = $37;
 $39 = (($22) + ($37)|0);
 HEAP8[$39>>0] = 0;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017$off041 = 0, $$017$off042 = 0, $$017$off047 = 0, $$018$off039 = 0, $$018$off046 = 0, $$01937 = 0, $$01938 = 0, $$01945 = 0, $$02035 = 0, $$02036 = 0, $$02044 = 0, $$phitmp$i = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $phitmp$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;$18 = $phitmp$i;
 } else {
  $11 = $4&255;
  $13 = $11;$18 = 10;
 }
 $12 = ($13>>>0)>($1>>>0);
 $$sroa$speculated = $12 ? $13 : $1;
 $14 = ($$sroa$speculated>>>0)<(11);
 $15 = (($$sroa$speculated) + 16)|0;
 $16 = $15 & -16;
 $phitmp$i22 = (($16) + -1)|0;
 $$phitmp$i = $14 ? 10 : $phitmp$i22;
 $17 = ($$phitmp$i|0)==($18|0);
 do {
  if (!($17)) {
   do {
    if ($14) {
     $22 = HEAP32[$0>>2]|0;
     if ($5) {
      $$017$off042 = 0;$$01938 = $22;$$02036 = $0;
      label = 12;
     } else {
      $$017$off047 = 0;$$018$off046 = 1;$$01945 = $22;$$02044 = $0;
      label = 13;
     }
    } else {
     $19 = (($$phitmp$i) + 1)|0;
     $20 = (__Znwj($19)|0);
     if ($5) {
      $21 = HEAP32[$0>>2]|0;
      $$017$off042 = 1;$$01938 = $21;$$02036 = $20;
      label = 12;
      break;
     } else {
      $$017$off047 = 1;$$018$off046 = 0;$$01945 = $0;$$02044 = $20;
      label = 13;
      break;
     }
    }
   } while(0);
   if ((label|0) == 12) {
    $23 = ((($0)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $$017$off041 = $$017$off042;$$018$off039 = 1;$$01937 = $$01938;$$02035 = $$02036;$27 = $24;
   }
   else if ((label|0) == 13) {
    $25 = $4&255;
    $$017$off041 = $$017$off047;$$018$off039 = $$018$off046;$$01937 = $$01945;$$02035 = $$02044;$27 = $25;
   }
   $26 = (($27) + 1)|0;
   $28 = ($26|0)==(0);
   if (!($28)) {
    _memcpy(($$02035|0),($$01937|0),($26|0))|0;
   }
   if ($$018$off039) {
    __ZdlPv($$01937);
   }
   if ($$017$off041) {
    $29 = (($$phitmp$i) + 1)|0;
    $30 = $29 | -2147483648;
    $31 = ((($0)) + 8|0);
    HEAP32[$31>>2] = $30;
    $32 = ((($0)) + 4|0);
    HEAP32[$32>>2] = $13;
    HEAP32[$0>>2] = $$02035;
    break;
   } else {
    $33 = $13&255;
    HEAP8[$3>>0] = $33;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $10 = $7;
 } else {
  $8 = $4&255;
  $10 = $8;
 }
 $9 = ($10>>>0)<($1>>>0);
 do {
  if ($9) {
   $11 = (($1) - ($10))|0;
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$11,$2)|0);
  } else {
   if ($5) {
    $12 = HEAP32[$0>>2]|0;
    $13 = (($12) + ($1)|0);
    HEAP8[$13>>0] = 0;
    $14 = ((($0)) + 4|0);
    HEAP32[$14>>2] = $1;
    break;
   } else {
    $15 = (($0) + ($1)|0);
    HEAP8[$15>>0] = 0;
    $16 = $1&255;
    HEAP8[$3>>0] = $16;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 11|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)<(0);
  if ($6) {
   $7 = ((($0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 & 2147483647;
   $phitmp$i = (($9) + -1)|0;
   $10 = ((($0)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $14 = $phitmp$i;$15 = $11;
  } else {
   $12 = $5&255;
   $14 = 10;$15 = $12;
  }
  $13 = (($14) - ($15))|0;
  $16 = ($13>>>0)<($1>>>0);
  if ($16) {
   $17 = (($1) - ($14))|0;
   $18 = (($17) + ($15))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$14,$18,$15,$15,0,0);
   $$pre = HEAP8[$4>>0]|0;
   $20 = $$pre;
  } else {
   $20 = $5;
  }
  $19 = ($20<<24>>24)<(0);
  if ($19) {
   $21 = HEAP32[$0>>2]|0;
   $23 = $21;
  } else {
   $23 = $0;
  }
  $22 = (($23) + ($15)|0);
  _memset(($22|0),($2|0),($1|0))|0;
  $24 = (($15) + ($1))|0;
  $25 = HEAP8[$4>>0]|0;
  $26 = ($25<<24>>24)<(0);
  if ($26) {
   $27 = ((($0)) + 4|0);
   HEAP32[$27>>2] = $24;
  } else {
   $28 = $24&255;
   HEAP8[$4>>0] = $28;
  }
  $29 = (($23) + ($24)|0);
  HEAP8[$29>>0] = 0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (-17 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $23 = $12;
 } else {
  $23 = $0;
 }
 $13 = ($1>>>0)<(2147483623);
 if ($13) {
  $14 = (($2) + ($1))|0;
  $15 = $1 << 1;
  $16 = ($14>>>0)<($15>>>0);
  $$sroa$speculated = $16 ? $15 : $14;
  $17 = ($$sroa$speculated>>>0)<(11);
  $18 = (($$sroa$speculated) + 16)|0;
  $19 = $18 & -16;
  $phitmp = $17 ? 11 : $19;
  $20 = $phitmp;
 } else {
  $20 = -17;
 }
 $21 = (__Znwj($20)|0);
 $22 = ($4|0)==(0);
 if (!($22)) {
  _memcpy(($21|0),($23|0),($4|0))|0;
 }
 $24 = (($3) - ($5))|0;
 $25 = (($24) - ($4))|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($21) + ($4)|0);
  $28 = (($27) + ($6)|0);
  $29 = (($23) + ($4)|0);
  $30 = (($29) + ($5)|0);
  _memcpy(($28|0),($30|0),($25|0))|0;
 }
 $31 = ($1|0)==(10);
 if (!($31)) {
  __ZdlPv($23);
 }
 HEAP32[$0>>2] = $21;
 $32 = $20 | -2147483648;
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = $32;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $phitmp$i;$14 = $10;
 } else {
  $11 = $4&255;
  $13 = 10;$14 = $11;
 }
 $12 = (($13) - ($14))|0;
 $15 = ($12>>>0)<($2>>>0);
 if ($15) {
  $26 = (($2) - ($13))|0;
  $27 = (($26) + ($14))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$13,$27,$14,$14,0,$2,$1);
 } else {
  $16 = ($2|0)==(0);
  if (!($16)) {
   if ($5) {
    $17 = HEAP32[$0>>2]|0;
    $19 = $17;
   } else {
    $19 = $0;
   }
   $18 = (($19) + ($14)|0);
   _memcpy(($18|0),($1|0),($2|0))|0;
   $20 = (($14) + ($2))|0;
   $21 = HEAP8[$3>>0]|0;
   $22 = ($21<<24>>24)<(0);
   if ($22) {
    $23 = ((($0)) + 4|0);
    HEAP32[$23>>2] = $20;
   } else {
    $24 = $20&255;
    HEAP8[$3>>0] = $24;
   }
   $25 = (($19) + ($20)|0);
   HEAP8[$25>>0] = 0;
  }
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $9 = (($8) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $$018 = $11;$$019 = $9;
 } else {
  $5 = $3&255;
  $$018 = $5;$$019 = 10;
 }
 $12 = ($$018|0)==($$019|0);
 if ($12) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$$019,1,$$019,$$019,0,0);
  $13 = HEAP8[$2>>0]|0;
  $14 = ($13<<24>>24)>(-1);
  if ($14) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($4) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $15 = (($$018) + 1)|0;
  $16 = $15&255;
  HEAP8[$2>>0] = $16;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $17 = HEAP32[$0>>2]|0;
  $18 = (($$018) + 1)|0;
  $19 = ((($0)) + 4|0);
  HEAP32[$19>>2] = $18;
  $$pn = $17;
 }
 $$0 = (($$pn) + ($$018)|0);
 HEAP8[$$0>>0] = $1;
 $20 = ((($$0)) + 1|0);
 HEAP8[$20>>0] = 0;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 } else {
  $9 = $5&255;
  $11 = $9;
 }
 $10 = ($11>>>0)<($1>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 if ($6) {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 2147483647;
  $phitmp$i = (($14) + -1)|0;
  $16 = $phitmp$i;
 } else {
  $16 = 10;
 }
 $15 = (($16) - ($11))|0;
 $17 = ($15>>>0)<($3>>>0);
 if ($17) {
  $34 = (($11) + ($3))|0;
  $35 = (($34) - ($16))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$16,$35,$11,$1,0,$3,$2);
 } else {
  $18 = ($3|0)==(0);
  if (!($18)) {
   if ($6) {
    $19 = HEAP32[$0>>2]|0;
    $22 = $19;
   } else {
    $22 = $0;
   }
   $20 = (($11) - ($1))|0;
   $21 = ($20|0)==(0);
   $$pre = (($22) + ($1)|0);
   if ($21) {
    $$1 = $2;
   } else {
    $23 = ($$pre>>>0)<=($2>>>0);
    $24 = (($22) + ($11)|0);
    $25 = ($24>>>0)>($2>>>0);
    $or$cond = $23 & $25;
    $26 = (($2) + ($3)|0);
    $$0 = $or$cond ? $26 : $2;
    $27 = (($$pre) + ($3)|0);
    _memmove(($27|0),($$pre|0),($20|0))|0;
    $$1 = $$0;
   }
   _memmove(($$pre|0),($$1|0),($3|0))|0;
   $28 = (($11) + ($3))|0;
   $29 = HEAP8[$4>>0]|0;
   $30 = ($29<<24>>24)<(0);
   if ($30) {
    $31 = ((($0)) + 4|0);
    HEAP32[$31>>2] = $28;
   } else {
    $32 = $28&255;
    HEAP8[$4>>0] = $32;
   }
   $33 = (($22) + ($28)|0);
   HEAP8[$33>>0] = 0;
  }
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($3>>>0)<(11);
 if ($5) {
  $6 = $2&255;
  $7 = ((($0)) + 11|0);
  HEAP8[$7>>0] = $6;
  $$0 = $0;
 } else {
  $8 = (($3) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $2;
  $$0 = $10;
 }
 $14 = ($2|0)==(0);
 if (!($14)) {
  _memcpy(($$0|0),($1|0),($2|0))|0;
 }
 $15 = (($$0) + ($2)|0);
 HEAP8[$15>>0] = 0;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(1073741807);
 if ($3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($2>>>0)<(2);
 do {
  if ($4) {
   $5 = $2&255;
   $6 = ((($0)) + 8|0);
   $7 = ((($6)) + 3|0);
   HEAP8[$7>>0] = $5;
   $$0 = $0;
  } else {
   $8 = (($2) + 4)|0;
   $9 = $8 & -4;
   $10 = ($9>>>0)>(1073741823);
   if ($10) {
    ___assert_fail((30970|0),(31007|0),1734,(31093|0));
    // unreachable;
   } else {
    $11 = $9 << 2;
    $12 = (__Znwj($11)|0);
    HEAP32[$0>>2] = $12;
    $13 = $9 | -2147483648;
    $14 = ((($0)) + 8|0);
    HEAP32[$14>>2] = $13;
    $15 = ((($0)) + 4|0);
    HEAP32[$15>>2] = $2;
    $$0 = $12;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$0,$1,$2)|0);
 $16 = (($$0) + ($2<<2)|0);
 HEAP32[$16>>2] = 0;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(1073741807);
 if ($3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)<(2);
 do {
  if ($4) {
   $5 = $1&255;
   $6 = ((($0)) + 8|0);
   $7 = ((($6)) + 3|0);
   HEAP8[$7>>0] = $5;
   $$0 = $0;
  } else {
   $8 = (($1) + 4)|0;
   $9 = $8 & -4;
   $10 = ($9>>>0)>(1073741823);
   if ($10) {
    ___assert_fail((30970|0),(31007|0),1734,(31093|0));
    // unreachable;
   } else {
    $11 = $9 << 2;
    $12 = (__Znwj($11)|0);
    HEAP32[$0>>2] = $12;
    $13 = $9 | -2147483648;
    $14 = ((($0)) + 8|0);
    HEAP32[$14>>2] = $13;
    $15 = ((($0)) + 4|0);
    HEAP32[$15>>2] = $1;
    $$0 = $12;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE6assignEPwjw($$0,$1,$2)|0);
 $16 = (($$0) + ($1<<2)|0);
 HEAP32[$16>>2] = 0;
 return;
}
function __ZNSt3__211char_traitsIwE6assignEPwjw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemset($0,$2,$1)|0);
  $5 = $4;
 }
 return ($5|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  __ZdlPv($5);
 }
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $10 = $phitmp$i;
 } else {
  $10 = 1;
 }
 $9 = ($10>>>0)<($2>>>0);
 do {
  if ($9) {
   if ($6) {
    $18 = ((($0)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $22 = $19;
   } else {
    $20 = $5&255;
    $22 = $20;
   }
   $21 = (($2) - ($10))|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0,$10,$21,$22,0,$22,$2,$1);
  } else {
   if ($6) {
    $11 = HEAP32[$0>>2]|0;
    $12 = $11;
   } else {
    $12 = $0;
   }
   (__ZNSt3__211char_traitsIwE4moveEPwPKwj($12,$1,$2)|0);
   $13 = (($12) + ($2<<2)|0);
   HEAP32[$13>>2] = 0;
   $14 = HEAP8[$4>>0]|0;
   $15 = ($14<<24>>24)<(0);
   if ($15) {
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $2;
    break;
   } else {
    $17 = $2&255;
    HEAP8[$4>>0] = $17;
    break;
   }
  }
 } while(0);
 return ($0|0);
}
function __ZNSt3__211char_traitsIwE4moveEPwPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemmove($0,$1,$2)|0);
  $5 = $4;
 }
 return ($5|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = (1073741806 - ($1))|0;
 $9 = ($8>>>0)<($2>>>0);
 if ($9) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $10 = ((($0)) + 8|0);
 $11 = ((($10)) + 3|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $28 = $14;
 } else {
  $28 = $0;
 }
 $15 = ($1>>>0)<(536870887);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(2);
  $20 = (($$sroa$speculated) + 4)|0;
  $21 = $20 & -4;
  $22 = $19 ? 2 : $21;
  $23 = ($22>>>0)>(1073741823);
  if ($23) {
   ___assert_fail((30970|0),(31007|0),1734,(31093|0));
   // unreachable;
  } else {
   $25 = $22;
  }
 } else {
  $25 = 1073741807;
 }
 $24 = $25 << 2;
 $26 = (__Znwj($24)|0);
 $27 = ($4|0)==(0);
 if (!($27)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($26,$28,$4)|0);
 }
 $29 = ($6|0)==(0);
 if (!($29)) {
  $30 = (($26) + ($4<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($30,$7,$6)|0);
 }
 $31 = (($3) - ($5))|0;
 $32 = (($31) - ($4))|0;
 $33 = ($32|0)==(0);
 if (!($33)) {
  $34 = (($28) + ($4<<2)|0);
  $35 = (($34) + ($5<<2)|0);
  $36 = (($26) + ($4<<2)|0);
  $37 = (($36) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($37,$35,$32)|0);
 }
 $38 = ($1|0)==(1);
 if (!($38)) {
  __ZdlPv($28);
 }
 HEAP32[$0>>2] = $26;
 $39 = $25 | -2147483648;
 HEAP32[$10>>2] = $39;
 $40 = (($31) + ($6))|0;
 $41 = ((($0)) + 4|0);
 HEAP32[$41>>2] = $40;
 $42 = (($26) + ($40<<2)|0);
 HEAP32[$42>>2] = 0;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017$off042 = 0, $$01938 = 0, $$020355154 = 0, $$02036 = 0, $$phitmp$i = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp$i = 0, $phitmp$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(1073741807);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 8|0);
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;$18 = $phitmp$i;
 } else {
  $11 = $5&255;
  $13 = $11;$18 = 1;
 }
 $12 = ($13>>>0)>($1>>>0);
 $$sroa$speculated = $12 ? $13 : $1;
 $14 = ($$sroa$speculated>>>0)<(2);
 $15 = (($$sroa$speculated) + 4)|0;
 $16 = $15 & -4;
 $phitmp$i22 = (($16) + -1)|0;
 $$phitmp$i = $14 ? 1 : $phitmp$i22;
 $17 = ($$phitmp$i|0)==($18|0);
 do {
  if (!($17)) {
   do {
    if ($14) {
     $24 = HEAP32[$0>>2]|0;
     if ($6) {
      $$017$off042 = 0;$$01938 = $24;$$02036 = $0;
      label = 15;
     } else {
      $25 = $5&255;
      $26 = (($25) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwj($0,$24,$26)|0);
      __ZdlPv($24);
      label = 17;
     }
    } else {
     $19 = (($$phitmp$i) + 1)|0;
     $20 = ($19>>>0)>(1073741823);
     if ($20) {
      ___assert_fail((30970|0),(31007|0),1734,(31093|0));
      // unreachable;
     }
     $21 = $19 << 2;
     $22 = (__Znwj($21)|0);
     if ($6) {
      $23 = HEAP32[$0>>2]|0;
      $$017$off042 = 1;$$01938 = $23;$$02036 = $22;
      label = 15;
      break;
     } else {
      $27 = $5&255;
      $28 = (($27) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwj($22,$0,$28)|0);
      $$020355154 = $22;
      label = 16;
      break;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $29 = ((($0)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 1)|0;
    (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$02036,$$01938,$31)|0);
    __ZdlPv($$01938);
    if ($$017$off042) {
     $$020355154 = $$02036;
     label = 16;
    } else {
     label = 17;
    }
   }
   if ((label|0) == 16) {
    $32 = (($$phitmp$i) + 1)|0;
    $33 = $32 | -2147483648;
    HEAP32[$3>>2] = $33;
    $34 = ((($0)) + 4|0);
    HEAP32[$34>>2] = $13;
    HEAP32[$0>>2] = $$020355154;
    break;
   }
   else if ((label|0) == 17) {
    $35 = $13&255;
    HEAP8[$4>>0] = $35;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_wcslen($1)|0);
 $3 = (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (1073741807 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = ((($9)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $27 = $13;
 } else {
  $27 = $0;
 }
 $14 = ($1>>>0)<(536870887);
 if ($14) {
  $15 = (($2) + ($1))|0;
  $16 = $1 << 1;
  $17 = ($15>>>0)<($16>>>0);
  $$sroa$speculated = $17 ? $16 : $15;
  $18 = ($$sroa$speculated>>>0)<(2);
  $19 = (($$sroa$speculated) + 4)|0;
  $20 = $19 & -4;
  $21 = $18 ? 2 : $20;
  $22 = ($21>>>0)>(1073741823);
  if ($22) {
   ___assert_fail((30970|0),(31007|0),1734,(31093|0));
   // unreachable;
  } else {
   $24 = $21;
  }
 } else {
  $24 = 1073741807;
 }
 $23 = $24 << 2;
 $25 = (__Znwj($23)|0);
 $26 = ($4|0)==(0);
 if (!($26)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($25,$27,$4)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($27) + ($4<<2)|0);
  $32 = (($31) + ($5<<2)|0);
  $33 = (($25) + ($4<<2)|0);
  $34 = (($33) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($34,$32,$29)|0);
 }
 $35 = ($1|0)==(1);
 if (!($35)) {
  __ZdlPv($27);
 }
 HEAP32[$0>>2] = $25;
 $36 = $24 | -2147483648;
 HEAP32[$9>>2] = $36;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $7 = HEAP32[$2>>2]|0;
  $8 = $7 & 2147483647;
  $9 = (($8) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $$018 = $11;$$019 = $9;
 } else {
  $6 = $4&255;
  $$018 = $6;$$019 = 1;
 }
 $12 = ($$018|0)==($$019|0);
 if ($12) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$$019,1,$$019,$$019,0,0);
  $13 = HEAP8[$3>>0]|0;
  $14 = ($13<<24>>24)>(-1);
  if ($14) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($5) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $15 = (($$018) + 1)|0;
  $16 = $15&255;
  HEAP8[$3>>0] = $16;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $17 = HEAP32[$0>>2]|0;
  $18 = (($$018) + 1)|0;
  $19 = ((($0)) + 4|0);
  HEAP32[$19>>2] = $18;
  $$pn = $17;
 }
 $$0 = (($$pn) + ($$018<<2)|0);
 HEAP32[$$0>>2] = $1;
 $20 = ((($$0)) + 4|0);
 HEAP32[$20>>2] = 0;
 return;
}
function __ZNSt3__29to_stringEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0$i$i$i = 0, $$0$i$i$i1 = 0, $$017$i = 0, $$017$ph$i = 0, $$2$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i2 = 0, $phitmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = sp + 4|0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i$i = 0;
 while(1) {
  $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
  if ($exitcond$i$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i$i) + 1)|0;
  $$0$i$i$i = $4;
 }
 $5 = ((($2)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($2)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 2147483647;
  $phitmp$i$i = (($10) + -1)|0;
  $11 = $phitmp$i$i;
 } else {
  $11 = 10;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($2,$11,0);
 $12 = HEAP8[$5>>0]|0;
 $13 = ($12<<24>>24)<(0);
 $14 = $12&255;
 $15 = ((($2)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $$017$ph$i = $13 ? $16 : $14;
 $$017$i = $$017$ph$i;$18 = $12;
 while(1) {
  $17 = ($18<<24>>24)<(0);
  $19 = HEAP32[$2>>2]|0;
  $$ = $17 ? $19 : $2;
  $20 = (($$017$i) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $1;
  $21 = (_snprintf($$,$20,31102,$vararg_buffer)|0);
  $22 = ($21|0)>(-1);
  if ($22) {
   $23 = ($21>>>0)>($$017$i>>>0);
   if ($23) {
    $$2$i = $21;
   } else {
    break;
   }
  } else {
   $24 = $$017$i << 1;
   $25 = $24 | 1;
   $$2$i = $25;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($2,$$2$i,0);
  $$pre$i = HEAP8[$5>>0]|0;
  $$017$i = $$2$i;$18 = $$pre$i;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($2,$21,0);
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;
 $$0$i$i$i1 = 0;
 while(1) {
  $exitcond$i$i$i2 = ($$0$i$i$i1|0)==(3);
  if ($exitcond$i$i$i2) {
   break;
  }
  $26 = (($2) + ($$0$i$i$i1<<2)|0);
  HEAP32[$26>>2] = 0;
  $27 = (($$0$i$i$i1) + 1)|0;
  $$0$i$i$i1 = $27;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    $37 = HEAP32[3195]|0;
    HEAP32[$vararg_buffer7>>2] = $37;
    _abort_message(31191,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[360]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 31](1440,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[3195]|0;
    $32 = HEAP32[$30>>2]|0;
    $33 = ((($32)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 127]($30)|0);
    HEAP32[$vararg_buffer>>2] = $31;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $35;
    _abort_message(31105,$vararg_buffer);
    // unreachable;
   } else {
    $36 = HEAP32[3195]|0;
    HEAP32[$vararg_buffer3>>2] = $36;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(31150,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(31229,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((40324|0),(7|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[10082]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(31380,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[1466]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,1464,1448,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 63]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if ($15) {
    $16 = ((($1)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==($2|0);
    if (!($18)) {
     $19 = ((($1)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==($2|0);
     if (!($21)) {
      $24 = ((($1)) + 32|0);
      HEAP32[$24>>2] = $3;
      HEAP32[$19>>2] = $2;
      $25 = ((($1)) + 40|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + 1)|0;
      HEAP32[$25>>2] = $27;
      $28 = ((($1)) + 36|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(1);
      if ($30) {
       $31 = ((($1)) + 24|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($32|0)==(2);
       if ($33) {
        $34 = ((($1)) + 54|0);
        HEAP8[$34>>0] = 1;
       }
      }
      $35 = ((($1)) + 44|0);
      HEAP32[$35>>2] = 4;
      break;
     }
    }
    $22 = ($3|0)==(1);
    if ($22) {
     $23 = ((($1)) + 32|0);
     HEAP32[$23>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $17 & $18;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $28 = $4;
   } else {
    $28 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $27 = ($28|0)==(1);
   $or$cond22 = $26 & $27;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 $20 = ($10|0)==($2|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 15]($2,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 15]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 15]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if (!($15)) {
    $49 = ((($0)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 24|0);
    $53 = HEAP32[$52>>2]|0;
    FUNCTION_TABLE_viiiii[$53 & 15]($50,$1,$2,$3,$4);
    break;
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   if (!($18)) {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($2|0);
    if (!($21)) {
     $24 = ((($1)) + 32|0);
     HEAP32[$24>>2] = $3;
     $25 = ((($1)) + 44|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(4);
     if ($27) {
      break;
     }
     $28 = ((($1)) + 52|0);
     HEAP8[$28>>0] = 0;
     $29 = ((($1)) + 53|0);
     HEAP8[$29>>0] = 0;
     $30 = ((($0)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($32)) + 20|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_viiiiii[$34 & 15]($31,$1,$2,$2,1,$4);
     $35 = HEAP8[$29>>0]|0;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $$037$off039 = 0;
      label = 13;
     } else {
      $37 = HEAP8[$28>>0]|0;
      $not$ = ($37<<24>>24)==(0);
      if ($not$) {
       $$037$off039 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$19>>2] = $2;
       $38 = ((($1)) + 40|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (($39) + 1)|0;
       HEAP32[$38>>2] = $40;
       $41 = ((($1)) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(1);
       if ($43) {
        $44 = ((($1)) + 24|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45|0)==(2);
        if ($46) {
         $47 = ((($1)) + 54|0);
         HEAP8[$47>>0] = 1;
         if ($$037$off039) {
          label = 17;
          break;
         } else {
          $48 = 4;
          break;
         }
        }
       }
       if ($$037$off039) {
        label = 17;
       } else {
        $48 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $48 = 3;
     }
     HEAP32[$25>>2] = $48;
     break;
    }
   }
   $22 = ($3|0)==(1);
   if ($22) {
    $23 = ((($1)) + 32|0);
    HEAP32[$23>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 63]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((40328|0),(158|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(31429,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[10082]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(31479,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = ((($2)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($17);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$0 & 7]();
 _abort_message(31532,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3194]|0;HEAP32[3194] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (31572|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt8bad_cast4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (31600|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&255;
  $12 = ((($1)) + 53|0);
  $13 = ($10&65535) >>> 8;
  $14 = $13&255;
  $15 = ((($0)) + 16|0);
  $16 = ((($0)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (((($0)) + 16|0) + ($17<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$12>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($15,$1,$2,$3,$4,$5);
  $19 = ($17|0)>(1);
  L4: do {
   if ($19) {
    $20 = ((($0)) + 24|0);
    $21 = ((($1)) + 24|0);
    $22 = ((($0)) + 8|0);
    $23 = ((($1)) + 54|0);
    $$0 = $20;
    while(1) {
     $24 = HEAP8[$23>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if (!($25)) {
      break L4;
     }
     $26 = HEAP16[$9>>1]|0;
     $27 = $26&255;
     $28 = ($27<<24>>24)==(0);
     if ($28) {
      $34 = ($26&65535)<(256);
      if (!($34)) {
       $35 = HEAP32[$22>>2]|0;
       $36 = $35 & 1;
       $37 = ($36|0)==(0);
       if ($37) {
        break L4;
       }
      }
     } else {
      $29 = HEAP32[$21>>2]|0;
      $30 = ($29|0)==(1);
      if ($30) {
       break L4;
      }
      $31 = HEAP32[$22>>2]|0;
      $32 = $31 & 2;
      $33 = ($32|0)==(0);
      if ($33) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$12>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $38 = ((($$0)) + 8|0);
     $39 = ($38>>>0)<($18>>>0);
     if ($39) {
      $$0 = $38;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $11;
  HEAP8[$12>>0] = $14;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 L1: do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if (!($15)) {
    $62 = ((($0)) + 16|0);
    $63 = ((($0)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (((($0)) + 16|0) + ($64<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($62,$1,$2,$3,$4);
    $66 = ((($0)) + 24|0);
    $67 = ($64|0)>(1);
    if (!($67)) {
     break;
    }
    $68 = ((($0)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69 & 2;
    $71 = ($70|0)==(0);
    if ($71) {
     $72 = ((($1)) + 36|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==(1);
     if (!($74)) {
      $80 = $69 & 1;
      $81 = ($80|0)==(0);
      if ($81) {
       $84 = ((($1)) + 54|0);
       $$2 = $66;
       while(1) {
        $93 = HEAP8[$84>>0]|0;
        $94 = ($93<<24>>24)==(0);
        if (!($94)) {
         break L1;
        }
        $95 = HEAP32[$72>>2]|0;
        $96 = ($95|0)==(1);
        if ($96) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $97 = ((($$2)) + 8|0);
        $98 = ($97>>>0)<($65>>>0);
        if ($98) {
         $$2 = $97;
        } else {
         break L1;
        }
       }
      }
      $82 = ((($1)) + 24|0);
      $83 = ((($1)) + 54|0);
      $$1 = $66;
      while(1) {
       $85 = HEAP8[$83>>0]|0;
       $86 = ($85<<24>>24)==(0);
       if (!($86)) {
        break L1;
       }
       $87 = HEAP32[$72>>2]|0;
       $88 = ($87|0)==(1);
       if ($88) {
        $89 = HEAP32[$82>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $91 = ((($$1)) + 8|0);
       $92 = ($91>>>0)<($65>>>0);
       if ($92) {
        $$1 = $91;
       } else {
        break L1;
       }
      }
     }
    }
    $75 = ((($1)) + 54|0);
    $$0 = $66;
    while(1) {
     $76 = HEAP8[$75>>0]|0;
     $77 = ($76<<24>>24)==(0);
     if (!($77)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $78 = ((($$0)) + 8|0);
     $79 = ($78>>>0)<($65>>>0);
     if ($79) {
      $$0 = $78;
     } else {
      break L1;
     }
    }
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   if (!($18)) {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($2|0);
    if (!($21)) {
     $24 = ((($1)) + 32|0);
     HEAP32[$24>>2] = $3;
     $25 = ((($1)) + 44|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(4);
     if ($27) {
      break;
     }
     $28 = ((($0)) + 16|0);
     $29 = ((($0)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (((($0)) + 16|0) + ($30<<3)|0);
     $32 = ((($1)) + 52|0);
     $33 = ((($1)) + 53|0);
     $34 = ((($1)) + 54|0);
     $35 = ((($0)) + 8|0);
     $36 = ((($1)) + 24|0);
     $$081$off0 = 0;$$084 = $28;$$085$off0 = 0;
     L34: while(1) {
      $37 = ($$084>>>0)<($31>>>0);
      if (!($37)) {
       $$283$off0 = $$081$off0;
       label = 20;
       break;
      }
      HEAP8[$32>>0] = 0;
      HEAP8[$33>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $38 = HEAP8[$34>>0]|0;
      $39 = ($38<<24>>24)==(0);
      if (!($39)) {
       $$283$off0 = $$081$off0;
       label = 20;
       break;
      }
      $40 = HEAP8[$33>>0]|0;
      $41 = ($40<<24>>24)==(0);
      do {
       if ($41) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $42 = HEAP8[$32>>0]|0;
        $43 = ($42<<24>>24)==(0);
        if ($43) {
         $49 = HEAP32[$35>>2]|0;
         $50 = $49 & 1;
         $51 = ($50|0)==(0);
         if ($51) {
          $$283$off0 = 1;
          label = 20;
          break L34;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $44 = HEAP32[$36>>2]|0;
        $45 = ($44|0)==(1);
        if ($45) {
         label = 25;
         break L34;
        }
        $46 = HEAP32[$35>>2]|0;
        $47 = $46 & 2;
        $48 = ($47|0)==(0);
        if ($48) {
         label = 25;
         break L34;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $52 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $52;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 20) {
       if (!($$085$off0)) {
        HEAP32[$19>>2] = $2;
        $53 = ((($1)) + 40|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = (($54) + 1)|0;
        HEAP32[$53>>2] = $55;
        $56 = ((($1)) + 36|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = ($57|0)==(1);
        if ($58) {
         $59 = HEAP32[$36>>2]|0;
         $60 = ($59|0)==(2);
         if ($60) {
          HEAP8[$34>>0] = 1;
          if ($$283$off0) {
           label = 25;
           break;
          } else {
           $61 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 25;
       } else {
        $61 = 4;
       }
      }
     } while(0);
     if ((label|0) == 25) {
      $61 = 3;
     }
     HEAP32[$25>>2] = $61;
     break;
    }
   }
   $22 = ($3|0)==(1);
   if ($22) {
    $23 = ((($1)) + 32|0);
    HEAP32[$23>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)!=(0);
 $19 = $18 ? $3 : 2;
 FUNCTION_TABLE_viiii[$15 & 63]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)!=(0);
 $21 = $20 ? $4 : 2;
 FUNCTION_TABLE_viiiiii[$17 & 15]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)!=(0);
 $20 = $19 ? $3 : 2;
 FUNCTION_TABLE_viiiii[$16 & 15]($13,$1,$17,$20,$4);
 return;
}
function __ZNSt8bad_castC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (12892);
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP8[$0>>0] = 1;
  $$0 = 1;
 }
 return ($$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (12872);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10083]|0;HEAP32[10083] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 31]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (___dynamic_cast($0,1464,1552,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $4 = $phitmp;
 }
 $3 = $4&1;
 return ($3|0);
}
function runPostSets() {
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _round(d) {
    d = +d;
    return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _pthread_cond_broadcast(x) {
    x = x | 0;
    return 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_vd(index,a1) {
  index = index|0;
  a1=+a1;
  FUNCTION_TABLE_vd[index&3](+a1);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&3](a1|0,+a2);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_viddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viddd[index&3](a1|0,+a2,+a3,+a4);
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&7](a1|0,+a2,+a3);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&1](a1|0,a2|0,+a3);
}


function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vidddd[index&3](a1|0,+a2,+a3,+a4,+a5);
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&3]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  FUNCTION_TABLE_vdddddd[index&1](+a1,+a2,+a3,+a4,+a5,+a6);
}


function dynCall_vdddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_vdddd[index&3](+a1,+a2,+a3,+a4);
}


function dynCall_vdd(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=+a2;
  FUNCTION_TABLE_vdd[index&3](+a1,+a2);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&7]();
}


function dynCall_vdi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  FUNCTION_TABLE_vdi[index&1](+a1,a2|0);
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&7](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(1);return 0;
}
function b2(p0) {
 p0 = +p0; nullFunc_vd(2);
}
function _emscripten_glClearDepth__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepth(+p0);
}
function _emscripten_glClearDepthf__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepthf(+p0);
}
function _emscripten_glLineWidth__wrapper(p0) {
 p0 = +p0; _emscripten_glLineWidth(+p0);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(3);
}
function _emscripten_glUniform1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glUniform1f(p0|0,+p1);
}
function _emscripten_glVertexAttrib1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glVertexAttrib1f(p0|0,+p1);
}
function b4(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(4);
}
function _emscripten_glUniform4i__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glUniform4i(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glFramebufferTexture2D__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glFramebufferTexture2D(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glShaderBinary__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glShaderBinary(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glDrawElementsInstanced__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glDrawElementsInstanced(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function b5(p0) {
 p0 = p0|0; nullFunc_vi(5);
}
function _emscripten_glDeleteShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteShader(p0|0);
}
function _emscripten_glCompileShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glCompileShader(p0|0);
}
function _emscripten_glDeleteProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteProgram(p0|0);
}
function _emscripten_glLinkProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glLinkProgram(p0|0);
}
function _emscripten_glUseProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glUseProgram(p0|0);
}
function _emscripten_glValidateProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glValidateProgram(p0|0);
}
function _emscripten_glDeleteObjectARB__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteObjectARB(p0|0);
}
function _emscripten_glEnableClientState__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableClientState(p0|0);
}
function _emscripten_glClientActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glClientActiveTexture(p0|0);
}
function _emscripten_glBindVertexArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glBindVertexArray(p0|0);
}
function _emscripten_glMatrixMode__wrapper(p0) {
 p0 = p0|0; _emscripten_glMatrixMode(p0|0);
}
function _emscripten_glLoadMatrixf__wrapper(p0) {
 p0 = p0|0; _emscripten_glLoadMatrixf(p0|0);
}
function _emscripten_glEnableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableVertexAttribArray(p0|0);
}
function _emscripten_glDisableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisableVertexAttribArray(p0|0);
}
function _emscripten_glDepthFunc__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthFunc(p0|0);
}
function _emscripten_glEnable__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnable(p0|0);
}
function _emscripten_glDisable__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisable(p0|0);
}
function _emscripten_glFrontFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glFrontFace(p0|0);
}
function _emscripten_glCullFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glCullFace(p0|0);
}
function _emscripten_glClear__wrapper(p0) {
 p0 = p0|0; _emscripten_glClear(p0|0);
}
function _emscripten_glClearStencil__wrapper(p0) {
 p0 = p0|0; _emscripten_glClearStencil(p0|0);
}
function _emscripten_glDepthMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthMask(p0|0);
}
function _emscripten_glStencilMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glStencilMask(p0|0);
}
function _emscripten_glGenerateMipmap__wrapper(p0) {
 p0 = p0|0; _emscripten_glGenerateMipmap(p0|0);
}
function _emscripten_glActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glActiveTexture(p0|0);
}
function _emscripten_glBlendEquation__wrapper(p0) {
 p0 = p0|0; _emscripten_glBlendEquation(p0|0);
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(6);
}
function _emscripten_glPixelStorei__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glPixelStorei(p0|0,p1|0);
}
function _emscripten_glGetIntegerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetIntegerv(p0|0,p1|0);
}
function _emscripten_glGetFloatv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetFloatv(p0|0,p1|0);
}
function _emscripten_glGetBooleanv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetBooleanv(p0|0,p1|0);
}
function _emscripten_glGenTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenTextures(p0|0,p1|0);
}
function _emscripten_glDeleteTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteTextures(p0|0,p1|0);
}
function _emscripten_glBindTexture__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindTexture(p0|0,p1|0);
}
function _emscripten_glGenBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenBuffers(p0|0,p1|0);
}
function _emscripten_glDeleteBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteBuffers(p0|0,p1|0);
}
function _emscripten_glGenRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenRenderbuffers(p0|0,p1|0);
}
function _emscripten_glDeleteRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteRenderbuffers(p0|0,p1|0);
}
function _emscripten_glBindRenderbuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindRenderbuffer(p0|0,p1|0);
}
function _emscripten_glUniform1i__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glUniform1i(p0|0,p1|0);
}
function _emscripten_glBindBuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindBuffer(p0|0,p1|0);
}
function _emscripten_glVertexAttrib1fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib1fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib2fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib2fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib3fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib3fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib4fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib4fv(p0|0,p1|0);
}
function _emscripten_glAttachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glAttachShader(p0|0,p1|0);
}
function _emscripten_glDetachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDetachShader(p0|0,p1|0);
}
function _emscripten_glBindFramebuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindFramebuffer(p0|0,p1|0);
}
function _emscripten_glGenFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenFramebuffers(p0|0,p1|0);
}
function _emscripten_glDeleteFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteFramebuffers(p0|0,p1|0);
}
function _emscripten_glBindProgramARB__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindProgramARB(p0|0,p1|0);
}
function _emscripten_glGetPointerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetPointerv(p0|0,p1|0);
}
function _emscripten_glGenVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenVertexArrays(p0|0,p1|0);
}
function _emscripten_glDeleteVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteVertexArrays(p0|0,p1|0);
}
function _emscripten_glVertexAttribDivisor__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttribDivisor(p0|0,p1|0);
}
function _emscripten_glBlendFunc__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendFunc(p0|0,p1|0);
}
function _emscripten_glBlendEquationSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendEquationSeparate(p0|0,p1|0);
}
function _emscripten_glStencilMaskSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glStencilMaskSeparate(p0|0,p1|0);
}
function _emscripten_glHint__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glHint(p0|0,p1|0);
}
function _emscripten_glDrawBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDrawBuffers(p0|0,p1|0);
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(7);return 0;
}
function b8(p0) {
 p0 = p0|0; nullFunc_ii(8);return 0;
}
function _emscripten_glGetString__wrapper(p0) {
 p0 = p0|0; return _emscripten_glGetString(p0|0)|0;
}
function _emscripten_glIsTexture__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsTexture(p0|0)|0;
}
function _emscripten_glIsBuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsBuffer(p0|0)|0;
}
function _emscripten_glIsRenderbuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsRenderbuffer(p0|0)|0;
}
function _emscripten_glCreateShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCreateShader(p0|0)|0;
}
function _emscripten_glIsShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsShader(p0|0)|0;
}
function _emscripten_glIsProgram__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsProgram(p0|0)|0;
}
function _emscripten_glIsFramebuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsFramebuffer(p0|0)|0;
}
function _emscripten_glCheckFramebufferStatus__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCheckFramebufferStatus(p0|0)|0;
}
function _emscripten_glIsEnabled__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsEnabled(p0|0)|0;
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_viddd(9);
}
function _emscripten_glUniform3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glUniform3f(p0|0,+p1,+p2,+p3);
}
function _emscripten_glVertexAttrib3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glVertexAttrib3f(p0|0,+p1,+p2,+p3);
}
function b10(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(10);return 0;
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(11);
}
function _emscripten_glUniform2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glUniform2f(p0|0,+p1,+p2);
}
function _emscripten_glVertexAttrib2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glVertexAttrib2f(p0|0,+p1,+p2);
}
function b12(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(12);return 0;
}
function b13(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(13);
}
function _emscripten_glCompressedTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCompressedTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function b14(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(14);
}
function _emscripten_glDrawRangeElements__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glDrawRangeElements(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function _emscripten_glVertexAttribPointer__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glVertexAttribPointer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function b15(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(15);
}
function _emscripten_glGetTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetBufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetBufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetRenderbufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetRenderbufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribPointerv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribPointerv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2i__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2i(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4fv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetShaderiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetShaderiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetProgramiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetProgramiv(p0|0,p1|0,p2|0);
}
function _emscripten_glBindAttribLocation__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glBindAttribLocation(p0|0,p1|0,p2|0);
}
function _emscripten_glGetObjectParameterivARB__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetObjectParameterivARB(p0|0,p1|0,p2|0);
}
function _emscripten_glNormalPointer__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glNormalPointer(p0|0,p1|0,p2|0);
}
function _emscripten_glDrawArrays__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glDrawArrays(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteri__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteri(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilFunc__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilFunc(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilOp__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilOp(p0|0,p1|0,p2|0);
}
function b16(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(16);
}
function _emscripten_glTexParameterf__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; _emscripten_glTexParameterf(p0|0,p1|0,+p2);
}
function b17(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_vidddd(17);
}
function _emscripten_glUniform4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glUniform4f(p0|0,+p1,+p2,+p3,+p4);
}
function _emscripten_glVertexAttrib4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glVertexAttrib4f(p0|0,+p1,+p2,+p3,+p4);
}
function b18(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(18);return 0;
}
function b19(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(19);
}
function _emscripten_glReadPixels__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glReadPixels(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveUniform__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveUniform(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveAttrib__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveAttrib(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function b20(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(20);
}
function _emscripten_glCompressedTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glCompressedTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function b21(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(21);return 0;
}
function _emscripten_glGetUniformLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetUniformLocation(p0|0,p1|0)|0;
}
function _emscripten_glGetAttribLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetAttribLocation(p0|0,p1|0)|0;
}
function b22() {
 ; nullFunc_i(22);return 0;
}
function _emscripten_glCreateProgram__wrapper() {
 ; return _emscripten_glCreateProgram()|0;
}
function _emscripten_glGetError__wrapper() {
 ; return _emscripten_glGetError()|0;
}
function b23(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(23);return 0;
}
function b24(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_vdddddd(24);
}
function _emscripten_glFrustum__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; _emscripten_glFrustum(+p0,+p1,+p2,+p3,+p4,+p5);
}
function b25(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_vdddd(25);
}
function _emscripten_glRotatef__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glRotatef(+p0,+p1,+p2,+p3);
}
function _emscripten_glClearColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glClearColor(+p0,+p1,+p2,+p3);
}
function _emscripten_glBlendColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glBlendColor(+p0,+p1,+p2,+p3);
}
function b26(p0,p1) {
 p0 = +p0;p1 = +p1; nullFunc_vdd(26);
}
function _emscripten_glDepthRange__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRange(+p0,+p1);
}
function _emscripten_glDepthRangef__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRangef(+p0,+p1);
}
function _emscripten_glPolygonOffset__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glPolygonOffset(+p0,+p1);
}
function b27() {
 ; nullFunc_v(27);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function _emscripten_glLoadIdentity__wrapper() {
 ; _emscripten_glLoadIdentity();
}
function _emscripten_glReleaseShaderCompiler__wrapper() {
 ; _emscripten_glReleaseShaderCompiler();
}
function _emscripten_glFinish__wrapper() {
 ; _emscripten_glFinish();
}
function _emscripten_glFlush__wrapper() {
 ; _emscripten_glFlush();
}
function b28(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_vdi(28);
}
function _emscripten_glSampleCoverage__wrapper(p0,p1) {
 p0 = +p0;p1 = p1|0; _emscripten_glSampleCoverage(+p0,p1|0);
}
function b29(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(29);return 0;
}
function b30(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(30);
}
function _emscripten_glBufferData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBufferSubData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferSubData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniform3i__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniform3i(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix2fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix2fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix3fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix3fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix4fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix4fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetAttachedShaders__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetAttachedShaders(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderPrecisionFormat__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderPrecisionFormat(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetProgramInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glFramebufferRenderbuffer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glFramebufferRenderbuffer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetFramebufferAttachmentParameteriv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetFramebufferAttachmentParameteriv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetInfoLogARB__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetInfoLogARB(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glVertexPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glVertexPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glTexCoordPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glTexCoordPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawElements__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawElements(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawArraysInstanced__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawArraysInstanced(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glViewport__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glViewport(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glScissor__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glScissor(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorMask__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorMask(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glRenderbufferStorage__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glRenderbufferStorage(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBlendFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBlendFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilOpSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilOpSeparate(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0];
var FUNCTION_TABLE_iiiiiid = [b1,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b1];
var FUNCTION_TABLE_vd = [b2,_emscripten_glClearDepth__wrapper,_emscripten_glClearDepthf__wrapper,_emscripten_glLineWidth__wrapper];
var FUNCTION_TABLE_vid = [b3,_emscripten_glUniform1f__wrapper,_emscripten_glVertexAttrib1f__wrapper,b3];
var FUNCTION_TABLE_viiiii = [b4,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,_KeyCallback,_emscripten_glUniform4i__wrapper,_emscripten_glFramebufferTexture2D__wrapper,_emscripten_glShaderBinary__wrapper,_emscripten_glDrawElementsInstanced__wrapper,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vi = [b5,__ZN10GameScreen4initEv,__ZN10GameScreen6unloadEv,__ZN10GameScreen6updateEv,__ZN10GameScreen4drawEv,__ZN10MainScreen4initEv,__ZN10MainScreen6unloadEv,__ZN10MainScreen6updateEv,__ZN10MainScreen4drawEv,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev
,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__211__stdoutbufIwED0Ev,__ZNSt3__211__stdoutbufIcED0Ev,__ZNSt3__210__stdinbufIwED0Ev,__ZNSt3__210__stdinbufIcED0Ev,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev
,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILj32EED0Ev,__ZNSt3__217__widen_from_utf8ILj32EED0Ev
,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__213__vector_baseI5ColorNS_9allocatorIS1_EEED2Ev,__ZN4GameD2Ev,__Z15UpdateDrawFramePv,_emscripten_glDeleteShader__wrapper,_emscripten_glCompileShader__wrapper,_emscripten_glDeleteProgram__wrapper,_emscripten_glLinkProgram__wrapper,_emscripten_glUseProgram__wrapper,_emscripten_glValidateProgram__wrapper,_emscripten_glDeleteObjectARB__wrapper,_emscripten_glEnableClientState__wrapper,_emscripten_glClientActiveTexture__wrapper,_emscripten_glBindVertexArray__wrapper,_emscripten_glMatrixMode__wrapper,_emscripten_glLoadMatrixf__wrapper,_emscripten_glEnableVertexAttribArray__wrapper,_emscripten_glDisableVertexAttribArray__wrapper,_emscripten_glDepthFunc__wrapper,_emscripten_glEnable__wrapper,_emscripten_glDisable__wrapper,_emscripten_glFrontFace__wrapper,_emscripten_glCullFace__wrapper,_emscripten_glClear__wrapper,_emscripten_glClearStencil__wrapper,_emscripten_glDepthMask__wrapper,_emscripten_glStencilMask__wrapper,_emscripten_glGenerateMipmap__wrapper,_emscripten_glActiveTexture__wrapper,_emscripten_glBlendEquation__wrapper,_cleanup_387,_cleanup_382,__ZNSt3__28ios_base4InitD2Ev,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,___cxx_global_array_dtor
,___cxx_global_array_dtor_61,___cxx_global_array_dtor_109,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,___cxx_global_array_dtor_46,___cxx_global_array_dtor_85,___cxx_global_array_dtor_112,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,__ZNSt3__212__do_nothingEPv,_free,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_vii = [b6,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,_stbi__stdio_skip,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv
,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__28messagesIcE8do_closeEi,__ZNKSt3__28messagesIwE8do_closeEi,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,_ErrorCallback,_CursorEnterCallback,_CharCallback,_WindowIconifyCallback,_WindowFocusCallback,_emscripten_glPixelStorei__wrapper,_emscripten_glGetIntegerv__wrapper,_emscripten_glGetFloatv__wrapper,_emscripten_glGetBooleanv__wrapper,_emscripten_glGenTextures__wrapper,_emscripten_glDeleteTextures__wrapper,_emscripten_glBindTexture__wrapper,_emscripten_glGenBuffers__wrapper,_emscripten_glDeleteBuffers__wrapper,_emscripten_glGenRenderbuffers__wrapper,_emscripten_glDeleteRenderbuffers__wrapper,_emscripten_glBindRenderbuffer__wrapper,_emscripten_glUniform1i__wrapper,_emscripten_glBindBuffer__wrapper,_emscripten_glVertexAttrib1fv__wrapper,_emscripten_glVertexAttrib2fv__wrapper,_emscripten_glVertexAttrib3fv__wrapper,_emscripten_glVertexAttrib4fv__wrapper,_emscripten_glAttachShader__wrapper,_emscripten_glDetachShader__wrapper,_emscripten_glBindFramebuffer__wrapper,_emscripten_glGenFramebuffers__wrapper,_emscripten_glDeleteFramebuffers__wrapper,_emscripten_glBindProgramARB__wrapper,_emscripten_glGetPointerv__wrapper,_emscripten_glGenVertexArrays__wrapper,_emscripten_glDeleteVertexArrays__wrapper,_emscripten_glVertexAttribDivisor__wrapper,_emscripten_glBlendFunc__wrapper,_emscripten_glBlendEquationSeparate__wrapper,_emscripten_glStencilMaskSeparate__wrapper,_emscripten_glHint__wrapper,_emscripten_glDrawBuffers__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiii = [b7,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_ii = [b8,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,_stbi__stdio_eof,___stdio_close,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__211__stdoutbufIwE4syncEv,__ZNSt3__211__stdoutbufIcE4syncEv,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv
,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv
,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt9bad_alloc4whatEv,__ZNKSt8bad_cast4whatEv,_emscripten_glGetString__wrapper,_emscripten_glIsTexture__wrapper,_emscripten_glIsBuffer__wrapper,_emscripten_glIsRenderbuffer__wrapper,_emscripten_glCreateShader__wrapper,_emscripten_glIsShader__wrapper,_emscripten_glIsProgram__wrapper,_emscripten_glIsFramebuffer__wrapper,_emscripten_glCheckFramebufferStatus__wrapper,_emscripten_glIsEnabled__wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viddd = [b9,_emscripten_glUniform3f__wrapper,_emscripten_glVertexAttrib3f__wrapper,b9];
var FUNCTION_TABLE_iiiiii = [b10,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,_stbi__resample_row_hv_2,_resample_row_1,_stbi__resample_row_v_2,_stbi__resample_row_h_2,_stbi__resample_row_generic,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_vidd = [b11,_MouseCursorPosCallback,_ScrollCallback,_emscripten_glUniform2f__wrapper,_emscripten_glVertexAttrib2f__wrapper,b11,b11,b11];
var FUNCTION_TABLE_iiii = [b12,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,_stbi__stdio_read,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,_sn_write,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__211__stdoutbufIwE6xsputnEPKwi,__ZNSt3__211__stdoutbufIcE6xsputnEPKci,__ZNKSt3__27collateIcE7do_hashEPKcS3_,__ZNKSt3__27collateIwE7do_hashEPKwS3_,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__25ctypeIcE9do_narrowEcc,__ZNKSt3__25ctypeIwE5do_isEtw,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__25ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_EmscriptenFullscreenChangeCallback
,_EmscriptenInputCallback,_do_read,b12];
var FUNCTION_TABLE_viiiiiiii = [b13,_emscripten_glCompressedTexImage2D__wrapper,_emscripten_glCopyTexImage2D__wrapper,_emscripten_glCopyTexSubImage2D__wrapper];
var FUNCTION_TABLE_viiiiii = [b14,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,_stbi__YCbCr_to_RGB_row,_emscripten_glDrawRangeElements__wrapper,_emscripten_glVertexAttribPointer__wrapper,b14,b14,b14,b14];
var FUNCTION_TABLE_viii = [b15,_WindowSizeCallback,_stbi__idct_block,_emscripten_glGetTexParameterfv__wrapper,_emscripten_glGetTexParameteriv__wrapper,_emscripten_glTexParameterfv__wrapper,_emscripten_glTexParameteriv__wrapper,_emscripten_glGetBufferParameteriv__wrapper,_emscripten_glGetRenderbufferParameteriv__wrapper,_emscripten_glGetUniformfv__wrapper,_emscripten_glGetUniformiv__wrapper,_emscripten_glGetVertexAttribfv__wrapper,_emscripten_glGetVertexAttribiv__wrapper,_emscripten_glGetVertexAttribPointerv__wrapper,_emscripten_glUniform2i__wrapper,_emscripten_glUniform1iv__wrapper,_emscripten_glUniform2iv__wrapper,_emscripten_glUniform3iv__wrapper,_emscripten_glUniform4iv__wrapper,_emscripten_glUniform1fv__wrapper,_emscripten_glUniform2fv__wrapper,_emscripten_glUniform3fv__wrapper,_emscripten_glUniform4fv__wrapper,_emscripten_glGetShaderiv__wrapper,_emscripten_glGetProgramiv__wrapper,_emscripten_glBindAttribLocation__wrapper,_emscripten_glGetObjectParameterivARB__wrapper,_emscripten_glNormalPointer__wrapper,_emscripten_glDrawArrays__wrapper,_emscripten_glTexParameteri__wrapper,_emscripten_glStencilFunc__wrapper,_emscripten_glStencilOp__wrapper];
var FUNCTION_TABLE_viid = [b16,_emscripten_glTexParameterf__wrapper];
var FUNCTION_TABLE_vidddd = [b17,_emscripten_glUniform4f__wrapper,_emscripten_glVertexAttrib4f__wrapper,b17];
var FUNCTION_TABLE_iiiiiiiii = [b18,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_viiiiiii = [b19,_emscripten_glReadPixels__wrapper,_emscripten_glGetActiveUniform__wrapper,_emscripten_glGetActiveAttrib__wrapper];
var FUNCTION_TABLE_viiiiiiiii = [b20,_emscripten_glCompressedTexSubImage2D__wrapper,_emscripten_glTexImage2D__wrapper,_emscripten_glTexSubImage2D__wrapper];
var FUNCTION_TABLE_iii = [b21,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__211__stdoutbufIwE8overflowEj,__ZNSt3__211__stdoutbufIcE8overflowEi,__ZNSt3__210__stdinbufIwE9pbackfailEj,__ZNSt3__210__stdinbufIcE9pbackfailEi,__ZNKSt3__25ctypeIcE10do_toupperEc,__ZNKSt3__25ctypeIcE10do_tolowerEc,__ZNKSt3__25ctypeIcE8do_widenEc,__ZNKSt3__25ctypeIwE10do_toupperEw,__ZNKSt3__25ctypeIwE10do_tolowerEw,__ZNKSt3__25ctypeIwE8do_widenEc,_emscripten_glGetUniformLocation__wrapper,_emscripten_glGetAttribLocation__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21];
var FUNCTION_TABLE_i = [b22,_emscripten_glCreateProgram__wrapper,_emscripten_glGetError__wrapper,b22];
var FUNCTION_TABLE_iiiii = [b23,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,b23,b23];
var FUNCTION_TABLE_vdddddd = [b24,_emscripten_glFrustum__wrapper];
var FUNCTION_TABLE_vdddd = [b25,_emscripten_glRotatef__wrapper,_emscripten_glClearColor__wrapper,_emscripten_glBlendColor__wrapper];
var FUNCTION_TABLE_vdd = [b26,_emscripten_glDepthRange__wrapper,_emscripten_glDepthRangef__wrapper,_emscripten_glPolygonOffset__wrapper];
var FUNCTION_TABLE_v = [b27,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,_emscripten_glLoadIdentity__wrapper,_emscripten_glReleaseShaderCompiler__wrapper,_emscripten_glFinish__wrapper,_emscripten_glFlush__wrapper,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_vdi = [b28,_emscripten_glSampleCoverage__wrapper];
var FUNCTION_TABLE_iiiiid = [b29,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b29,b29,b29];
var FUNCTION_TABLE_viiii = [b30,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__27collateIcE12do_transformEPKcS3_,__ZNKSt3__27collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,_MouseButtonCallback,_emscripten_glBufferData__wrapper,_emscripten_glBufferSubData__wrapper,_emscripten_glUniform3i__wrapper,_emscripten_glUniformMatrix2fv__wrapper,_emscripten_glUniformMatrix3fv__wrapper,_emscripten_glUniformMatrix4fv__wrapper,_emscripten_glGetAttachedShaders__wrapper,_emscripten_glShaderSource__wrapper,_emscripten_glGetShaderSource__wrapper,_emscripten_glGetShaderInfoLog__wrapper,_emscripten_glGetShaderPrecisionFormat__wrapper,_emscripten_glGetProgramInfoLog__wrapper,_emscripten_glFramebufferRenderbuffer__wrapper,_emscripten_glGetFramebufferAttachmentParameteriv__wrapper,_emscripten_glGetInfoLogARB__wrapper,_emscripten_glVertexPointer__wrapper,_emscripten_glTexCoordPointer__wrapper,_emscripten_glColorPointer__wrapper,_emscripten_glDrawElements__wrapper,_emscripten_glDrawArraysInstanced__wrapper,_emscripten_glViewport__wrapper,_emscripten_glScissor__wrapper,_emscripten_glColorMask__wrapper,_emscripten_glRenderbufferStorage__wrapper,_emscripten_glBlendFuncSeparate__wrapper,_emscripten_glStencilFuncSeparate__wrapper,_emscripten_glStencilOpSeparate__wrapper,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30];

  return { _main: _main, _memset: _memset, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _llvm_cttz_i32: _llvm_cttz_i32, _sbrk: _sbrk, _memcpy: _memcpy, ___muldi3: ___muldi3, ___uremdi3: ___uremdi3, _i64Subtract: _i64Subtract, ___udivmoddi4: ___udivmoddi4, _i64Add: _i64Add, _pthread_self: _pthread_self, _pthread_mutex_unlock: _pthread_mutex_unlock, _emscripten_GetProcAddress: _emscripten_GetProcAddress, _pthread_cond_broadcast: _pthread_cond_broadcast, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _round: _round, _memmove: _memmove, _strstr: _strstr, _malloc: _malloc, _pthread_mutex_lock: _pthread_mutex_lock, __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_tetris_cpp: __GLOBAL__sub_I_tetris_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vd: dynCall_vd, dynCall_vid: dynCall_vid, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viddd: dynCall_viddd, dynCall_iiiiii: dynCall_iiiiii, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viii: dynCall_viii, dynCall_viid: dynCall_viid, dynCall_vidddd: dynCall_vidddd, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_iii: dynCall_iii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_vdddddd: dynCall_vdddddd, dynCall_vdddd: dynCall_vdddd, dynCall_vdd: dynCall_vdd, dynCall_v: dynCall_v, dynCall_vdi: dynCall_vdi, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real___GLOBAL__sub_I_tetris_cpp = asm["__GLOBAL__sub_I_tetris_cpp"]; asm["__GLOBAL__sub_I_tetris_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_tetris_cpp.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_unlock.apply(null, arguments);
};

var real___GLOBAL__I_000101 = asm["__GLOBAL__I_000101"]; asm["__GLOBAL__I_000101"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_000101.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real__emscripten_GetProcAddress = asm["_emscripten_GetProcAddress"]; asm["_emscripten_GetProcAddress"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_GetProcAddress.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__round = asm["_round"]; asm["_round"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__round.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__strstr = asm["_strstr"]; asm["_strstr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strstr.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_lock.apply(null, arguments);
};
var _main = Module["_main"] = asm["_main"];
var _memset = Module["_memset"] = asm["_memset"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var __GLOBAL__sub_I_tetris_cpp = Module["__GLOBAL__sub_I_tetris_cpp"] = asm["__GLOBAL__sub_I_tetris_cpp"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = asm["_emscripten_GetProcAddress"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _round = Module["_round"] = asm["_round"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vdddddd = Module["dynCall_vdddddd"] = asm["dynCall_vdddddd"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vdi = Module["dynCall_vdi"] = asm["dynCall_vdi"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



